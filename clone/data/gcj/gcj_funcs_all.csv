id,code
30000000,"public static void main(String[] args) throws Exception {
  BufferedWriter bw=new BufferedWriter(new FileWriter(""B-large.out""));
  BufferedReader br=new BufferedReader(new FileReader(""B-large.in""));
  br.readLine();
  String line;
  int testCase=1;
  while ((line=br.readLine()) != null) {
    if (line.length() == 0) {
      break;
    }
    bw.write(""Case #"" + testCase++ + "": "");
    String[] parts=line.split("" "");
    long b=Long.parseLong(parts[0]);
    long m=Long.parseLong(parts[1]);
    if (b == 2) {
      if (m != 1) {
        bw.write(""IMPOSSIBLE\n"");
      }
 else {
        bw.write(""POSSIBLE\n01\n00\n"");
      }
    }
 else {
      long max=(1L << (b - 2));
      if (m > max) {
        bw.write(""IMPOSSIBLE\n"");
      }
 else {
        bw.write(""POSSIBLE\n0"");
        bw.write(String.format(""%"" + (b - 2) + ""s"",Long.toBinaryString(m - 1)).replace(' ','0'));
        bw.write(""1\n"");
        for (int j=1; j < b; j++) {
          for (int k=0; k < b; k++) {
            bw.write(k <= j ? ""0"" : ""1"");
          }
          bw.write(""\n"");
        }
      }
    }
  }
  br.close();
  bw.close();
}
"
30000001,"public static void main(String[] args) throws Exception {
  Scanner r=null;
  FileWriter w=null;
  r=new Scanner(new FileReader(i0));
  w=new FileWriter(new File(o0));
  int t=r.nextInt();
  for (int i=0; i < t; i++) {
    w.write(""Case #"" + (i + 1) + "": "");
    int b=r.nextInt();
    long m=r.nextLong();
    if (m > (long)Math.pow(2,b - 2)) {
      w.write(""IMPOSSIBLE\n"");
      continue;
    }
 else {
      w.write(""POSSIBLE\n"");
      String s=Long.toBinaryString(m - 1);
      int len=s.length();
      w.write(""0"");
      if (s.length() < b - 2) {
        for (int j=0; j < b - 2 - len; j++) {
          s=""0"" + s;
        }
      }
      if (b != 2) {
        w.write(s);
      }
      w.write(""1\n"");
      for (int j=1; j < b; j++) {
        for (int k=0; k <= j; k++) {
          w.write(""0"");
        }
        for (int k=j + 1; k < b; k++) {
          w.write(""1"");
        }
        w.write(""\n"");
      }
    }
  }
  w.close();
}
"
30000002,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(fileName + "".in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(fileName + "".out"")));
  int Num=Integer.parseInt(f.readLine());
  for (int ind=0; ind < Num; ind++) {
    String[] inar=f.readLine().split("" "");
    long B=Long.parseLong(inar[0]);
    long M=Long.parseLong(inar[1]);
    if (M > Math.pow(2,B - 2))     out.println(""Case #"" + (ind + 1) + "": IMPOSSIBLE"");
 else {
      long T=(long)Math.pow(2,B - 2) - M;
      int[] connected=new int[(int)B];
      for (int x=0; x < B; x++)       connected[x]=1;
      String bin=Long.toBinaryString(T);
      int i=1;
      for (int x=bin.length() - 1; x >= 0; x--) {
        if (bin.substring(x,x + 1).compareTo(""1"") == 0)         connected[i]=0;
        i++;
      }
      out.println(""Case #"" + (ind + 1) + "": POSSIBLE"");
      for (int x=0; x < B - 1; x++) {
        for (int y=0; y <= x; y++)         out.print(""0"");
        for (int y=x + 1; y < B - 1; y++)         out.print(""1"");
        out.print(connected[x]);
        out.print(""\n"");
      }
      for (int x=0; x < B; x++)       out.print(""0"");
      out.print(""\n"");
    }
  }
  out.close();
}
"
30000003,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scan=new Scanner(new FileInputStream(new File(""B.in"")));
  PrintWriter out=new PrintWriter(new FileOutputStream(new File(""B.out"")));
  int T=scan.nextInt();
  for (int t=1; t <= T; t++) {
    int B=scan.nextInt();
    long M=scan.nextLong();
    boolean[][] adj=new boolean[B][B];
    long[] cnts=new long[B];
    cnts[B - 1]=1;
    for (int i=B - 2; i > 0; i--) {
      cnts[i]=0;
      for (int j=B - 1; j > i; j--) {
        adj[i][j]=true;
        cnts[i]+=cnts[j];
      }
    }
    int ptr=1;
    while (ptr < B && M > 0) {
      if (M >= cnts[ptr]) {
        adj[0][ptr]=true;
        M-=cnts[ptr];
      }
      ptr++;
    }
    boolean possible=M == 0;
    out.printf(""Case #%d: %s\n"",t,possible ? ""POSSIBLE"" : ""IMPOSSIBLE"");
    if (possible) {
      for (int i=0; i < B; i++) {
        for (int j=0; j < B; j++) {
          if (adj[i][j])           out.print(""1"");
 else           out.print(""0"");
        }
        out.println();
      }
    }
  }
  out.close();
}
"
30000004,"public static void main(String[] args) throws Exception {
  BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(bf.readLine());
  final StringBuilder[] results=new StringBuilder[T];
  for (int testcase=1; testcase <= T; testcase++) {
    StringTokenizer st=new StringTokenizer(bf.readLine());
    int B=Integer.parseInt(st.nextToken());
    long M=Long.parseLong(st.nextToken());
    StringBuilder output=new StringBuilder();
    long numBits=B - 2;
    long maxValue=1L << numBits;
    if (M <= maxValue) {
      output.append(""POSSIBLE"");
      int[][] adjMatrix=new int[B][B];
      for (int i=1; i < B - 1; i++) {
        adjMatrix[i][B - 1]=1;
        for (int j=1; j < i; j++) {
          adjMatrix[i][j]=1;
        }
      }
      if (M == maxValue) {
        for (int i=1; i < B; i++) {
          adjMatrix[0][i]=1;
        }
      }
 else {
        for (int i=0; i < numBits; i++) {
          if ((M & (1L << i)) > 0) {
            adjMatrix[0][i + 1]=1;
          }
        }
      }
      for (int i=0; i < B; i++) {
        output.append(""\n"");
        for (int j=0; j < B; j++) {
          output.append(adjMatrix[i][j]);
        }
      }
    }
 else {
      output.append(""IMPOSSIBLE"");
    }
    results[testcase - 1]=output;
  }
  for (int testcase=1; testcase <= T; testcase++) {
    System.out.println(""Case #"" + testcase + "": ""+ results[testcase - 1].toString());
  }
}
"
30000005,"public static void main(String[] args) throws FileNotFoundException {
  try (Scanner scanner=new Scanner(new File(""round1C_B.in""));PrintWriter writer=new PrintWriter(new File(""round1C_B.out""))){
    int caseCount=scanner.nextInt();
    for (int caseNo=1; caseNo <= caseCount; ++caseNo) {
      long b=scanner.nextInt();
      long m=scanner.nextLong();
      if ((1L << (b - 2)) < m) {
        writer.println(String.format(""Case #%d: IMPOSSIBLE"",caseNo));
        continue;
      }
      writer.println(String.format(""Case #%d: POSSIBLE"",caseNo));
      boolean x[]=new boolean[(int)b];
      Arrays.fill(x,false);
      for (int i=2; i < b; ++i) {
        if (((1L << (i - 2)) & (m - 1)) > 0) {
          x[i]=true;
        }
      }
      writer.print(0);
      for (int j=2; j <= b; j++)       writer.print(1);
      writer.println();
      for (int i=2; i < b; ++i) {
        for (int j=1; j <= i; ++j)         writer.print(0);
        for (int j=i + 1; j < b; ++j)         writer.print(1);
        writer.println(x[i] ? 1 : 0);
      }
      for (int j=1; j <= b; j++)       writer.print(0);
      writer.println();
    }
  }
 }
"
30000006,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; ++t) {
    int n=in.nextInt();
    long m=in.nextLong();
    boolean[][] b=new boolean[n][n];
    long[] sum=new long[n];
    sum[0]=1;
    b[0][n - 1]=true;
    --m;
    int cur=1;
    while (m > 0 && cur < n - 1) {
      b[cur][n - 1]=true;
      b[0][cur]=true;
      --m;
      sum[cur]++;
      for (int prev=cur - 1; prev > 0; --prev) {
        if (m >= sum[prev]) {
          b[prev][cur]=true;
          m-=sum[prev];
          sum[cur]+=sum[prev];
        }
      }
      ++cur;
    }
    if (m > 0) {
      System.out.println(""Case #"" + t + "": IMPOSSIBLE"");
    }
 else {
      System.out.println(""Case #"" + t + "": POSSIBLE"");
      for (int i=0; i < n; ++i) {
        for (int j=0; j < n; ++j) {
          System.out.print(b[i][j] ? 1 : 0);
        }
        System.out.println();
      }
    }
  }
}
"
30000007,"public static void main(String[] args) throws Exception {
  Scanner scanner=new Scanner(new FileInputStream(""C:\\Users\\Stefan\\Downloads\\B-small-attempt1.in""));
  PrintStream output=new PrintStream(""C:\\Users\\Stefan\\Downloads\\B-small-attempt1.out"");
  int T=scanner.nextInt();
  for (int t=1; t <= T; ++t) {
    int B=scanner.nextInt();
    int M=scanner.nextInt();
    output.print(""Case #"" + t + "":"");
    long maxWays=0x01 << (B - 2);
    if (M > maxWays) {
      output.println("" IMPOSSIBLE"");
      continue;
    }
    output.println("" POSSIBLE"");
    if (B == 2)     output.println(""01"");
 else {
      long maxNodeWays=0x01 << (B - 3);
      output.print(""0"");
      for (int slide=1; slide < B - 1; ++slide) {
        if (M >= maxNodeWays) {
          output.print(""1"");
          M-=maxNodeWays;
        }
 else         output.print(""0"");
        maxNodeWays/=2;
      }
      if (M > 0)       output.println(""1"");
 else       output.println(""0"");
    }
    for (int b=1; b < B - 1; ++b) {
      for (int slide=0; slide < B; ++slide)       if (slide <= b)       output.print(""0"");
 else       output.print(""1"");
      output.println();
    }
    for (int slide=0; slide < B; ++slide)     output.print(""0"");
    output.println();
  }
  output.close();
  System.out.println(""finished"");
}
"
30000008,"public static void main(String[] args) throws FileNotFoundException {
  System.setOut(new PrintStream(""B.out""));
  Scanner s=new Scanner(System.in);
  int tests=s.nextInt();
  for (int test=1; test <= tests; test++) {
    String answer="""";
    int b=s.nextInt();
    BigInteger m=s.nextBigInteger();
    long max=(1l << (b - 2));
    if (m.compareTo(BigInteger.valueOf(max)) > 0) {
      answer=""IMPOSSIBLE"";
    }
 else {
      m=m.subtract(BigInteger.ONE);
      answer=""POSSIBLE\n"";
      for (int i=0; i < b; i++) {
        for (int j=0; j < b; j++) {
          if (i > 0 && i < j && j == b - 1) {
            if ((m.longValue() & (1l << (i - 1))) > 0) {
              answer+=""1"";
            }
 else {
              answer+=""0"";
            }
          }
 else {
            if (i < j) {
              answer=answer + ""1"";
            }
 else {
              answer=answer + ""0"";
            }
          }
        }
        if (i < b - 1) {
          answer+=""\n"";
        }
      }
    }
    System.err.println(""Case #"" + test + "": ""+ b+ "" ""+ (m.add(BigInteger.ONE)));
    System.err.println(""Case #"" + test + "": ""+ answer);
    System.out.println(""Case #"" + test + "": ""+ answer);
  }
}
"
30000009,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; i++) {
    System.out.print(""Case #"" + i + "": "");
    int b=in.nextInt();
    long m=in.nextLong();
    if (Math.pow(2,b - 2) < m) {
      System.out.println(""IMPOSSIBLE"");
    }
 else {
      System.out.println(""POSSIBLE"");
      for (int j=1; j <= b; j++) {
        if (j == 1) {
          String first=""0"";
          for (int a=0; a < b; a++) {
            if (((long)Math.pow(2,b - 2) == m)) {
              if (a > 0)               first+='1';
            }
 else             if (a == 0) {
              first+=Long.toBinaryString(m);
              first=first + ""0"";
              while (first.length() < b) {
                first=""0"" + first;
              }
            }
          }
          System.out.println(first);
        }
 else {
          for (int k=1; k <= b; k++) {
            if (k > j) {
              System.out.print(""1"");
            }
 else {
              System.out.print(""0"");
            }
          }
          System.out.println();
        }
      }
    }
  }
}
"
30000010,"public static void main(String[] args) throws FileNotFoundException, IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(""C:/Users/Madi/codejam/B-small-practice.in""));BufferedWriter bw=new BufferedWriter(new FileWriter(""C:/Users/Madi/codejam/B-small-practice.out""))){
    int t=Integer.parseInt(br.readLine());
    for (int i=0; i < t; i++) {
      String[] s=br.readLine().split("" "");
      int b=Integer.parseInt(s[0]);
      long m=Long.parseLong(s[1]);
      int cs=i + 1;
      if (m > Math.pow(2,b - 2)) {
        bw.write(""Case #"" + cs + "": IMPOSSIBLE"");
        bw.write(""\n"");
        bw.flush();
      }
 else {
        int pow=0;
        long res=1;
        while (pow < b - 2) {
          res*=2;
          pow++;
        }
        res-=m;
        ArrayList<Integer> list=new ArrayList<>();
        while (res > 0) {
          pow=0;
          long k=1;
          while (pow <= 50) {
            if (k == res) {
              list.add(pow + 1);
              res=0;
              break;
            }
 else             if (k > res) {
              list.add(pow);
              res-=k / 2;
              break;
            }
            k*=2;
            pow++;
          }
        }
        bw.write(""Case #"" + cs + "": POSSIBLE\n"");
        for (int i1=0; i1 < b; i1++) {
          for (int j=0; j < b; j++) {
            if (i1 >= j || (j == b - 1 && list.contains(i1))) {
              bw.write(""0"");
            }
 else {
              bw.write(""1"");
            }
          }
          bw.write(""\n"");
        }
        bw.flush();
      }
    }
  }
 }
"
30000011,"public static void main(String[] args) throws IOException {
  Scanner s=new Scanner(new File(""b.in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""b.out""));
  int T=s.nextInt();
  for (int t=1; t <= T; t++) {
    out.write(""Case #"" + t + "": "");
    int B=s.nextInt();
    int M=s.nextInt();
    int magicNumber=(B * B - B) / 2;
    matrix=new boolean[B][B];
    int magicLimit=1 << magicNumber;
    boolean foundAnswer=false;
    for (int magic=0; magic < magicLimit && !foundAnswer; magic++) {
      int it=0;
      for (int j=0; j < B; j++) {
        for (int k=j + 1; k < B; k++) {
          matrix[j][k]=(magic >> it++) % 2 == 1;
        }
      }
      cant=new int[B];
      cant[B - 1]=1;
      for (int i=B - 2; i >= 0; i--) {
        for (int j=0; j < B; j++) {
          if (matrix[i][j])           cant[i]+=cant[j];
        }
      }
      if (cant[0] == M) {
        foundAnswer=true;
        out.write(""POSSIBLE\n"");
        for (int i=0; i < B; i++) {
          for (int j=0; j < B; j++) {
            if (matrix[i][j]) {
              out.write(""1"");
            }
 else {
              out.write(""0"");
            }
          }
          out.write(""\n"");
        }
      }
    }
    if (!foundAnswer) {
      out.write(""IMPOSSIBLE\n"");
    }
  }
  out.close();
}
"
30000012,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int b=in.nextInt();
    long m=in.nextLong();
    long p=pow(2,b - 2);
    if (p < m) {
      System.out.println(""Case #"" + i + "": IMPOSSIBLE"");
    }
 else {
      System.out.println(""Case #"" + i + "": POSSIBLE"");
      if (p == m) {
        for (int j1=0; j1 < b; ++j1) {
          String s="""";
          for (int j2=0; j2 < b; ++j2) {
            if (j2 <= j1)             s+=""0"";
 else             s+=""1"";
          }
          System.out.println(s);
        }
      }
 else {
        for (int j1=0; j1 < b; ++j1) {
          String s="""";
          for (int j2=0; j2 < b - 1; ++j2) {
            if (j2 <= j1)             s+=""0"";
 else             s+=""1"";
          }
          if (j1 == 0)           s+=""0"";
 else {
            if (m % 2 == 1)             s+=""1"";
 else             s+=""0"";
            m/=2;
          }
          System.out.println(s);
        }
      }
    }
  }
  in.close();
}
"
30000013,"/** 
 * @param args
 */
public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    int b=input.nextInt();
    int m=input.nextInt();
    int[][] test=new int[b][b];
    int[] road=new int[b];
    for (int i=0; i < b; i++)     road[i]=1;
    int ans=0, tmp=0, t=0, br=0;
    for (int i=b - 2; i >= 0; i--) {
      tmp=ans;
      t=0;
      br=i;
      for (int j=b - 1; j > i; j--) {
        ans+=road[j];
        t+=road[j];
        test[i][j]=1;
        if (t >= m)         break;
      }
      road[i]=ans - tmp;
      if (t >= m)       break;
    }
    if (t >= m) {
      System.out.printf(""Case #%d: POSSIBLE\n"",n + 1);
      if (t > m) {
        int tt=0;
        for (int i=br + 1; i < b; i++) {
          tt+=road[i];
          if (tt > m) {
            test[br][i]=0;
            tt-=road[i];
          }
        }
      }
      int pos=0;
      for (int i=b - 1; i >= 0; i--) {
        int tm=0;
        for (int j=0; j < b; j++)         tm+=test[i][j];
        if (tm > 0)         pos=i;
      }
      for (int i=0; i < pos; i++) {
        test[i][i + 1]=1;
      }
      for (int i=0; i < b; i++) {
        for (int j=0; j < b; j++)         System.out.printf(""%d"",test[i][j]);
        System.out.println();
      }
    }
 else     System.out.printf(""Case #%d: IMPOSSIBLE\n"",n + 1);
  }
}
"
30000014,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(new File(""E:/Downloads/B-large.in""));
  FileWriter writer=new FileWriter(""E:/Downloads/data.out"",false);
  int cases=scanner.nextInt();
  for (int i=0; i < cases; i++) {
    int br=scanner.nextInt();
    long cr=scanner.nextLong();
    writer.write(""Case #"" + (i + 1) + "": "");
    long rc=br - 2;
    long maximu=1;
    while (rc > 0) {
      maximu*=2;
      rc--;
    }
    if (maximu >= cr) {
      writer.write(""POSSIBLE"");
      long needMinus=maximu - cr;
      long[][] arr=new long[br][br];
      for (int j=0; j < br; j++) {
        Arrays.fill(arr[j],0);
      }
      if (cr == 0) {
      }
 else {
        for (int j=0; j < br; j++) {
          for (int k=0; k < br; k++) {
            if (k > j) {
              arr[j][k]=1;
            }
          }
        }
        if (maximu == cr) {
        }
 else {
          long[] arraywith=new long[br - 2];
          Arrays.fill(arraywith,0);
          long cn=1;
          for (int j=br - 3; j >= 0; j--) {
            cn*=2;
            arraywith[j]=cn / 2;
          }
          for (int l=0; l < br - 2; l++) {
            if (needMinus >= arraywith[l]) {
              needMinus-=arraywith[l];
              arr[0][l + 1]=0;
            }
          }
        }
      }
      writer.append('\r');
      writer.append('\n');
      for (int j=0; j < br; j++) {
        for (int k=0; k < br; k++) {
          System.out.print(arr[j][k] + """");
          writer.write(arr[j][k] + """");
        }
        System.out.println("""");
        writer.append('\r');
        writer.append('\n');
      }
    }
 else {
      writer.write(""IMPOSSIBLE"");
      writer.append('\r');
      writer.append('\n');
    }
  }
  scanner.close();
  writer.close();
}
"
30000015,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int loops=in.nextInt();
  for (int loop=1; loop <= loops; ++loop) {
    int b=in.nextInt();
    long m=in.nextLong();
    long max=1;
    for (int i=2; i < b; i++) {
      max*=2;
    }
    if (m > max) {
      String line=String.format(""Case #%1$s: IMPOSSIBLE"",loop);
      System.out.println(line);
      continue;
    }
    String line=String.format(""Case #%1$s: POSSIBLE"",loop);
    System.out.println(line);
    long pow=max / 2;
    boolean[] linked=new boolean[b];
    int index=b - 2;
    while (m > 1) {
      if (m >= pow) {
        linked[index]=true;
        m-=pow;
      }
      pow/=2;
      index--;
    }
    if (m == 1) {
      linked[0]=true;
      m-=1;
    }
    StringBuilder builder;
    for (int i=0; i < b - 1; i++) {
      builder=new StringBuilder();
      for (int j=0; j < i + 1; j++)       builder.append(0);
      for (int j=0; j < b - i - 2; j++)       builder.append(1);
      builder.append(linked[i] ? 1 : 0);
      System.out.println(builder);
    }
    builder=new StringBuilder();
    for (int j=0; j < b; j++)     builder.append(0);
    System.out.println(builder);
  }
  in.close();
}
"
30000016,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(new File(""D:/ForPrograms/java/TESTS/B-large.in""));
  FileWriter writer=new FileWriter(""D:/ForPrograms/java/TESTS/B-large.out"",false);
  int cases=scanner.nextInt();
  for (int i=0; i < cases; i++) {
    int b=scanner.nextInt();
    long c=scanner.nextLong();
    writer.write(""Case #"" + (i + 1) + "": "");
    long rc=b - 2;
    long maxCount=1;
    while (rc > 0) {
      maxCount*=2;
      rc--;
    }
    if (maxCount >= c) {
      writer.write(""POSSIBLE"");
      long needMinus=maxCount - c;
      long[][] arr=new long[b][b];
      for (int j=0; j < b; j++) {
        Arrays.fill(arr[j],0);
      }
      if (c == 0) {
      }
 else {
        for (int j=0; j < b; j++) {
          for (int k=0; k < b; k++) {
            if (k > j) {
              arr[j][k]=1;
            }
          }
        }
        if (maxCount == c) {
        }
 else {
          long[] arrm=new long[b - 2];
          Arrays.fill(arrm,0);
          long cn=1;
          for (int j=b - 3; j >= 0; j--) {
            cn*=2;
            arrm[j]=cn / 2;
          }
          for (int l=0; l < b - 2; l++) {
            if (needMinus >= arrm[l]) {
              needMinus-=arrm[l];
              arr[0][l + 1]=0;
            }
          }
        }
      }
      writer.append('\r');
      writer.append('\n');
      for (int j=0; j < b; j++) {
        for (int k=0; k < b; k++) {
          System.out.print(arr[j][k] + """");
          writer.write(arr[j][k] + """");
        }
        System.out.println("""");
        writer.append('\r');
        writer.append('\n');
      }
    }
 else {
      writer.write(""IMPOSSIBLE"");
      writer.append('\r');
      writer.append('\n');
    }
  }
  scanner.close();
  writer.close();
}
"
30000017,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  in.nextLine();
  for (int i=1; i <= t; ++i) {
    String[] nums=in.nextLine().split("" "");
    int B=Integer.parseInt(nums[0]);
    BigInteger M=new BigInteger(nums[1]);
    BigInteger[] result=new BigInteger[B + 1];
    result[0]=BigInteger.ZERO;
    result[1]=BigInteger.ONE;
    BigInteger runningSum=BigInteger.ONE;
    for (int i4=2; i4 <= B; i4++) {
      result[i4]=runningSum;
      runningSum=runningSum.add(result[i4]);
    }
    BigInteger[] numWays=result;
    if (numWays[B].compareTo(M) < 0) {
      System.out.println(""Case #"" + i + "": IMPOSSIBLE"");
    }
 else {
      System.out.println(""Case #"" + i + "": POSSIBLE"");
      int[][] matrix=new int[B][B];
      for (int i3=0; i3 < B; i3++) {
        for (int j=i3 + 1; j < B; j++) {
          matrix[i3][j]=1;
        }
      }
      BigInteger difference=numWays[B].subtract(M);
      while (difference.compareTo(BigInteger.ZERO) != 0) {
        for (int i2=B - 1; i2 >= 1; i2--) {
          if (difference.compareTo(numWays[i2]) >= 0) {
            matrix[i2 - 1][B - 1]=0;
            difference=difference.subtract(numWays[i2]);
          }
        }
      }
      for (int i1=0; i1 < B; i1++) {
        for (int j=0; j < B; j++) {
          System.out.print(matrix[i1][j]);
        }
        System.out.println("""");
      }
    }
  }
}
"
30000018,"public static void main(String[] args){
  Scanner reader=new Scanner(System.in);
  int g=reader.nextInt();
  for (int k=0; k < g; k++) {
    int b=reader.nextInt();
    long m=reader.nextLong();
    BigInteger c=new BigInteger(m + """");
    BigInteger two=new BigInteger(""2"");
    BigInteger rez=two.pow(b - 2);
    if (rez.compareTo(c) < 0) {
      System.out.println(""Case #"" + (k + 1) + "": IMPOSSIBLE"");
    }
 else {
      System.out.println(""Case #"" + (k + 1) + "": POSSIBLE"");
      BigInteger e=new BigInteger(m + """");
      int max=lo(m) + 1;
      int[][] t=new int[b][b];
      for (int i=0; i <= max; i++) {
        for (int j=i + 1; j <= max; j++) {
          t[i][j]=1;
        }
      }
      while (m > 0) {
        if (m == 1) {
          t[0][b - 1]=1;
          m--;
        }
 else {
          int log=lo(m) + 1;
          t[log][b - 1]=1;
          m-=Math.pow(2,log - 1);
        }
      }
      for (int i=0; i < b; i++) {
        t[b - 1][i]=0;
      }
      for (int i=0; i < t.length; i++) {
        for (int j=0; j < t.length; j++) {
          System.out.print(t[i][j]);
        }
        System.out.println();
      }
    }
  }
  reader.close();
}
"
30000019,"public static void main(String[] args){
  int T=scan.nextInt();
  p2[0]=1;
  for (int i=1; i < 101; i++)   p2[i]=p2[i - 1] * 2;
  int X=1;
  while (T-- > 0) {
    int n=scan.nextInt();
    long m=scan.nextLong();
    boolean[][] ans=new boolean[n][n];
    for (int i=0; i < n; i++) {
      for (int j=i + 1; j < n; j++) {
        ans[i][j]=true;
      }
    }
    System.out.print(""Case #"" + (X++) + "": "");
    if (m <= p2[n - 2]) {
      System.out.println(""POSSIBLE"");
      BigInteger bi=new BigInteger("""" + (p2[n - 2] - m));
      String s=bi.toString(2);
      for (int i=s.length() - 1; i >= 0; i--) {
        if (s.charAt(i) == '1') {
          ans[s.length() - i][n - 1]=false;
        }
      }
      for (int i=0; i < n; i++) {
        for (int j=0; j < n; j++) {
          if (ans[i][j] == true)           System.out.print(""1"");
 else           System.out.print(""0"");
        }
        System.out.println();
      }
    }
 else {
      System.out.println(""IMPOSSIBLE"");
    }
  }
}
"
30000020,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""BL.in""));
  PrintWriter out=new PrintWriter(""BL.out"");
  long[] counts=new long[55];
  counts[0]=1;
  for (int i=1; i < 55; i++) {
    for (int j=0; j < i; j++) {
      counts[i]+=counts[j];
    }
  }
  int tc=in.nextInt();
  for (int cc=1; cc <= tc; cc++) {
    int b=in.nextInt();
    long t=in.nextLong();
    char[][] result=new char[b][b];
    for (    char[] a : result)     Arrays.fill(a,'0');
    for (int i=b - 1; i > 0; i--) {
      for (int j=i + 1; j < b; j++) {
        result[i][j]='1';
      }
    }
    if (t > counts[b - 1]) {
      System.out.printf(""Case #%d: IMPOSSIBLE\n"",cc);
      out.printf(""Case #%d: IMPOSSIBLE\n"",cc);
    }
 else {
      System.out.printf(""Case #%d: POSSIBLE\n"",cc);
      out.printf(""Case #%d: POSSIBLE\n"",cc);
      if (t == counts[b - 1]) {
        for (int i=1; i < b; i++) {
          result[0][i]='1';
        }
      }
 else {
        while (t > 0) {
          long bit=t & -t;
          int idx=0;
          while (1L << idx < bit)           idx++;
          if (idx >= b) {
            throw new Exception(""That's how you know you ....ed up"");
          }
          result[0][b - 1 - (idx + 1)]='1';
          t-=bit;
        }
      }
      for (int i=0; i < b; i++) {
        System.out.printf(new String(result[i]) + ""\n"");
        out.printf(new String(result[i]) + ""\n"");
      }
    }
  }
  out.close();
}
"
30000021,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int T=scanner.nextInt();
  scanner.nextLine();
  for (int t=1; t <= T; t++) {
    int B=scanner.nextInt();
    long M=scanner.nextLong();
    boolean pos=true;
    long max=1;
    for (int i=0; i < B - 2; i++) {
      max=max * 2;
    }
    if (max < M) {
      pos=false;
    }
    System.out.printf(""Case #%d: %s\n"",t,pos ? ""POSSIBLE"" : ""IMPOSSIBLE"");
    if (pos) {
      int[][] matrix=new int[B][];
      for (int i=0; i < B; i++) {
        matrix[i]=new int[B];
      }
      int use=B - 2;
      while (max > M) {
        max/=2;
        use--;
      }
      for (int i=0; i <= use; i++) {
        matrix[i][B - 1]=1;
        for (int j=i + 1; j <= use; j++) {
          matrix[i][j]=1;
        }
      }
      int next=use + 1;
      long diff=M - max;
      while (diff > 0) {
        long link=1;
        int log=0;
        while (link * 2 <= diff) {
          link*=2;
          log++;
        }
        matrix[next][B - 1]=1;
        matrix[log + 1][next]=1;
        diff-=link;
      }
      for (int i=0; i < B; i++) {
        for (int j=0; j < B; j++) {
          System.out.print(matrix[i][j]);
        }
        System.out.print(""\n"");
      }
    }
  }
}
"
30000022,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scanner=new Scanner(new BufferedReader(new FileReader(""in.txt"")));
  PrintWriter writer=new PrintWriter(""out.txt"");
  int t=scanner.nextInt();
  for (int i=1; i <= t; i++) {
    int b=scanner.nextInt();
    long m=scanner.nextLong();
    writer.print(""Case #"" + i + "": "");
    if (m > Math.pow(2,b - 2)) {
      writer.println(""IMPOSSIBLE"");
      continue;
    }
    writer.println(""POSSIBLE"");
    int[][] s=new int[b][b];
    for (int j=1; j < b; j++) {
      for (int k=j + 1; k < b; k++) {
        s[j][k]=1;
      }
    }
    if (m == Math.pow(2,b - 2)) {
      s[0][b - 1]=1;
      m--;
    }
    for (int j=1; j < b - 1; j++) {
      if ((m & (long)Math.pow(2,b - 2 - j)) != 0) {
        s[0][j]=1;
      }
    }
    for (int j=0; j < b; j++) {
      for (int k=0; k < b; k++) {
        writer.print(s[j][k]);
      }
      writer.println();
    }
  }
  writer.close();
  scanner.close();
}
"
30000023,"@Override public void run(){
  Scanner in=new Scanner(System.in);
  for (  int casei : ZeroTo.get(in.nextInt())) {
    int n=in.nextInt();
    long m=in.nextLong();
    long max=1L << (long)(n - 2);
    System.out.print(""Case #"" + (casei + 1) + "": "");
    if (m <= max) {
      System.out.println(""POSSIBLE"");
      for (      int i : ZeroTo.get(n)) {
        boolean[] row=new boolean[n];
        if (i < n - 1) {
          row[i + 1]=true;
          long coverEnd=1L << (long)(n - i - 2);
          long coverStart=Math.max(1,coverEnd / 2);
          if (coverStart < m && m < coverEnd) {
            long remain=m - coverStart;
            long factor=coverStart / 2;
            for (            int j : FromTo.get(i + 2,n)) {
              if (remain >= factor) {
                row[j]=true;
                remain-=factor;
              }
              factor=Math.max(1,factor / 2);
            }
          }
 else           if (m >= coverEnd) {
            for (            int j : FromTo.get(i + 2,n))             row[j]=true;
          }
        }
        for (        boolean v : row)         System.out.print(v ? 1 : 0);
        System.out.println();
      }
    }
 else {
      System.out.println(""IMPOSSIBLE"");
    }
  }
}
"
30000024,"public B(final Scanner sc){
  B=sc.nextInt();
  M=sc.nextLong();
}
"
30000025,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""B.in""));
  PrintWriter out=new PrintWriter(new File(""B.out""));
  int tt=in.nextInt();
  for (int tc=1; tc <= tt; tc++) {
    int b=in.nextInt();
    long m=in.nextLong();
    out.print(""Case #"" + tc + "": "");
    long p=1;
    long[] pp=new long[b];
    pp[0]=1;
    for (int i=1; i < b - 1; i++) {
      pp[i]=p;
      p=p * 2;
    }
    if (p < m) {
      out.println(""IMPOSSIBLE"");
    }
 else {
      out.println(""POSSIBLE"");
      out.print(""0"");
      for (int i=1; i < b; i++) {
        if (m >= pp[b - i - 1]) {
          out.print(""1"");
          m-=pp[b - i - 1];
        }
 else {
          out.print(""0"");
        }
      }
      out.println();
      for (int i=1; i < b; i++) {
        for (int j=0; j <= i; j++)         out.print(""0"");
        for (int j=i + 1; j < b; j++)         out.print(""1"");
        out.println();
      }
    }
  }
  out.close();
  in.close();
}
"
30000026,"public static void main(String[] args) throws IOException {
  BufferedReader r=new BufferedReader(new InputStreamReader(System.in));
  String s=r.readLine();
  int T=Integer.parseInt(s);
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < T; i++) {
    sb.append(""Case #"" + (i + 1) + "": "");
    s=r.readLine();
    String[] parts=s.split("" "");
    int B=Integer.parseInt(parts[0]);
    long M=Long.parseLong(parts[1]);
    if (Math.pow(2,B - 2) < M) {
      sb.append(""IMPOSSIBLE"");
    }
 else {
      sb.append(""POSSIBLE\n"");
      sb.append(""0"");
      for (int j=1; j < B; j++) {
        sb.append(""1"");
      }
      boolean[] binear=new boolean[B];
      M--;
      for (int j=0; j < B; j++) {
        if (M >= Math.pow(2,B - j - 1)) {
          binear[j]=true;
          M-=Math.pow(2,B - j - 1);
        }
      }
      for (int j=1; j < B; j++) {
        sb.append(""\n"");
        for (int k=0; k < B; k++) {
          if (k <= j) {
            sb.append(""0"");
          }
 else           if (k == B - 1) {
            if (binear[B - j]) {
              sb.append(""1"");
            }
 else {
              sb.append(""0"");
            }
          }
 else {
            sb.append(""1"");
          }
        }
      }
    }
    sb.append(""\n"");
  }
  System.out.println(sb.toString());
  PrintWriter writer=new PrintWriter(""Qual1C.BBB.txt"",""UTF-8"");
  writer.println(sb.toString());
  writer.close();
}
"
30000027,"public static void main(String[] args) throws Exception {
  out=new PrintWriter(new FileWriter(""outB.txt""));
  int testCases=Integer.parseInt(next());
  for (int t=1; t <= testCases; t++) {
    int b=Integer.parseInt(next());
    long m=Long.parseLong(next());
    if (Math.pow(2,b - 2) < m)     out.printf(""Case #%d: IMPOSSIBLE%n"",t);
 else {
      int[][] g=new int[b][b];
      for (int i=1; i < b; i++)       g[0][i]=1;
      long c=1;
      long[] p=new long[b];
      p[b - 1]=1;
      for (int i=b - 2; i >= 0; i--)       for (int j=i + 1; j < b; j++) {
        if (c == m)         break;
        if (c + p[j] <= m) {
          g[i][j]=1;
          p[i]+=p[j];
          c+=p[j];
        }
      }
      if (c == m) {
        out.printf(""Case #%d: POSSIBLE%n"",t);
        for (int i=0; i < b; i++) {
          for (int j=0; j < b; j++)           out.print(Math.min(1,g[i][j]));
          out.println();
        }
      }
 else       out.printf(""Case #%d: IMPOSSIBLE%n"",t);
    }
  }
  out.close();
}
"
30000028,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=1; i <= T; i++) {
    System.out.print(""Case #"" + i + "": "");
    int B=sc.nextInt();
    BigInteger M=new BigInteger(sc.next());
    BigInteger two=new BigInteger(""2"");
    if (M.compareTo(two.pow(B - 2)) == 1) {
      System.out.println(""IMPOSSIBLE"");
      continue;
    }
    System.out.println(""POSSIBLE"");
    BigInteger M1=M.subtract(BigInteger.ONE);
    int res[][]=new int[B][B];
    for (int i2=0; i2 < B; i2++) {
      for (int j=0; j < B; j++) {
        res[i2][j]=(j > i2) ? 1 : 0;
      }
    }
    for (int i4=1; i4 < B - 1; i4++) {
      res[0][i4]=0;
    }
    BigInteger two1=new BigInteger(""2"");
    for (int i1=B - 2; i1 > 0; i1--) {
      if (M1.mod(two1).equals(BigInteger.ONE)) {
        res[0][i1]=1;
      }
      M1=M1.divide(two1);
    }
    for (int i3=0; i3 < B; i3++) {
      for (int j=0; j < B; j++) {
        System.out.print(res[i3][j]);
      }
      System.out.println();
    }
  }
}
"
30000029,"public static void main(String[] args){
  String fileName=""B-large.in"";
  try (BufferedReader br=new BufferedReader(new FileReader(fileName))){
    try (BufferedWriter bw=new BufferedWriter(new FileWriter(fileName + "".out""))){
      int tests=Integer.valueOf(br.readLine());
      for (int test=1; test <= tests; ++test) {
        Scanner scanner=new Scanner(br.readLine());
        int b=scanner.nextInt();
        long m=scanner.nextLong();
        long initM=m;
        bw.write(""Case #"" + test + "": "");
        int tt[][]=new int[b][b];
        long max=((long)Math.pow(2,b - 2));
        if (m > max) {
          bw.write(""IMPOSSIBLE\n"");
        }
 else {
          bw.write(""POSSIBLE\n"");
          StringBuffer res=new StringBuffer();
          if (m == max) {
            res.append(""1"");
            tt[0][b - 1]=1;
            --m;
          }
 else {
            res.append(""0"");
            tt[0][b - 1]=0;
          }
          for (int i=1; i < b; ++i) {
            boolean set=(m & 1) != 0;
            res.append(set ? ""1"" : ""0"");
            tt[0][b - 1 - i]=set ? 1 : 0;
            m=m >> 1;
          }
          bw.write(res.reverse().toString() + ""\n"");
          for (int i=2; i < b + 1; ++i) {
            StringBuffer sb=new StringBuffer();
            for (int j=0; j < i; ++j) {
              sb.append(""0"");
              tt[i - 1][j]=0;
            }
            for (int j=0; j < b - i; ++j) {
              sb.append(""1"");
              tt[i - 1][j + i]=1;
            }
            sb.append(""\n"");
            bw.write(sb.toString());
          }
          long val[]=new long[b];
          for (int i=0; i < b; ++i)           val[i]=0;
          val[b - 1]=1;
          for (int i=0; i < b; ++i) {
            for (int j=b - i - 1; j >= 0; --j) {
              if (tt[j][b - i - 1] == 1)               val[j]+=val[b - i - 1];
            }
          }
          if (initM != val[0])           break;
        }
      }
      bw.close();
    }
   }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000030,"public static void main(String[] args) throws IOException {
  br=new BufferedReader(new InputStreamReader(System.in));
  pw=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
  int cnttest=Integer.parseInt(next());
  for (int test=1; test <= cnttest; test++) {
    pw.print(""Case #"" + test + "": "");
    int n=Integer.parseInt(next());
    long m=Long.parseLong(next());
    int[][] a=new int[n + 1][n + 1];
    long M=m;
    int pow=0;
    while (M % 2 == 0) {
      M/=2;
      pow++;
    }
    boolean ok=true;
    if (M == 1) {
      if (pow + 2 > n)       ok=false;
 else {
        for (int i=1; i <= pow + 1; i++) {
          for (int j=1; j < i; j++) {
            a[j][i]=1;
          }
        }
        for (int i=1; i <= pow + 1; i++) {
          a[i][n]=1;
        }
      }
    }
 else {
      for (int i=1; i < n; i++) {
        for (int j=1; j < i; j++) {
          a[j][i]=1;
        }
      }
      for (int i=0; i < 60; i++) {
        if ((m & (1l << i)) != 0) {
          if (i + 2 >= n) {
            ok=false;
            break;
          }
          a[i + 2][n]=1;
        }
      }
    }
    if (ok) {
      pw.println(""POSSIBLE"");
      for (int i=1; i <= n; i++) {
        for (int j=1; j <= n; j++) {
          pw.print(a[i][j]);
        }
        pw.println();
      }
    }
 else     pw.println(""IMPOSSIBLE"");
  }
  pw.close();
}
"
30000031,"public static void main(String[] args){
  B b=new B();
  Scanner in=new Scanner(System.in);
  int cases=Integer.parseInt(in.nextLine());
  for (int a=0; a < cases; a++) {
    String[] line=in.nextLine().split("" "");
    int b1=Integer.parseInt(line[0]);
    long m=Long.parseLong(line[1]);
    boolean[][] connected=new boolean[b1][b1];
    long[] value=new long[b1];
    value[b1 - 1]=1;
    value[b1 - 2]=1;
    connected[b1 - 2][b1 - 1]=true;
    for (int i=b1 - 3; i >= 0; i--) {
      int j=i + 1;
      while (j < b1 && value[i] < m) {
        if (value[i] + value[j] <= m) {
          value[i]+=value[j];
          connected[i][j]=true;
        }
        j++;
      }
    }
    if (value[0] == m) {
      System.out.printf(""Case #%d: POSSIBLE\n"",a + 1);
      int b2=connected.length;
      for (int i=0; i < b2; i++) {
        StringBuilder build=new StringBuilder();
        for (int j=0; j < b2; j++) {
          if (connected[i][j]) {
            build.append(1);
          }
 else {
            build.append(0);
          }
        }
        System.out.println(build.toString());
      }
    }
 else {
      System.out.printf(""Case #%d: IMPOSSIBLE\n"",a + 1);
    }
  }
}
"
30000032,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(System.in);
  int t=scanner.nextInt();
  for (int x=1; x <= t; ++x) {
    int b=scanner.nextInt();
    long m=scanner.nextLong();
    System.out.print(""Case #"" + x + "": "");
    if (m > Math.pow(2,b - 2)) {
      System.out.print(""IMPOSSIBLE\n"");
      continue;
    }
 else     System.out.print(""POSSIBLE\n"");
    int[][] slides=new int[b][b];
    for (int i=0; i < b; ++i) {
      for (int j=i + 1; j < b; ++j) {
        slides[i][j]=1;
      }
    }
    String str=Long.toBinaryString(m - 1) + """";
    if (str.equals(""0""))     str="""";
    while (str.length() < b - 1) {
      str=""0"" + str;
    }
    str+=""1"";
    System.out.println(str);
    for (int i=1; i < b; ++i) {
      for (int j=0; j < b; ++j) {
        System.out.print(slides[i][j]);
      }
      System.out.print(""\n"");
    }
  }
}
"
30000033,"public static void main(String args[]) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(in));
  int T=parseInt(br.readLine());
  for (int z=0; z < T; z++) {
    String[] ss=br.readLine().trim().split(""\\s+"");
    int B=parseInt(ss[0]);
    Long M=Long.parseLong(ss[1]);
    long x=1L << (B - 2);
    if (M > x) {
      out.println(""Case #"" + (z + 1) + "": IMPOSSIBLE"");
      continue;
    }
    boolean[][] mat=new boolean[B][B];
    for (int i=1; i < B; i++) {
      for (int j=i + 1; j < B; j++) {
        mat[i][j]=true;
      }
    }
    if (M == x) {
      for (int j=1; j < B; j++) {
        mat[0][j]=true;
      }
    }
 else {
      int u=B - 2;
      while (M > 0) {
        if ((M & 1) == 1) {
          mat[0][u]=true;
        }
        u--;
        M>>=1;
      }
    }
    out.println(""Case #"" + (z + 1) + "": POSSIBLE"");
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < B; i++) {
      for (int j=0; j < B; j++) {
        sb.append(mat[i][j] ? 1 : 0);
      }
      sb.append(""\n"");
    }
    out.print(sb);
  }
}
"
30000034,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scanner=new Scanner(new File(""inputBlarge.txt""));
  int tests=scanner.nextInt();
  for (int test=1; test <= tests; test++) {
    scanner.nextLine();
    int b=scanner.nextInt();
    long m=scanner.nextLong();
    int[][] ans=new int[b + 1][b + 1];
    ans[1][b]=1;
    m--;
    if (m > 0 && 2 < b) {
      ans[2][b]=1;
      m--;
    }
    for (int i=2; i < b; i++) {
      ans[1][i]=1;
    }
    int next=3;
    long add=2L;
    while (m > 0 && next < b) {
      ans[next][b]=1;
      for (int prev=next - 1; prev >= 2; prev--) {
        ans[next][prev]=1;
      }
      m-=add;
      add*=2;
      next++;
    }
    add/=4;
    int last=next - 1;
    int prev=last - 1;
    while (m < 0) {
      while (add > -m) {
        prev--;
        add/=2;
      }
      m+=add;
      ans[last][prev]=0;
    }
    if (m > 0) {
      System.out.println(""Case #"" + test + "": IMPOSSIBLE"");
    }
 else {
      System.out.println(""Case #"" + test + "": POSSIBLE"");
      for (int y=1; y < ans.length; y++) {
        for (int x=1; x < ans[0].length; x++) {
          System.out.print(ans[y][x]);
        }
        System.out.println();
      }
    }
  }
  scanner.close();
}
"
30000035,"public static void main(String[] agrs) throws FileNotFoundException {
  String FILENAME=""longB"";
  File FILE=new File(FILENAME);
  Scanner fileReader=new Scanner(FILE);
  int T=fileReader.nextInt();
  for (int test=0; test < T; test++) {
    int B=fileReader.nextInt();
    String M1=fileReader.next();
    long M=Long.parseLong(M1);
    int num=B - 2;
    long max=(long)Math.pow((double)2,(double)num);
    int[] x=new int[num];
    if (M > max) {
      System.out.println(""Case #"" + (test + 1) + "": IMPOSSIBLE"");
    }
 else {
      int[][] matrix=new int[B][B];
      for (int i=0; i < B; i++) {
        for (int j=i + 1; j < B - 1; j++) {
          matrix[i][j]=1;
        }
      }
      long dec=max / 2;
      long left=M;
      int index=0;
      for (int i=0; i < num; i++) {
        if (left >= dec) {
          left-=dec;
          x[i]=1;
        }
        dec=dec / 2;
      }
      int indi=0;
      for (int i=B - 2; i > 0; i--) {
        matrix[i][B - 1]=x[indi];
        indi++;
      }
      if (left == 1) {
        matrix[0][B - 1]=1;
      }
      System.out.println(""Case #"" + (test + 1) + "": POSSIBLE"");
      for (int i=0; i < B; i++) {
        for (int j=0; j < B; j++) {
          System.out.print(matrix[i][j]);
        }
        System.out.println("""");
      }
    }
  }
  fileReader.close();
}
"
30000036,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws FileNotFoundException, IOException {
  String problem=""B"";
  String input=problem + ""-large.in"";
  Scanner in=new Scanner(new File(rutaDatos + ""input\\"" + input));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(rutaDatos + ""output\\"" + input+ "".out.txt"")));
  int T=in.nextInt();
  for (int i=0; i < T; i++) {
    int B=in.nextInt();
    long M=in.nextLong();
    String answer=""Case #"" + (i + 1) + "": "";
    long l=1;
    for (int j=0; j < B - 2; j++)     l=l * 2;
    if (M > l) {
      answer+=""IMPOSSIBLE"";
      System.out.println(answer);
      out.println(answer);
    }
 else {
      answer+=""POSSIBLE"";
      System.out.println(answer);
      out.println(answer);
      for (int j=0; j < B; j++) {
        for (int k=0; k < B; k++) {
          int d=0;
          if (k > j && k < B - 1) {
            d=1;
          }
          if (j == 0 && k == B - 1)           d=1;
 else           if (k == B - 1) {
            long p=M - 1;
            String s=Long.toBinaryString(p);
            if (j > s.length())             d=0;
 else             d=(s.charAt(s.length() - j)) - '0';
          }
          System.out.print(d);
          out.print(d);
        }
        System.out.println();
        out.println();
      }
    }
  }
  out.close();
}
"
30000037,"public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=1; i <= T; i++) {
    int B=sc.nextInt();
    String s=sc.next();
    long M=Long.parseLong(s);
    long prod=1;
    for (int i1=2; i1 <= B - 1; i1++) {
      prod*=2;
    }
    long p2=prod;
    if (p2 < M) {
      System.out.println(""Case #"" + i + "": IMPOSSIBLE"");
      continue;
    }
    System.out.println(""Case #"" + i + "": POSSIBLE"");
    boolean[][] board=new boolean[B][B];
    for (int r=0; r < B; r++) {
      for (int c=r + 1; c < B; c++) {
        board[r][c]=true;
      }
    }
    long diff=p2 - M;
    int d=1;
    while (diff > 0) {
      if (diff % 2 == 1) {
        board[d][B - 1]=false;
      }
      diff/=2;
      d++;
    }
    StringBuilder sb=new StringBuilder();
    for (int r=0; r < B; r++) {
      for (int c=0; c < B; c++) {
        if (board[r][c])         sb.append('1');
 else         sb.append('0');
      }
      sb.append('\n');
    }
    System.out.print(sb);
  }
}
"
30000038,"public static void main(String[] args) throws IOException {
  FileInputStream in=null;
  PrintWriter out=null;
  try {
    in=new FileInputStream(""B-large.in"");
    out=new PrintWriter(""outputB-large.txt"");
    Scanner sc=new Scanner(in);
    String line=sc.nextLine();
    int T=Integer.parseInt(line);
    for (int t=1; t <= T; t++) {
      line=sc.nextLine();
      int B=Integer.parseInt(line.split("" "")[0]);
      long M=Long.parseLong(line.split("" "")[1]);
      String output=""Case #"" + t + "": "";
      if ((1L << (B - 2)) < M) {
        output+=""IMPOSSIBLE\n"";
        out.print(output);
        continue;
      }
      output+=""POSSIBLE\n"";
      for (int i=0; i < B; i++) {
        for (int j=0; j < B; j++) {
          int k=0;
          if (i < j) {
            if (i != 0)             k=1;
 else             if (j == B - 1)             k=1;
 else             if (((1L << (B - j - 2)) & (M - 1)) != 0)             k=1;
          }
          output+=k;
        }
        output+=""\n"";
      }
      out.print(output);
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
}
"
30000039,"public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
  String filename=""B-large"";
  Scanner sc=new Scanner(new File(filename + "".in""));
  PrintWriter pw=new PrintWriter(filename + "".out"",""UTF-8"");
  while (sc.hasNext()) {
    int T=sc.nextInt();
    for (int i=1; i <= T; i++) {
      int B=sc.nextInt();
      long M=sc.nextLong();
      long max=1L << (B - 2);
      if (M > max) {
        System.out.println(""Case #"" + i + "": IMPOSSIBLE"");
        pw.println(""Case #"" + i + "": IMPOSSIBLE"");
      }
 else {
        String str=""0"";
        System.out.println(""Case #"" + i + "": POSSIBLE"");
        pw.println(""Case #"" + i + "": POSSIBLE"");
        for (int j=B - 2; j > 0; j--) {
          if (M >= (1L << (j - 1))) {
            M-=(1L << (j - 1));
            str+=""1"";
          }
 else {
            str+=""0"";
          }
        }
        str+=M == 1 ? ""1"" : ""0"";
        pw.println(str);
        System.out.println(str);
        for (int j=1; j < B; j++) {
          for (int k=0; k < B; k++) {
            pw.print(k <= j ? ""0"" : ""1"");
            System.out.print(k <= j ? ""0"" : ""1"");
          }
          pw.println();
          System.out.println();
        }
      }
    }
    pw.close();
  }
}
"
30000040,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  long max=(1L << 48);
  int cases=in.nextInt();
  for (int q=1; q <= cases; q++) {
    int builds=in.nextInt();
    long ways=in.nextLong();
    long max2=(1L << (builds - 2));
    if (ways > max2) {
      System.out.println(""Case #"" + q + "": IMPOSSIBLE"");
    }
 else {
      System.out.println(""Case #"" + q + "": POSSIBLE"");
      String[] strings=new String[builds];
      Arrays.fill(strings,"""");
      for (int i=0; i < builds; i++) {
        for (int j=0; j <= i; j++) {
          strings[i]+=""0"";
        }
        for (int j=i + 1; j + 1 < builds; j++) {
          strings[i]+=""1"";
        }
      }
      for (int i=builds - 2; i >= 0; i--) {
        long can=1;
        if (i > 0) {
          can=(1L << i - 1);
        }
        if (can <= ways) {
          ways-=can;
          strings[i]+=""1"";
        }
 else {
          strings[i]+=""0"";
        }
      }
      for (int i=0; i < builds; i++) {
        System.out.println(strings[i]);
      }
    }
  }
}
"
30000041,"public static void main(String[] args){
  String ipf=""/Users/KiRaN/Desktop/CodeBase/Google_CodeBase/SheepSleep/src/large.in"";
  String opf=""/Users/KiRaN/Desktop/CodeBase/Google_CodeBase/SheepSleep/src/large.out"";
  try {
    BufferedReader bufferedReader=new BufferedReader(new FileReader(ipf));
    BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(opf));
    int noOfTestCases=Integer.valueOf(bufferedReader.readLine());
    for (int testCases=0; testCases < noOfTestCases; testCases++) {
      String var1=bufferedReader.readLine();
      int var2=Integer.parseInt(var1.split("" "")[0]);
      long var3=Long.parseLong(var1.split("" "")[1]);
      long var4=var3;
      long var5;
      String v6="""";
      String v7=""0"";
      for (int it1=2; it1 < var2; it1++) {
        v6+=v7;
        for (int it2=1; it2 < var2; it2++) {
          if (it1 <= it2)           v6+=""1"";
 else           v6+=""0"";
        }
        v6+=""\n"";
      }
      for (int it3=0; it3 < var2; it3++) {
        v6+=""0"";
      }
      boolean v8[]=new boolean[var2 - 1];
      long v9=(long)Math.pow(2,(var2 - 2));
      System.out.println(""  maxPossible  "" + v9);
      if (var2 == 2 && var3 == 1) {
        bufferedWriter.write(""Case #"" + (testCases + 1) + "": ""+ ""POSSIBLE""+ ""\n"");
        bufferedWriter.write(""01"" + ""\n"");
        bufferedWriter.write(""00"" + ""\n"");
        System.out.println(""Case #"" + (testCases + 1) + "": ""+ ""POSSIBLE""+ ""\n"");
        System.out.println(""01"" + ""\n"");
        System.out.println(""00"" + ""\n"");
      }
 else       if (var3 > v9) {
        bufferedWriter.write(""Case #"" + (testCases + 1) + "": ""+ ""IMPOSSIBLE""+ ""\n"");
        System.out.println(""Case #"" + (testCases + 1) + "": ""+ ""IMPOSSIBLE""+ ""\n"");
      }
 else {
        bufferedWriter.write(""Case #"" + (testCases + 1) + "": ""+ ""POSSIBLE""+ ""\n"");
        var5=v9 / 2;
        for (int i=0; i < (var2 - 1); i++) {
          if (var4 == 0)           break;
          if (var4 >= var5) {
            v8[i]=true;
            var4-=var5;
          }
          var5/=2;
        }
        String tempresult=""0"";
        for (int i=0; i < (var2 - 1); i++) {
          if (v8[i]) {
            tempresult=tempresult + ""1"";
          }
 else {
            tempresult=tempresult + ""0"";
          }
        }
        v6=tempresult + ""\n"" + v6;
        System.out.println(v6);
        bufferedWriter.write(v6 + ""\n"");
      }
    }
    bufferedReader.close();
    bufferedWriter.close();
  }
 catch (  FileNotFoundException fileNotFoundException) {
    System.out.println(""Some Exception: "" + fileNotFoundException.getMessage());
    fileNotFoundException.printStackTrace();
  }
catch (  IOException ioException) {
    System.out.println(""Some Exception: "" + ioException.getMessage());
    ioException.printStackTrace();
  }
catch (  Exception exception) {
    System.out.println(""Some Exception: "" + exception.getMessage());
    exception.printStackTrace();
  }
}
"
30000042,"public static void main(String[] args){
  long[] max=new long[51];
  max[0]=0;
  max[1]=0;
  max[2]=1;
  for (int i=3; i <= 50; i++) {
    max[i]=max[i - 1] * 2;
  }
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int B=in.nextInt();
    long M=in.nextLong();
    if (M > max[B]) {
      System.out.format(""Case #%d: IMPOSSIBLE\n"",t);
    }
 else {
      System.out.format(""Case #%d: POSSIBLE\n"",t);
      if (M == max[B]) {
        for (int i=0; i < B; i++) {
          for (int j=0; j < B; j++) {
            if (j > i)             System.out.print('1');
 else             System.out.print('0');
          }
          System.out.println();
        }
      }
 else {
        String binaryB=Long.toBinaryString(M);
        binaryB='0' + binaryB + '0';
        while (binaryB.length() < B) {
          binaryB='0' + binaryB;
        }
        System.out.println(binaryB);
        boolean flag=false;
        for (int i=1; i < B; i++) {
          if (binaryB.charAt(i) == '1') {
            flag=true;
          }
          for (int j=0; j < B; j++) {
            if (flag && j > i)             System.out.print('1');
 else             System.out.print('0');
          }
          System.out.println();
        }
      }
    }
  }
}
"
30000043,"public static void main(String[] args) throws Exception {
  Scanner cin=new Scanner(new FileInputStream(""B-small-attempt1.in""));
  PrintWriter cout=new PrintWriter(new FileOutputStream(""output.txt""));
  int T=cin.nextInt();
  for (int t=0; t < T; ++t) {
    int B=cin.nextInt(), M=cin.nextInt();
    cout.print(""Case #"" + (t + 1) + "": "");
    if (M > (1 << (B - 2))) {
      cout.println(""IMPOSSIBLE"");
      continue;
    }
    int[][] a=new int[10][10];
    for (int i=0; i < 10; ++i)     Arrays.fill(a[i],0);
switch (M) {
case 1:
      a[0][B - 1]=1;
    break;
case 2:
  a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
break;
case 3:
a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
break;
case 4:
a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[1][2]=1;
break;
case 5:
a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[1][2]=1;
break;
case 6:
a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
break;
case 7:
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
a[2][3]=1;
break;
case 8:
a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
a[2][3]=1;
break;
case 9:
a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[0][4]=1;
a[4][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
a[2][3]=1;
break;
case 10:
a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[0][4]=1;
a[4][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
a[2][3]=1;
a[1][4]=1;
break;
case 11:
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[0][4]=1;
a[4][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
a[2][3]=1;
a[1][4]=1;
a[2][4]=1;
break;
case 12:
a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[0][4]=1;
a[4][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
a[2][3]=1;
a[1][4]=1;
a[2][4]=1;
break;
case 13:
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[0][4]=1;
a[4][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
a[2][3]=1;
a[1][4]=1;
a[2][4]=1;
a[3][4]=1;
break;
case 14:
a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[0][4]=1;
a[4][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
a[2][3]=1;
a[1][4]=1;
a[2][4]=1;
a[3][4]=1;
break;
case 15:
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[0][4]=1;
a[4][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
a[2][3]=1;
a[1][4]=1;
a[2][4]=1;
a[3][4]=1;
break;
case 16:
a[0][B - 1]=1;
a[0][1]=1;
a[1][B - 1]=1;
a[0][2]=1;
a[2][B - 1]=1;
a[0][3]=1;
a[3][B - 1]=1;
a[0][4]=1;
a[4][B - 1]=1;
a[1][2]=1;
a[1][3]=1;
a[2][3]=1;
a[1][4]=1;
a[2][4]=1;
a[3][4]=1;
break;
}
cout.println(""POSSIBLE"");
for (int i=0; i < B; ++i) {
for (int j=0; j < B; ++j) cout.print(a[i][j]);
cout.println();
}
}
cout.flush();
}
"
30000044,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""B-large.in""));
  int t=sc.nextInt();
  int count=1;
  long[] possibleRoutes=new long[52];
  for (int i=2; i <= 50; i++) {
    possibleRoutes[i]=1;
    for (int j=0; j < i; j++) {
      possibleRoutes[i]+=possibleRoutes[j];
    }
  }
  possibleRoutes[1]=1;
  while (t-- > 0) {
    int B=sc.nextInt();
    long M=sc.nextLong();
    if (M > possibleRoutes[B]) {
      System.out.println(""Case #"" + count + "": ""+ ""IMPOSSIBLE"");
    }
 else {
      int building=B;
      long routes=M;
      System.out.println(""Case #"" + count + "": ""+ ""POSSIBLE"");
      boolean buildSlides=false;
      for (int j=0; j < B; j++) {
        if (routes < possibleRoutes[building] && !buildSlides) {
          if (routes <= possibleRoutes[building - 1]) {
            for (int i=0; i < B; i++) {
              if (i == j + 1) {
                System.out.print(""1"");
              }
 else {
                System.out.print(""0"");
              }
            }
            System.out.println("""");
          }
 else {
            buildSlides=true;
            for (int i=B; i > 0; i--) {
              if (possibleRoutes[i] <= routes) {
                routes-=possibleRoutes[i];
                System.out.print(""1"");
              }
 else {
                System.out.print(""0"");
              }
            }
            System.out.println("""");
          }
        }
 else {
          buildSlides=true;
          for (int i=0; i < B; i++) {
            if (i > j) {
              System.out.print(""1"");
            }
 else {
              System.out.print(""0"");
            }
          }
          System.out.println("""");
        }
        building--;
      }
    }
    count++;
  }
  sc.close();
}
"
30000045,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  final int T=Integer.parseInt(sc.nextLine());
  for (int caseCount=1; caseCount <= T; caseCount++) {
    final int B=sc.nextInt();
    final long M=sc.nextLong();
    int[][] g=new int[B][B];
    long[] pathCounts=new long[B];
    g[B - 2][B - 1]=1;
    pathCounts[B - 1]=1;
    for (int y=B - 2; y >= 0; y--) {
      long count=0;
      for (int x=y + 1; x < B; x++) {
        try {
          if (count + pathCounts[x] <= M) {
            g[y][x]=1;
            count+=pathCounts[x];
          }
        }
 catch (        InputMismatchException e) {
          System.out.print(e.getMessage());
        }
      }
      pathCounts[y]=count;
    }
    boolean possible=(pathCounts[0] == M);
    System.out.print(""Case #"" + caseCount + "": "");
    if (possible) {
      System.out.println(""POSSIBLE"");
      for (int y=0; y < B; y++) {
        for (int x=0; x < B; x++) {
          System.out.print(g[y][x]);
        }
        System.out.println();
      }
    }
 else {
      System.out.println(""IMPOSSIBLE"");
    }
  }
  sc.close();
}
"
30000046,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(new File(""D:/GCJ2016/B/B-large.in""));
  FileWriter writer=new FileWriter(""D:/GCJ2016/B/B-large.out"",false);
  int cases=scanner.nextInt();
  for (int i=0; i < cases; i++) {
    int br=scanner.nextInt();
    long cr=scanner.nextLong();
    writer.write(""Case #"" + (i + 1) + "": "");
    long rc=br - 2;
    long maximu=1;
    while (rc > 0) {
      maximu*=2;
      rc--;
    }
    if (maximu >= cr) {
      writer.write(""POSSIBLE"");
      long needMinus=maximu - cr;
      long[][] arr=new long[br][br];
      for (int j=0; j < br; j++) {
        Arrays.fill(arr[j],0);
      }
      if (cr == 0) {
      }
 else {
        for (int j=0; j < br; j++) {
          for (int k=0; k < br; k++) {
            if (k > j) {
              arr[j][k]=1;
            }
          }
        }
        if (maximu == cr) {
        }
 else {
          long[] arraywith=new long[br - 2];
          Arrays.fill(arraywith,0);
          long cn=1;
          for (int j=br - 3; j >= 0; j--) {
            cn*=2;
            arraywith[j]=cn / 2;
          }
          for (int l=0; l < br - 2; l++) {
            if (needMinus >= arraywith[l]) {
              needMinus-=arraywith[l];
              arr[0][l + 1]=0;
            }
          }
        }
      }
      writer.append('\r');
      writer.append('\n');
      for (int j=0; j < br; j++) {
        for (int k=0; k < br; k++) {
          System.out.print(arr[j][k] + """");
          writer.write(arr[j][k] + """");
        }
        System.out.println("""");
        writer.append('\r');
        writer.append('\n');
      }
    }
 else {
      writer.write(""IMPOSSIBLE"");
      writer.append('\r');
      writer.append('\n');
    }
  }
  scanner.close();
  writer.close();
}
"
30000047,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  in=new Scanner(new File(""B-large.in""));
  int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    int B=in.nextInt();
    long M=in.nextLong();
    long temp=(long)Math.pow(2,B - 2);
    if (M > temp) {
      System.out.printf(""Case #%d: IMPOSSIBLE\n"",i);
    }
 else {
      boolean[] b=new boolean[B];
      for (int j=1; j < B; j++) {
        temp/=2;
        if (M > temp) {
          M-=temp;
          b[B - 1 - j]=true;
        }
      }
      StringBuilder sb=new StringBuilder();
      for (int j=0; j < B; j++) {
        sb.append('\n');
        for (int k=0; k <= j; k++) {
          sb.append('0');
        }
        for (int k=j + 1; k < B; k++) {
          if (k == B - 1) {
            sb.append(b[j] ? '1' : '0');
          }
 else {
            sb.append('1');
          }
        }
      }
      System.out.printf(""Case #%d: POSSIBLE"",i);
      System.out.println(sb.toString());
    }
  }
}
"
30000048,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int cases=sc.nextInt();
  for (int c=1; c <= cases; c++) {
    int B=sc.nextInt();
    long M=sc.nextLong();
    if (M > 1 << B - 2)     System.out.printf(""Case #%d: IMPOSSIBLE\n"",c);
 else {
      System.out.printf(""Case #%d: POSSIBLE\n"",c);
      int[][] paths=new int[B][B];
      for (int i=0; i < B; i++) {
        for (int j=0; j < B; j++) {
          if (j > i)           paths[i][j]=1;
        }
      }
      char[] ch=Long.toBinaryString(M - 1).toCharArray();
      for (int i=0; i < B - 1; i++)       paths[0][i]=0;
      for (int i=B - ch.length - 1; i < B - 1; i++)       paths[0][i]=ch[i - B + ch.length + 1] - 48;
      for (int i=0; i < B; i++) {
        for (int j=0; j < B; j++) {
          System.out.print(paths[i][j]);
        }
        System.out.println();
      }
    }
  }
}
"
30000049,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""/Users/chao/Downloads/B-large.in""));
  FileWriter out=new FileWriter(""/Users/chao/Desktop/B-large.txt"");
  String s=in.readLine();
  int m=Integer.parseInt(s);
  for (int cases=1; cases <= m; cases++) {
    String[] ss=in.readLine().split("" "");
    int B=Integer.parseInt(ss[0]);
    long M=Long.parseLong(ss[1]);
    out.write(""Case #"" + cases + "": "");
    int n=B;
    long x=1;
    for (int i1=0; i1 < B - 2; i1++) {
      x*=2;
    }
    long max=x;
    if (max >= M) {
      out.write(""POSSIBLE\n"");
      int[][] map=new int[n][n];
      for (int i=1; i < n; i++) {
        for (int j=i + 1; j < n; j++) {
          map[i][j]=1;
        }
      }
      for (int k=1; k < n; k++) {
        if (k != n - 1)         max=max / 2;
        if (max <= M) {
          M-=max;
          map[0][k]=1;
        }
      }
      for (int i=0; i < n; i++) {
        for (int j=0; j < n; j++) {
          out.write("""" + map[i][j]);
        }
        out.write(""\n"");
      }
    }
 else {
      out.write(""IMPOSSIBLE\n"");
    }
  }
  in.close();
  out.flush();
  out.close();
}
"
30000050,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""B-large.in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""out.txt""));
  int caseLength=in.nextInt();
  for (int caseNumber=1; caseNumber <= caseLength; caseNumber++) {
    System.out.println(""=="" + caseNumber);
    out.write(String.format(""Case #%d: "",caseNumber));
    int buildingCount=in.nextInt();
    long target=in.nextLong() - 1;
    long temp=Long.highestOneBit(target);
    int buildingNeeded=temp != 0 ? Long.numberOfTrailingZeros(temp) + 3 : 2;
    if (buildingCount < buildingNeeded) {
      out.write(""IMPOSSIBLE\n"");
      continue;
    }
    out.write(""POSSIBLE\n"");
    boolean[] answer=new boolean[buildingCount];
    answer[0]=true;
    while (target > 0) {
      System.out.println(target);
      long temp2=Long.highestOneBit(target);
      answer[Long.numberOfTrailingZeros(temp2) + 1]=true;
      target-=temp2;
    }
    for (int i=buildingCount - 1; i >= 0; i--) {
      out.write(answer[i] ? '1' : '0');
    }
    out.newLine();
    for (int i=1; i < buildingCount; i++) {
      for (int j=0; j < i + 1; j++) {
        out.write('0');
      }
      for (int j=0; j < buildingCount - (i + 1); j++) {
        out.write('1');
      }
      out.newLine();
    }
  }
  out.close();
}
"
30000051,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""B-large.in""));
  PrintWriter pw=new PrintWriter(new File(""B-large.out""));
  int T=Integer.parseInt(br.readLine());
  for (int i=1; i <= T; i++) {
    String[] l=br.readLine().split("" "");
    int B=Integer.parseInt(l[0]);
    long M=Long.parseLong(l[1]);
    BigInteger x=BigInteger.valueOf(2);
    if (BigInteger.valueOf(M).compareTo(x.pow(B - 2)) > 0) {
      pw.println(""Case #"" + i + "": IMPOSSIBLE"");
      continue;
    }
    pw.println(""Case #"" + i + "": POSSIBLE"");
    if (BigInteger.valueOf(M).compareTo(x.pow(B - 2)) == 0) {
      String s=Long.toString(M - 1,2);
      int le=s.length();
      for (int b=0; b < B - le - 2; b++)       s=""0"" + s;
      pw.println(""0"" + (M == 1 ? """" : s) + ""1"");
    }
 else {
      String s=Long.toString(M,2);
      int le=s.length();
      for (int b=0; b < B - le - 2; b++)       s=""0"" + s;
      pw.println(""0"" + s + ""0"");
    }
    for (int j=1; j < B; j++) {
      String s="""";
      for (int z=0; z < j + 1; z++)       s+=""0"";
      for (int o=B - 2 - j; o >= 0; o--)       s+=""1"";
      pw.println(s);
    }
  }
  pw.close();
  br.close();
}
"
30000052,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int t=scanner.nextInt();
  for (int cas=1; cas <= t; ++cas) {
    int b=scanner.nextInt();
    long m=scanner.nextLong();
    if (m > Math.pow(2,b - 2)) {
      System.out.printf(""Case #%d: IMPOSSIBLE\n"",cas);
    }
 else {
      boolean[][] ans=new boolean[b][b];
      if (m > 0) {
        ans[0][b - 1]=true;
        m--;
      }
      for (int i=0; i < b - 1; ++i) {
        if (m > 0)         ans[i + 1][b - 1]=true;
        if (m >= Math.pow(2,i)) {
          for (int j=0; j <= i; ++j)           ans[j][i + 1]=true;
          m-=Math.pow(2,i);
        }
 else {
          int row=1;
          while (m > 0) {
            if (m % 2 == 1) {
              ans[row][i + 1]=true;
            }
            m/=2;
            row++;
          }
        }
      }
      System.out.printf(""Case #%d: POSSIBLE\n"",cas);
      for (int i=0; i < b; ++i) {
        for (int j=0; j < b; ++j)         System.out.printf(""%s"",ans[i][j] ? ""1"" : ""0"");
        System.out.println();
      }
    }
  }
}
"
30000053,"public static void main(String[] args) throws FileNotFoundException {
  FileInputStream fileInputStream=new FileInputStream(""/Users/ratmir/Downloads/B-small-attempt1 (1).in"");
  Scanner sc=new Scanner(fileInputStream);
  FileOutputStream outputStream=new FileOutputStream(""/Users/ratmir/Documents/code/hackerrank/algs/src/codejam/y2016/r3/z2/ztest3.txt"");
  PrintWriter printWriter=new PrintWriter(outputStream);
  int tn=sc.nextInt();
  for (int ti=1; ti <= tn; ti++) {
    int n=sc.nextInt();
    int m=sc.nextInt();
    if (n == 2 && m == 1) {
      String res=""Case #"" + ti + "": POSSIBLE\n01\n00"";
      printWriter.write(res + ""\n"");
      System.out.println(res);
      continue;
    }
    if (n == 2 && m > 1) {
      String res=""Case #"" + ti + "": IMPOSSIBLE"";
      printWriter.write(res + ""\n"");
      System.out.println(res);
      continue;
    }
    int nv=1 + ((n - 1) * (n - 2));
    int cnt=1 << nv;
    System.err.println(cnt);
    int cntt=0;
    boolean ok=false;
    int[] rx=new int[nv];
    int[] cx=new int[nv];
    int cidx=0;
    for (int i=0; i < n - 1; i++) {
      for (int j=1; j <= n - 1; j++) {
        if (i != j) {
          rx[cidx]=i;
          cx[cidx]=j;
          cidx++;
        }
      }
    }
    inner:     for (int i=0; i < cnt; i++) {
      Map<Integer,Set<Integer>> map=new HashMap<Integer,Set<Integer>>();
      Map<Integer,Integer> income=new HashMap<Integer,Integer>();
      int k=i;
      int kx=0;
      while (k > 0) {
        if (k % 2 == 1) {
          int v=rx[kx];
          int v2=cx[kx];
          Set<Integer> integers=map.get(v);
          if (integers == null) {
            integers=new HashSet<Integer>();
            map.put(v,integers);
          }
          integers.add(v2);
          Integer idx1=income.get(v2);
          if (idx1 == null) {
            income.put(v2,1);
          }
 else {
            income.put(v2,idx1 + 1);
          }
        }
        k=k / 2;
        kx++;
      }
      Map<Integer,Integer> ways=new HashMap<Integer,Integer>();
      ways.put(0,1);
      Set<Integer> cur=new HashSet<Integer>();
      cur.add(0);
      int x=0;
      while (cur.size() > 0) {
        x++;
        if (x > 100) {
          continue inner;
        }
        Set<Integer> cs=new HashSet<Integer>();
        for (        Integer integer : cur) {
          Set<Integer> ss=map.get(integer);
          if (ss == null) {
            continue;
          }
          for (          Integer v1 : map.get(integer)) {
            Integer w1=ways.get(v1);
            if (w1 == null) {
              ways.put(v1,ways.get(integer));
            }
 else {
              ways.put(v1,w1 + ways.get(integer));
            }
            Integer inc=income.get(v1);
            if (inc == 1) {
              cs.add(v1);
            }
 else {
              income.put(v1,inc - 1);
            }
          }
        }
        cur=cs;
      }
      if (ways.get(n - 1) != null && ways.get(n - 1) == m) {
        String res=""Case #"" + ti + "": POSSIBLE"";
        printWriter.write(res + ""\n"");
        System.out.println(res);
        StringBuilder sb=new StringBuilder();
        for (int idx=0; idx < n; idx++) {
          for (int jdx=0; jdx < n; jdx++) {
            if (idx == jdx) {
              sb=sb.append(0);
            }
 else {
              sb=sb.append((map.get(idx) == null || !map.get(idx).contains(jdx)) ? 0 : 1);
            }
          }
          sb=sb.append(""\n"");
        }
        System.out.print(sb);
        printWriter.write(sb.toString());
        ok=true;
        break inner;
      }
    }
    if (!ok) {
      String res=""Case #"" + ti + "": IMPOSSIBLE"";
      printWriter.write(res + ""\n"");
      System.out.println(res);
    }
  }
  printWriter.close();
}
"
30000054,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new File(""B-large.in""));
  PrintWriter fileOut=new PrintWriter(new FileWriter(""SlidesLarge.out""));
  int T=in.nextInt();
  for (int test=1; test <= T; test++) {
    int B=in.nextInt();
    long M=in.nextLong();
    long maxB=(long)Math.pow(2,B - 2);
    if (M <= maxB) {
      fileOut.printf(""Case #%d: POSSIBLE\n"",test);
      int[][] arr=new int[B][B];
      for (int r=1; r < B; r++) {
        for (int c=0; c < B; c++) {
          if (c > r)           arr[r][c]=1;
 else           arr[r][c]=0;
        }
      }
      M--;
      arr[0][B - 1]=1;
      String bin=Long.toBinaryString(M);
      int l=bin.length();
      for (int i=0; i < l; i++) {
        if (bin.charAt(l - i - 1) == '1') {
          arr[0][B - i - 2]=1;
        }
      }
      for (int i=0; i < B; i++) {
        for (int j=0; j < B; j++) {
          fileOut.print(arr[i][j]);
        }
        fileOut.println();
      }
    }
 else {
      fileOut.printf(""Case #%d: IMPOSSIBLE\n"",test);
    }
  }
  fileOut.close();
}
"
30000055,"public static void main(String[] args){
  Scanner cin=new Scanner(System.in);
  while (cin.hasNext()) {
    int t=cin.nextInt();
    for (int i=0; i < t; i++) {
      int index=i + 1;
      long b=cin.nextLong();
      long m=cin.nextLong();
      long temp=1;
      temp=temp << (b - 2);
      if (m > temp) {
        System.out.println(""Case #"" + index + "": IMPOSSIBLE"");
      }
 else {
        System.out.println(""Case #"" + index + "": POSSIBLE"");
        long tmpM=m - 1;
        long index1=2;
        List<Long> list=new ArrayList<Long>();
        while (tmpM > 0) {
          if ((tmpM & 1) > 0) {
            list.add(index1);
          }
          tmpM=tmpM >> 1;
          index1++;
        }
        int matrix[][]=new int[60][60];
        for (int i3=1; i3 <= b; i3++) {
          for (int j=1; j < b; j++) {
            if (i3 < j) {
              matrix[i3][j]=1;
            }
 else {
              matrix[i3][j]=0;
            }
          }
        }
        for (int i1=1; i1 <= b; i1++) {
          matrix[i1][(int)b]=0;
        }
        for (int i2=0; i2 < list.size(); i2++) {
          long tmp=list.get(i2);
          matrix[(int)tmp][(int)b]=1;
        }
        matrix[1][(int)b]=1;
        for (int i4=1; i4 <= b; i4++) {
          for (int j=1; j <= b; j++) {
            if (j == b) {
              System.out.println(matrix[i4][j]);
            }
 else {
              System.out.print(matrix[i4][j]);
            }
          }
        }
      }
    }
  }
}
"
30000056,"public static void main(String[] args) throws IOException {
  B r=new B();
  int i, j, k, l;
  BufferedReader br=new BufferedReader(new FileReader(B.inFile));
  try {
    File file=new File(B.outFile);
    if (!file.exists()) {
      file.createNewFile();
    }
    FileWriter fw=new FileWriter(file.getAbsoluteFile());
    BufferedWriter bw=new BufferedWriter(fw);
    B.line=br.readLine();
    B.t=Integer.valueOf(B.line);
    B.a=new int[50][50];
    for (l=0; l < B.t; l++) {
      B.line=br.readLine();
      B.row=B.line.split(""\\s"");
      B.n=Integer.valueOf(B.row[0]);
      B.m=Long.valueOf(B.row[1]);
      for (i=0; i < B.n; i++) {
        Arrays.fill(B.a[i],0);
      }
      bw.write(""Case #"" + (l + 1) + "": "");
      if (B.m > Math.pow(2,B.n - 2)) {
        bw.write(""IMPOSSIBLE\n"");
      }
 else {
        if (B.m > 0) {
          int i1, j1, k1;
          B.a[0][B.n - 1]=1;
          B.rem=B.m;
          int pow=0;
          for (; B.rem > 0; ) {
            B.rem/=2;
            pow++;
          }
          B.rem=(long)Math.pow(2,pow - 1);
          for (i1=1; i1 < pow; i1++) {
            for (j1=i1; j1 < pow; j1++) {
              if (i1 < j1)               B.a[i1][j1]=1;
              if (j1 < B.n - 1)               B.a[j1][B.n - 1]=1;
              B.a[0][j1]=1;
            }
          }
          B.rem=B.m - (long)Math.pow(2,pow - 1);
          if (B.rem > 0) {
            B.a[0][pow]=1;
            B.a[pow][B.n - 1]=1;
            B.rem--;
            for (int step=1; B.rem > 0; step++) {
              System.out.print(B.rem % 2);
              if (B.rem % 2 == 1) {
                B.a[pow][pow - step]=1;
              }
              B.rem/=2;
            }
          }
        }
        bw.write(""POSSIBLE\n"");
        for (i=0; i < B.n; i++) {
          for (j=0; j < B.n; j++) {
            bw.write("""" + B.a[i][j]);
          }
          bw.write(""\n"");
        }
      }
    }
    bw.close();
  }
  finally {
    br.close();
  }
}
"
30000057,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int tests=sc.nextInt();
  for (int testNum=1; testNum <= tests; testNum++) {
    System.out.print(""Case #"" + testNum + "": "");
    int buildings=sc.nextInt();
    long ways=sc.nextLong();
    if (ways > Math.pow(2,buildings - 2))     System.out.println(""IMPOSSIBLE"");
 else     if (buildings == 2) {
      System.out.println(""POSSIBLE"");
      if (ways == 0)       System.out.println(""00\n00"");
 else       if (ways == 1)       System.out.println(""01\n00"");
    }
 else     if (ways == Math.pow(2,buildings - 2)) {
      System.out.println(""POSSIBLE"");
      for (int i=0; i < buildings; i++) {
        for (int j=0; j < buildings; j++) {
          if (i < j)           System.out.print(""1"");
 else           System.out.print(""0"");
        }
        System.out.println();
      }
    }
 else {
      System.out.println(""POSSIBLE"");
      int[][] edges=new int[buildings][buildings];
      for (int i=0; i < buildings - 1; i++) {
        for (int j=i + 1; j < buildings - 1; j++)         edges[i][j]=1;
      }
      for (int i=0; i < buildings - 1; i++) {
        if ((1L << i & ways) > 0)         edges[i + 1][buildings - 1]=1;
      }
      for (int i=0; i < buildings; i++) {
        for (int j=0; j < buildings; j++) {
          System.out.print(edges[i][j]);
        }
        System.out.println();
      }
    }
  }
}
"
30000058,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(new FileInputStream(inputPath));
  PrintWriter printer=new PrintWriter(new FileOutputStream(outputPath));
  int T=scanner.nextInt();
  for (int i=0; i < T; i++) {
    printer.format(""Case #%d: "",i + 1);
    int b=scanner.nextInt();
    long m=scanner.nextLong();
    int[][] map=new int[b][b];
    for (int j=1; j < b; j++) {
      for (int k=j + 1; k < b; k++) {
        map[j][k]=1;
      }
    }
    map[0][b - 1]=1;
    m--;
    long bin=1;
    for (int j=2; j < b - 1; j++) {
      bin*=2;
    }
    for (int j=1; j < b - 1; j++) {
      if (m >= bin) {
        map[0][j]=1;
        m-=bin;
      }
      bin/=2;
    }
    if (m == 0) {
      printer.println(""POSSIBLE"");
      for (int j=0; j < b; j++) {
        for (int k=0; k < b; k++) {
          printer.print(map[j][k]);
        }
        printer.println();
      }
    }
 else {
      printer.print(""IMPOSSIBLE"");
      printer.println();
    }
    printer.flush();
  }
}
"
30000059,"public static void main(String[] args) throws Exception {
  Slides object=new Slides();
  String className=object.getClass().getSimpleName();
  FileReader fileReader=new FileReader(new File(className.toLowerCase() + "".in""));
  StreamTokenizer st=new StreamTokenizer(new BufferedReader(fileReader));
  FileWriter wr=new FileWriter(className.toLowerCase() + "".out"");
  st.nextToken();
  int testCases=(int)st.nval;
  st.resetSyntax();
  st.wordChars(0,256);
  st.whitespaceChars(0,32);
  for (int tc=1; tc <= testCases; tc++) {
    System.out.println(""At test "" + tc + ""/""+ testCases);
    st.nextToken();
    int B=Integer.valueOf(st.sval);
    st.nextToken();
    long M=Long.valueOf(st.sval);
    int[][] mat=new int[B][B];
    String result1=""IMPOSSIBLE"";
    long[] row=new long[B];
    for (int i=0; i < B - 1; i++)     for (int j=0; j < B - 1; j++) {
      if (i >= j) {
        continue;
      }
      mat[i][j]=1;
    }
    row[0]=row[1]=1;
    for (int i=2; i < B - 1; i++) {
      row[i]=2 * row[i - 1];
    }
    long requested=M;
    for (int i=B - 2; i >= 0; i--) {
      if (row[i] <= requested) {
        requested-=row[i];
        mat[i][B - 1]=1;
      }
    }
    if (requested == 0) {
      result1=""POSSIBLE\n"";
      for (int i=0; i < B; i++) {
        for (int j=0; j < B; j++)         result1+=mat[i][j];
        result1+=""\n"";
      }
    }
    String result=result1;
    wr.write(""Case #"" + tc + "": ""+ result.trim()+ ""\r\n"");
  }
  wr.close();
}
"
30000060,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scanner=new Scanner(new File(""B.in""));
  PrintWriter writer=new PrintWriter(""B.out"");
  int T=scanner.nextInt();
  for (int t=0; t < T; t++) {
    int B=scanner.nextInt();
    long M=scanner.nextLong();
    long bi[]=new long[B + 1];
    long now=1, sum=now;
    bi[1]=now;
    for (int b=2; b < B; b++) {
      now=Math.min(now,M - sum);
      if (now == 0)       break;
      bi[b]=now;
      sum+=now;
      now*=2;
    }
    bi[B]=sum;
    writer.printf(""Case #%d: "",t + 1);
    if (bi[B] < M) {
      writer.println(""IMPOSSIBLE"");
    }
 else {
      writer.println(""POSSIBLE"");
      int res[][]=new int[B + 1][B + 1];
      for (int i=1; i <= B; i++) {
        sum=bi[i];
        for (int j=i - 1; j >= 1 && sum > 0; j--) {
          if (bi[j] == 0 || sum - bi[j] < 0)           continue;
          sum-=bi[j];
          res[j][i]=1;
        }
      }
      for (int i=1; i <= B; i++) {
        for (int j=1; j <= B; j++) {
          writer.print(res[i][j]);
        }
        writer.println();
      }
    }
  }
  writer.close();
}
"
30000061,"public static void main(String[] args){
  String empInput=""C:/Users/Momo/Desktop/"" + folder + ""/""+ file;
  String empOutput=""C:/Users/Momo/Desktop/"" + folder + ""/Liet-""+ contest+ ""-""+ file+ "".out"";
  try {
    toclose=new FileInputStream(empInput);
    System.setIn(toclose);
    in=new Scanner(System.in);
    out=new PrintWriter(empOutput);
  }
 catch (  Exception e) {
    System.out.println(""Ouverture"");
    e.printStackTrace();
  }
  int nbLig=in.nextInt();
  for (int lig=0; lig < nbLig; lig++) {
    int nBuild=in.nextInt();
    long nMouv=in.nextLong();
    int[][] slides=new int[nBuild][nBuild];
    if (((long)Math.pow(2,nBuild - 2)) < nMouv) {
      out.println(""Case #"" + (lig + 1) + "": ""+ ""IMPOSSIBLE"");
    }
 else {
      out.println(""Case #"" + (lig + 1) + "": ""+ ""POSSIBLE"");
      for (int i=0; i < nBuild; i++) {
        for (int j=i + 1; j < nBuild; j++) {
          if (j != nBuild - 1 || i == 0) {
            slides[i][j]=1;
          }
 else {
            slides[i][j]=(int)(((nMouv - 1) >> (i - 1)) % 2);
          }
        }
      }
      for (int i=0; i < nBuild; i++) {
        for (int j=0; j < nBuild; j++) {
          out.print(slides[i][j]);
        }
        out.println();
      }
    }
  }
  in.close();
  out.close();
  try {
    toclose.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000062,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(in.readLine());
  for (int t=0; t < T; ++t) {
    StringTokenizer st=new StringTokenizer(in.readLine());
    int B=Integer.parseInt(st.nextToken());
    long M=Long.parseLong(st.nextToken());
    long MAX=(1L << (B - 2));
    if (M > MAX)     System.out.printf(""Case #%d: IMPOSSIBLE\n"",t + 1);
 else {
      System.out.printf(""Case #%d: POSSIBLE\n"",t + 1);
      String S=Long.toBinaryString(M - 1) + ""1"";
      while (S.length() < B)       S=""0"" + S;
      System.out.println(S);
      for (int i=1; i < B - 1; ++i) {
        for (int j=0; j < B; ++j) {
          if (j <= i)           System.out.print(""0"");
 else           System.out.print(""1"");
        }
        System.out.println();
      }
      for (int i=0; i < B; ++i)       System.out.print(""0"");
      System.out.println();
    }
  }
}
"
30000063,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int casei=1; casei <= t; casei++) {
    int b=sc.nextInt();
    long m=sc.nextLong();
    long ret1=1;
    for (int i1=0; i1 < b - 2; i1++) {
      ret1*=2;
    }
    long max=ret1;
    if (m > max) {
      System.out.printf(""Case #%d: %s\n"",casei,""IMPOSSIBLE"");
    }
 else {
      System.out.printf(""Case #%d: %s\n"",casei,""POSSIBLE"");
      int[][] ret=new int[b][b];
      for (int i=1; i < b; i++) {
        for (int j=i + 1; j < b; j++) {
          ret[i][j]=1;
        }
      }
      if (m == max) {
        for (int j=1; j < b; j++) {
          ret[0][j]=1;
        }
      }
 else {
        int bit=b - 2;
        while (m > 0) {
          if (m % 2 != 0) {
            ret[0][bit]=1;
          }
          bit--;
          m/=2;
        }
      }
      for (int i=0; i < b; i++) {
        StringBuilder sb=new StringBuilder();
        for (int j=0; j < b; j++) {
          sb.append((char)('0' + ret[i][j]));
        }
        System.out.println(sb);
      }
    }
  }
  sc.close();
}
"
30000064,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int B=in.nextInt();
    Long M=in.nextLong();
    String ans="""";
    if (Math.pow(2,B - 2) < M) {
      ans=""IMPOSSIBLE"";
      System.out.printf(""Case #%d: "",t);
      System.out.println(ans);
    }
 else {
      ans=""POSSIBLE"";
      System.out.printf(""Case #%d: "",t);
      System.out.println(ans);
      String binary=Long.toBinaryString(M - 1);
      int l=binary.length();
      if (B == 2) {
        if (M == 1) {
          System.out.println(""01"");
          System.out.println(""00"");
        }
      }
 else {
        for (int i=0; i < B; i++) {
          if (i == 0) {
            String firstLine="""";
            firstLine=binary + ""1"";
            while (firstLine.length() < B) {
              firstLine=""0"" + firstLine;
            }
            System.out.print(firstLine);
          }
 else {
            for (int j=0; j < B; j++) {
              if (j <= i) {
                System.out.print(""0"");
              }
 else {
                System.out.print(""1"");
              }
            }
          }
          System.out.println();
        }
      }
    }
  }
}
"
30000065,"public static void main(String[] args){
  String in=""/Users/Moshin/Code Jam/large.in"";
  String out=""/Users/Moshin/Code Jam/large.out"";
  try {
    BufferedReader bufferedReader=new BufferedReader(new FileReader(in));
    BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(out));
    int noOfTestCases=Integer.valueOf(bufferedReader.readLine());
    for (int t=0; t < noOfTestCases; t++) {
      String bm=bufferedReader.readLine();
      int b=Integer.parseInt(bm.split("" "")[0]);
      long m=Long.parseLong(bm.split("" "")[1]);
      long tempM=m;
      long tempMax;
      String result="""";
      String first=""0"";
      for (int i=2; i < b; i++) {
        result+=first;
        for (int j=1; j < b; j++) {
          if (i <= j)           result+=""1"";
 else           result+=""0"";
        }
        result+=""\n"";
      }
      for (int j=0; j < b; j++) {
        result+=""0"";
      }
      boolean tempA[]=new boolean[b - 1];
      long maxPossible=(long)Math.pow(2,(b - 2));
      System.out.println(""  maxPossible  "" + maxPossible);
      if (b == 2 && m == 1) {
        bufferedWriter.write(""Case #"" + (t + 1) + "": ""+ ""POSSIBLE""+ ""\n"");
        bufferedWriter.write(""01"" + ""\n"");
        bufferedWriter.write(""00"" + ""\n"");
        System.out.println(""Case #"" + (t + 1) + "": ""+ ""POSSIBLE""+ ""\n"");
        System.out.println(""01"" + ""\n"");
        System.out.println(""00"" + ""\n"");
      }
 else       if (m > maxPossible) {
        bufferedWriter.write(""Case #"" + (t + 1) + "": ""+ ""IMPOSSIBLE""+ ""\n"");
        System.out.println(""Case #"" + (t + 1) + "": ""+ ""IMPOSSIBLE""+ ""\n"");
      }
 else {
        bufferedWriter.write(""Case #"" + (t + 1) + "": ""+ ""POSSIBLE""+ ""\n"");
        tempMax=maxPossible / 2;
        for (int i=0; i < (b - 1); i++) {
          if (tempM == 0)           break;
          if (tempM >= tempMax) {
            tempA[i]=true;
            tempM-=tempMax;
          }
          tempMax/=2;
        }
        String tempresult=""0"";
        for (int i=0; i < (b - 1); i++) {
          if (tempA[i]) {
            tempresult=tempresult + ""1"";
          }
 else {
            tempresult=tempresult + ""0"";
          }
        }
        result=tempresult + ""\n"" + result;
        System.out.println(result);
        bufferedWriter.write(result + ""\n"");
      }
    }
    bufferedReader.close();
    bufferedWriter.close();
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
}
"
30000066,"public static void main(String... orange) throws Exception {
  Scanner input=new Scanner(System.in);
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    int B=input.nextInt();
    long M=input.nextLong();
    if (M > (1L << (B - 2))) {
      System.out.printf(""Case #%d: IMPOSSIBLE\n"",n + 1);
      continue;
    }
    boolean[][] slides=new boolean[B][B];
    if (M == (1L << (B - 2))) {
      for (int i=0; i < B; i++)       for (int j=i + 1; j < B; j++)       slides[i][j]=true;
    }
    for (int i=0; i + 1 < B; i++)     for (int j=i + 1; j + 1 < B; j++)     slides[i][j]=true;
    for (int i=0; i + 2 < B; i++)     if ((M & (1L << i)) > 0)     slides[i + 1][B - 1]=true;
    System.out.printf(""Case #%d: POSSIBLE\n"",n + 1);
    for (int i=0; i < B; i++) {
      for (int j=0; j < B; j++)       System.out.print(slides[i][j] ? '1' : '0');
      System.out.println();
    }
  }
}
"
30000067,"public static void main(String[] args) throws Exception {
  String fileName=args[0];
  ProblemB obj=new ProblemB();
  BufferedReader br=new BufferedReader(new FileReader(fileName));
  BufferedWriter bw=new BufferedWriter(new FileWriter(fileName + "".out""));
  int T=Integer.parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    String str=br.readLine();
    StringTokenizer token=new StringTokenizer(str,"" "");
    int B=Integer.parseInt(token.nextToken());
    long M=Long.parseLong(token.nextToken());
    boolean[][] mtx=new boolean[B][B];
    for (int j=1; j < B - 1; j++) {
      for (int k=0; k < j; k++) {
        mtx[k][j]=true;
      }
    }
    for (int j=0; j < B - 2; j++) {
      if (M >= (1L << (B - j - 3))) {
        mtx[B - j - 2][B - 1]=true;
        M-=(1L << (B - j - 3));
      }
    }
    if (M >= 1) {
      mtx[0][B - 1]=true;
      M-=1;
    }
    if (M == 0) {
      bw.write(""Case #"" + (i + 1) + "": ""+ ""POSSIBLE"");
      bw.write(""\r\n"");
      for (int j=0; j < B; j++) {
        for (int k=0; k < B; k++) {
          bw.write(mtx[j][k] ? '1' : '0');
        }
        bw.write(""\r\n"");
      }
    }
 else {
      bw.write(""Case #"" + (i + 1) + "": ""+ ""IMPOSSIBLE"");
      bw.write(""\r\n"");
    }
  }
  bw.close();
  br.close();
}
"
30000068,"public static void main(String args[]) throws Exception {
  BSmall r=new BSmall();
  r.sc=new Scanner(new File(BSmall.IN));
  r.out=new BufferedWriter(new FileWriter(BSmall.OUT));
  int t=r.sc.nextInt();
  for (int i=1; i <= t; i++) {
    r.out.write(""Case #"" + i + "": "");
    int n=r.sc.nextInt();
    int k=r.sc.nextInt();
    double[] p=new double[n];
    for (int i2=0; i2 < n; i2++) {
      p[i2]=r.sc.nextDouble();
    }
    double ans=-1;
    for (int msk=0; msk < (1 << n); msk++) {
      if (Integer.bitCount(msk) != k) {
        continue;
      }
      int[] idx=new int[k + 1];
      int c=0;
      int l=0;
      while (c < n) {
        if ((msk & (1 << c)) > 0) {
          idx[l]=c;
          l++;
        }
        c++;
      }
      double[][] dp=new double[k + 1][k + 1];
      for (int i1=1; i1 <= k; i1++) {
        for (int j=0; j <= k / 2; j++) {
          if (j == 0) {
            dp[i1][j]=1;
            for (int x=0; x < i1; x++) {
              dp[i1][j]*=1 - p[idx[x]];
            }
          }
 else           if (i1 < j) {
            dp[i1][j]=0;
          }
 else           if (i1 == j) {
            dp[i1][j]=1;
            for (int x=0; x < i1; x++) {
              dp[i1][j]*=p[idx[x]];
            }
          }
 else {
            dp[i1][j]=dp[i1 - 1][j - 1] * p[idx[i1 - 1]] + dp[i1 - 1][j] * (1 - p[idx[i1 - 1]]);
          }
        }
      }
      ans=Math.max(ans,dp[k][k / 2]);
    }
    r.out.write(Double.toString(ans));
    r.out.newLine();
  }
  r.sc.close();
  r.out.close();
}
"
30000069,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int tcc=sc.nextInt();
  for (int tc=1; tc <= tcc; ++tc) {
    int n=sc.nextInt();
    int k=sc.nextInt();
    double[] p=new double[n];
    double[] pc=new double[k];
    for (int i=0; i < n; ++i)     p[i]=sc.nextDouble();
    double ans=0;
    for (int bm=0; bm < (1 << n); ++bm) {
      int bs=0;
      for (int i=0; i < n; ++i)       if ((bm & (1 << i)) > 0)       ++bs;
      if (bs != k)       continue;
      bs=0;
      for (int i=0; i < n; ++i)       if ((bm & (1 << i)) > 0)       pc[bs++]=p[i];
      double[][] comp=new double[k + 1][];
      comp[0]=new double[]{1};
      for (int i=1; i <= k; ++i) {
        comp[i]=new double[i + 1];
        double cp=pc[i - 1];
        for (int j=0; j <= i; ++j) {
          if (j != 0)           comp[i][j]+=cp * comp[i - 1][j - 1];
          if (j != i)           comp[i][j]+=(1 - cp) * comp[i - 1][j];
        }
      }
      ans=Math.max(ans,comp[k][k / 2]);
    }
    System.out.printf(""Case #%d: %.6f%n"",tc,ans);
  }
}
"
30000070,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int casei=1; casei <= t; casei++) {
    int n=sc.nextInt();
    int k=sc.nextInt();
    double[] p=new double[n];
    for (int i=0; i < n; i++) {
      p[i]=sc.nextDouble();
    }
    double max=0;
    for (int i=0; i < 0x1 << n; i++) {
      if (Integer.bitCount(i) != k) {
        continue;
      }
      List<Double> pp=new ArrayList<>();
      for (int j=0; j < n; j++) {
        if ((i & 0x1 << j) != 0) {
          pp.add(p[j]);
        }
      }
      double tmp2=0;
      for (int j=0; j < 0x1 << k; j++) {
        if (Integer.bitCount(j) != k / 2) {
          continue;
        }
        double tmp=1;
        for (int l=0; l < k; l++) {
          if ((j & 0x1 << l) == 0) {
            tmp*=(1 - pp.get(l));
          }
 else {
            tmp*=pp.get(l);
          }
        }
        tmp2+=tmp;
      }
      max=Math.max(max,tmp2);
    }
    System.out.printf(""Case #%d: %.7f\n"",casei,max);
  }
  sc.close();
}
"
30000071,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""B.in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""B.out""));
  int T=Integer.parseInt(in.readLine());
  for (int t=1; t <= T; t++) {
    StringTokenizer st=new StringTokenizer(in.readLine());
    int N=Integer.parseInt(st.nextToken());
    int K=Integer.parseInt(st.nextToken());
    st=new StringTokenizer(in.readLine());
    double[] P=new double[N];
    for (int i=0; i < N; i++)     P[i]=Double.parseDouble(st.nextToken());
    double[][] tt=new double[N][N];
    double[][] tf=new double[N][N];
    double[][] ft=new double[N][N];
    double[][] ff=new double[N][N];
    for (int i=0; i < N; i++)     for (int j=0; j < N; j++) {
      tt[i][j]=P[i] * P[j];
      tf[i][j]=P[i] * (1 - P[j]);
      ft[i][j]=(1 - P[i]) * P[j];
      ff[i][j]=(1 - P[i]) * (1 - P[j]);
    }
    double ans=0;
    for (int i=0; i < (1 << N); i++) {
      int num=0;
      for (int j=0; j < N; j++)       if ((i & (1 << j)) != 0)       num++;
      if (num == K) {
        double[] prob=new double[K + 1];
        prob[0]=1;
        for (int j=0; j < N; j++)         if ((i & (1 << j)) != 0) {
          double[] temp=new double[K + 1];
          temp[0]=prob[0] * (1 - P[j]);
          for (int a=1; a <= K; a++)           temp[a]=prob[a] * (1 - P[j]) + prob[a - 1] * P[j];
          prob=temp;
        }
        ans=Math.max(ans,prob[K / 2]);
      }
    }
    out.write(""Case #"" + t + "": "");
    out.write("""" + ans);
    out.write(""\n"");
  }
  in.close();
  out.close();
}
"
30000072,"public static void main(String[] args) throws FileNotFoundException {
  File inputFile=new File(""B-small-attempt0.in"");
  PrintWriter out=new PrintWriter(""B-small-out.txt"");
  Scanner in=new Scanner(inputFile);
  long time0=System.currentTimeMillis();
  int T=in.nextInt();
  for (int t=0; t < T; t++) {
    int N=in.nextInt();
    int K=in.nextInt();
    double[] P=new double[N];
    for (int n=0; n < N; n++) {
      P[n]=in.nextDouble();
    }
    double maxProb=0;
    for (int i=0; i < (1 << N); i++) {
      int k=0;
      for (int n=0; n < N; n++) {
        if ((i & 1 << n) != 0) {
          k++;
        }
      }
      if (k != K)       continue;
      double[] p=new double[K];
      int loc=0;
      for (int n=0; n < N; n++) {
        if ((i & 1 << n) != 0) {
          p[loc]=P[n];
          loc++;
        }
      }
      double curProb=0;
      for (int j=0; j < (1 << K); j++) {
        int yes=0;
        for (k=0; k < K; k++) {
          if ((j & 1 << k) != 0) {
            yes++;
          }
        }
        if (yes != K / 2)         continue;
        double temp=1;
        for (k=0; k < K; k++) {
          if ((j & 1 << k) != 0) {
            temp*=p[k];
          }
 else {
            temp*=(1 - p[k]);
          }
        }
        curProb+=temp;
      }
      if (curProb > maxProb)       maxProb=curProb;
    }
    out.printf(""Case #%d: %f\n"",t + 1,maxProb);
  }
  long time1=System.currentTimeMillis();
  System.out.printf(""[%dms] Nodes created.\n"",time1 - time0);
  in.close();
  out.close();
}
"
30000073,"public static void main(String[] args) throws FileNotFoundException {
  Scanner cin=new Scanner(new File(""B-large.in""));
  PrintStream cout=new PrintStream(""B-large.out"");
  int _case=0;
  for (int T=cin.nextInt(); T > 0; T--) {
    _case++;
    StringBuilder ans=new StringBuilder();
    n=cin.nextInt();
    k=cin.nextInt();
    p=new double[n];
    cand=new double[k];
    double max=0;
    for (int i=0; i < n; i++)     p[i]=cin.nextDouble();
    Arrays.sort(p);
    for (int x=0; x <= k; x++) {
      int ptr=0;
      for (int j=0; j < x; j++)       cand[ptr++]=p[j];
      for (int j=n - 1; j >= n + x - k; j--)       cand[ptr++]=p[j];
      f=new double[k][k + 1];
      f[0][0]=1 - cand[0];
      f[0][1]=cand[0];
      for (int i=1; i < k; i++)       for (int j=0; j <= k; j++) {
        f[i][j]=(1 - cand[i]) * f[i - 1][j];
        if (j > 0)         f[i][j]+=cand[i] * f[i - 1][j - 1];
      }
      max=Math.max(max,f[k - 1][k / 2]);
    }
    ans.append(String.format(""%.10f"",max));
    cout.printf(""Case #%d: %s%n"",_case,ans.toString());
  }
  cin.close();
  cout.close();
}
"
30000074,"public B(final Scanner sc){
  N=sc.nextInt();
  K=sc.nextInt();
  P=new double[N];
  for (int i=0; i < N; i++)   P[i]=sc.nextDouble();
}
"
30000075,"public static void main(String[] args) throws IOException {
  br=new BufferedReader(new InputStreamReader(System.in));
  pw=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
  int tests=Integer.parseInt(next());
  for (int test=1; test <= tests; test++) {
    pw.print(""Case #"" + test + "": "");
    int n=Integer.parseInt(next());
    int k=Integer.parseInt(next());
    double[] p=new double[n];
    for (int i=0; i < n; i++) {
      p[i]=Double.parseDouble(next());
    }
    double[] pp=new double[1 << n];
    double[] pp0=new double[1 << n];
    for (int mask=0; mask < (1 << n); mask++) {
      pp[mask]=1;
      pp0[mask]=1;
      for (int i=0; i < n; i++) {
        if ((mask & (1 << i)) != 0) {
          pp[mask]*=p[i];
          pp0[mask]*=1 - p[i];
        }
      }
    }
    double ans=0;
    for (int mask=0; mask < (1 << n); mask++) {
      if (Integer.bitCount(mask) == k) {
        double cur=0;
        for (int sub_mask=mask; sub_mask != 0; sub_mask=((sub_mask - 1) & mask)) {
          if (Integer.bitCount(sub_mask) == k / 2) {
            cur+=pp[sub_mask] * pp0[mask ^ sub_mask];
            ans=Math.max(ans,cur);
          }
        }
        ans=Math.max(ans,cur);
      }
    }
    pw.println(ans);
  }
  pw.close();
}
"
30000076,"public static void main(String[] args){
  Locale.setDefault(Locale.US);
  in=new Scanner(System.in);
  out=new PrintWriter(System.out);
  int tn=in.nextInt();
  for (int test=1; test <= tn; test++) {
    int n=in.nextInt();
    int k=in.nextInt();
    double[] q=new double[n];
    for (int i=0; i < n; i++) {
      q[i]=in.nextDouble();
    }
    double r=0.0;
    for (int m=0; m < (1 << n); m++) {
      if (Integer.bitCount(m) != k)       continue;
      double[][] p=new double[2][k + 1];
      p[0][0]=1.0;
      int cnt=0;
      for (int i=0; i < n; i++) {
        if ((m & (1 << i)) == 0)         continue;
        Arrays.fill(p[(cnt & 1) ^ 1],0.0);
        for (int j=0; j < k; j++) {
          p[(cnt & 1) ^ 1][j]+=(1.0 - q[i]) * p[cnt & 1][j];
          p[(cnt & 1) ^ 1][j + 1]+=q[i] * p[cnt & 1][j];
        }
        cnt++;
      }
      r=Math.max(r,p[cnt & 1][k / 2]);
    }
    out.println(""Case #"" + test + "": ""+ r);
  }
  out.close();
}
"
30000077,"public static void main(String args[]) throws IOException {
  FileInputStream in=null;
  PrintWriter out=null;
  try {
    in=new FileInputStream(""B-large.in"");
    out=new PrintWriter(""B-large.output"");
    Scanner sc=new Scanner(in);
    String line=sc.nextLine();
    int T=Integer.parseInt(line);
    for (int t=1; t <= T; t++) {
      String output=""Case #"" + t + "":"";
      line=sc.nextLine();
      int n=Integer.parseInt(line.split("" "")[0]);
      int k=Integer.parseInt(line.split("" "")[1]);
      Vector<Double> input=new Vector<Double>();
      line=sc.nextLine();
      for (int i=0; i < n; ++i) {
        input.add(Double.parseDouble(line.split("" "")[i]));
      }
      Collections.sort(input);
      Vector<Double> temp=new Vector<Double>();
      double answer=0.0;
      for (int i=0; i <= k; ++i) {
        for (int j=0; j < i; ++j) {
          temp.add(input.elementAt(j));
        }
        for (int j=0; j < k - i; ++j) {
          temp.add(input.elementAt(n - j - 1));
        }
        Vector<Vector<Double>> memo=new Vector<Vector<Double>>();
        for (int j=0; j < k; ++j) {
          Vector<Double> subMemo=new Vector<Double>();
          for (int jj=0; jj <= k + 1; jj++) {
            subMemo.add(jj,0.0);
          }
          memo.add(subMemo);
        }
        memo.elementAt(0).set(0,1.0);
        for (int j=0; j < k; ++j) {
          for (int x=0; x <= j + 1; ++x) {
            if (j == 0) {
              memo.elementAt(j).set(0,1 - temp.elementAt(j));
              memo.elementAt(j).set(1,temp.elementAt(j));
            }
 else             if (x == 0) {
              double val=memo.elementAt(j).elementAt(x);
              val+=(1 - temp.elementAt(j)) * memo.elementAt(j - 1).elementAt(x);
              memo.elementAt(j).set(x,val);
            }
 else {
              double val=memo.elementAt(j).elementAt(x);
              val+=(1 - temp.elementAt(j)) * memo.elementAt(j - 1).elementAt(x);
              val+=(temp.elementAt(j) * memo.elementAt(j - 1).elementAt(x - 1));
              memo.elementAt(j).set(x,val);
            }
          }
        }
        temp.clear();
        if (answer < memo.elementAt(k - 1).elementAt(k / 2))         answer=memo.elementAt(k - 1).elementAt(k / 2);
      }
      output+="" "" + answer;
      out.println(output);
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
}
"
30000078,"public static void main(String[] args) throws IOException {
  Scanner input=new Scanner(new File(""input.txt""));
  PrintWriter out=new PrintWriter(new File(""output.txt""));
  int max=input.nextInt();
  for (int c=1; c <= max; c++) {
    int size=input.nextInt();
    int comm=input.nextInt();
    double[] arr=new double[size];
    for (int j=0; j < size; j++)     arr[j]=input.nextDouble();
    Arrays.sort(arr);
    double maxV=0;
    for (int cut=0; cut <= comm; cut++) {
      double[] a=new double[comm];
      for (int j=0; j < cut; j++)       a[j]=arr[j];
      for (int j=0; j < comm - cut; j++)       a[j + cut]=arr[size - j - 1];
      double[][] prob=new double[201][201];
      int tie=100;
      prob[0][tie - 1]=a[0];
      prob[0][tie + 1]=1 - a[0];
      for (int i=1; i < comm; i++)       for (int j=tie - i - 1; j <= tie + i + 1; j++)       if (j > 0 && j < 200)       prob[i][j]=prob[i - 1][j + 1] * a[i] + prob[i - 1][j - 1] * (1 - a[i]);
      maxV=Math.max(maxV,prob[comm - 1][tie]);
    }
    out.printf(""Case #%d: %.10f%n"",c,maxV);
  }
  out.close();
}
"
30000079,"public static void main(String[] args){
  Scanner stdin=new Scanner(System.in);
  int numCases=stdin.nextInt();
  for (int loop=1; loop <= numCases; loop++) {
    int n=stdin.nextInt();
    int k=stdin.nextInt();
    double[] p=new double[n];
    for (int i=0; i < n; i++)     p[i]=stdin.nextDouble();
    double res=0;
    for (int i=1; i < (1 << n); i++) {
      if (Integer.bitCount(i) != k)       continue;
      double tmp=0;
      for (int mask=i; mask > 0; mask=((mask - 1) & i)) {
        if (Integer.bitCount(mask) != k / 2)         continue;
        double thisP=1;
        for (int j=0; j < n; j++) {
          if ((mask & (1 << j)) > 0)           thisP=thisP * p[j];
 else           if ((i & (1 << j)) > 0)           thisP=thisP * (1 - p[j]);
        }
        tmp+=thisP;
      }
      res=Math.max(res,tmp);
    }
    System.out.printf(""Case #%d: %.9f\n"",loop,res);
  }
}
"
30000080,"public B(Scanner s){
  scan=s;
}
"
30000081,"public static void main(String[] args) throws Exception {
  String fileName=args[0];
  ProblemB obj=new ProblemB();
  BufferedReader br=new BufferedReader(new InputStreamReader(obj.getClass().getResourceAsStream(fileName)));
  int sfx=fileName.indexOf('.');
  BufferedWriter bw=new BufferedWriter(new FileWriter(""./src/"" + fileName.substring(0,sfx) + "".out""));
  int T=Integer.parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    String str=br.readLine();
    StringTokenizer token=new StringTokenizer(str,"" "");
    int N=Integer.parseInt(token.nextToken());
    int K=Integer.parseInt(token.nextToken());
    double[] P=new double[N];
    str=br.readLine();
    token=new StringTokenizer(str,"" "");
    for (int j=0; j < N; j++) {
      P[j]=Double.parseDouble(token.nextToken());
    }
    Arrays.sort(P);
    double ans=0.0;
    for (int s=0; s <= N - K; s++) {
      for (int e=0; e <= N - K - s; e++) {
        for (int a=0; a <= K; a++) {
          double[][] dp=new double[2][K + 1];
          dp[1][0]=1.0;
          for (int k=0; k < a; k++) {
            double p=P[k + s];
            for (int j=0; j <= k + 1; j++) {
              dp[k % 2][j]=dp[(k + 1) % 2][j] * (1 - p);
              if (j != 0) {
                dp[k % 2][j]+=dp[(k + 1) % 2][j - 1] * p;
              }
            }
          }
          for (int k=a; k < K; k++) {
            double p=P[N - (k - a) - 1- e];
            for (int j=0; j <= k + 1; j++) {
              dp[k % 2][j]=dp[(k + 1) % 2][j] * (1 - p);
              if (j != 0) {
                dp[k % 2][j]+=dp[(k + 1) % 2][j - 1] * p;
              }
            }
          }
          ans=Math.max(ans,dp[1][K / 2]);
        }
      }
    }
    DecimalFormat ft=new DecimalFormat(""0.000000000"");
    bw.write(""Case #"" + (i + 1) + "": ""+ ft.format(ans));
    bw.write(""\r\n"");
  }
  bw.close();
  br.close();
}
"
30000082,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(""src/B-large.in""))));
  String output="""";
  int t=sc.nextInt();
  sc.nextLine();
  for (int i=1; i <= t; i++) {
    int n=sc.nextInt();
    int k=sc.nextInt();
    double[] p=new double[n];
    for (int j=0; j < n; j++)     p[j]=sc.nextDouble();
    Arrays.sort(p);
    double max=0;
    for (int j=0; j <= k; j++) {
      double[][] dp=new double[k + 1][k + 1];
      dp[0][0]=1;
      for (int a=0; a < j; a++) {
        dp[a + 1][0]+=dp[a][0] * (1 - p[a]);
        dp[a + 1][a + 1]+=dp[a][a] * p[a];
        for (int b=1; b <= a; b++) {
          dp[a + 1][b]+=dp[a][b] * (1 - p[a]);
          dp[a + 1][b]+=dp[a][b - 1] * p[a];
        }
      }
      for (int a=j; a < k; a++) {
        dp[a + 1][0]+=dp[a][0] * (1 - p[n - (a - j) - 1]);
        dp[a + 1][a + 1]+=dp[a][a] * p[n - (a - j) - 1];
        for (int b=1; b <= a; b++) {
          dp[a + 1][b]+=dp[a][b] * (1 - p[n - (a - j) - 1]);
          dp[a + 1][b]+=dp[a][b - 1] * p[n - (a - j) - 1];
        }
      }
      if (dp[k][k / 2] > max)       max=dp[k][k / 2];
    }
    output+=""Case #"" + i + "": ""+ max+ ""\n"";
  }
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""src/B-large.out""),""utf-8""));
  bw.write(output);
  bw.close();
}
"
30000083,"public static void main(String[] args) throws Exception {
  Locale.setDefault(Locale.ENGLISH);
  File inputFile=new File(""B-small-attempt0.in"");
  Scanner in=new Scanner(inputFile);
  File outputFile=new File(""output.txt"");
  PrintWriter out=new PrintWriter(outputFile);
  int T=in.nextInt();
  for (int t=0; t < T; t++) {
    int N=in.nextInt();
    int K=in.nextInt();
    double[] P=new double[N];
    for (int n=0; n < N; n++) {
      P[n]=in.nextDouble();
    }
    double best=0;
    int limit=1 << N;
    for (int mask=0; mask < limit; mask++) {
      if (Integer.bitCount(mask) == K) {
        int bits[]=new int[K];
        int next=0;
        for (int i=0; i < N; i++) {
          if ((mask & (1 << i)) != 0) {
            bits[next++]=i;
          }
        }
        double pst=0;
        int limit2=1 << K;
        for (int m=0; m < limit2; m++) {
          if (Integer.bitCount(m) == K / 2) {
            double p=1;
            for (int k=0; k < K; k++) {
              if ((m & (1 << k)) != 0) {
                p*=P[bits[k]];
              }
 else {
                p*=1 - P[bits[k]];
              }
            }
            pst+=p;
          }
        }
        best=Math.max(best,pst);
      }
    }
    out.println(""Case #"" + (t + 1) + "": ""+ best);
  }
  out.close();
}
"
30000084,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""BL.in""));
  PrintWriter out=new PrintWriter(""BL.out"");
  int tc=in.nextInt();
  for (int cc=1; cc <= tc; cc++) {
    int n=in.nextInt();
    int k=in.nextInt();
    double[] p=new double[n];
    for (int i=0; i < n; i++) {
      p[i]=in.nextDouble();
    }
    Arrays.sort(p);
    double result2=0;
    for (int i=0; i <= k; i++) {
      double[] dp=new double[k + 1];
      dp[0]=1;
      for (int j=0; j < i; j++) {
        for (int m=k; m >= 0; m--) {
          dp[m]=dp[m] * p[j] + (m == 0 ? 0 : dp[m - 1] * (1 - p[j]));
        }
      }
      for (int j=n - (k - i); j < n; j++) {
        for (int m=k; m >= 0; m--) {
          dp[m]=dp[m] * p[j] + (m == 0 ? 0 : dp[m - 1] * (1 - p[j]));
        }
      }
      result2=Math.max(result2,dp[k / 2]);
    }
    System.out.printf(""Case #%d: %.8f\n"",cc,result2);
    out.printf(""Case #%d: %.8f\n"",cc,result2);
  }
  out.close();
}
"
30000085,"public static void main(String[] args) throws IOException {
  br=new BufferedReader(new InputStreamReader(System.in));
  out=new PrintWriter(new OutputStreamWriter(System.out));
  br=new BufferedReader(new FileReader(""in.txt""));
  out=new PrintWriter(new FileWriter(""out.txt""));
  T=Integer.parseInt(next());
  for (int t=1; t <= T; t++) {
    System.out.println(t);
    N=Integer.parseInt(next());
    K=Integer.parseInt(next());
    prob=new double[N];
    for (int i=0; i < N; i++)     prob[i]=Double.parseDouble(next());
    double ans=0;
    for (int i=0; i < 1 << N; i++) {
      int sz=0;
      for (int j=0; j < N; j++) {
        if ((i & 1 << j) > 0)         sz++;
      }
      if (sz == K) {
        double total=0;
        for (int j=0; j < 1 << N; j++) {
          if ((i & j) == j) {
            int sz2=0;
            double currProb=1;
            for (int k=0; k < N; k++) {
              if ((j & 1 << k) > 0) {
                sz2++;
                currProb*=prob[k];
              }
 else               if ((i & 1 << k) > 0) {
                currProb*=(1 - prob[k]);
              }
            }
            if (sz2 == K / 2)             total+=currProb;
          }
        }
        ans=Math.max(ans,total);
      }
    }
    out.printf(""Case #%d: %f\n"",t,ans);
  }
  out.close();
}
"
30000086,"public static void main(String[] args) throws IOException {
  B r=new B();
  r.in=new Scanner(new File(""B.in""));
  r.out=new PrintWriter(""B.out"");
  int t=r.in.nextInt();
  for (int i=1; i <= t; i++) {
    System.err.println(i);
    r.out.print(""Case #"" + i + "": "");
    int n=r.in.nextInt(), k=r.in.nextInt();
    double[] a=new double[n];
    for (int i1=0; i1 < n; i1++) {
      a[i1]=Double.parseDouble(r.in.next());
    }
    Arrays.sort(a);
    double[][] perF=new double[n + 1][2 * n + 1];
    double[][] perB=new double[n + 1][2 * n + 1];
    perF[0][n]=1;
    perB[0][n]=1;
    for (int i2=1; i2 <= n; i2++) {
      for (int j=0; j < 2 * n + 1; j++) {
        if (j > 0) {
          perF[i2][j]+=perF[i2 - 1][j - 1] * a[i2 - 1];
          perB[i2][j]+=perB[i2 - 1][j - 1] * a[n - i2];
        }
        if (j < 2 * n) {
          perF[i2][j]+=perF[i2 - 1][j + 1] * (1 - a[i2 - 1]);
          perB[i2][j]+=perB[i2 - 1][j + 1] * (1 - a[n - i2]);
        }
      }
    }
    double ans=0;
    for (int t1=0; t1 <= k; t1++) {
      double cand=0;
      for (int bal=-t1; bal <= t1; bal++) {
        int i11=n + bal;
        int i2=n - bal;
        if (i2 >= 0 && i2 <= 2 * n) {
          cand+=perF[t1][i11] * perB[k - t1][i2];
        }
      }
      ans=Math.max(ans,cand);
    }
    Locale.setDefault(Locale.US);
    r.out.printf(""%.9f"",ans);
    r.out.println();
  }
  r.in.close();
  r.out.close();
}
"
30000087,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numCases=sc.nextInt();
  for (int caseNum=1; caseNum <= numCases; caseNum++) {
    int N=sc.nextInt();
    int K=sc.nextInt();
    double[] p=new double[N];
    for (int i=0; i < N; i++) {
      p[i]=sc.nextDouble();
    }
    double best=0;
    for (long mask=0; mask < (1 << N); mask++) {
      if (Long.bitCount(mask) != K) {
        continue;
      }
      double total=0;
      for (long yesMask=mask; yesMask != 0; yesMask=((yesMask - 1) & mask)) {
        if (Long.bitCount(yesMask) != K / 2) {
          continue;
        }
        double prob=1;
        for (int i=0; i < N; i++) {
          if ((yesMask & (1 << i)) != 0) {
            prob*=p[i];
          }
 else           if ((mask & (1 << i)) != 0) {
            prob*=(1 - p[i]);
          }
        }
        total+=prob;
      }
      best=Math.max(total,best);
    }
    System.out.print(""Case #"" + caseNum + "": "");
    System.out.println(best);
  }
  sc.close();
}
"
30000088,"public static void main(String args[]) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int test=Integer.parseInt(in.readLine());
  for (int t=1; t <= test; t++) {
    StringTokenizer st=new StringTokenizer(in.readLine());
    String first=st.nextToken();
    String second=st.nextToken();
    int diff=Integer.MAX_VALUE;
    String ans1="""";
    String ans2="""";
    for (int i=0; i < 1000; i++) {
      String a1="""" + i;
      while (a1.length() < first.length()) {
        a1=""0"" + a1;
      }
      boolean correct=a1.length() == first.length();
      if (correct)       for (int k=0; k < first.length(); k++) {
        if (first.charAt(k) != '?' && first.charAt(k) != a1.charAt(k)) {
          correct=false;
          break;
        }
      }
      if (correct)       for (int j=0; j < 1000; j++) {
        if (Math.abs(i - j) < diff || (Math.abs(i - j) == diff && a1.compareTo(ans1) < 0)) {
          String b1="""" + j;
          while (b1.length() < first.length()) {
            b1=""0"" + b1;
          }
          correct=b1.length() == first.length();
          if (correct)           for (int k=0; k < first.length(); k++) {
            if (second.charAt(k) != '?' && second.charAt(k) != b1.charAt(k)) {
              correct=false;
              break;
            }
          }
          if (correct) {
            diff=Math.abs(i - j);
            ans1=a1;
            ans2=b1;
          }
        }
      }
    }
    System.out.println(""Case #"" + t + "": ""+ ans1+ "" ""+ ans2);
  }
  in.close();
}
"
30000089,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int cases=input.nextInt();
  input.nextLine();
  for (int c=0; c < cases; c++) {
    int bestD=Integer.MAX_VALUE;
    int bestX=0;
    int bestY=0;
    String a=input.next().replaceAll(""\\?"",""\\."");
    String b=input.next().replaceAll(""\\?"",""\\."");
    int n=a.length();
    String fmt=""%0"" + n + ""d"";
    Pattern pa=Pattern.compile(a);
    Pattern pb=Pattern.compile(b);
    for (int x=0; x < 1000; x++) {
      for (int y=0; y < 1000; y++) {
        String sx=Integer.toString(x);
        while (sx.length() < n)         sx=""0"" + sx;
        String sy=Integer.toString(y);
        while (sy.length() < n)         sy=""0"" + sy;
        Matcher ma=pa.matcher(sx);
        Matcher mb=pb.matcher(sy);
        if (ma.matches() && mb.matches()) {
          int d=Math.abs(x - y);
          if (d < bestD) {
            bestD=d;
            bestX=x;
            bestY=y;
          }
        }
      }
    }
    System.out.println(String.format(""Case #%d: "" + fmt + "" ""+ fmt,c + 1,bestX,bestY));
  }
}
"
30000090,"public static void main(String[] args) throws Exception {
  Scanner scan=new Scanner(System.in);
  int nCases=scan.nextInt();
  for (int z=0; z < nCases; z++) {
    String a=scan.next(), b=scan.next();
    int len=a.length();
    int[] digits=new int[2 * len];
    ArrayList<Integer> questionPos=new ArrayList<Integer>();
    for (int i=0; i < len; i++) {
      int aPos=len - 1 - i + len, bPos=len - 1 - i;
      if (a.charAt(i) != '?') {
        digits[aPos]=a.charAt(i) - '0';
      }
 else {
        questionPos.add(aPos);
      }
      if (b.charAt(i) != '?') {
        digits[bPos]=b.charAt(i) - '0';
      }
 else {
        questionPos.add(bPos);
      }
    }
    Collections.sort(questionPos);
    int nQuestions=questionPos.size();
    int[] questions=new int[nQuestions];
    int bestDiff=9999;
    int bestX=-1, bestY=-1;
    outer:     while (true) {
      for (int i=0; i < nQuestions; i++) {
        digits[questionPos.get(i)]=questions[i];
      }
      int x=0, y=0, place=1;
      for (int i=0; i < len; i++) {
        x+=digits[i + len] * place;
        y+=digits[i] * place;
        place*=10;
      }
      if (Math.abs(x - y) < bestDiff) {
        bestDiff=Math.abs(x - y);
        bestX=x;
        bestY=y;
      }
      questions[0]++;
      for (int i=0; questions[i] == 10; i++) {
        if (i == nQuestions - 1) {
          break outer;
        }
        questions[i]=0;
        questions[i + 1]++;
      }
    }
    String temp=""%0"" + len + ""d"";
    System.out.printf(""Case #%d: "" + temp + "" ""+ temp+ ""\n"",z + 1,bestX,bestY);
  }
  scan.close();
}
"
30000091,"public static void main(String args[]){
  try (BufferedReader reader=new BufferedReader(new FileReader(""B-large.in""))){
    int T=Integer.parseInt(reader.readLine());
    String s;
    for (int t=1; t <= T; t++) {
      s=reader.readLine();
      String a=s.split("" "")[0];
      String b=s.split("" "")[1];
      String a2=a;
      String b2=b;
      if (a.equals(b)) {
        a=a.replace('?','0');
        b=a;
        System.out.println(""Case #"" + t + "": ""+ a+ "" ""+ b);
      }
 else {
        ArrayList<String> as=new ArrayList<String>();
        ArrayList<String> bs=new ArrayList<String>();
        int po=0;
        while (a.indexOf(""?"") != -1 || b.indexOf(""?"") != -1) {
          if (a.charAt(po) == '?' && b.charAt(po) == '?') {
            as.add(a.replaceFirst(""\\?"",""1"").replaceAll(""\\?"",""0""));
            bs.add(b.replaceFirst(""\\?"",""0"").replaceAll(""\\?"",""9""));
            bs.add(b.replaceFirst(""\\?"",""1"").replaceAll(""\\?"",""0""));
            as.add(a.replaceFirst(""\\?"",""0"").replaceAll(""\\?"",""9""));
            a=a.replaceFirst(""\\?"",""0"");
            b=b.replaceFirst(""\\?"",""0"");
          }
 else           if (a.charAt(po) == '?') {
            StringBuilder sb=new StringBuilder();
            sb.append(b.charAt(po));
            int bv=Integer.parseInt(sb.toString());
            if (bv < 9) {
              as.add(a.replaceFirst(""\\?"","""" + (bv + 1)).replaceAll(""\\?"",""0""));
              bs.add(b.replaceAll(""\\?"",""9""));
            }
            if (bv > 0) {
              bs.add(b.replaceAll(""\\?"",""0""));
              as.add(a.replaceFirst(""\\?"","""" + (bv - 1)).replaceAll(""\\?"",""9""));
            }
            a=a.replaceFirst(""\\?"","""" + bv);
          }
 else           if (b.charAt(po) == '?') {
            StringBuilder sb=new StringBuilder();
            sb.append(a.charAt(po));
            int av=Integer.parseInt(sb.toString());
            if (av < 9) {
              bs.add(b.replaceFirst(""\\?"","""" + (av + 1)).replaceAll(""\\?"",""0""));
              as.add(a.replaceAll(""\\?"",""9""));
            }
            if (av > 0) {
              as.add(a.replaceAll(""\\?"",""0""));
              bs.add(b.replaceFirst(""\\?"","""" + (av - 1)).replaceAll(""\\?"",""9""));
            }
            b=b.replaceFirst(""\\?"","""" + av);
          }
 else {
            if (a.charAt(po) > b.charAt(po)) {
              as.add(a.replaceAll(""\\?"",""0""));
              bs.add(b.replaceAll(""\\?"",""9""));
            }
            if (a.charAt(po) < b.charAt(po)) {
              bs.add(b.replaceAll(""\\?"",""0""));
              as.add(a.replaceAll(""\\?"",""9""));
            }
          }
          po++;
        }
        as.add(a);
        bs.add(b);
        int mini=0;
        long min2=Long.MAX_VALUE;
        long minav=Long.MAX_VALUE;
        long minbv=Long.MAX_VALUE;
        for (int i=0; i < as.size(); i++) {
          long av=Long.parseLong(as.get(i));
          long bv=Long.parseLong(bs.get(i));
          long diff=Math.abs(Long.parseLong(as.get(i)) - Long.parseLong(bs.get(i)));
          if (diff < min2) {
            min2=diff;
            mini=i;
            minav=av;
            minbv=bv;
          }
 else           if (diff == min2) {
            if (av < minav) {
              min2=diff;
              mini=i;
              minav=av;
              minbv=bv;
            }
 else             if (av == minav) {
              if (bv < minbv) {
                min2=diff;
                mini=i;
                minav=av;
                minbv=bv;
              }
            }
          }
        }
        System.out.println(""Case #"" + t + "": ""+ as.get(mini)+ "" ""+ bs.get(mini));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
  }
}
"
30000092,"public static void main(String[] args) throws IOException {
  Scanner input=new Scanner(new File(args[0]));
  PrintWriter output=new PrintWriter(new File(args[1]));
  int t=input.nextInt();
  input.nextLine();
  for (int i=0; i < t; ++i) {
    String[] scores=input.nextLine().trim().split(""\\s+"");
    String closestMatch=closestMatch(scores[0].toCharArray(),scores[1].toCharArray());
    output.printf(""Case #%d: %s%n"",(i + 1),closestMatch);
    ;
  }
  input.close();
  output.close();
}
"
30000093,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; ++t) {
    String s1=new StringBuilder(in.next()).reverse().toString();
    String s2=new StringBuilder(in.next()).reverse().toString();
    String res1="""";
    String res2="""";
    int diff=1000;
    int minc=1000;
    int mino=1000;
    for (int a1=0; a1 < 10; ++a1) {
      if (s1.length() == 3 && s1.charAt(2) != '?' && s1.charAt(2) != '0' + a1)       continue;
      for (int a2=0; a2 < 10; ++a2) {
        if (s1.length() >= 2 && s1.charAt(1) != '?' && s1.charAt(1) != '0' + a2)         continue;
        for (int a3=0; a3 < 10; ++a3) {
          if (s1.charAt(0) != '?' && s1.charAt(0) != '0' + a3)           continue;
          StringBuilder ss1=new StringBuilder();
          ss1.append((char)('0' + a3));
          if (s1.length() >= 2)           ss1.append((char)('0' + a2));
          if (s1.length() == 3)           ss1.append((char)('0' + a1));
          ss1.reverse();
          for (int a4=0; a4 < 10; ++a4) {
            if (s2.length() == 3 && s2.charAt(2) != '?' && s2.charAt(2) != '0' + a4)             continue;
            for (int a5=0; a5 < 10; ++a5) {
              if (s2.length() >= 2 && s2.charAt(1) != '?' && s2.charAt(1) != '0' + a5)               continue;
              for (int a6=0; a6 < 10; ++a6) {
                if (s2.charAt(0) != '?' && s2.charAt(0) != '0' + a6)                 continue;
                StringBuilder ss2=new StringBuilder();
                ss2.append((char)('0' + a6));
                if (s2.length() >= 2)                 ss2.append((char)('0' + a5));
                if (s2.length() == 3)                 ss2.append((char)('0' + a4));
                ss2.reverse();
                int score1=Integer.parseInt(ss1.toString());
                int score2=Integer.parseInt(ss2.toString());
                int curdiff=Math.abs(score1 - score2);
                if (curdiff < diff) {
                  res1=ss1.toString();
                  res2=ss2.toString();
                  diff=curdiff;
                  minc=score1;
                  mino=score2;
                }
 else                 if (curdiff == diff) {
                  if (score1 < minc || (score1 == minc && score2 < mino)) {
                    res1=ss1.toString();
                    res2=ss2.toString();
                    diff=curdiff;
                    minc=score1;
                    mino=score2;
                  }
                }
              }
            }
          }
        }
      }
    }
    System.out.println(""Case #"" + t + "": ""+ res1+ "" ""+ res2);
  }
}
"
30000094,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""B-small-attempt0.in""));
  PrintWriter out=new PrintWriter(""out.txt"");
  int t=in.nextInt();
  for (int cases=1; cases <= t; cases++) {
    String q=in.next();
    int len=q.length();
    String c=""00"" + q;
    String j=""00"" + in.next();
    c=c.substring(c.length() - 3);
    j=j.substring(j.length() - 3);
    int cRes=(c.charAt(0) == '?' ? 0 : (int)c.charAt(0) - (int)'0') * 100 + (c.charAt(1) == '?' ? 0 : (int)c.charAt(1) - (int)'0') * 10 + (c.charAt(2) == '?' ? 0 : (int)c.charAt(2) - (int)'0');
    int jRes=(j.charAt(0) == '?' ? 0 : (int)j.charAt(0) - (int)'0') * 100 + (j.charAt(1) == '?' ? 0 : (int)j.charAt(1) - (int)'0') * 10 + (j.charAt(2) == '?' ? 0 : (int)j.charAt(2) - (int)'0');
    int[] m=new int[6];
    for (int i=0; i < c.length(); i++) {
      if (c.charAt(i) == '?') {
        m[i]=9;
      }
    }
    for (int i=0; i < j.length(); i++) {
      if (j.charAt(i) == '?') {
        m[i + 3]=9;
      }
    }
    for (int c1=0; c1 <= m[0]; c1++) {
      for (int c2=0; c2 <= m[1]; c2++) {
        for (int c3=0; c3 <= m[2]; c3++) {
          for (int j1=0; j1 <= m[3]; j1++) {
            for (int j2=0; j2 <= m[4]; j2++) {
              for (int j3=0; j3 <= m[5]; j3++) {
                int curC=(c.charAt(0) == '?' ? c1 : (int)c.charAt(0) - (int)'0') * 100 + (c.charAt(1) == '?' ? c2 : (int)c.charAt(1) - (int)'0') * 10 + (c.charAt(2) == '?' ? c3 : (int)c.charAt(2) - (int)'0');
                int curJ=(j.charAt(0) == '?' ? j1 : (int)j.charAt(0) - (int)'0') * 100 + (j.charAt(1) == '?' ? j2 : (int)j.charAt(1) - (int)'0') * 10 + (j.charAt(2) == '?' ? j3 : (int)j.charAt(2) - (int)'0');
                if (Math.abs(curC - curJ) < Math.abs(cRes - jRes) || (Math.abs(curC - curJ) == Math.abs(cRes - jRes) && (curC < cRes || (curC == cRes && curJ < jRes)))) {
                  cRes=curC;
                  jRes=curJ;
                }
              }
            }
          }
        }
      }
    }
    String cS=""00"" + Integer.toString(cRes);
    String jS=""00"" + Integer.toString(jRes);
    String res=cS.substring(cS.length() - len) + "" "" + jS.substring(jS.length() - len);
    out.println(""Case #"" + cases + "": ""+ res);
  }
  out.close();
}
"
30000095,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(System.in);
  PrintWriter out=new PrintWriter(new File(""B.out""));
  for (int t=Integer.valueOf(in.nextLine()), cs=1; t > 0; t--, cs++) {
    out.print(""Case #"" + cs + "": "");
    String[] s=in.nextLine().split("" +"");
    char[] a=s[0].toCharArray();
    char[] b=s[1].toCharArray();
    int n=a.length;
    int p=-1;
    for (int i=0; i < n && p == -1; i++) {
      if (a[i] != '?' && b[i] != '?' && a[i] != b[i]) {
        p=i;
      }
    }
    if (p == -1) {
      for (int i=0; i < n; i++) {
        if (a[i] == '?' && b[i] == '?') {
          a[i]=b[i]='0';
        }
 else         if (a[i] == '?') {
          a[i]=b[i];
        }
 else         if (b[i] == '?') {
          b[i]=a[i];
        }
      }
      out.println(String.valueOf(a) + "" "" + String.valueOf(b));
      continue;
    }
    int q=-1;
    for (int i=p - 1; i >= 0 && q == -1; i--) {
      if (a[i] == '?' || b[i] == '?') {
        q=i;
      }
    }
    if (q == -1) {
      boolean gr=a[p] > b[p];
      for (int i=0; i < n; i++) {
        if (a[i] == '?') {
          a[i]=gr ? '0' : '9';
        }
        if (b[i] == '?') {
          b[i]=gr ? '9' : '0';
        }
      }
      out.println(String.valueOf(a) + "" "" + String.valueOf(b));
      continue;
    }
    boolean gr=a[p] > b[p];
    char[] c1=Arrays.copyOf(a,n);
    char[] d1=Arrays.copyOf(b,n);
    for (int i1=0; i1 < p; i1++) {
      if (c1[i1] == '?' && d1[i1] == '?') {
        c1[i1]=d1[i1]='0';
      }
 else       if (c1[i1] == '?') {
        c1[i1]=d1[i1];
      }
 else       if (d1[i1] == '?') {
        d1[i1]=c1[i1];
      }
    }
    for (int i2=p + 1; i2 < c1.length; i2++) {
      if (c1[i2] == '?') {
        c1[i2]=gr ? '0' : '9';
      }
      if (d1[i2] == '?') {
        d1[i2]=gr ? '9' : '0';
      }
    }
    long ans1=Math.abs(Long.valueOf(String.valueOf(c1)) - Long.valueOf(String.valueOf(d1)));
    for (int i=q; i >= 0; i--) {
      if (a[i] != '?' && b[i] != '?') {
        continue;
      }
      char[] c2=Arrays.copyOf(a,n);
      char[] d2=Arrays.copyOf(b,n);
      if (gr) {
        if (c2[i] == '9' || d2[i] == '0') {
          continue;
        }
        if (c2[i] == '?' && d2[i] == '?') {
          c2[i]='0';
          d2[i]='1';
        }
 else         if (c2[i] == '?') {
          c2[i]=(char)(d2[i] - 1);
        }
 else         if (d2[i] == '?') {
          d2[i]=(char)(c2[i] + 1);
        }
      }
 else {
        if (c2[i] == '0' || d2[i] == '9') {
          continue;
        }
        if (c2[i] == '?' && d2[i] == '?') {
          c2[i]='1';
          d2[i]='0';
        }
 else         if (c2[i] == '?') {
          c2[i]=(char)(d2[i] + 1);
        }
 else         if (d2[i] == '?') {
          d2[i]=(char)(c2[i] - 1);
        }
      }
      boolean gr1=!gr;
      for (int i3=0; i3 < i; i3++) {
        if (c2[i3] == '?' && d2[i3] == '?') {
          c2[i3]=d2[i3]='0';
        }
 else         if (c2[i3] == '?') {
          c2[i3]=d2[i3];
        }
 else         if (d2[i3] == '?') {
          d2[i3]=c2[i3];
        }
      }
      for (int i4=i + 1; i4 < c2.length; i4++) {
        if (c2[i4] == '?') {
          c2[i4]=gr1 ? '0' : '9';
        }
        if (d2[i4] == '?') {
          d2[i4]=gr1 ? '9' : '0';
        }
      }
      long ans2=Math.abs(Long.valueOf(String.valueOf(c2)) - Long.valueOf(String.valueOf(d2)));
      if (ans2 < ans1) {
        c1=c2;
        d1=d2;
        ans1=ans2;
      }
 else       if (ans2 == ans1) {
        if (Long.valueOf(String.valueOf(c2)) < Long.valueOf(String.valueOf(c1))) {
          c1=c2;
          d1=d2;
          ans1=ans2;
        }
 else         if (Long.valueOf(String.valueOf(c2)) == Long.valueOf(String.valueOf(c1))) {
          if (Long.valueOf(String.valueOf(d2)) < Long.valueOf(String.valueOf(d1))) {
            c1=c2;
            d1=d2;
            ans1=ans2;
          }
        }
      }
    }
    out.println(String.valueOf(c1) + "" "" + String.valueOf(d1));
  }
  out.flush();
}
"
30000096,"public static void main(String[] args) throws FileNotFoundException, IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(""C:/Users/Madi/codejam/B-small-practice.in""));BufferedWriter bw=new BufferedWriter(new FileWriter(""C:/Users/Madi/codejam/B-small-practice.out""))){
    int t=Integer.parseInt(br.readLine());
    for (int i=0; i < t; i++) {
      String[] s=br.readLine().split("" "");
      String s1=s[0];
      String s2=s[1];
      int n=s1.length();
      int x=(int)Math.pow(10,n - 1);
      int y=(int)Math.pow(10,n);
      String a;
      String b;
      int min=Integer.MAX_VALUE;
      int minSum=Integer.MAX_VALUE;
      int minb=Integer.MAX_VALUE;
      int mina=Integer.MAX_VALUE;
      for (int i1=0; i1 < y; i1++) {
        for (int j=0; j < y; j++) {
          a=String.valueOf(i1);
          while (a.length() < n) {
            a=""0"" + a;
          }
          b=String.valueOf(j);
          while (b.length() < n) {
            b=""0"" + b;
          }
          boolean eq=true;
          for (int k=0; k < n; k++) {
            if (s1.charAt(k) != '?' && s1.charAt(k) != a.charAt(k)) {
              eq=false;
              break;
            }
          }
          if (eq) {
            for (int k=0; k < n; k++) {
              if (s2.charAt(k) != '?' && s2.charAt(k) != b.charAt(k)) {
                eq=false;
                break;
              }
            }
          }
          if (eq) {
            if (min > Math.abs(i1 - j)) {
              min=Math.abs(i1 - j);
              minSum=i1 + j;
              mina=i1;
              minb=j;
            }
 else             if (min == Math.abs(i1 - j)) {
              if (minSum > i1 + j) {
                minSum=i1 + j;
                mina=i1;
                minb=j;
              }
 else               if (minSum == i1 + j) {
                if (minb > j) {
                  minb=j;
                  mina=i1;
                }
              }
            }
          }
        }
      }
      a=String.valueOf(mina);
      b=String.valueOf(minb);
      while (a.length() < n) {
        a=""0"" + a;
      }
      while (b.length() < n) {
        b=""0"" + b;
      }
      bw.write(""Case #"" + (i + 1) + "": "");
      bw.write(a + "" "" + b);
      bw.write(""\n"");
      bw.flush();
    }
  }
 }
"
30000097,"public static void main(String[] args) throws FileNotFoundException {
  Scanner s=new Scanner(new File(""C:\\Users\\Adam\\Documents\\codejam\\B-small-attempt0.in""));
  int cases=s.nextInt();
  s.nextLine();
  for (int i=1; i <= cases; i++) {
    String line=s.nextLine();
    String scores[]=line.split("" "");
    String scorec=scores[0];
    String scorej=scores[1];
    ArrayList<String> cperms=new ArrayList<String>();
    cperms.add(scorec);
    boolean done=false;
    while (!done) {
      done=true;
      int j=0;
      while (j < cperms.size()) {
        String word=cperms.get(j);
        if (word.contains(""?"")) {
          done=false;
          String firstHalf=word.substring(0,word.indexOf(""?""));
          String secondHalf=word.substring(word.indexOf(""?"") + 1);
          for (int k=0; k < 10; k++) {
            cperms.add(firstHalf + k + secondHalf);
          }
          cperms.remove(word);
        }
 else {
          j++;
        }
      }
    }
    ArrayList<String> jperms=new ArrayList<String>();
    jperms.add(scorej);
    done=false;
    while (!done) {
      done=true;
      int j=0;
      while (j < jperms.size()) {
        String word=jperms.get(j);
        if (word.contains(""?"")) {
          done=false;
          String firstHalf=word.substring(0,word.indexOf(""?""));
          String secondHalf=word.substring(word.indexOf(""?"") + 1);
          for (int k=0; k < 10; k++) {
            jperms.add(firstHalf + k + secondHalf);
          }
          jperms.remove(word);
        }
 else {
          j++;
        }
      }
    }
    ArrayList<Integer> poss=new ArrayList<Integer>();
    for (    String s1 : cperms) {
      for (      String s2 : jperms) {
        int diff=Math.abs(Integer.valueOf(s1) - Integer.valueOf(s2));
        if (!poss.contains(diff))         poss.add(diff);
      }
    }
    Collections.sort(poss);
    if (i == 1) {
    }
    done=false;
    int a=0;
    while (!done && a < cperms.size()) {
      int b=0;
      while (!done && b < jperms.size()) {
        int diff=Math.abs(Integer.valueOf(cperms.get(a)) - Integer.valueOf(jperms.get(b)));
        if (diff == poss.get(0)) {
          done=true;
          System.out.println(""Case #"" + i + "": ""+ cperms.get(a)+ "" ""+ jperms.get(b));
        }
 else {
          b++;
        }
      }
      a++;
    }
  }
}
"
30000098,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  sc.nextLine();
  for (int t=1; t <= T; t++) {
    String a=sc.next();
    String b=sc.next();
    String ab=a + b;
    int min=9999, fa=9999, fb=9999;
    String sfa="""", sfb="""";
    int cab=ab.length() - ab.replace(""?"","""").length();
    for (int i=0; i < Math.pow(10,cab); i++) {
      String s=Integer.toString(i);
      int asasas=cab - s.length();
      for (int j=0; j < asasas; j++) {
        s=""0"" + s;
      }
      char ch[]=ab.toCharArray();
      for (int j=0, k=0; j < ch.length; j++) {
        if (ch[j] == '?') {
          ch[j]=s.charAt(k++);
        }
      }
      String f=new String(ch);
      int av=Integer.parseInt(f.substring(0,a.length()));
      int bv=Integer.parseInt(f.substring(a.length()));
      int diff=Math.abs(av - bv);
      if (diff < min) {
        min=diff;
        fa=av;
        fb=bv;
        sfa=f.substring(0,a.length());
        sfb=f.substring(a.length());
      }
 else       if (diff == min) {
        if (av < fa) {
          fa=av;
          fb=bv;
          sfa=f.substring(0,a.length());
          sfb=f.substring(a.length());
        }
 else         if (av == fa && bv < fb) {
          fb=bv;
          sfb=f.substring(a.length());
        }
      }
    }
    System.out.println(""Case #"" + t + "": ""+ sfa+ "" ""+ sfb);
  }
}
"
30000099,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new BufferedReader(new FileReader(new File(""B-large.in"")),256 << 10));
    BufferedWriter out=new BufferedWriter(new FileWriter(new File(""output.txt"")),256 << 10);
    int testsNumber=in.nextInt();
    for (int testId=1; testId <= testsNumber; testId++) {
      String s1=in.next();
      String s2=in.next();
      int n=s1.length();
      String br1="""", br2="""";
      long bestDiff=Long.MAX_VALUE;
      long min1=Long.MAX_VALUE;
      long min2=Long.MAX_VALUE;
      out.append(""Case #"" + testId + "": "");
      for (int fd=-1; fd <= 1; fd++)       for (int fdp=0; fdp < n; fdp++) {
        String r1="""", r2="""";
        int d=0;
        for (int i=0; i < n; i++) {
          char ch1=s1.charAt(i);
          char ch2=s2.charAt(i);
          if (ch1 == '?') {
            if (ch2 == '?') {
              if (d == 0) {
                if (i == fdp) {
                  if (fd < 0) {
                    ch1='0';
                    ch2='1';
                  }
                  if (fd == 0) {
                    ch1='0';
                    ch2='0';
                  }
                  if (fd > 0) {
                    ch1='1';
                    ch2='0';
                  }
                  d=ch1 - ch2;
                }
 else {
                  ch1='0';
                  ch2='0';
                }
              }
 else               if (d < 0) {
                ch1='9';
                ch2='0';
              }
 else               if (d > 0) {
                ch1='0';
                ch2='9';
              }
            }
 else {
              if (d == 0) {
                if (i == fdp) {
                  if (fd < 0) {
                    ch1=(char)Math.max('0',ch2 - 1);
                  }
                  if (fd == 0) {
                    ch1=ch2;
                  }
                  if (fd > 0) {
                    ch1=(char)Math.min('9',ch2 + 1);
                  }
                  d=ch1 - ch2;
                }
 else {
                  ch1=ch2;
                }
              }
 else               if (d < 0) {
                ch1='9';
              }
 else               if (d > 0) {
                ch1='0';
              }
            }
          }
 else {
            if (ch2 == '?') {
              if (d == 0) {
                if (i == fdp) {
                  if (fd < 0) {
                    ch2=(char)Math.min('9',ch1 + 1);
                  }
                  if (fd == 0) {
                    ch2=ch1;
                  }
                  if (fd > 0) {
                    ch2=(char)Math.max('0',ch1 - 1);
                  }
                  d=ch1 - ch2;
                }
 else {
                  ch2=ch1;
                }
              }
 else               if (d < 0) {
                ch2='0';
              }
 else               if (d > 0) {
                ch2='9';
              }
            }
 else {
              if (d == 0) {
                if (ch1 < ch2)                 d=-1;
                if (ch1 == ch2)                 d=0;
                if (ch1 > ch2)                 d=1;
              }
            }
          }
          r1+=ch1;
          r2+=ch2;
        }
        long v1=Long.valueOf(r1);
        long v2=Long.valueOf(r2);
        if (Math.abs(v1 - v2) < bestDiff || (Math.abs(v1 - v2) == bestDiff && v1 < min1) || (Math.abs(v1 - v2) == bestDiff && v1 == min1 && v2 < min2)) {
          bestDiff=Math.abs(v1 - v2);
          min1=v1;
          min2=v2;
          br1=r1;
          br2=r2;
        }
      }
      out.append(br1 + "" "" + br2);
      out.append(""\n"");
    }
    in.close();
    out.close();
  }
 catch (  RuntimeException rte) {
    throw rte;
  }
catch (  Exception e) {
    System.err.println(""Error:"" + e.getMessage());
  }
}
"
30000100,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""B-small-attempt0.in""));
  PrintStream out=new PrintStream(new File(""B-small-attempt0.out""));
  int t=in.nextInt();
  for (int i=1; i <= t; i++) {
    String ccs=in.next();
    String jjs=in.next();
    char[] c=ccs.toCharArray();
    char[] j=jjs.toCharArray();
    int cnt=0;
    ArrayList<Integer> cs=new ArrayList<Integer>();
    ArrayList<Integer> js=new ArrayList<Integer>();
    for (int k=0; k < 1000; k++) {
      int cur=k;
      boolean ok=true;
      for (int kk=c.length - 1; kk >= 0; kk--) {
        if (cur % 10 + '0' != c[kk] && c[kk] != '?') {
          ok=false;
        }
        cur/=10;
      }
      if (ok && cur == 0) {
        cs.add(k);
      }
      cur=k;
      ok=true;
      for (int kk=j.length - 1; kk >= 0; kk--) {
        if (cur % 10 + '0' != j[kk] && j[kk] != '?') {
          ok=false;
        }
        cur/=10;
      }
      if (ok && cur == 0) {
        js.add(k);
      }
    }
    int min=Integer.MAX_VALUE;
    int cc=0, jj=0;
    for (int k=0; k < cs.size(); k++) {
      for (int kk=0; kk < js.size(); kk++) {
        if (Math.abs(cs.get(k) - js.get(kk)) < min) {
          min=Math.abs(cs.get(k) - js.get(kk));
          cc=cs.get(k);
          jj=js.get(kk);
        }
      }
    }
    String format=""Case #%d: %0"" + c.length + ""d %0""+ c.length+ ""d\n"";
    out.printf(format,i,cc,jj);
  }
}
"
30000101,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(""B-large.in"")));
  String line=br.readLine();
  int T=Integer.parseInt(line);
  PrintWriter pw=new PrintWriter(""B-large.out"");
  for (int test=0; test < T; test++) {
    line=br.readLine();
    char[] chars=line.toCharArray();
    int count=0;
    for (int i=1; i < chars.length; i++) {
      if (chars[i] != chars[i - 1]) {
        count++;
      }
    }
    if (chars[chars.length - 1] == '-') {
      count++;
    }
    pw.println(""Case #"" + (test + 1) + "": ""+ count);
  }
  pw.close();
  br.close();
}
"
30000102,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new File(""B-small-attempt0.in""));
  PrintWriter pw=new PrintWriter(new File(""output.txt""));
  int caseCount=Integer.valueOf(sc.nextLine());
  for (int i=0; i < caseCount; i++) {
    String line=sc.nextLine();
    String[] pars=line.split("" "");
    String C=pars[0];
    int bestDelta=Integer.MAX_VALUE;
    String bestCoders=null;
    String bestJammers=null;
    for (int jam=0; jam < 1000; jam++) {
      for (int coders=0; coders < 1000; coders++) {
        String s=Integer.toString(coders);
        while (s.length() < C.length()) {
          s=""0"" + s;
        }
        String CODERS=s;
        String s1=Integer.toString(jam);
        while (s1.length() < C.length()) {
          s1=""0"" + s1;
        }
        String JAMMERS=s1;
        if (CODERS.matches(C.replace(""?"",""."")) && JAMMERS.matches(pars[1].replace(""?"","".""))) {
          int delta=Math.abs(jam - coders);
          if (delta < bestDelta) {
            bestDelta=delta;
            bestCoders=CODERS;
            bestJammers=JAMMERS;
          }
        }
      }
    }
    List<String> list=new ArrayList<>();
    list.add(bestCoders);
    list.add(bestJammers);
    List<String> solution=list;
    System.out.println(pars[0] + "":"" + pars[1]);
    pw.printf(""Case #%d: %s %s\n"",i + 1,solution.get(0),solution.get(1));
  }
  pw.close();
}
"
30000103,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int testNum=scan.nextInt();
  for (int i=1; i <= testNum; i++) {
    String cScore=scan.next();
    String jScore=scan.next();
    int length=cScore.length();
    int maxValue=0;
    for (int i1=0; i1 < length; i1++) {
      maxValue=maxValue * 10 + 9;
    }
    int minDiff=Integer.MAX_VALUE;
    String cTarget="""";
    String jTarget="""";
    for (int cValue=0; cValue <= maxValue; cValue++) {
      String cStr=String.valueOf(cValue);
      if (cStr.length() < length) {
        int cdiff=length - cStr.length();
        for (int j=0; j < cdiff; j++) {
          cStr=""0"" + cStr;
        }
      }
      boolean cmatch=true;
      for (int i2=0; i2 < length; i2++) {
        if (cScore.charAt(i2) != '?' && cScore.charAt(i2) != cStr.charAt(i2)) {
          cmatch=false;
          break;
        }
      }
      if (!cmatch) {
        continue;
      }
      for (int jValue=0; jValue <= maxValue; jValue++) {
        String jStr=String.valueOf(jValue);
        if (jStr.length() < length) {
          int jdiff=length - jStr.length();
          for (int j=0; j < jdiff; j++) {
            jStr=""0"" + jStr;
          }
        }
        boolean jmatch=true;
        for (int i3=0; i3 < length; i3++) {
          if (jScore.charAt(i3) != '?' && jScore.charAt(i3) != jStr.charAt(i3)) {
            jmatch=false;
            break;
          }
        }
        if (!jmatch) {
          continue;
        }
        int valueDiff=Math.abs(cValue - jValue);
        if (minDiff > valueDiff) {
          minDiff=valueDiff;
          cTarget=cStr;
          jTarget=jStr;
        }
      }
    }
    ArrayList<String> list1=new ArrayList<String>();
    list1.add(cTarget);
    list1.add(jTarget);
    ArrayList<String> list=list1;
    System.out.printf(""Case #%d: %s %s\n"",i,list.get(0),list.get(1));
  }
  scan.close();
}
"
30000104,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new File(""B.in""));
  PrintWriter out=new PrintWriter(new File(""B.out""));
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    char[] A=sc.next().toCharArray();
    char[] B=sc.next().toCharArray();
    String AA=String.valueOf(A);
    String BB=String.valueOf(B);
    int delta=Integer.MAX_VALUE;
    for (int a=0; a < 999; a++) {
      char[] tempA=A.clone();
      if (tempA.length > 0 && tempA[0] == '?') {
        tempA[0]=(char)('0' + ((a / 100) % 10));
      }
      if (tempA.length > 1 && tempA[1] == '?') {
        tempA[1]=(char)('0' + ((a / 10) % 10));
      }
      if (tempA.length > 2 && tempA[2] == '?') {
        tempA[2]=(char)('0' + (a % 10));
      }
      for (int b=0; b < 999; b++) {
        char[] tempB=B.clone();
        if (tempB.length > 0 && tempB[0] == '?') {
          tempB[0]=(char)('0' + ((b / 100) % 10));
        }
        if (tempB.length > 1 && tempB[1] == '?') {
          tempB[1]=(char)('0' + ((b / 10) % 10));
        }
        if (tempB.length > 2 && tempB[2] == '?') {
          tempB[2]=(char)('0' + (b % 10));
        }
        int AAA=Integer.parseInt(String.valueOf(tempA));
        int BBB=Integer.parseInt(String.valueOf(tempB));
        int diff=Math.abs(AAA - BBB);
        if (diff < delta) {
          delta=diff;
          AA=String.valueOf(tempA);
          BB=String.valueOf(tempB);
        }
      }
    }
    System.out.printf(""Case #%d: %s %s%n"",t,AA,BB);
    out.printf(""Case #%d: %s %s%n"",t,AA,BB);
  }
  out.close();
}
"
30000105,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader in=new BufferedReader(new FileReader(""B-small-attempt1.in""));
  int numinput=Integer.parseInt(in.readLine());
  File file=new File(""output.txt"");
  BufferedWriter bw=new BufferedWriter(new FileWriter(file));
  for (int currinput=0; currinput < numinput; currinput++) {
    System.out.print(""Case #"" + (1 + currinput) + "":"");
    bw.write(""Case #"" + (1 + currinput) + "":"");
    String[] input=in.readLine().split("" "");
    String coders=input[0];
    String jammers=input[1];
    int rannumc=0;
    int rannumj=0;
    ArrayList<Integer> codersindex=new ArrayList<>();
    ArrayList<Integer> jammersindex=new ArrayList<>();
    for (int i=coders.length() - 1; i != -1; i--) {
      if (coders.charAt(i) == '?') {
        rannumc++;
        codersindex.add(i);
        coders=coders.substring(0,i) + '0' + coders.substring(i + 1);
      }
    }
    for (int i=jammers.length() - 1; i != -1; i--) {
      if (jammers.charAt(i) == '?') {
        rannumj++;
        jammersindex.add(i);
        jammers=jammers.substring(0,i) + '0' + jammers.substring(i + 1);
      }
    }
    int index=0;
    int minjammers=Integer.parseInt(jammers);
    int mincoders=Integer.parseInt(coders);
    String jammerstr=jammers;
    String codersstr=coders;
    int min=Integer.parseInt(coders) - Integer.parseInt(jammers);
    if (min < 0) {
      min=0 - min;
    }
    while (index < rannumc + rannumj) {
      boolean overflow=false;
      int addindex=0;
      while (overflow == false) {
        overflow=true;
        if (addindex > rannumc + rannumj) {
          break;
        }
        if (addindex < rannumj) {
          if (jammers.charAt(jammersindex.get(addindex)) == '9') {
            overflow=false;
            jammers=jammers.substring(0,jammersindex.get(addindex)) + '0' + jammers.substring(jammersindex.get(addindex) + 1);
            addindex++;
          }
 else {
            jammers=jammers.substring(0,jammersindex.get(addindex)) + (char)((int)jammers.charAt(jammersindex.get(addindex)) + 1) + jammers.substring(jammersindex.get(addindex) + 1);
          }
        }
 else {
          if (addindex - rannumj == codersindex.size()) {
            continue;
          }
          if (coders.charAt(codersindex.get(addindex - rannumj)) == '9') {
            overflow=false;
            coders=coders.substring(0,codersindex.get(addindex - rannumj)) + '0' + coders.substring(codersindex.get(addindex - rannumj) + 1);
            addindex++;
          }
 else {
            coders=coders.substring(0,codersindex.get(addindex - rannumj)) + (char)((int)coders.charAt(codersindex.get(addindex - rannumj)) + 1) + coders.substring(codersindex.get(addindex - rannumj) + 1);
          }
        }
        index=addindex;
      }
      int currjammer=Integer.parseInt(jammers);
      int currcoders=Integer.parseInt(coders);
      int currnum=currjammer - currcoders;
      if (currnum < 0)       currnum=0 - currnum;
      if (currnum < min) {
        min=currnum;
        minjammers=currjammer;
        mincoders=currcoders;
        jammerstr=jammers;
        codersstr=coders;
      }
    }
    String output="" "" + codersstr + "" ""+ jammerstr+ ""\n"";
    System.out.print(output);
    bw.write(output);
  }
  bw.close();
}
"
30000106,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int n=scanner.nextInt();
  for (int i=1; i <= n; i++) {
    String str1=scanner.next();
    String str2=scanner.next();
    int qm=0;
    for (int i1=0; i1 < str1.length(); i1++) {
      if (str1.charAt(i1) == '?') {
        qm++;
      }
      if (str2.charAt(i1) == '?') {
        qm++;
      }
    }
    int num1Final=0, num2Final=0, difference=Integer.MAX_VALUE;
    for (int i2=0; i2 < Math.pow(10,qm); i2++) {
      int arr[]=new int[qm];
      for (int j=0; j < qm; j++) {
        arr[j]=(i2 / (int)Math.pow(10,j)) % 10;
      }
      int pointer=0;
      int num1=0, num2=0;
      for (int j=0; j < str1.length(); j++) {
        if (str1.charAt(j) == '?') {
          num1=num1 * 10 + arr[pointer++];
        }
 else {
          num1=num1 * 10 + (str1.charAt(j) - '0');
        }
      }
      for (int j=0; j < str2.length(); j++) {
        if (str2.charAt(j) == '?') {
          num2=num2 * 10 + arr[pointer++];
        }
 else {
          num2=num2 * 10 + (str2.charAt(j) - '0');
        }
      }
      if (Math.abs(num1 - num2) < difference) {
        num1Final=num1;
        num2Final=num2;
        difference=Math.abs(num1 - num2);
      }
 else       if (Math.abs(num1 - num2) == difference) {
        if (num1 < num1Final) {
          num1Final=num1;
          num2Final=num2;
          difference=Math.abs(num1 - num2);
        }
 else         if (num1 == num1Final) {
          if (num2 < num2Final) {
            num1Final=num1;
            num2Final=num2;
            difference=Math.abs(num1 - num2);
          }
        }
      }
    }
    System.out.println(""Case #"" + i + "": ""+ String.format(""%0"" + str1.length() + ""d"",num1Final)+ "" ""+ String.format(""%0"" + str2.length() + ""d"",num2Final));
  }
}
"
30000107,"public B_BF(final Scanner sc){
  C=sc.next().toCharArray();
  J=sc.next().toCharArray();
}
"
30000108,"public static void main(String[] args) throws IOException {
  String pb=""A"";
  Scanner sc=new Scanner(new FileReader(new File(pb + "".in"")));
  PrintWriter out=new PrintWriter(new File(pb + "".out""));
  StringBuilder resultat=new StringBuilder("""");
  int TC=sc.nextInt();
  sc.nextLine();
  for (int tc=1; tc <= TC; tc++) {
    if (tc != 1)     resultat.append(""\n"");
    resultat.append(""Case #"" + tc + "": "");
    String[] scores=sc.nextLine().split("" "");
    ArrayList<Integer> scoreA=new ArrayList<Integer>();
    ArrayList<Integer> scoreB=new ArrayList<Integer>();
    String score1=scores[0];
    ArrayList<String> scoreStrA=new ArrayList<String>();
    scoreStrA.add(score1);
    for (int i=0; i < score1.length(); i++) {
      if (score1.charAt(i) != '?')       continue;
      ArrayList<String> scoreStrANew=new ArrayList<String>();
      for (int j=0; j <= 9; j++) {
        for (int k=0; k < scoreStrA.size(); k++) {
          scoreStrANew.add(scoreStrA.get(k).substring(0,i) + j + scoreStrA.get(k).substring(i + 1));
        }
      }
      scoreStrA=scoreStrANew;
    }
    for (int i=0; i < scoreStrA.size(); i++) {
      scoreA.add(Integer.parseInt(scoreStrA.get(i)));
    }
    String score2=scores[1];
    ArrayList<String> scoreStrB=new ArrayList<String>();
    scoreStrB.add(score2);
    for (int i=0; i < score2.length(); i++) {
      if (score2.charAt(i) != '?')       continue;
      ArrayList<String> scoreStrBNew=new ArrayList<String>();
      for (int j=0; j <= 9; j++) {
        for (int k=0; k < scoreStrB.size(); k++) {
          scoreStrBNew.add(scoreStrB.get(k).substring(0,i) + j + scoreStrB.get(k).substring(i + 1));
        }
      }
      scoreStrB=scoreStrBNew;
    }
    for (int i=0; i < scoreStrB.size(); i++) {
      scoreB.add(Integer.parseInt(scoreStrB.get(i)));
    }
    Collections.sort(scoreB);
    Collections.sort(scoreA);
    int diff=Integer.MAX_VALUE;
    int sb=0;
    int sa=0;
    for (int i=0; i < scoreB.size(); i++) {
      for (int j=0; j < scoreA.size(); j++) {
        int d=Math.abs(scoreA.get(j) - scoreB.get(i));
        if (d < diff || (d == diff && (scoreB.get(i) + scoreA.get(j)) < (sa + sb)) || (d == diff && (scoreB.get(i) + scoreA.get(j)) == (sa + sb) && scoreB.get(i) < sb)) {
          diff=d;
          sa=scoreA.get(j);
          sb=scoreB.get(i);
        }
      }
    }
    String scoreAA=sa + """";
    while (scoreAA.length() < score1.length()) {
      scoreAA=""0"" + scoreAA;
    }
    String scoreBB=sb + """";
    while (scoreBB.length() < score2.length()) {
      scoreBB=""0"" + scoreBB;
    }
    resultat.append(scoreAA + "" "" + scoreBB);
    System.out.println(scoreAA + "" "" + scoreBB);
  }
  out.print(resultat);
  out.close();
  sc.close();
}
"
30000109,"public static void main(String[] args) throws IOException {
  Main r=new Main();
  r.in=new BufferedReader(new FileReader(Main.FILENAME + "".in""));
  r.out=new PrintWriter(Main.FILENAME + "".out"");
  int T=Integer.parseInt(r.nextToken());
  for (int t=0; t < T; t++) {
    int alc=1000000;
    int arc=10000;
    char[] s=r.nextToken().toCharArray();
    char[] g=r.nextToken().toCharArray();
    r.len=s.length;
    for (int i=0; i < 1000; i++) {
      char[] x=String.format(""%0"" + r.len + ""d"",i).toCharArray();
      if (x.length > r.len)       break;
      boolean o=true;
      for (int k=0; k < r.len; k++) {
        if (s[k] != '?' && s[k] != x[k])         o=false;
      }
      if (!o)       continue;
      for (int j=0; j < 1000; j++) {
        char[] y=String.format(""%0"" + r.len + ""d"",j).toCharArray();
        if (y.length > r.len)         break;
        o=true;
        for (int k=0; k < r.len; k++) {
          if (g[k] != '?' && g[k] != y[k])           o=false;
        }
        if (!o)         continue;
        if (abs(i - j) < abs(alc - arc) || (abs(i - j) == abs(alc - arc) && (i < alc || (i == alc && j < arc)))) {
          alc=i;
          arc=j;
        }
      }
    }
    r.out.print(""Case #"" + (t + 1) + "": ""+ String.format(""%0"" + r.len + ""d %0""+ r.len+ ""d"",alc,arc));
    r.out.println();
  }
  r.in.close();
  r.out.close();
}
"
30000110,"public static void main(String[] args) throws FileNotFoundException {
  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(""C://Users/s142589/Desktop/output.txt"")),true));
  int runs=sc.nextInt();
  for (int i=0; i < runs; i++) {
    GCJ161BB r=new GCJ161BB();
    String A=GCJ161BB.sc.next();
    String B=GCJ161BB.sc.next();
    DecimalFormat format;
switch (A.length()) {
case 1:
      format=new DecimalFormat(""#0"");
    break;
case 2:
  format=new DecimalFormat(""#00"");
break;
default :
format=new DecimalFormat(""#000"");
break;
}
String bestA=A;
String bestB=B;
int bestDif=Integer.MAX_VALUE / 2;
for (int i1=0; i1 < Math.pow(10,A.length()); i1++) {
String thisA=format.format(i1);
boolean success=true;
for (int j=0; j < A.length(); j++) {
if (!((A.charAt(j) == '?' || (A.charAt(j) == thisA.charAt(j))))) {
success=false;
}
}
if (!success) {
continue;
}
for (int j=0; j < Math.pow(10,A.length()); j++) {
String thisB=format.format(j);
boolean success2=true;
for (int k=0; k < A.length(); k++) {
if (!(B.charAt(k) == '?' || (B.charAt(k) == thisB.charAt(k)))) {
success2=false;
}
}
if (!success2) {
continue;
}
int diff=Math.abs(Integer.valueOf(thisB) - Integer.valueOf(thisA));
if (diff < bestDif) {
bestA=thisA;
bestB=thisB;
bestDif=diff;
}
}
}
String answer=""Case #"" + (i + 1) + "": ""+ bestA+ "" ""+ bestB;
System.out.println(answer);
}
}
"
30000111,"public static void main(String[] args) throws FileNotFoundException {
  FileInputStream fileInputStream=new FileInputStream(""/Users/ratmir/Downloads/B-small-attempt0 (2).in"");
  Scanner sc=new Scanner(fileInputStream);
  FileOutputStream outputStream=new FileOutputStream(""/Users/ratmir/Documents/code/hackerrank/algs/src/codejam/y2016/r2/z2/z2.txt"");
  PrintWriter printWriter=new PrintWriter(outputStream);
  int tn=sc.nextInt();
  sc.nextLine();
  for (int ti=1; ti <= tn; ti++) {
    String s=sc.nextLine();
    String[] strings=s.split("" "");
    int mx=(int)Math.pow(10,strings[0].length());
    int v1=-1;
    int v2=-1;
    String x1="""";
    String x2="""";
    for (int n1=0; n1 < mx; n1++) {
      for (int n2=0; n2 < mx; n2++) {
        String s1=String.valueOf(mx + n1);
        String s2=String.valueOf(mx + n2);
        boolean flag=true;
        for (int i=0; i < strings[0].length(); i++) {
          if ((strings[0].charAt(i) == '?') || (strings[0].charAt(i) == s1.charAt(i + 1))) {
          }
 else {
            flag=false;
          }
        }
        for (int i=0; i < strings[1].length(); i++) {
          if ((strings[1].charAt(i) == '?') || (strings[1].charAt(i) == s2.charAt(i + 1))) {
          }
 else {
            flag=false;
          }
        }
        if (flag) {
          int dv=Math.abs(v1 - v2);
          int dn=Math.abs(n1 - n2);
          boolean doit=v1 == -1;
          if (!doit && (dn < dv)) {
            doit=true;
          }
          if (!doit && (dn == dv) && (n1 < v1)) {
            doit=true;
          }
          if (!doit && (dn == dv) && (n1 == v1)&& (n2 < v2)) {
            doit=true;
          }
          if (doit) {
            v1=n1;
            v2=n2;
            x1=s1.substring(1);
            x2=s2.substring(1);
          }
        }
      }
    }
    String res=""Case #"" + ti + "": ""+ x1+ "" ""+ x2;
    printWriter.write(res + ""\n"");
    System.out.println(res);
  }
  printWriter.close();
}
"
30000112,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  long[] ten=new long[19];
  ten[0]=1;
  ten[1]=10;
  for (int i=2; i <= 18; i++) {
    ten[i]=ten[i - 1] * 10;
  }
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    String input=in.next();
    String C="""";
    for (int i=0; i < input.length(); i++) {
      C+=input.charAt(input.length() - i - 1);
    }
    input=in.next();
    String J="""";
    for (int i=0; i < input.length(); i++) {
      J+=input.charAt(input.length() - i - 1);
    }
    long[][] f=new long[C.length()][3];
    String[][] ans_c=new String[C.length()][3];
    String[][] ans_j=new String[C.length()][3];
    for (int i=0; i < C.length(); i++) {
      boolean[] a=new boolean[3];
      for (int c=0; c <= 9; c++) {
        if (C.charAt(i) != '?' && C.charAt(i) != ('0' + c)) {
          continue;
        }
        for (int j=0; j <= 9; j++) {
          if (J.charAt(i) != '?' && J.charAt(i) != ('0' + j)) {
            continue;
          }
          long small=0, equal=0, large=0;
          String ans_small_c="""", ans_equal_c="""", ans_large_c="""";
          String ans_small_j="""", ans_equal_j="""", ans_large_j="""";
          long temp=(c - j) * ten[i];
          if (c > j) {
            small=temp + ((i > 0) ? f[i - 1][0] : 0);
            ans_small_c=(i > 0) ? ans_c[i - 1][0] : """";
            ans_small_j=(i > 0) ? ans_j[i - 1][0] : """";
            equal=temp + ((i > 0) ? f[i - 1][0] : 0);
            ans_equal_c=(i > 0) ? ans_c[i - 1][0] : """";
            ans_equal_j=(i > 0) ? ans_j[i - 1][0] : """";
            large=temp + ((i > 0) ? f[i - 1][2] : 0);
            ans_large_c=(i > 0) ? ans_c[i - 1][2] : """";
            ans_large_j=(i > 0) ? ans_j[i - 1][2] : """";
          }
          if (c == j) {
            small=(i > 0) ? f[i - 1][0] : 0;
            ans_small_c=(i > 0) ? ans_c[i - 1][0] : """";
            ans_small_j=(i > 0) ? ans_j[i - 1][0] : """";
            equal=(i > 0) ? f[i - 1][1] : 0;
            ans_equal_c=(i > 0) ? ans_c[i - 1][1] : """";
            ans_equal_j=(i > 0) ? ans_j[i - 1][1] : """";
            large=(i > 0) ? f[i - 1][2] : 0;
            ans_large_c=(i > 0) ? ans_c[i - 1][2] : """";
            ans_large_j=(i > 0) ? ans_j[i - 1][2] : """";
          }
          if (c < j) {
            small=temp + ((i > 0) ? f[i - 1][0] : 0);
            ans_small_c=(i > 0) ? ans_c[i - 1][0] : """";
            ans_small_j=(i > 0) ? ans_j[i - 1][0] : """";
            equal=temp + ((i > 0) ? f[i - 1][2] : 0);
            ans_equal_c=(i > 0) ? ans_c[i - 1][2] : """";
            ans_equal_j=(i > 0) ? ans_j[i - 1][2] : """";
            large=temp + ((i > 0) ? f[i - 1][2] : 0);
            ans_large_c=(i > 0) ? ans_c[i - 1][2] : """";
            ans_large_j=(i > 0) ? ans_j[i - 1][2] : """";
          }
          if (!a[0] || small < f[i][0]) {
            f[i][0]=small;
            a[0]=true;
            ans_c[i][0]=(char)(c + '0') + ans_small_c;
            ans_j[i][0]=(char)(j + '0') + ans_small_j;
          }
          if (!a[1] || Math.abs(equal) < Math.abs(f[i][1])) {
            f[i][1]=equal;
            a[1]=true;
            ans_c[i][1]=(char)(c + '0') + ans_equal_c;
            ans_j[i][1]=(char)(j + '0') + ans_equal_j;
          }
          if (!a[2] || large > f[i][2]) {
            f[i][2]=large;
            a[2]=true;
            ans_c[i][2]=(char)(c + '0') + ans_large_c;
            ans_j[i][2]=(char)(j + '0') + ans_large_j;
          }
        }
      }
    }
    System.out.format(""Case #%d: %s %s\n"",t,ans_c[C.length() - 1][1],ans_j[C.length() - 1][1]);
  }
}
"
30000113,"public static String solve(String C,String J){
  int len=C.length();
  char[] cs=C.toCharArray();
  char[] js=J.toCharArray();
  List<String> cres=new ArrayList<>();
  List<String> jres=new ArrayList<>();
  cres.add("""");
  jres.add("""");
  for (int i=0; i < len; i++) {
    if (cs[i] == '?' && js[i] == '?') {
      List<String> r=new ArrayList<>();
      for (      String s : cres) {
        for (        char c : new char[]{'0','1','2','3','4','5','6','7','8','9'}) {
          r.add(s + c);
        }
      }
      cres=r;
      List<String> r=new ArrayList<>();
      for (      String s : jres) {
        for (        char c : new char[]{'0','1','2','3','4','5','6','7','8','9'}) {
          r.add(s + c);
        }
      }
      jres=r;
    }
 else     if (cs[i] == '?') {
      List<String> r=new ArrayList<>();
      for (      String s : cres) {
        for (        char c : new char[]{'0','1','2','3','4','5','6','7','8','9'}) {
          r.add(s + c);
        }
      }
      cres=r;
      List<String> r=new ArrayList<>();
      for (      String s : jres) {
        for (        char c : new char[]{js[i]}) {
          r.add(s + c);
        }
      }
      jres=r;
    }
 else     if (js[i] == '?') {
      List<String> r=new ArrayList<>();
      for (      String s : cres) {
        for (        char c : new char[]{cs[i]}) {
          r.add(s + c);
        }
      }
      cres=r;
      List<String> r=new ArrayList<>();
      for (      String s : jres) {
        for (        char c : new char[]{'0','1','2','3','4','5','6','7','8','9'}) {
          r.add(s + c);
        }
      }
      jres=r;
    }
 else {
      List<String> r=new ArrayList<>();
      for (      String s : cres) {
        for (        char c : new char[]{cs[i]}) {
          r.add(s + c);
        }
      }
      cres=r;
      List<String> r=new ArrayList<>();
      for (      String s : jres) {
        for (        char c : new char[]{js[i]}) {
          r.add(s + c);
        }
      }
      jres=r;
    }
  }
  long min=Long.MAX_VALUE;
  String a="""";
  String b="""";
  for (  String cre : cres) {
    for (    String jre : jres) {
      long m=Long.parseLong(cre);
      long n=Long.parseLong(jre);
      long diff=Math.abs(m - n);
      if (min > diff) {
        min=diff;
        a=cre;
        b=jre;
      }
    }
  }
  return String.valueOf(a) + "" "" + String.valueOf(b);
}
"
30000114,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numTests=sc.nextInt();
  for (int tc=1; tc <= numTests; ++tc) {
    String cc=sc.next();
    String jj=sc.next();
    int limit=0;
    if (cc.length() == 1) {
      limit=9;
    }
 else {
      limit=cc.length() == 2 ? 99 : 999;
    }
    int cScore=1000;
    int jScore=1000;
    int absDiff=1000;
    for (int i=0; i <= limit; ++i) {
      for (int j=0; j <= limit; ++j) {
        String ct=String.valueOf(i);
        String jt=String.valueOf(j);
        while (ct.length() < cc.length()) {
          ct=""0"" + ct;
        }
        while (jt.length() < jj.length()) {
          jt=""0"" + jt;
        }
        boolean okay=true;
        for (int k=0; k < cc.length(); ++k) {
          if (cc.charAt(k) != '?' && cc.charAt(k) != ct.charAt(k)) {
            okay=false;
            break;
          }
          if (jj.charAt(k) != '?' && jj.charAt(k) != jt.charAt(k)) {
            okay=false;
            break;
          }
        }
        if (okay) {
          if (Math.abs(i - j) <= absDiff) {
            if (Math.abs(i - j) == absDiff) {
              if (i <= cScore) {
                if (i == cScore) {
                  if (j < jScore) {
                    cScore=i;
                    jScore=j;
                  }
                }
 else {
                  cScore=i;
                  jScore=j;
                }
              }
            }
 else {
              cScore=i;
              jScore=j;
              absDiff=Math.abs(i - j);
            }
          }
        }
      }
    }
    String cAns=String.valueOf(cScore);
    String jAns=String.valueOf(jScore);
    while (cAns.length() < cc.length()) {
      cAns=""0"" + cAns;
    }
    while (jAns.length() < jj.length()) {
      jAns=""0"" + jAns;
    }
    System.out.println(""Case #"" + tc + "": ""+ cAns+ "" ""+ jAns);
  }
}
"
30000115,"public static void main(String[] args){
}
"
30000116,"public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=1; i <= T; i++) {
    int N=sc.nextInt();
    int[] in=new int[2501];
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        in[sc.nextInt()]++;
      }
    }
    String s=""Case #"" + i + "":"";
    for (int j=1; j < 2501; j++) {
      if (in[j] % 2 != 0) {
        s=s + "" "" + j;
      }
    }
    System.out.println(s);
  }
}
"
30000117,"public RankFile(){
}
"
30000118,"public static void main(String[] args){
  StringBuilder sb=new StringBuilder();
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  String[] soldiers=new String[]{};
  List<Integer> soldierList=new ArrayList<Integer>();
  int n=0;
  int intCount=0;
  int sld=0;
  int sldIndex=0;
  for (int i=1; i < t + 1; i++) {
    sb.append(""Case #"" + i + "": "");
    n=sc.nextInt();
    sc.nextLine();
    soldierList.clear();
    intCount=((n * n) + (n * (n - 1)));
    for (int j=0; j < intCount; j++) {
      sld=(Integer)sc.nextInt();
      sldIndex=soldierList.indexOf(sld);
      if (sldIndex > -1) {
        soldierList.remove(sldIndex);
      }
 else {
        soldierList.add(sld);
      }
    }
    soldierList.sort(null);
    for (int j=0; j < soldierList.size(); j++) {
      sb.append(soldierList.get(j));
      if (j < soldierList.size() - 1)       sb.append("" "");
    }
    if (i < t)     sb.append(""\n"");
  }
  System.out.println(sb);
}
"
30000119,"public static void main(String[] args) throws Exception {
  InputStream in=new FileInputStream(""/home/floris/Downloads/B-large.in"");
  System.setOut(new PrintStream(""/home/floris/dev/java/Codejam2016/src/B.out""));
  Scanner sc=new Scanner(in);
  sc.useDelimiter(Pattern.compile(""[\n /]""));
  for (int c=1, cases=sc.nextInt(); c <= cases; c++) {
    int n=sc.nextInt();
    int[] heights=new int[2501];
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        heights[sc.nextInt()]++;
      }
    }
    System.out.printf(""Case #%d:"",c);
    for (int i=0; i < heights.length; i++) {
      if (heights[i] % 2 == 1)       System.out.print("" "" + i);
    }
    System.out.println("""");
  }
}
"
30000120,"public static void main(String[] args) throws IOException {
  Scanner s=new Scanner(new BufferedReader(new FileReader(""B-large.in"")));
  int ncase=s.nextInt();
  for (int i=1; i <= ncase; i++) {
    int N=s.nextInt();
    int[] Height=new int[2501];
    for (int i1=1; i1 <= 2 * N - 1; i1++) {
      for (int j=1; j <= N; j++) {
        int h=s.nextInt();
        Height[h - 1]++;
      }
    }
    System.out.printf(""Case #%d:"",i);
    for (int i2=0; i2 <= 2500; i2++) {
      if (Height[i2] % 2 == 1) {
        System.out.printf("" %d"",i2 + 1);
      }
    }
    System.out.printf(""\n"");
  }
  s.close();
}
"
30000121,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int cases=in.nextInt();
  int[] inte;
  int counter=1;
  ArrayList<Integer> arr;
  while (cases-- > 0) {
    inte=new int[2501];
    int n=in.nextInt();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int a=in.nextInt();
        inte[a]++;
      }
    }
    arr=new ArrayList<>();
    for (int i=0; i < 2501; i++) {
      if (inte[i] % 2 == 1)       arr.add(i);
    }
    Collections.sort(arr);
    System.out.print(""Case #"" + counter + "": "");
    for (int i=0; i < n; i++) {
      System.out.print(arr.get(i) + "" "");
    }
    System.out.println("""");
    counter++;
  }
}
"
30000122,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new File(""B-large.in""));
  PrintWriter pw=new PrintWriter(new File(""output.txt""));
  int caseCount=sc.nextInt();
  for (int i=0; i < caseCount; i++) {
    int N=sc.nextInt();
    Map<Integer,Integer> map=new HashMap<Integer,Integer>();
    for (int j=0; j < N * 2 - 1; j++) {
      for (int k=0; k < N; k++) {
        int val=sc.nextInt();
        int count=map.getOrDefault(val,0);
        map.put(val,count + 1);
      }
    }
    pw.printf(""Case #%d:"",i + 1);
    List<Integer> list=new ArrayList<Integer>();
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      if ((entry.getValue() % 2) == 1)       list.add(entry.getKey());
    }
    Collections.sort(list);
    for (    int l : list) {
      pw.printf("" %d"",l);
    }
    pw.append(""\n"");
  }
  pw.close();
}
"
30000123,"public static void main(String[] args) throws Exception {
  PrintWriter pr=new PrintWriter(System.out,true);
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int t, n, m, j, l, i, c, r, tt, ht[];
  long nm;
  char ch[];
  String s[];
  StringBuilder sb;
  t=Integer.parseInt(br.readLine());
  for (tt=1; tt <= t; tt++) {
    sb=new StringBuilder(""Case #"" + tt + "": "");
    ht=new int[2600];
    n=Integer.parseInt(br.readLine());
    m=2 * n - 1;
    for (i=0; i < m; i++) {
      s=br.readLine().split("" "");
      for (j=0; j < n; j++) {
        ht[Integer.parseInt(s[j])]++;
      }
    }
    for (i=0; i < 2502; i++) {
      if ((ht[i] & 1) > 0)       sb.append(i + "" "");
    }
    sb.append(""\n"");
    System.out.print(sb);
  }
}
"
30000124,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""C:/Users/Harish/Downloads/B-large.in""));
  String line=br.readLine();
  int count=1;
  int t=Integer.parseInt(line);
  while (t-- > 0) {
    line=br.readLine();
    int n=Integer.parseInt(line);
    int size=2 * n - 1;
    ArrayList<String> list=new ArrayList<String>();
    for (int i=0; i < size; i++) {
      line=br.readLine();
      String[] arr=line.split("" "");
      for (int j=0; j < n; j++) {
        list.add(arr[j]);
      }
    }
    int l=list.size();
    ArrayList<Integer> list2=new ArrayList<Integer>();
    while (!list.isEmpty()) {
      int val=Integer.parseInt(list.get(0));
      int idx1=list.indexOf("""" + val);
      list.remove(idx1);
      int idx2=list.indexOf("""" + val);
      if (idx2 == -1) {
        list2.add(val);
      }
 else {
        list.remove("""" + val);
      }
    }
    List<Integer> sorted=list2.subList(0,list2.size());
    Collections.sort(sorted);
    System.out.print(""Case #"" + (count++) + "": "");
    int s=sorted.size();
    for (int i=0; i < s; i++) {
      System.out.print(sorted.get(i) + "" "");
    }
    System.out.println();
  }
}
"
30000125,"public static void main(String[] args) throws IOException {
  if (args == null || args.length == 0) {
    System.err.println(""dude, I need to know the input file name"");
    System.exit(-1);
  }
  BufferedReader br=new BufferedReader(new FileReader(args[0]));
  try {
    String input=br.readLine();
    int numCases=Integer.parseInt(input);
    input=br.readLine();
    for (int i=1; i <= numCases; i++) {
      int n=Integer.parseInt(input);
      List<String> lists=new ArrayList<String>(2 * n - 1);
      for (int j=1; j < 2 * n; j++) {
        lists.add(br.readLine());
      }
      Map<Integer,Integer> map=new HashMap<Integer,Integer>();
      for (int i2=0; i2 < lists.size(); i2++) {
        @SuppressWarnings(""resource"") Scanner ss=new Scanner(lists.get(i2));
        for (int j=0; j < n; j++) {
          int found=ss.nextInt();
          if (map.containsKey(found)) {
            int val=map.get(found) + 1;
            map.put(found,val);
          }
 else {
            map.put(found,1);
          }
        }
      }
      List<Integer> out=new ArrayList<Integer>(n);
      for (      Integer in : map.keySet()) {
        if ((map.get(in).intValue() & 1) != 0)         out.add(in);
      }
      Collections.sort(out);
      List<Integer> missing=out;
      StringBuilder output=new StringBuilder(""Case #"");
      output.append(i).append("":"");
      for (int i1=0; i1 < missing.size(); i1++) {
        output.append("" "").append(missing.get(i1));
      }
      System.out.println(output.toString());
      input=br.readLine();
    }
  }
  finally {
    br.close();
  }
}
"
30000126,"public static void main(String[] args) throws IOException {
  fr=new FileReader(""B-large.in"");
  fw=new FileWriter(""output.txt"");
  sc=new Scanner(fr);
  sc.useLocale(Locale.US);
  int t=sc.nextInt();
  sc.nextLine();
  for (int i=1; i <= t; i++) {
    String str=""Case #"" + i + "": "";
    System.out.print(str);
    fw.write(str);
    int n=sc.nextInt();
    int heights[]=new int[2501];
    for (int l=0; l < 2 * n - 1; l++) {
      for (int i1=0; i1 < n; i1++) {
        int height=sc.nextInt();
        heights[height]++;
      }
    }
    boolean first=true;
    for (int height=0; height < heights.length; height++) {
      if (heights[height] % 2 != 0) {
        if (!first) {
          System.out.print("" "");
          fw.write("" "");
        }
        String str2=height + """";
        System.out.print(str2);
        fw.write(str2);
        first=false;
      }
    }
    String str1="""" + ""\n"";
    System.out.print(str1);
    fw.write(str1);
  }
  sc.close();
  fw.close();
  fr.close();
}
"
30000127,"public static void main(String[] args){
  LinkedList<String> s=new LinkedList<String>();
  try {
    String encoding=""GBK"";
    File file=new File(""/Users/AmesingFlank/Downloads/qbtest.in"");
    if (file.isFile() && file.exists()) {
      InputStreamReader read=new InputStreamReader(new FileInputStream(file),encoding);
      BufferedReader bufferedReader=new BufferedReader(read);
      String lineTxt=null;
      while ((lineTxt=bufferedReader.readLine()) != null) {
        s.add(lineTxt);
      }
      read.close();
    }
  }
 catch (  Exception e) {
    System.out.println(""读取文件内容出错"");
    e.printStackTrace();
  }
  String[] ans1=new String[s.size()];
  for (int i1=0; i1 < s.size(); i1++) {
    ans1[i1]=s.get(i1);
  }
  String raw[]=ans1;
  int cases=Integer.valueOf(raw[0]);
  int index=1;
  String[] ans=new String[cases];
  for (int i=0; i < cases; i++) {
    int N=Integer.valueOf(raw[index]);
    String vals[]=new String[2 * N - 1];
    for (int j=index + 1; j < index + 1 + 2 * N - 1; j++) {
      vals[j - index - 1]=raw[j];
    }
    index+=2 * N;
    ans[i]=solveOne(N,vals);
  }
  try {
    int trial=ans.length;
    File file=new File(""/Users/AmesingFlank/cj2016/QuestionB-test.txt"");
    BufferedWriter ow=new BufferedWriter(new FileWriter(file));
    for (int i=0; i < trial; i++) {
      String temp=""Case "" + ""#"" + String.valueOf(i + 1) + "": ""+ ans[i];
      System.out.println(temp);
      ow.write(temp);
      ow.newLine();
    }
    ow.close();
    System.out.println(""Finished Writing"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000128,"public static void main(String[] args) throws FileNotFoundException {
  try (Scanner sc=new Scanner(new BufferedReader(new FileReader(new File(args[0]))))){
    int iterations=sc.nextInt();
    for (int i=0; i < iterations; i++) {
      int N=sc.nextInt();
      Map<Integer,Integer> m=new HashMap<>();
      int max=N * N * 2 - N;
      for (int j=0; j < max; j++) {
        int nxt=sc.nextInt();
        if (!m.containsKey(nxt)) {
          m.put(nxt,1);
        }
 else {
          m.put(nxt,m.get(nxt) + 1);
        }
      }
      Set<Integer> anws=new TreeSet<>();
      String ans="""";
      for (      Integer k : m.keySet()) {
        if (m.get(k) % 2 != 0)         anws.add(k);
      }
      Integer[] is=new Integer[N];
      Arrays.sort(anws.toArray(is));
      for (      int iis : is) {
        ans+="" "" + iis;
      }
      System.out.printf(""Case #%d:%s\n"",i + 1,ans);
    }
  }
 }
"
30000129,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(args[0]));
  PrintWriter pw=new PrintWriter(new FileWriter(args[0] + "".out.txt""));
  int numOfCase=sc.nextInt();
  List<Character> list=null;
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < numOfCase; i++) {
    int size=sc.nextInt();
    int numOfNum=(2 * size - 1) * size;
    TreeSet<Integer> set=new TreeSet<Integer>();
    for (int j=0; j < numOfNum; j++) {
      int height=sc.nextInt();
      if (set.contains(height))       set.remove(height);
 else       set.add(height);
    }
    sb.setLength(0);
    while (!set.isEmpty()) {
      sb.append(' ');
      sb.append(set.pollFirst());
    }
    pw.println(""Case #"" + (i + 1) + "":""+ sb.toString());
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000130,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=1; i <= T; i++) {
    int N=sc.nextInt();
    HashMap<Integer,Integer> map=new HashMap<>();
    for (int j=0; j < N * (2 * N - 1); j++) {
      int n=sc.nextInt();
      if (map.containsKey(n)) {
        map.put(n,map.get(n) + 1);
      }
 else {
        map.put(n,1);
      }
    }
    ArrayList<Integer> list=new ArrayList<>();
    for (    int k : map.keySet()) {
      if (map.get(k) % 2 == 1) {
        list.add(k);
      }
    }
    Collections.sort(list);
    System.out.print(""Case #"" + i + "":"");
    for (    int k : list) {
      System.out.print("" "" + k);
    }
    System.out.println();
  }
  sc.close();
}
"
30000131,"public RankAndFile(Scanner f){
  int cases=f.nextInt();
  for (int ii=1; ii <= cases; ii++) {
    int n=f.nextInt();
    int numSheets=2 * n - 1;
    int[][] rows=new int[numSheets][n];
    for (int i=0; i < numSheets; i++)     for (int j=0; j < n; j++)     rows[i][j]=f.nextInt();
    int[] peopleMap=new int[2501];
    for (int i=0; i <= 2500; i++)     peopleMap[i]=0;
    for (int i=0; i < numSheets; i++) {
      for (int j=0; j < n; j++) {
        peopleMap[rows[i][j]]++;
      }
    }
    int printCount=0;
    System.out.printf(""Case #%d: "",ii);
    for (int i=0; i <= 2500; i++) {
      if (peopleMap[i] % 2 != 0) {
        printCount++;
        System.out.printf(""%d%s"",i,printCount == n ? ""\n"" : "" "");
      }
    }
  }
}
"
30000132,"public static void main(String arg[]) throws IOException {
  FileReader f=new FileReader(""B-large(1).in"");
  BufferedReader br=new BufferedReader(f);
  FileWriter fw=new FileWriter(""output"");
  int T, N, t, n;
  String[] temp;
  int[] arr;
  T=Integer.parseInt(br.readLine());
  t=T;
  while (T-- > 0) {
    arr=new int[2500];
    N=Integer.parseInt(br.readLine());
    n=2 * N - 1;
    fw.write(""Case #"" + (t - T) + "": "");
    while (n-- > 0) {
      temp=br.readLine().split("" "");
      for (      String s : temp) {
        arr[Integer.parseInt(s) - 1]++;
      }
    }
    for (int i=0; i < 2500; i++) {
      if (arr[i] % 2 != 0) {
        fw.write("" "" + (i + 1));
      }
      arr[i]=0;
    }
    fw.write(""\n"");
  }
  fw.close();
}
"
30000133,"public static void main(String[] arg) throws Exception {
  FileInputStream fis=new FileInputStream(""B-large.in"");
  System.setIn(fis);
  PrintStream ps=new PrintStream(new FileOutputStream(""Output2""));
  System.setOut(ps);
  Scanner sc=new Scanner(System.in);
  int N=sc.nextInt();
  for (int i=0; i < N; i++) {
    int numsize=sc.nextInt();
    int[] nums=new int[(2 * numsize - 1) * numsize];
    for (int j=0; j < nums.length; j++) {
      nums[j]=sc.nextInt();
    }
    System.out.print(""Case #"" + (i + 1) + "": "");
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    for (int i1=0; i1 < nums.length; i1++) {
      if (!map.containsKey(nums[i1])) {
        map.put(nums[i1],1);
      }
 else {
        map.put(nums[i1],map.get(nums[i1]) + 1);
      }
    }
    Iterator it=map.keySet().iterator();
    int sizeone=0;
    while (it.hasNext()) {
      int key=(int)it.next();
      if (map.get(key) % 2 == 1) {
        sizeone+=1;
      }
    }
    int[] res1=new int[sizeone];
    int k=0;
    Iterator it2=map.keySet().iterator();
    while (it2.hasNext()) {
      int key2=(int)it2.next();
      if (map.get(key2) % 2 == 1) {
        res1[k]=key2;
        ++k;
      }
    }
    int[] res=res1;
    Arrays.sort(res);
    for (int j=0; j < res.length; j++) {
      System.out.print(res[j] + "" "");
    }
    System.out.println();
  }
}
"
30000134,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(new File(""D:/ForPrograms/java/TESTS/B-large.in""));
  FileWriter writer=new FileWriter(""D:/ForPrograms/java/TESTS/B-large.out"",false);
  int cases=scanner.nextInt();
  for (int i=0; i < cases; i++) {
    int cell=scanner.nextInt();
    int[][] arr=new int[cell * 2 - 1][cell];
    int[][] arrD=new int[cell * 2 - 1][cell];
    int[] par=new int[cell];
    int parC=0;
    int wrongC=0;
    for (int v=0; v < cell; v++) {
      par[v]=0;
    }
    int[][] cols=new int[cell][cell];
    int[][] rows=new int[cell][cell];
    int[] allNums=new int[2600];
    for (int g=0; g < cell * cell; g++) {
      allNums[g]=0;
    }
    for (int g=0; g < cell * 2 - 1; g++) {
      for (int j=0; j < cell; j++) {
        arr[g][j]=scanner.nextInt();
        arrD[g][j]=1;
        allNums[arr[g][j]]++;
      }
    }
    int[] needed=new int[cell];
    int nC=0;
    for (int v=0; v < allNums.length; v++) {
      if (allNums[v] != 0 && allNums[v] % 2 == 1) {
        needed[nC]=v;
        nC++;
      }
    }
    Arrays.sort(needed);
    System.out.println(Arrays.toString(needed));
    writer.write(""Case #"" + (i + 1) + "": "");
    for (int v=0; v < cell; v++) {
      writer.write(needed[v] + "" "");
    }
    writer.append('\r');
    writer.append('\n');
  }
  scanner.close();
  writer.close();
}
"
30000135,"public static final void main(String[] args){
  try {
    fileReader=new FileReader(input_large);
    buffReader=new BufferedReader(fileReader);
    fileWriter=new FileWriter(""D:/Programming/workspace/test/problem_B.out"");
    buffWriter=new BufferedWriter(fileWriter);
    int total_size=Integer.parseInt(buffReader.readLine());
    for (int i=1; i <= total_size; i++) {
      int N=Integer.parseInt(buffReader.readLine());
      int size=N * (2 * N - 1);
      int index=0;
      int[] arr=new int[size];
      for (int j=0; j < 2 * N - 1; j++) {
        String[] line=buffReader.readLine().split("" "");
        for (int k=0; k < N; k++) {
          arr[index]=Integer.parseInt(line[k]);
          index++;
        }
      }
      Arrays.sort(arr);
      int count=1;
      int pre=arr[0];
      int cur=-2;
      String result="""";
      for (int x=1; x < size; x++) {
        cur=arr[x];
        if (cur == pre) {
          count++;
        }
 else {
          if ((count & 1) != 0) {
            result=result + "" "" + pre;
          }
          pre=cur;
          count=1;
        }
        if ((x == size - 1) && (count == 1)) {
          result=result + "" "" + pre;
        }
      }
      System.out.println(""Case #"" + i + "":""+ result);
      buffWriter.write(""Case #"" + i + "":""+ result);
      buffWriter.newLine();
      buffWriter.flush();
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      buffWriter.flush();
      buffWriter.close();
      buffReader.close();
      fileReader.close();
      fileWriter.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
"
30000136,"public static void main(String args[]){
  BufferedReader in;
  PrintWriter out;
  StringTokenizer a;
  int[] num=new int[2500];
  int[] finalArray;
  int currNum, count;
  try {
    in=new BufferedReader(new FileReader(""B-large.in""));
    out=new PrintWriter(new FileWriter(""out.txt""));
    int lines=Integer.parseInt(in.readLine());
    for (int x=1; x <= lines; x++) {
      int numRow=Integer.parseInt(in.readLine());
      Arrays.fill(num,0);
      finalArray=new int[numRow];
      for (int y=1; y <= numRow * 2 - 1; y++) {
        a=new StringTokenizer(in.readLine());
        for (int z=0; z < numRow; z++) {
          currNum=Integer.parseInt(a.nextToken());
          num[currNum - 1]++;
        }
      }
      count=0;
      for (int y=1; y <= 2500; y++) {
        if ((num[y - 1] % 2) != 0) {
          finalArray[count]=y;
          count++;
        }
      }
      Arrays.sort(finalArray);
      out.print(""Case #"" + x + "":"");
      for (int y=0; y < numRow; y++)       out.print("" "" + finalArray[y]);
      out.println();
    }
    in.close();
    out.close();
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException i) {
  }
}
"
30000137,"/** 
 * @param args
 */
public static void main(String[] args){
  try {
    br=new BufferedReader(new FileReader(new File(""input.txt"")));
    bw=new BufferedWriter(new FileWriter(new File(""output.txt"")));
    final long numCases=Long.parseLong(br.readLine());
    for (long i=1; i <= numCases; i++) {
      final int n=Integer.parseInt(br.readLine());
      HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
      for (int j=0; j < (n * 2) - 1; j++) {
        String s=br.readLine();
        StringTokenizer st=new StringTokenizer(s,"" "");
        while (st.hasMoreTokens()) {
          Integer key=Integer.parseInt(st.nextToken());
          if (map.containsKey(key)) {
            map.put(key,map.get(key) + 1);
          }
 else {
            map.put(key,1);
          }
        }
      }
      List<Integer> results=new ArrayList<Integer>();
      for (      Integer key : map.keySet()) {
        if (map.get(key) % 2 == 0) {
          continue;
        }
        results.add(key);
      }
      results.sort(new Comparator<Integer>(){
        @Override public int compare(        Integer o1,        Integer o2){
          return o1.compareTo(o2);
        }
      }
);
      String result="""";
      for (      Integer height : results) {
        result+=height + "" "";
      }
      String caseString=String.format(""Case #%s: %s\r\n"",i,result);
      System.out.print(caseString);
      bw.write(caseString);
    }
    bw.flush();
    bw.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000138,"public static void main(String[] args){
}
"
30000139,"public static void main(String[] args) throws IOException {
  BufferedReader leer=new BufferedReader(new FileReader(""B-small-attempt0.in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""B-small-attempt0.out""));
  StringBuilder salida=new StringBuilder();
  int casos=Integer.parseInt(leer.readLine());
  int[] pesos;
  int cont=0, n;
  StringTokenizer partes;
  while (casos-- != 0) {
    pesos=new int[3000];
    n=Integer.parseInt(leer.readLine());
    for (int i=0; i < 2 * n - 1; i++) {
      partes=new StringTokenizer(leer.readLine());
      while (partes.hasMoreTokens())       pesos[Integer.parseInt(partes.nextToken())]++;
    }
    salida.append(""Case #"").append(++cont).append("":"");
    for (int i=0; i < pesos.length; i++) {
      if (pesos[i] != 0 && pesos[i] % 2 != 0)       salida.append("" "").append(i);
    }
    salida.append(""\n"");
  }
  out.append(salida);
  out.close();
  leer.close();
  System.out.print(salida);
}
"
30000140,"public static void main(String[] args) throws FileNotFoundException, IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(""B-large.in""))){
    Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""outputRaFLARGE.txt""),""utf-8""));
    int cases=Integer.parseInt(br.readLine());
    for (int i=1; i <= cases; i++) {
      if (i > 1)       writer.write(System.getProperty(""line.separator""));
      writer.write(""Case #"" + i + "": "");
      int N=Integer.parseInt(br.readLine());
      int rows=(N * 2) - 1;
      ArrayList<Integer> allNumbers=new ArrayList<Integer>();
      for (int j=1; j <= rows; j++) {
        String singleRow=br.readLine();
        StringTokenizer tokens=new StringTokenizer(singleRow,"" "");
        while (tokens.hasMoreTokens()) {
          String singleNumberString=tokens.nextToken();
          int thisNumber=Integer.parseInt(singleNumberString);
          if (allNumbers.contains(thisNumber)) {
            allNumbers.remove(new Integer(thisNumber));
          }
 else {
            allNumbers.add(thisNumber);
          }
        }
      }
      Collections.sort(allNumbers);
      for (      Integer number : allNumbers) {
        writer.write(number.toString());
        writer.write("" "");
      }
    }
    writer.close();
  }
 }
"
30000141,"public static void main(String[] args){
  String fileName=""C://GoogleCodeJam/input.in"";
  BufferedReader br;
  try {
    br=new BufferedReader(new FileReader(fileName));
    String line1=null;
    int nLine=0;
    int nCases=0;
    int currentCase=0;
    int currentN=0;
    int N=0;
    boolean readN=false;
    while ((line1=br.readLine()) != null) {
      if (nLine > 0) {
        if (currentCase < nCases) {
          if (!readN) {
            N=Integer.valueOf(line1);
            InputUtils.inputs[currentCase]=new String[2 * N - 1];
            readN=true;
          }
 else {
            InputUtils.inputs[currentCase][currentN]=line1;
            currentN++;
            if (currentN >= 2 * N - 1) {
              currentN=0;
              readN=false;
              N=0;
              currentCase++;
            }
          }
        }
 else {
          break;
        }
      }
 else {
        nCases=Integer.valueOf(line1);
        InputUtils.inputs=new String[nCases][];
      }
      nLine++;
    }
    br.close();
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
catch (  IOException e2) {
    e2.printStackTrace();
  }
  List<String> solutionList=new ArrayList<String>();
  int T=InputUtils.inputs.length;
  System.out.println(""COMPUTING..."");
  for (int nCase=1; nCase <= T; nCase++) {
    int NumMax=InputUtils.inputs[nCase - 1].length;
    boolean[] numbers=new boolean[2501];
    Arrays.fill(numbers,false);
    List<Integer> solution=new ArrayList<Integer>();
    for (int i=0; i < NumMax; i++) {
      String[] line=InputUtils.inputs[nCase - 1][i].split("" "");
      for (int j=0; j < line.length; j++) {
        if (numbers[Integer.valueOf(line[j])]) {
          numbers[Integer.valueOf(line[j])]=false;
        }
 else {
          numbers[Integer.valueOf(line[j])]=true;
        }
      }
    }
    for (int k=0; k < numbers.length; k++) {
      if (numbers[k])       solution.add(k);
    }
    Collections.sort(solution);
    String caseString="""";
    for (    int s : solution) {
      caseString+=s + "" "";
    }
    caseString=caseString.trim();
    System.out.println(""Case #"" + nCase + "": ""+ caseString);
    solutionList.add(""Case #"" + nCase + "": ""+ caseString);
  }
  System.out.println(""DONE!"");
  FileWriter writer;
  try {
    writer=new FileWriter(""C://GoogleCodeJam/output.in"");
    for (    String str : solutionList) {
      writer.write(str + System.getProperty(""line.separator""));
    }
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000142,"public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
  Scanner sc=new Scanner(new File(""./src/B-large.in""));
  int t=sc.nextInt();
  PrintWriter writer=new PrintWriter(""./src/B-large.out"",""UTF-8"");
  for (int k=1; k <= t; k++) {
    a=new int[600][1200];
    count=new int[3000];
    for (int i=0; i < 3000; i++)     count[i]=0;
    writer.print(""Case #"" + k + "":"");
    n=sc.nextInt();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        a[i][j]=sc.nextInt();
        count[a[i][j]]++;
      }
    }
    for (int i=0; i < 3000; i++)     if (count[i] % 2 == 1)     writer.print("" "" + i);
    writer.println();
  }
  writer.close();
  sc.close();
}
"
30000143,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  Integer t=input.nextInt();
  for (int testCase=0; testCase < t; testCase++) {
    int n=input.nextInt();
    int[] heights=new int[2500];
    Arrays.fill(heights,0);
    for (int i=0; i < n * 2 - 1; i++) {
      for (int j=0; j < n; j++) {
        int h=input.nextInt();
        heights[h - 1]++;
      }
    }
    List<Integer> missingRow=new ArrayList<Integer>(n);
    for (int i=0; i < heights.length; i++) {
      if (heights[i] % 2 != 0) {
        missingRow.add(i);
      }
    }
    Collections.sort(missingRow);
    System.out.print(""Case #"" + (testCase + 1) + "":"");
    for (    Integer i : missingRow) {
      System.out.print("" "" + (i + 1));
    }
    System.out.println();
  }
  input.close();
}
"
30000144,"public static void main(String[] args){
  scan=new Scanner(System.in);
  T=scan.nextInt();
  for (int zz=1; zz <= T; zz++) {
    N=scan.nextInt();
    int[] s=new int[2501];
    for (int i=0; i < (2 * N - 1) * N; i++) {
      int a=scan.nextInt();
      s[a]++;
    }
    String ans="""";
    int j=0;
    for (int i=1; i < s.length; i++)     if (s[i] % 2 == 1) {
      ans+=i + "" "";
      j++;
    }
    ans=ans.trim();
    System.out.println(""Case #"" + zz + "": ""+ ans);
  }
}
"
30000145,"public static void main(String args[]){
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  for (int t=1; t <= T; ++t) {
    int N=scan.nextInt();
    scan.nextLine();
    HashMap<Integer,Integer> map=new HashMap<>();
    for (int i=0; i < 2 * N - 1; ++i) {
      String[] str=scan.nextLine().split("" "");
      for (      String s : str) {
        int cur=Integer.parseInt(s);
        if (map.containsKey(cur)) {
          map.put(cur,map.get(cur) + 1);
        }
 else {
          map.put(cur,1);
        }
      }
    }
    int[] result=new int[N];
    int index=0;
    for (    Map.Entry<Integer,Integer> e : map.entrySet()) {
      if (e.getValue() % 2 != 0) {
        result[index++]=e.getKey();
      }
    }
    Arrays.sort(result);
    String s="""";
    for (int i=0; i < N - 1; ++i) {
      s+=result[i] + "" "";
    }
    s+=result[N - 1];
    System.out.printf(""Case #%d: %s\n"",t,s);
  }
  scan.close();
}
"
30000146,"public static void main(String args[]) throws IOException {
  File inputFileName=new File(""D:\\Eclipse3\\CodeJam2016\\src\\Input\\B-large (1).in"");
  File outputFileName=new File(""D:\\Eclipse3\\CodeJam2016\\src\\Output\\B-large (1).out"");
  FileReader fileReader=null;
  BufferedReader bufferedReader=null;
  FileWriter fileWriter=null;
  BufferedWriter bufferedWriter=null;
  try {
    String line=null;
    int lineNo=0;
    int caseNo=0, noOfCases;
    String string2Write;
    fileReader=new FileReader(inputFileName);
    bufferedReader=new BufferedReader(fileReader);
    fileWriter=new FileWriter(outputFileName);
    bufferedWriter=new BufferedWriter(fileWriter);
    int argNo=0;
    int matrixN=-1;
    while ((line=bufferedReader.readLine()) != null) {
switch (argNo) {
case 0:
        argNo=1;
      break;
case 1:
    matrixN=Integer.valueOf(line);
  caseNo++;
argNo=2;
case 2:
int[][] matrix=new int[2 * matrixN - 1][matrixN];
for (int i=0; i < (2 * matrixN - 1); i++) {
line=bufferedReader.readLine();
String[] numbersInString=line.split("" "");
int col=0;
for (String s : numbersInString) {
matrix[i][col]=Integer.valueOf(s);
col++;
}
}
HashMap<Integer,Integer> countHeights=new HashMap<Integer,Integer>();
int[] missingRowOrColumn1=new int[matrixN];
for (int r=0; r < matrix.length; r++) {
for (int c=0; c < matrix[r].length; c++) {
int currentHeight=matrix[r][c];
if (countHeights.containsKey(currentHeight)) {
int existingCounts=countHeights.get(currentHeight);
countHeights.put(currentHeight,(existingCounts + 1));
}
 else {
countHeights.put(currentHeight,1);
}
}
}
int i1=0;
for (int height : countHeights.keySet()) {
int count=countHeights.get(height);
if (count % 2 != 0) {
missingRowOrColumn1[i1]=height;
i1++;
}
}
Arrays.sort(missingRowOrColumn1);
int[] missingRowOrColumn=missingRowOrColumn1;
string2Write=""Case #"" + String.valueOf(caseNo) + "": "";
for (int i=0; i < missingRowOrColumn.length; i++) {
string2Write=string2Write + (String.valueOf(missingRowOrColumn[i])) + "" "";
}
string2Write=string2Write + ""\n"";
bufferedWriter.write(string2Write);
argNo=1;
break;
}
}
}
 catch (Exception ex) {
ex.printStackTrace();
}
 finally {
bufferedReader.close();
bufferedWriter.close();
}
}
"
30000147,"public static void main(String[] args) throws IOException {
  File inFile=new File(args[0]);
  Scanner in=new Scanner(new BufferedReader(new FileReader(inFile)));
  int t=in.nextInt();
  File outFile=new File(args[1]);
  if (!outFile.exists()) {
    outFile.createNewFile();
  }
  FileWriter fw=new FileWriter(outFile.getAbsoluteFile());
  BufferedWriter bw=new BufferedWriter(fw);
  Set<Integer> set=new HashSet<>();
  for (int i=1; i <= t; ++i) {
    set.clear();
    int N=in.nextInt();
    in.nextLine();
    for (int k=0; k < 2 * N - 1; k++) {
      String[] s=in.nextLine().split("" "");
      for (      String str : s) {
        if (str.length() == 0)         continue;
        int num=Integer.parseInt(str);
        if (set.contains(num))         set.remove(num);
 else         set.add(num);
      }
    }
    List<Integer> num=new ArrayList<>();
    for (    int n : set) {
      num.add(n);
    }
    Collections.sort(num);
    StringBuilder sb=new StringBuilder();
    for (    int n : num)     sb.append(n).append("" "");
    sb.setLength(sb.length() - 1);
    String res=""Case #"" + i + "": ""+ sb.toString();
    bw.write(res);
    bw.newLine();
  }
  in.close();
  bw.close();
}
"
30000148,"public static void main(String[] args){
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int T=sc.nextInt();
  for (int test_case=1; test_case <= T; test_case++) {
    int N=sc.nextInt();
    HashMap<Integer,Integer> map=new HashMap<>();
    for (int i=0; i < N * (2 * N - 1); i++) {
      Integer m=sc.nextInt();
      if (!map.containsKey(m)) {
        map.put(m,1);
      }
 else {
        Integer cnt=map.remove(m);
        map.put(m,cnt + 1);
      }
    }
    TreeSet<Integer> ts=new TreeSet<>();
    for (    Entry<Integer,Integer> entry : map.entrySet()) {
      if (entry.getValue() % 2 == 1) {
        ts.add(entry.getKey());
      }
    }
    StringBuilder sb=new StringBuilder();
    int ts_size=ts.size();
    for (int i=0; i < ts_size; i++) {
      int value=ts.pollFirst();
      sb.append(value);
      if (i < ts_size - 1) {
        sb.append("" "");
      }
    }
    System.out.println(""Case #"" + test_case + "": ""+ sb);
  }
}
"
30000149,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int testCase=1; testCase <= t; ++testCase) {
    int n=in.nextInt();
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int a=in.nextInt();
        if (!map.containsKey(a)) {
          map.put(a,1);
        }
 else {
          int count=map.get(a);
          map.put(a,++count);
        }
      }
    }
    Iterator it=map.entrySet().iterator();
    int result[]=new int[n];
    int i=0;
    while (it.hasNext()) {
      Map.Entry pair=(Map.Entry)it.next();
      int key=(int)pair.getKey();
      int value=(int)pair.getValue();
      if (value % 2 != 0) {
        result[i]=key;
        i++;
      }
      it.remove();
    }
    Arrays.sort(result);
    System.out.print(""Case #"" + testCase + "":"");
    for (int j=0; j < n; j++) {
      System.out.print("" "" + result[j]);
    }
    System.out.println();
  }
  in.close();
}
"
30000150,"public static void main(String[] args) throws IOException {
{
{
      String fileAddr=""/users/sahil/Desktop/filename.txt"";
      Scanner scanner=new Scanner(System.in).useDelimiter(System.getProperty(""line.separator""));
      int numTestcases=scanner.nextInt();
      File file=new File(fileAddr);
      if (!file.exists()) {
        file.createNewFile();
      }
      FileWriter fw=new FileWriter(file.getAbsoluteFile());
      BufferedWriter bw=new BufferedWriter(fw);
      for (int j=0; j < numTestcases; j++) {
        int N=scanner.nextInt();
        HashMap<String,Integer> dictionary=new HashMap<String,Integer>();
        for (int i=0; i < 2 * N - 1; i++) {
          String[] listHeight=scanner.next().split("" "");
          for (int k=0; k < N; k++) {
            if (dictionary.get(listHeight[k]) == null)             dictionary.put(listHeight[k],1);
 else             dictionary.put(listHeight[k],dictionary.get(listHeight[k]) + 1);
          }
        }
        Iterator it=dictionary.entrySet().iterator();
        List<Integer> missList=new ArrayList<Integer>();
        while (it.hasNext()) {
          Map.Entry pair=(Map.Entry)it.next();
          if ((Integer)pair.getValue() % 2 != 0)           missList.add(Integer.parseInt((String)pair.getKey()));
        }
        Collections.sort(missList);
        bw.write(""Case #"" + (j + 1) + "": "");
        for (        int i : missList) {
          System.out.print(i);
          bw.write(Integer.toString(i));
          bw.write("" "");
        }
        bw.newLine();
      }
      bw.close();
      scanner.close();
    }
  }
}
"
30000151,"public static void main(String[] args) throws IOException {
  out=new PrintWriter(new BufferedWriter(new FileWriter(NAME + "".out"")));
  File file=new File(NAME + "".in"");
  try (BufferedReader br=new BufferedReader(new FileReader(file))){
    int T=Integer.parseInt(br.readLine());
    String line;
    for (int i=0; i < T; i++) {
      int N=Integer.parseInt(br.readLine());
      Map<Integer,Integer> map=new HashMap<>();
      for (int k=0; k < 2 * N - 1; k++) {
        line=br.readLine();
        String[] numStr=line.split("" "");
        for (int j=0; j < numStr.length; j++) {
          int key=Integer.parseInt(numStr[j]);
          if (map.containsKey(key)) {
            map.remove(key);
          }
 else {
            map.put(key,1);
          }
        }
      }
      List<Integer> singleNum=new ArrayList<>(map.keySet());
      Collections.sort(singleNum);
      StringBuilder result=new StringBuilder();
      for (      int e : singleNum) {
        result.append("" "" + e);
      }
      out.println(""Case #"" + (i + 1) + "":""+ result.toString());
    }
  }
   out.close();
  System.exit(0);
}
"
30000152,"public static void main(String[] args) throws IOException {
  String path=""B-large.in"";
  File f=new File(path);
  PrintWriter out=null;
  try {
    File fi=new File(""resultBlarge.txt"");
    fi.createNewFile();
    out=new PrintWriter(fi);
    Scanner sc=new Scanner(f);
    int num=sc.nextInt();
    for (int k=0; k < num; k++) {
      int n=sc.nextInt();
      TreeSet<Integer> lista=new TreeSet<>();
      for (int i=0; i < (2 * n) - 1; i++) {
        for (int j=0; j < n; j++) {
          int z=sc.nextInt();
          if (lista.contains(z)) {
            lista.remove(z);
          }
 else {
            lista.add(z);
          }
        }
      }
      out.printf(""Case #%d: "",(k + 1));
      for (      Integer i : lista) {
        out.print(i + "" "");
      }
      out.println();
    }
    sc.close();
  }
 catch (  FileNotFoundException e) {
    System.out.println(""File not found."");
  }
 finally {
    out.close();
  }
}
"
30000153,"public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
  int numCases=sc.nextInt();
  StringBuilder out=new StringBuilder();
  for (int h=1; h <= numCases; h++) {
    int[] heights=new int[2501];
    int n=sc.nextInt();
    for (int i=0; i < (2 * n) - 1; i++) {
      for (int k=0; k < n; k++) {
        int val=sc.nextInt();
        heights[val]++;
      }
    }
    out.append(String.format(""Case #%d:"",h));
    for (int i=0; i < heights.length; i++) {
      if (heights[i] % 2 == 1) {
        out.append("" "" + i);
      }
    }
    out.append(""\n"");
  }
  System.out.print(out + """");
}
"
30000154,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    boolean[] odd=new boolean[MAX_HEIGHT];
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        int h=in.nextInt();
        odd[h]=!odd[h];
      }
    }
    String answer="""";
    for (int j=1; j < MAX_HEIGHT; j++) {
      if (odd[j]) {
        answer+=j + "" "";
      }
    }
    System.out.println(""Case #"" + i + "": ""+ answer.substring(0,answer.length() - 1));
  }
  in.close();
}
"
30000155,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int casos=Integer.parseInt(br.readLine()), N;
  String rta, aux[];
  LinkedList<Integer> soldados=new LinkedList<Integer>(), segunda=new LinkedList<Integer>();
  for (int c=1; c <= casos; c++) {
    N=Integer.parseInt(br.readLine());
    soldados.clear();
    segunda.clear();
    rta="""";
    for (int i=0; i < 2 * N - 1; i++) {
      aux=br.readLine().split(""\\s+"");
      for (int j=0; j < N; j++)       soldados.add(Integer.parseInt(aux[j]));
    }
    Collections.sort(soldados);
    while (!soldados.isEmpty()) {
      int este=soldados.poll();
      if (!soldados.isEmpty()) {
        int otro=soldados.peek();
        if (este == otro)         soldados.poll();
 else         segunda.add(este);
      }
 else       segunda.add(este);
    }
    rta=segunda.toString();
    rta=rta.substring(1,rta.length() - 1).replaceAll("","","""");
    System.out.printf(""Case #%d: %s\n"",c,rta);
  }
  br.close();
}
"
30000156,"public static void main(String[] args) throws IOException {
  String file=""B-large.in"";
  BufferedReader br=new BufferedReader(new FileReader(file));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""out.txt""));
  int n=Integer.parseInt(br.readLine());
  for (int i=0; i < n; i++) {
    int len=Integer.parseInt(br.readLine());
    ArrayList<Integer> nums=new ArrayList<>();
    ArrayList<Integer> shows=new ArrayList<>();
    for (int j=0; j < len * 2 - 1; j++) {
      String s=br.readLine();
      String[] ss=s.split("" "");
      for (int k=0; k < ss.length; k++) {
        int a=Integer.parseInt(ss[k]);
        if (nums.contains(a)) {
          shows.set(nums.lastIndexOf(a),shows.get(nums.lastIndexOf(a)) + 1);
        }
 else {
          nums.add(a);
          shows.add(1);
        }
      }
    }
    int[] ints=new int[len];
    for (int j=0, k=0; j < nums.size(); j++) {
      if (shows.get(j) % 2 != 0)       ints[k++]=nums.get(j);
    }
    Arrays.sort(ints);
    StringBuilder sb=new StringBuilder();
    sb.append(ints[0]);
    for (int j=1; j < ints.length; j++) {
      sb.append("" "").append(ints[j]);
    }
    bw.write(""Case #"" + (i + 1) + "": ""+ sb.toString());
    bw.newLine();
  }
  br.close();
  bw.close();
}
"
30000157,"public static void main(String[] args) throws FileNotFoundException {
  File f=new File(""B-large.in"");
  Scanner s=new Scanner(f);
  String line=s.nextLine();
  int T=Integer.parseInt(line);
  File f2=new File(""largeoutput.txt"");
  PrintWriter p=new PrintWriter(f2);
  for (int j=1; j <= T; j++) {
    int[] counts=new int[2500];
    int n=s.nextInt();
    for (int i=0; i < 2 * n * n - n; i++) {
      int tmp=s.nextInt();
      counts[tmp - 1]++;
    }
    String result="""";
    for (int i=0; i < counts.length; i++) {
      if (counts[i] % 2 != 0) {
        result+=(i + 1) + "" "";
      }
    }
    p.println(""Case #"" + j + "": ""+ result);
  }
  p.close();
  s.close();
}
"
30000158,"public static void main(String[] args) throws java.lang.Exception {
  DataInputStream in=new DataInputStream(System.in);
  int t, h;
  t=Integer.parseInt(in.readLine());
  int heights[]=new int[2502];
  for (int k=0; k < 2501; k++)   heights[k]=0;
  for (int i=1; i <= t; i++) {
    int n;
    n=Integer.parseInt(in.readLine());
    for (int j=1; j < 2 * n; j++) {
      String line=in.readLine();
      StringTokenizer st=new StringTokenizer(line);
      for (int x=0; x < n; x++) {
        h=Integer.parseInt(st.nextToken());
        System.out.print(h + "" "");
        heights[h]=heights[h] + 1;
      }
      System.out.println("""");
    }
    String s="""";
    for (int k=0; k < 2502; k++) {
      if (heights[k] % 2 != 0)       s=s + k + "" "";
      heights[k]=0;
    }
    s=s.trim();
    System.out.println(""Case #"" + i + "": ""+ s);
  }
}
"
30000159,"public static void main(String a[]) throws IOException {
  Scanner scanner=new Scanner(System.in);
  File file=new File(""RankAndFile.txt"");
  FileOutputStream fileOutputStream=new FileOutputStream(file);
  BufferedWriter bufferedWriter=new BufferedWriter(new OutputStreamWriter(fileOutputStream));
  int n=Integer.parseInt(scanner.nextLine());
  int x=1;
  while (n-- > 0) {
    Map<String,Integer> map=new HashMap<>();
    int arrLength=Integer.parseInt(scanner.nextLine());
    int noOfLines=arrLength * 2;
    noOfLines--;
    while (noOfLines-- > 0) {
      String line=scanner.nextLine();
      String str[]=line.split("" "");
      for (      String s : str) {
        Integer count=map.get(s);
        if (count == null)         count=0;
        map.put(s,++count);
      }
    }
    int[] arr=new int[arrLength];
    int index=0;
    for (    Map.Entry<String,Integer> entry : map.entrySet()) {
      if (entry.getValue() % 2 != 0)       arr[index++]=Integer.valueOf(entry.getKey());
      if (index == arrLength)       break;
    }
    Arrays.sort(arr);
    String temp="""";
    for (    int i : arr)     temp+=i + "" "";
    bufferedWriter.write(""Case #"" + x++ + "": ""+ temp+ ""\n"");
  }
  bufferedWriter.flush();
  bufferedWriter.close();
}
"
30000160,"public static void main(String[] args){
  StringBuffer answer=new StringBuffer();
  final int MAXH=2501;
  try (Scanner sc=new Scanner(new File(filePath))){
    int T=sc.nextInt();
    for (int i=1; i <= T; i++) {
      answer.append(""Case #"" + i + "":"");
      int N=sc.nextInt();
      int lineCnt=2 * N - 1;
      int[] heights=new int[MAXH];
      for (int j=0; j < lineCnt; j++) {
        for (int k=0; k < N; k++) {
          int h=sc.nextInt();
          heights[h]++;
        }
      }
      for (int h=0; h < MAXH; h++) {
        if (heights[h] % 2 != 0) {
          answer.append("" "").append(h);
        }
      }
      answer.append(""\n"");
    }
    String outPath=""answer.out"";
    if (filePath != null && !filePath.equals("""")) {
      outPath=filePath.substring(0,filePath.length() - 2) + ""out"";
    }
    try (FileOutputStream fos=new FileOutputStream(outPath,false)){
      fos.write(answer.toString().getBytes());
    }
     System.out.println(answer);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000161,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scanner=new Scanner(new File(""b.in""));
  PrintWriter writer=new PrintWriter(new File(""b.out""));
  int t=scanner.nextInt();
  for (int tt=1; tt <= t; ++tt) {
    writer.print(""Case #"" + tt + "":"");
    int n=scanner.nextInt();
    int m=2 * n - 1;
    boolean flag[]=new boolean[2501];
    Arrays.fill(flag,false);
    for (int i=0; i < m; ++i) {
      for (int j=0; j < n; ++j) {
        int x=scanner.nextInt();
        flag[x]=!flag[x];
      }
    }
    ArrayList<Integer> result=new ArrayList<Integer>();
    for (int i=1; i <= 2500; ++i) {
      if (flag[i]) {
        result.add(i);
      }
    }
    Collections.sort(result);
    for (    int i : result) {
      writer.print("" "" + i);
    }
    writer.println();
  }
  scanner.close();
  writer.close();
}
"
30000162,"public static void main(String[] args) throws IOException {
  FileInputStream fstream=new FileInputStream(""B-large.in"");
  BufferedReader br=new BufferedReader(new InputStreamReader(fstream));
  File fout=new File(""out.txt"");
  FileOutputStream fos=new FileOutputStream(fout);
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(fos));
  int count=Integer.parseInt(br.readLine());
  for (int i=1; i <= count; i++) {
    int lineNum=Integer.parseInt(br.readLine());
    HashSet<Integer> set=new HashSet<Integer>();
    for (int j=0; j < lineNum * 2 - 1; j++) {
      Scanner scanner=new Scanner(br.readLine());
      while (scanner.hasNextInt()) {
        int height=scanner.nextInt();
        if (set.contains(height)) {
          set.remove(height);
        }
 else {
          set.add(height);
        }
      }
    }
    int[] arr=new int[lineNum];
    int k=0;
    for (    int height : set) {
      arr[k++]=height;
    }
    Arrays.sort(arr);
    bw.write(""Case #"" + i + "": "");
    for (k=0; k < lineNum; k++) {
      bw.write(arr[k] + "" "");
    }
    bw.newLine();
  }
  br.close();
  bw.close();
}
"
30000163,"public static void main(String[] args) throws FileNotFoundException, IOException {
  List<List<Integer>> testCaseAll=new ArrayList<List<Integer>>();
  try (BufferedReader br=new BufferedReader(new FileReader(""D:\\input.txt""))){
    String line;
    br.readLine();
    while ((line=br.readLine()) != null) {
      List<Integer> base=new ArrayList<Integer>();
      for (int i=0; i < (Integer.valueOf(line) * 2 - 1); i++) {
        String[] parts=br.readLine().split("" "");
        for (        String string : parts) {
          base.add(Integer.valueOf(string));
        }
      }
      testCaseAll.add(base);
    }
    List<String> result=new ArrayList<>();
    for (    List<Integer> numbers : testCaseAll) {
      List<Integer> clone=new ArrayList<Integer>(numbers);
      Collections.sort(clone);
      Integer highest=clone.get(clone.size() - 1);
      String resultValue="""";
      for (int i=0; i <= highest; i++) {
        int amount=Collections.frequency(numbers,Integer.valueOf(i));
        if (amount != 0 && amount % 2 != 0)         resultValue=resultValue + "" "" + String.valueOf(i);
      }
      System.out.println(""done"");
      result.add(resultValue);
    }
    PrintWriter pw=new PrintWriter(new FileWriter(""D:\\outPut.txt""));
    int i=1;
    for (    String string : result) {
      pw.println(""Case #"" + i + "": ""+ string);
      i++;
    }
    pw.close();
  }
 }
"
30000164,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=0; i < T; i++) {
    String res="""";
    int N=sc.nextInt();
    int d[]=new int[2500];
    List<Integer> r=new ArrayList<>();
    for (int j=0; j < (2 * N - 1) * N; j++) {
      d[sc.nextInt() - 1]++;
    }
    for (int j=0; j < 2500; j++) {
      if (d[j] % 2 != 0)       r.add(j + 1);
    }
    Collections.sort(r);
    res+=r.get(0);
    for (int j=1; j < r.size(); j++)     res+="" "" + r.get(j);
    System.out.println(""Case #"" + (i + 1) + "": ""+ res);
  }
}
"
30000165,"public static void main(String[] args) throws Exception {
  GCJ_RankFile J=new GCJ_RankFile();
  Locale.setDefault(Locale.US);
  File inputFile=new File(""B.in"");
  PrintWriter outputFile=new PrintWriter(""B.out"",""UTF-8"");
  Scanner sc=new Scanner(inputFile);
  sc.useLocale(Locale.US);
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    J.min=Integer.MAX_VALUE;
    J.max=Integer.MIN_VALUE;
    int N=sc.nextInt();
    int[][] list=new int[2 * N - 1][N];
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        int x=sc.nextInt();
        list[i][j]=x;
        if (x < J.min)         J.min=x;
        if (x > J.max)         J.max=x;
      }
    }
    int[] cnt=new int[2501];
    for (int i=0; i < 2 * N - 1; i++)     for (int j=0; j < N; j++) {
      cnt[list[i][j]]++;
    }
    int[] tmp=new int[N];
    int st=0;
    for (int u=0; u < 2501; u++) {
      if (cnt[u] % 2 == 1) {
        tmp[st++]=u;
      }
    }
    Arrays.sort(tmp);
    String res="""";
    for (    int u : tmp) {
      res+=u + "" "";
    }
    String s=res;
    System.out.println(""Case #"" + t + "": ""+ s);
    outputFile.println(""Case #"" + t + "": ""+ s);
  }
  sc.close();
  outputFile.close();
}
"
30000166,"public static void main(String[] args) throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(new File(""output"")));
  Scanner scanner=new Scanner(System.in);
  int T=scanner.nextInt();
  for (int t=0; t < T; t++) {
    int N=scanner.nextInt();
    int[][] array=new int[2 * N - 1][N];
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        array[i][j]=scanner.nextInt();
      }
    }
    List<Integer> output=new ArrayList<>();
    String resultString1="""";
    int[] heights=new int[2501];
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        heights[array[i][j]]++;
      }
    }
    for (int i=0; i < heights.length; i++) {
      if (heights[i] % 2 == 1) {
        output.add(i);
      }
    }
    Collections.sort(output);
    for (    int value : output) {
      resultString1+=String.valueOf(value) + "" "";
    }
    String resultString=resultString1;
    writer.write(""Case #"" + (t + 1) + "": ""+ resultString+ ""\n"");
  }
  writer.close();
}
"
30000167,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int i=0; i < t; i++) {
    int n=in.nextInt();
    int[] ar=new int[2501];
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++)       ar[in.nextInt()]++;
    }
    int[] ans=new int[n];
    int count=0;
    for (int j=1; j < 2501; j++) {
      if (ar[j] != 0 && ar[j] % 2 != 0) {
        ans[count]=j;
        count++;
      }
    }
    Arrays.sort(ans);
    System.out.print(""Case #"" + (i + 1) + "": "");
    for (int j=0; j < n; j++)     System.out.print(ans[j] + "" "");
    System.out.println();
  }
}
"
30000168,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""B-large.in""));
  PrintWriter out=new PrintWriter(new FileWriter(""out.txt""));
  int tests=in.nextInt();
  for (int t=1; t <= tests; t++) {
    int n=in.nextInt();
    int[] count=new int[2501];
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        count[in.nextInt()]++;
      }
    }
    out.print(""Case #"" + t + "":"");
    for (int i=1; i <= 2500; i++) {
      if (count[i] % 2 != 0)       out.print("" "" + i);
    }
    out.println();
  }
  in.close();
  out.close();
}
"
30000169,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=Integer.parseInt(sc.nextLine());
  for (int i=0; i < t; i++) {
    int n=Integer.parseInt(sc.nextLine());
    ArrayList<Integer> lists=new ArrayList<>();
    for (int j=0; j < n * n * 2 - n; j++) {
      lists.add(sc.nextInt());
    }
    sc.nextLine();
    HashSet<Integer> heights=new HashSet<>();
    for (    Integer height1 : lists) {
      if (heights.contains(height1)) {
        heights.remove(height1);
      }
 else {
        heights.add(height1);
      }
    }
    Integer[] list=heights.toArray(new Integer[heights.size()]);
    Arrays.sort(list);
    Integer[] missingList=list;
    System.out.printf(""Case #%d:"",i + 1);
    for (    int height : missingList) {
      System.out.printf("" %d"",height);
    }
    System.out.println();
  }
}
"
30000170,"public static void main(String[] args) throws IOException {
  System.out.println(""Enter File Name = "");
  String ipfile=br.readLine();
  System.out.println(""File Name = "" + ipfile);
  fr=new BufferedReader(new FileReader(ipfile));
  Integer cases=Integer.parseInt(fr.readLine());
  System.out.println(""Cases = "" + cases);
  Missing_list myvar=new Missing_list();
  String line;
  Integer cnt=1;
  for (int i=1; i <= cases; i++) {
    Integer nums=Integer.parseInt(fr.readLine());
    for (int j=0; j < (nums * 2) - 1; j++) {
      line=fr.readLine();
      Scanner s=new Scanner(line);
      for (int k=0; k < nums; k++) {
        Integer number=s.nextInt();
        num_list.add(number);
      }
    }
    ListIterator<Integer> it=num_list.listIterator();
    missing_list.clear();
    while (it.hasNext()) {
      Integer curr_num=it.next();
      Integer occr=Collections.frequency(num_list,curr_num);
      if (occr % 2 != 0) {
        Integer dups=Collections.frequency(missing_list,curr_num);
        if (dups == 0)         missing_list.add(curr_num);
      }
    }
    Collections.sort(missing_list);
    String res=missing_list.toString().replaceAll(""[^a-zA-Z0-9 ]"","""").toUpperCase();
    System.out.println(""Case #"" + i + "": ""+ res);
    num_list.clear();
  }
}
"
30000171,"Gcj(){
  buff=new BufferedReader(new InputStreamReader(System.in));
  try {
    T=Integer.parseInt(buff.readLine());
  }
 catch (  Exception e) {
    System.err.println(e);
  }
}
"
30000172,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""in.txt""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""soldiers.txt""));
  int T, N=0;
  String l;
  T=Integer.valueOf(br.readLine());
  for (int i=0; i < T; i++) {
    String s="""";
    N=Integer.valueOf(br.readLine());
    int[][] lists=new int[2 * N - 1][N];
    for (int j=0; j < (2 * N - 1); j++) {
      l=br.readLine();
      for (int k=0; k < N; k++)       lists[j][k]=Integer.valueOf(l.split("" "")[k]);
    }
    int c=0;
    for (int m=1; m < 2501; m++) {
      c=0;
      for (int j=0; j < (2 * N - 1); j++)       for (int k=0; k < N; k++)       if (lists[j][k] == (m))       c++;
      if (c % 2 != 0)       s=s + m + "" "";
    }
    bw.write(""Case #"" + (i + 1) + "": ""+ s);
    bw.newLine();
  }
  br.close();
  bw.close();
}
"
30000173,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(args[0]));
  int t=in.nextInt();
  for (int i=0; i < t; i++) {
    int n=in.nextInt();
    int[][] lists=new int[2 * n - 1][n];
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        lists[j][k]=in.nextInt();
      }
    }
    int[] heightOccurences=new int[2501];
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        heightOccurences[lists[j][k]]+=1;
      }
    }
    System.out.format(""Case #%d:"",i + 1);
    for (int j=1; j < heightOccurences.length; j++) {
      if (heightOccurences[j] % 2 != 0) {
        System.out.format("" %d"",j);
      }
    }
    System.out.format(""%n"");
  }
}
"
30000174,"public static void main(String[] args) throws IOException {
  StringBuffer sb;
  Scanner sc=new Scanner(new FileReader(""B-large (1).in""));
  int N=Integer.valueOf(sc.nextLine());
  FileOutputStream fs=new FileOutputStream(new File(""202.txt""));
  PrintStream p=new PrintStream(fs);
  HashSet<String> set=new HashSet<>();
  loop:   for (int i=1; i <= N; i++) {
    set=new HashSet<>();
    int people=sc.nextInt();
    int[] height=new int[3000];
    for (int j=0; j < 2 * people - 1; j++) {
      for (int k=0; k < people; k++) {
        height[sc.nextInt()]++;
      }
    }
    System.out.print(""Case #"" + i + "": "");
    p.print(""Case #"" + i + "": "");
    for (int m=0; m < height.length; m++) {
      if (height[m] % 2 != 0) {
        System.out.print(m + "" "");
        p.print(m + "" "");
      }
    }
    System.out.println();
    p.println();
  }
}
"
30000175,"public static void main(String[] args){
  try {
    BufferedReader br=new BufferedReader(new FileReader(""in.txt""));
    BufferedWriter bw=new BufferedWriter(new FileWriter(""out.txt"",true));
    PrintWriter out=new PrintWriter(bw);
    int cases=Integer.parseInt(br.readLine());
    int caseNo=1;
    for (int i=0; i < cases; i++) {
      int N=Integer.parseInt(br.readLine());
      numbers=new int[2501];
      for (int j=0; j < (2 * N) - 1; j++) {
        String line=br.readLine();
        for (        String number : line.split("" "")) {
          int numberInt=Integer.parseInt(number);
          numbers[numberInt]=numbers[numberInt] + 1;
        }
      }
      String answer="""";
      for (int k=0; k < numbers.length; k++) {
        if (numbers[k] % 2 > 0) {
          answer=answer + k + "" "";
        }
      }
      out.println(""Case #"" + caseNo + "": ""+ answer);
      caseNo++;
    }
    out.close();
  }
 catch (  IOException e) {
    System.out.println(""nooo"");
  }
}
"
30000176,"public static void main(String[] args) throws IOException {
  in=new BufferedReader(new FileReader(FILENAME + "".in.txt""));
  out=new PrintWriter(new BufferedWriter(new FileWriter(""@generic.out.txt"")));
  int TC=Integer.parseInt(in.readLine());
  for (int tc=1; tc <= TC; tc++) {
    out.print(""Case #"" + tc + "": "");
    int N=Integer.parseInt(in.readLine());
    HashMap<String,Integer> men=new HashMap();
    for (int i=0; i < 2 * N - 1; i++) {
      String[] str=in.readLine().split("" "");
      for (int c=0; c < str.length; c++) {
        if (men.containsKey(str[c])) {
          men.put(str[c],men.get(str[c]) + 1);
        }
 else {
          men.put(str[c],1);
        }
      }
    }
    ArrayList<Integer> result=new ArrayList<Integer>();
    Set set=men.entrySet();
    Iterator i=set.iterator();
    while (i.hasNext()) {
      Map.Entry me=(Map.Entry)i.next();
      if ((int)me.getValue() % 2 == 1) {
        result.add(Integer.parseInt((String)me.getKey()));
      }
    }
    Collections.sort(result);
    for (    int res : result) {
      System.out.println(res);
      out.print(res + "" "");
    }
    out.println();
  }
  in.close();
  out.close();
}
"
30000177,"public static void main(String[] args){
  Date d1=new Date();
  try {
    FileWriter fw=new FileWriter(""B-large.out"");
    BufferedWriter bw=new BufferedWriter(fw);
    Scanner sc=new Scanner(new File(""B-large.in""));
    long t=sc.nextLong();
    sc.nextLine();
    for (long i2=0; i2 < t; i2++) {
      int n=sc.nextInt();
      sc.nextLine();
      int lines[][]=new int[2 * n - 1][n];
      for (int i=0; i < 2 * n - 1; i++) {
        for (int j=0; j < n; j++) {
          int a=sc.nextInt();
          lines[i][j]=a;
        }
      }
      HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
      for (int i=0; i < lines.length; i++) {
        for (int j=0; j < n; j++) {
          int h=lines[i][j];
          if (!map.containsKey(h)) {
            map.put(h,1);
          }
 else {
            map.put(h,map.get(h) + 1);
          }
        }
      }
      Set<Entry<Integer,Integer>> entrySet=map.entrySet();
      ArrayList<Integer> m=new ArrayList<Integer>();
      for (      Entry<Integer,Integer> entry : entrySet) {
        if (entry.getValue() % 2 == 1) {
          m.add(entry.getKey());
        }
      }
      Collections.sort(m);
      String result="""";
      if (m.size() == n) {
        for (int i=0; i < m.size(); i++) {
          result+=m.get(i);
          if (i != m.size() - 1) {
            result+="" "";
          }
        }
      }
 else {
        result=null;
        System.out.println(""Error "");
      }
      String rez=result;
      bw.write(""Case #"" + (i2 + 1) + "": ""+ rez+ ""\n"");
    }
    bw.flush();
    bw.close();
    fw.close();
    sc.close();
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
  }
 finally {
  }
  Date d2=new Date();
}
"
30000178,"public static void main(String[] args) throws IOException {
}
"
30000179,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(""input"")));
  int test_no=Integer.parseInt(br.readLine());
  BufferedWriter out=new BufferedWriter(new FileWriter(""out.txt""));
  for (int i=1; i <= test_no; i++) {
    int N=Integer.parseInt(br.readLine());
    ArrayList<String> alllist=new ArrayList<String>();
    int[] count=new int[2500];
    for (int j=0; j < 2 * N - 1; j++) {
      String[] oneline=br.readLine().split("" "");
      for (int k=0; k < N; k++)       count[Integer.parseInt(oneline[k]) - 1]++;
    }
    StringBuilder result=new StringBuilder();
    for (int m=0; m < 2500; m++) {
      if (count[m] % 2 == 1) {
        result.append(String.valueOf(m + 1));
        result.append("" "");
      }
    }
    System.out.println(result.toString().trim());
    out.write(""Case #"");
    out.write(String.valueOf(i));
    out.write("": "");
    out.write(result.toString().trim());
    out.write(""\n"");
  }
  br.close();
  out.close();
}
"
30000180,"public static void main(String[] args) throws IOException {
  Scanner s=new Scanner(new File(""b.in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""b.out""));
  int T=s.nextInt();
  for (int i=1; i <= T; i++) {
    out.write(""Case #"" + i + "":"");
    int N=s.nextInt();
    boolean[] heights=new boolean[2501];
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        int h=s.nextInt();
        heights[h]=!heights[h];
      }
    }
    for (int j=0; j < 2500; j++) {
      if (heights[j]) {
        out.write("" "" + j);
      }
    }
    out.write(""\n"");
  }
  out.close();
}
"
30000181,"public static void main(String[] args) throws IOException {
  RankFiles rf=new RankFiles();
  String inputPath=args[0];
  String outputPath=args[1];
  FileReader fileReader=new FileReader(inputPath);
  BufferedReader bufferedReader=new BufferedReader(fileReader);
  String line=null;
  int size=Integer.parseInt(bufferedReader.readLine());
  ArrayList<ArrayList<ArrayList<Integer>>> tests=new ArrayList<ArrayList<ArrayList<Integer>>>();
  int i=0;
  while (i < size) {
    int d=Integer.parseInt(bufferedReader.readLine());
    ArrayList<ArrayList<Integer>> test=new ArrayList<ArrayList<Integer>>();
    for (int j=2 * d - 1; j > 0; j--) {
      line=bufferedReader.readLine();
      ArrayList<Integer> lineHeights=new ArrayList<Integer>();
      for (      String s : line.split("" ""))       lineHeights.add(Integer.parseInt(s));
      test.add(lineHeights);
    }
    tests.add(test);
    i++;
  }
  bufferedReader.close();
  ArrayList<String> output=new ArrayList<String>();
  for (int j=0; j < size; j++) {
    ArrayList<ArrayList<Integer>> test=tests.get(j);
    HashMap<Integer,Integer> stats=new HashMap<Integer,Integer>();
    int[] res=new int[(test.size() + 1) / 2];
    for (    ArrayList<Integer> ai : test) {
      for (      Integer h : ai) {
        if (stats.containsKey(h))         stats.put(h,stats.get(h) + 1);
 else         stats.put(h,1);
      }
    }
    int k=0;
    for (    Integer h : stats.keySet()) {
      if (stats.get(h) % 2 == 1)       res[k++]=h;
    }
    Arrays.sort(res);
    StringBuilder sb=new StringBuilder();
    for (    int ni : res)     sb.append("" "" + ni);
    String out=sb.toString();
    output.add(""Case #"" + (j + 1) + "":""+ out);
    System.out.println(out);
  }
  Path file=Paths.get(outputPath);
  Files.write(file,output,Charset.forName(""UTF-8""));
}
"
30000182,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int tt=sc.nextInt();
  int c;
  for (int z=0; z < tt; z++) {
    int n=sc.nextInt();
    int[] a=new int[2501];
    for (int i=0; i < (2 * n) - 1; i++) {
      for (int j=0; j < n; j++) {
        c=sc.nextInt();
        a[c]+=1;
      }
    }
    Arrays.sort(a);
    System.out.print(""Case #"" + (z + 1) + "":""+ "" "");
    for (int i=0; i < 2501; i++)     if (a[i] % 2 != 0) {
      System.out.print(a[i] + "" "");
    }
    System.out.println();
  }
}
"
30000183,"public static void main(String[] args){
  Round1A2 q1=new Round1A2();
  Scanner in=new Scanner(System.in).useDelimiter(""\\n"");
  int numLines=in.nextInt();
  for (int currLine=0; currLine < numLines; currLine++) {
    int numRow=in.nextInt();
    TreeMap<Integer,Integer> hmap=new TreeMap<Integer,Integer>();
    int[][] array=new int[3][numRow * 2 - 1];
    for (int i=0; i < numRow * 2 - 1; i++) {
      String userInput=in.next();
      String[] tokens=userInput.split(""\\s"");
      for (int j=0; j < tokens.length; j++) {
        if (hmap.containsKey(Integer.valueOf(tokens[j]))) {
          int value=hmap.get(Integer.valueOf(tokens[j])) + 1;
          hmap.put(Integer.valueOf(tokens[j]),value);
        }
 else {
          hmap.put(Integer.valueOf(tokens[j]),1);
        }
      }
    }
    int tempLine=currLine + 1;
    System.out.print(""Case #"" + tempLine + "": "");
    String result="""";
    for (    int k : hmap.keySet()) {
      if (hmap.get(k) % 2 == 1) {
        result+=k + "" "";
      }
    }
    result=result.substring(0,result.length() - 1);
    System.out.println(result);
  }
}
"
30000184,"public static void main(String[] args){
  RankAndFile countingSheep=new RankAndFile();
  try {
    BufferedReader br=new BufferedReader(new FileReader(""./src/rankandfile.txt""));
    countingSheep.mT=Integer.parseInt(br.readLine());
    countingSheep.mN=new int[countingSheep.mT];
    countingSheep.mNData=new String[countingSheep.mT][];
    for (int i=0; i < countingSheep.mT; i++) {
      countingSheep.mN[i]=Integer.parseInt(br.readLine());
      countingSheep.mNData[i]=new String[2 * countingSheep.mN[i] - 1];
      for (int j=0; j < 2 * countingSheep.mN[i] - 1; j++) {
        countingSheep.mNData[i][j]=br.readLine();
      }
    }
    br.close();
    System.out.println(""Total testcases: "" + countingSheep.mT);
    for (int i=0; i < countingSheep.mT; i++) {
      System.out.println(""Testcase #"" + i + "": ""+ countingSheep.mN[i]);
      for (int j=0; j < 2 * countingSheep.mN[i] - 1; j++) {
        System.out.println(countingSheep.mNData[i][j]);
      }
    }
    for (int i=0; i < countingSheep.mT; i++) {
      int N=countingSheep.mN[i];
      HashMap<String,Integer> mCountTable=new HashMap<>();
      for (int j=0; j < 2 * N - 1; j++) {
        String[] numbers=countingSheep.mNData[i][j].split("" "");
        for (int k=0; k < numbers.length; k++) {
          if (mCountTable.containsKey(numbers[k])) {
            mCountTable.put(numbers[k],mCountTable.get(numbers[k]) + 1);
          }
 else {
            mCountTable.put(numbers[k],1);
          }
        }
      }
      Set<String> keys=mCountTable.keySet();
      ArrayList<Integer> mMiss=new ArrayList<>();
      for (      String key : keys) {
        if (mCountTable.get(key) % 2 != 0) {
          mMiss.add(Integer.parseInt(key));
        }
      }
      java.util.Collections.sort(mMiss);
      String str="""";
      for (int l=0; l < mMiss.size() - 1; l++) {
        str+=mMiss.get(l) + "" "";
      }
      str+=mMiss.get(mMiss.size() - 1);
      String data=""Case #"" + (i + 1) + "": ""+ str;
      try {
        PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(""./src/rankandfile_out.txt"",true)));
        writer.println(data);
        writer.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  NumberFormatException|IOException e) {
    e.printStackTrace();
  }
}
"
30000185,"public static void main(String[] args) throws IOException {
  File inFile=new File(""yearOf2016/B-large.in"");
  File outFile=new File(""yearOf2016/testOutput.txt"");
  if (!outFile.exists()) {
    outFile.createNewFile();
  }
  Scanner reader=new Scanner(inFile);
  PrintWriter writer=new PrintWriter(outFile);
  int cases=reader.nextInt();
  int caseIdx=1;
  while (caseIdx <= cases) {
    int N=reader.nextInt();
    HashMap<Integer,Integer> numList=new HashMap<>();
    for (int n=0; n < (2 * N - 1) * N; n++) {
      int s=reader.nextInt();
      if (!numList.containsKey(s)) {
        numList.put(s,1);
      }
 else {
        int temp=numList.get(s);
        numList.put(s,temp + 1);
      }
    }
    ArrayList<Integer> result=new ArrayList<>();
    for (    int key : numList.keySet()) {
      if (numList.get(key) % 2 != 0) {
        result.add(key);
      }
    }
    Collections.sort(result);
    writer.print(""Case #"" + caseIdx + "":"");
    for (    int r : result) {
      writer.print("" "" + r);
    }
    writer.println("" "");
    caseIdx+=1;
  }
  reader.close();
  writer.close();
}
"
30000186,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new File(""B-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""output.txt""));
  RankOfFile test=new RankOfFile();
  int n=in.nextInt();
  for (int i=0; i < n; i++) {
    int k=in.nextInt();
    Map<Integer,Integer> map=new TreeMap<Integer,Integer>(){
    }
;
    for (int j=0; j < (2 * k - 1) * k; j++) {
      String s=in.next();
      int num=Integer.parseInt(s);
      if (map.containsKey(num)) {
        map.put(Integer.parseInt(s),map.get(num) + 1);
      }
 else {
        map.put(Integer.parseInt(s),1);
      }
    }
    String[] sb=new String[k];
    int kk=0;
    Set set2=map.entrySet();
    Iterator iterator2=set2.iterator();
    while (iterator2.hasNext()) {
      Map.Entry me2=(Map.Entry)iterator2.next();
      if ((int)me2.getValue() % 2 != 0) {
        sb[kk]=String.valueOf(me2.getKey());
        kk++;
      }
    }
    pw.print(""Case #"" + (i + 1) + "": "");
    pw.println(String.join("" "",sb));
  }
  pw.flush();
  pw.close();
  in.close();
}
"
30000187,"public static void main(String[] args){
  Scanner scan=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int amount=scan.nextInt();
  scan.nextLine();
  for (int i=0; i < amount; i++) {
    int cases=scan.nextInt();
    scan.nextLine();
    int[] arr=new int[2501];
    for (int x=0; x < 2 * cases - 1; x++) {
      String[] curr=scan.nextLine().split("" "");
      for (      String r : curr) {
        arr[Integer.parseInt(r)]++;
      }
    }
    String f="""";
    for (int num=1; num < arr.length; num++) {
      if (arr[num] == 1 || (arr[num] > 2 && arr[num] % 2 != 0)) {
        f+="" "" + num;
      }
    }
    System.out.println(""Case #"" + (i + 1) + "":""+ f);
  }
}
"
30000188,"public static void main(String[] args) throws Exception {
  String filePrefix=args.length > 0 ? args[0] : ""B-large"";
  try {
    B r=new B();
    r.sc=new Scanner(new FileReader(filePrefix + "".in""));
    r.pw=new PrintWriter(new FileWriter(filePrefix + "".out""));
    int ntest=r.sc.nextInt();
    for (int test=1; test <= ntest; test++) {
      Scanner sc=r.sc;
      r.N=sc.nextInt();
      r.h=new int[2 * r.N - 1][r.N];
      for (int i=0; i < 2 * r.N - 1; i++)       for (int j=0; j < r.N; j++)       r.h[i][j]=sc.nextInt();
      r.pw.print(""Case #"" + test + "": "");
      System.out.print(""Case #"" + test + "": "");
      int[] count=new int[2500];
      for (int i=0; i < 2 * r.N - 1; i++)       for (int j=0; j < r.N; j++)       count[r.h[i][j] - 1]++;
      int[] ans=new int[r.N];
      int idx=0;
      for (int i=0; i < 2500; i++)       if (count[i] % 2 != 0)       ans[idx++]=i + 1;
      for (int i=0; i < r.N; i++) {
        Object s=ans[i] + (i == r.N - 1 ? ""\n"" : "" "");
        r.pw.print(s);
        System.out.print(s);
      }
    }
    System.out.println(""Finished."");
    r.sc.close();
    r.pw.close();
  }
 catch (  Exception e) {
    System.err.println(e);
  }
}
"
30000189,"public static void main(String[] args) throws FileNotFoundException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""C:/Projects/AdExtractor/src/codejam/B-small-practice.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""C:/Projects/AdExtractor/src/codejam/B-small-practice.out""));
  int t=Integer.parseInt(br.readLine());
  for (int x=0; x < t; x++) {
    int n=Integer.parseInt(br.readLine());
    int[] cnt=new int[2501];
    for (int i=0; i < 2 * n - 1; i++) {
      String[] s=br.readLine().split("" "");
      for (int j=0; j < n; j++) {
        cnt[Integer.parseInt(s[j])]++;
      }
    }
    int[] res=new int[n];
    int j=0;
    for (int i=0; i < 2501; i++) {
      if (cnt[i] % 2 != 0 && j < n) {
        res[j]=i;
        j++;
      }
    }
    bw.write(""Case #"" + (x + 1) + "": "");
    for (int i=0; i < n; i++) {
      bw.write(res[i] + "" "");
    }
    bw.write(""\n"");
    bw.flush();
  }
}
"
30000190,"public static void main(String args[]){
  Scanner in=new Scanner(System.in);
  int T=Integer.parseInt(in.nextLine());
  for (int i=1; i <= T; i++) {
    Set<Integer> odd=new HashSet<>();
    int N=Integer.parseInt(in.nextLine());
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        int x=in.nextInt();
        if (odd.contains(x)) {
          odd.remove(x);
        }
 else {
          odd.add(x);
        }
      }
      in.nextLine();
    }
    StringBuilder sb=new StringBuilder();
    for (    int x : odd.stream().sorted().collect(Collectors.toList())) {
      sb.append(x);
      sb.append("" "");
    }
    sb.deleteCharAt(sb.length() - 1);
    System.out.printf(""Case #%d: %s%n"",i,sb.toString());
  }
  in.close();
}
"
30000191,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  StringTokenizer st=new StringTokenizer(br.readLine());
  int t=Integer.parseInt(st.nextToken());
  int i, j;
  int k;
  for (i=1; i <= t; i++) {
    Arrays.fill(freq,0);
    Arrays.fill(ans,0);
    st=new StringTokenizer(br.readLine());
    int n=Integer.parseInt(st.nextToken());
    for (j=0; j < 2 * n - 1; j++) {
      st=new StringTokenizer(br.readLine());
      for (k=0; k < n; k++) {
        int temp=Integer.parseInt(st.nextToken());
        freq[temp]++;
      }
    }
    int m=0;
    for (k=0; k < freq.length; k++) {
      if (freq[k] % 2 != 0) {
        ans[m++]=k;
      }
    }
    Arrays.sort(ans);
    System.out.print(""Case #"" + i + "": "");
    for (k=0; k < ans.length; k++) {
      if (ans[k] != 0)       System.out.print(ans[k] + "" "");
    }
    System.out.println();
  }
}
"
30000192,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(args[0]));
  int numCases=Integer.parseInt(br.readLine());
  for (int i=0; i < numCases; i++) {
    int N=Integer.parseInt(br.readLine());
    System.out.print(""Case #"" + (i + 1) + "":"");
    int numRows=(N * 2) - 1;
    int[] sortedList=new int[N * ((2 * N) - 1)];
    int index=0;
    for (int j=0; j < numRows; j++) {
      String[] s=br.readLine().split("" "");
      for (      String st : s)       sortedList[index++]=Integer.parseInt(st);
    }
    Arrays.sort(sortedList);
    index=0;
    while (index < sortedList.length) {
      int a=sortedList[index];
      int b=0;
      if (index + 1 >= sortedList.length) {
        b=-1;
      }
 else {
        b=sortedList[index + 1];
      }
      if (a == b) {
        index+=2;
      }
 else {
        System.out.print("" "" + a);
        index++;
      }
    }
    System.out.println();
  }
}
"
30000193,"public static void main(String[] args){
  try {
    final Scanner sc=new Scanner(new File(args[0]));
    final FileWriter writer=new FileWriter(new File(""rankAndFile.out""));
    final int numberOfCases=sc.nextInt();
    int currentCase=0;
    sc.nextLine();
    while (currentCase < numberOfCases) {
      final int n=sc.nextInt();
      Map<Integer,Integer> heights=new HashMap<>();
      for (int i=0; i < 2 * n - 1; i++) {
        for (int j=0; j < n; j++) {
          final int next=sc.nextInt();
          if (heights.containsKey(next)) {
            heights.put(next,heights.get(next).intValue() + 1);
          }
 else {
            heights.put(next,1);
          }
        }
      }
      final List<Integer> missingRow=new ArrayList<>();
      for (      Integer height : heights.keySet()) {
        if (heights.get(height) % 2 != 0) {
          missingRow.add(height);
        }
      }
      Collections.sort(missingRow);
      StringBuilder builder=new StringBuilder();
      for (      Integer integer : missingRow) {
        builder.append("""" + integer + "" "");
      }
      final String result=builder.toString().trim();
      System.out.println(""Case #"" + (currentCase + 1) + "": ""+ result);
      writer.write(""Case #"" + ++currentCase + "": ""+ result+ ""\n"");
    }
    writer.close();
    sc.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000194,"public static void main(String args[]) throws FileNotFoundException, UnsupportedEncodingException {
  Scanner scan=new Scanner(System.in);
  PrintWriter out=new PrintWriter(""output.txt"",""UTF-8"");
  System.out.println(""Input Filename: "");
  String filename=scan.nextLine();
  try {
    scan=new Scanner(new File(filename));
  }
 catch (  Exception e) {
    System.out.println(""Invalid File Input"");
    return;
  }
  int sets=scan.nextInt();
  for (int k=1; k <= sets; ++k) {
    int n=scan.nextInt();
    scan.nextLine();
    int files=(2 * n) - 1;
    HashMap<Integer,Integer> soldiers=new HashMap<Integer,Integer>();
    for (int j=0; j < files; ++j) {
      for (int l=0; l < n; ++l) {
        int i=scan.nextInt();
        if (soldiers.containsKey(i)) {
          soldiers.put(i,soldiers.get(i) + 1);
        }
 else {
          soldiers.put(i,1);
        }
      }
    }
    int[] missing=new int[n];
    int index=0;
    Iterator entries=soldiers.entrySet().iterator();
    while (entries.hasNext()) {
      Entry e=(Entry)entries.next();
      if ((Integer)e.getValue() % 2 == 1) {
        missing[index]=(Integer)e.getKey();
        index++;
      }
    }
    Arrays.sort(missing);
    out.print(""Case #"" + k + "": "");
    for (int i=0; i < n; ++i) {
      out.print(missing[i]);
      if (i < n - 1)       out.print("" "");
    }
    out.println();
  }
  out.close();
}
"
30000195,"public static void main(String[] args){
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int i=0;
  int cases=Integer.parseInt(sc.nextLine());
  while (i < cases) {
    String line=sc.nextLine();
    int qtd=Integer.parseInt(line);
    String[] lines=new String[(qtd * 2) - 1];
    for (int j=0; j < (qtd * 2) - 1; j++)     lines[j]=sc.nextLine();
    int[] qtds=new int[2500];
    for (    String line1 : lines) {
      String[] values=line1.split("" "");
      for (      String value : values) {
        int val=Integer.parseInt(value);
        qtds[val - 1]++;
      }
    }
    ArrayList<Integer> results=new ArrayList<>();
    for (int i2=0; i2 < qtds.length; i2++) {
      if (qtds[i2] % 2 != 0) {
        results.add(i2 + 1);
      }
    }
    Object[] ints=results.toArray();
    Arrays.sort(ints);
    String result1="""";
    for (int i1=0; i1 < results.size(); i1++) {
      if (i1 != 0)       result1=result1 + "" "";
      result1=result1 + ints[i1];
    }
    String result=result1;
    i++;
    System.out.println(""Case #"" + i + "": ""+ result);
  }
}
"
30000196,"public static void main(String[] args) throws FileNotFoundException {
  long start=System.nanoTime();
  Scanner in=new Scanner(new File(path + B.class.getSimpleName() + ""-""+ file+ "".in""));
  PrintWriter out=new PrintWriter(path + B.class.getSimpleName() + ""-""+ file+ "".out"");
  int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    int N=in.nextInt();
    int[] heightCount=new int[2500];
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++)       heightCount[in.nextInt() - 1]++;
    }
    System.out.print(""Case #"" + i + "":"");
    out.print(""Case #"" + i + "":"");
    for (int j=0; j < 2500; j++) {
      if (heightCount[j] % 2 != 0) {
        System.out.print("" "" + (j + 1));
        out.print("" "" + (j + 1));
      }
    }
    System.out.println();
    out.println();
  }
  in.close();
  out.close();
  System.out.println(""Elapsed time: "" + (System.nanoTime() - start) / 1000000000.0 + "" seconds"");
}
"
30000197,"public B_RankAndFile(final int N,int[][] lines){
  super();
  Set<Integer> oddNumbers=new TreeSet<>();
  for (int j=0; j < 2 * N - 1; j++) {
    for (int k=0; k < N; k++) {
      if (oddNumbers.contains(lines[j][k])) {
        oddNumbers.remove(lines[j][k]);
      }
 else {
        oddNumbers.add(lines[j][k]);
      }
    }
  }
  StringBuilder missingLineBuilder=new StringBuilder();
  for (  Integer n : oddNumbers) {
    missingLineBuilder.append(String.format(""%d "",n.intValue()));
  }
  this.missingLine=missingLineBuilder.substring(0,missingLineBuilder.length() - 1);
}
"
30000198,"public static void main(String[] args) throws Exception {
  Solution solution=new Solution();
  Solution solution1=new Solution();
  String file=""/Users/gaohan/Downloads/B-large.in"";
  Scanner scanner=new Scanner(new FileInputStream(new File(file)));
  int T=scanner.nextInt();
  for (int i=0; i < T; i++) {
    int N=scanner.nextInt();
    int lines=2 * N - 1;
    int[][] array=new int[lines][N];
    for (int m=0; m < lines; m++) {
      for (int n=0; n < N; n++) {
        array[m][n]=scanner.nextInt();
      }
    }
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    for (    int[] row : array) {
      for (      int cell : row) {
        Integer count=map.get(cell);
        if (count == null) {
          count=0;
        }
        map.put(cell,count + 1);
      }
    }
    List<Integer> res1=new ArrayList<Integer>();
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      int val=entry.getValue();
      if (val % 2 != 0) {
        res1.add(entry.getKey());
      }
    }
    Collections.sort(res1);
    List<Integer> res=res1;
    System.out.print(""Case #"" + (i + 1) + "":"");
    for (    int num : res) {
      System.out.print("" "" + num);
    }
    System.out.println();
  }
}
"
30000199,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter pw=new PrintWriter(new OutputStreamWriter(System.out),true);
  int tcs=Integer.parseInt(br.readLine());
  for (int t=1; t <= tcs; ++t) {
    String opFormat=CASE + t + "":"";
    HashMap<Integer,Integer> heights=new HashMap<Integer,Integer>();
    int N=Integer.parseInt(br.readLine());
    for (int i=0, iLen=((2 * N) - 1); i < iLen; ++i) {
      StringTokenizer st=new StringTokenizer(br.readLine());
      for (int j=0; j < N; ++j) {
        int currentHeight=Integer.parseInt(st.nextToken());
        if (heights.containsKey(currentHeight)) {
          heights.put(currentHeight,heights.get(currentHeight) + 1);
        }
 else {
          heights.put(currentHeight,1);
        }
      }
    }
    ArrayList<Integer> missingHeights=new ArrayList<Integer>(N);
    Iterator<Integer> heightsIterator=heights.keySet().iterator();
    while (heightsIterator.hasNext()) {
      int currentHeight=heightsIterator.next();
      int currentHeightVal=heights.get(currentHeight);
      if ((currentHeightVal % 2) == 1) {
        missingHeights.add(currentHeight);
      }
    }
    Collections.sort(missingHeights);
    pw.print(opFormat);
    for (int i=0; i < N; ++i) {
      pw.print("" "" + missingHeights.get(i));
    }
    pw.println();
  }
  pw.flush();
  pw.close();
  br.close();
}
"
30000200,"public static void main(String[] t) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  NavigableSet<Integer> set;
  int T=Integer.parseInt(in.readLine()), N, X;
  for (int i=1; i <= T; i++) {
    N=Integer.parseInt(in.readLine());
    set=new TreeSet<Integer>();
    for (int n=0; n < 2 * N - 1; n++) {
      t=in.readLine().split("" "");
      for (int x=0; x < t.length; x++) {
        X=Integer.parseInt(t[x]);
        if (!set.add(X)) {
          set.remove(X);
        }
      }
    }
    System.out.print(""Case #"" + i + "":"");
    for (    int y : set) {
      System.out.print("" "" + y);
    }
    System.out.println();
  }
}
"
30000201,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int n=input.nextInt();
  for (int a=0; a < n; a++) {
    int k=input.nextInt();
    ArrayList<Integer> hugeList=new ArrayList<Integer>();
    for (int b=0; b < k * ((2 * k) - 1); b++) {
      hugeList.add(input.nextInt());
    }
    int[] freqDist=new int[50000];
    for (    Integer b : hugeList) {
      freqDist[b]++;
    }
    ArrayList<Integer> output=new ArrayList<Integer>();
    for (int b=0; b < freqDist.length; b++) {
      if (freqDist[b] % 2 != 0) {
        output.add(b);
      }
    }
    Collections.sort(output);
    System.out.print(""Case #"" + (a + 1) + "":""+ "" "");
    for (int b=0; b < output.size(); b++) {
      System.out.print(output.get(b) + "" "");
    }
    System.out.println();
  }
}
"
30000202,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int T=s.nextInt();
  for (int i=1; i <= T; i++) {
    int n=s.nextInt();
    int k=((n * 2) - 1) * n;
    int arreglo[]=new int[2501];
    for (int j=0; j < 2501; j++) {
      arreglo[j]=0;
    }
    for (int j=0; j < k; j++) {
      int alt=s.nextInt();
      arreglo[alt]++;
    }
    System.out.print(""Case #"" + i + "":"");
    for (int j=0; j < 2501; j++) {
      if (arreglo[j] % 2 == 1) {
        System.out.print("" "" + j);
      }
    }
    System.out.println();
  }
}
"
30000203,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(""input1.txt"")));
  int test_num=Integer.parseInt(reader.readLine());
  System.out.println(test_num);
  BufferedWriter out=new BufferedWriter(new FileWriter(""output.txt""));
  for (int i=1; i <= test_num; i++) {
    String input=reader.readLine();
    int n=Integer.parseInt(input);
    HashMap<Integer,Integer> numcount=new HashMap<Integer,Integer>();
    int kk=0;
    while (kk < 2 * n - 1) {
      String curline=reader.readLine();
      String[] current=curline.split(""\\s+"");
      for (int j=0; j < n; j++) {
        if (!numcount.containsKey(Integer.parseInt(current[j]))) {
          numcount.put(Integer.parseInt(current[j]),1);
        }
 else {
          numcount.remove(Integer.parseInt(current[j]));
        }
      }
      kk=kk + 1;
    }
    Set<Integer> keyset=numcount.keySet();
    ArrayList<Integer> res=new ArrayList<>();
    res.addAll(keyset);
    Collections.sort(res);
    out.write(""Case #"" + String.valueOf(i) + "": "");
    for (int m=0; m < res.size(); m++) {
      out.write(res.get(m).toString());
      if (m != res.size() - 1)       out.write("" "");
    }
    out.write(""\n"");
  }
  reader.close();
  out.close();
}
"
30000204,"public static void main(String args[]) throws Exception {
  File file=new File(""C:\\Users\\charafi\\IdeaProjects\\Round_1_A_2016\\src\\B.in"");
  PrintWriter out=new PrintWriter(""C:\\Users\\charafi\\IdeaProjects\\Round_1_A_2016\\src\\B.out"",""UTF-8"");
  Scanner in=new Scanner(file);
  int T=in.nextInt();
  for (int i=0; i < T; i++) {
    out.printf(""Case #%d:"",i + 1);
    int N=in.nextInt();
    int e[]=new int[2501];
    for (int k=1; k < 2501; k++) {
      e[k]=0;
    }
    for (int j=0; j < ((N - 1) * 2 + 1); j++) {
      for (int k=0; k < N; k++) {
        e[in.nextInt()]++;
      }
    }
    for (int k=1; k < 2501; k++) {
      if (e[k] % 2 == 1)       out.printf("" %d"",k);
    }
    out.printf(""\n"");
  }
  out.close();
}
"
30000205,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int numCases=Integer.parseInt(in.readLine());
  for (int caseNumber=1; caseNumber <= numCases; caseNumber++) {
    int[] sol=new int[2502];
    int N=Integer.parseInt(in.readLine());
    for (int i=0; i < (2 * N - 1); i++) {
      String s=in.readLine();
      String[] t=s.split("" "");
      for (      String r : t) {
        int l=Integer.parseInt(r);
        sol[l]++;
      }
    }
    ArrayList<Integer> res=new ArrayList<>();
    for (int j=0; j < sol.length; j++) {
      if (sol[j] != 0 && sol[j] % 2 == 1) {
        res.add(j);
      }
    }
    String result="""";
    for (int k=0; k < res.size(); k++)     result+="" "" + res.get(k);
    System.out.println(""Case #"" + caseNumber + "":""+ result);
  }
}
"
30000206,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""B-large.in""));
  int max=sc.nextInt();
  for (int kkkk=0; kkkk < max; kkkk++) {
    int lineNumber=sc.nextInt();
    sc.nextLine();
    HashMap<String,Integer> map=new HashMap<String,Integer>();
    String[] line=new String[2 * lineNumber];
    for (int i=0; i < 2 * lineNumber - 1; i++) {
      String[] m=sc.nextLine().split("" "");
      for (      String s : m) {
        if (map.get(s) == null) {
          map.put(s,1);
        }
 else {
          if (map.get(s) == 0) {
            map.put(s,1);
          }
 else {
            map.put(s,0);
          }
        }
      }
    }
    ArrayList<Integer> arr=new ArrayList<Integer>();
    for (    String key : map.keySet()) {
      if (map.get(key) == 1 && key != """") {
        arr.add(Integer.parseInt(key));
      }
    }
    Collections.sort(arr);
    StringBuilder sb=new StringBuilder();
    sb.append(""Case #"" + (kkkk + 1) + "": "");
    for (    Integer k : arr) {
      sb.append(k + "" "");
    }
    String str=sb.toString();
    System.out.println(str.substring(0,str.length() - 1));
  }
}
"
30000207,"public static void main(String[] args) throws Exception {
  Scanner s=new Scanner(new File(""B-large.in""));
  int numCases=Integer.parseInt(s.nextLine());
  for (int c=1; c <= numCases; c++) {
    int n=Integer.parseInt(s.nextLine());
    HashMap<Integer,Integer> counts=new HashMap<>();
    for (int i=0; i < 2 * n - 1; i++) {
      String line=s.nextLine();
      String[] lineArr=line.split(""\\s+"");
      for (      String xs : lineArr) {
        int x=Integer.parseInt(xs);
        if (!counts.containsKey(x)) {
          counts.put(x,0);
        }
        counts.put(x,counts.get(x) + 1);
      }
    }
    ArrayList<Integer> missing=new ArrayList<Integer>();
    for (    int x : counts.keySet()) {
      if (counts.get(x) % 2 == 1) {
        missing.add(x);
      }
    }
    Collections.sort(missing);
    System.out.print(""Case #"" + c + "":"");
    for (    int x : missing) {
      System.out.print("" "" + x);
    }
    System.out.println();
  }
}
"
30000208,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  int n;
  for (int i=1; i <= T; i++) {
    System.out.printf(""Case #%d:"",i);
    int N=in.nextInt();
    int[] arr=new int[(2 * N - 1) * N];
    for (int j=0; j < arr.length; j++) {
      arr[j]=in.nextInt();
    }
    Arrays.sort(arr);
    int count=0;
    for (int j=1; j < arr.length; j+=2) {
      if (arr[j - 1] != arr[j]) {
        System.out.print("" "" + arr[j - 1]);
        j--;
        count++;
      }
    }
    if (count != N) {
      System.out.print("" "" + arr[arr.length - 1]);
    }
    System.out.println();
  }
}
"
30000209,"public static void main(String[] args) throws IOException {
  FileInputStream in=null;
  PrintWriter out=null;
  try {
    in=new FileInputStream(""B-large.in"");
    out=new PrintWriter(""outputB-large.txt"");
    Scanner sc=new Scanner(in);
    String line=sc.nextLine();
    int T=Integer.parseInt(line);
    for (int i=1; i <= T; i++) {
      int N=Integer.parseInt(sc.nextLine());
      HashMap<Integer,Integer> m=new HashMap<Integer,Integer>();
      for (int x=0; x < 2 * N - 1; x++) {
        line=sc.nextLine();
        for (int y=0; y < N; y++) {
          int key=Integer.parseInt(line.split("" "")[y]);
          if (m.containsKey(key)) {
            int val=m.get(key);
            m.put(key,++val);
          }
 else {
            m.put(key,1);
          }
        }
      }
      Vector<Integer> vector=new Vector<>();
      Iterator it=m.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry pair=(Entry)it.next();
        int key=(int)pair.getKey();
        int val=(int)pair.getValue();
        if (val % 2 == 1) {
          vector.add(key);
        }
      }
      Collections.sort(vector);
      String output=""Case #"" + i + "":"";
      for (int j=0; j < vector.size(); j++) {
        output=output + "" "" + vector.elementAt(j);
      }
      out.println(output);
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
}
"
30000210,"public static void main(String[] args){
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(""B/B-large.in"");
    PrintStream ps=new PrintStream(new FileOutputStream(""B/large-result.out""));
    System.setIn(fis);
    System.setOut(ps);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  Scanner in=new Scanner(System.in);
  PrintStream out=System.out;
  int t=in.nextInt();
  for (int i=1; i <= t; i++) {
    int n=in.nextInt();
    int[] height=new int[2501];
    int num=(2 * n - 1) * n;
    for (int j=0; j < num; j++) {
      int h=in.nextInt();
      height[h]++;
    }
    out.format(""Case #%d:"",i);
    for (int j=1; j < height.length; j++) {
      if (height[j] % 2 == 1)       out.format("" %d"",j);
    }
    out.println();
  }
}
"
30000211,"public static void main(String[] args){
  File file=new File(""D://B-large.in"");
  File out=new File(""D://outBL.txt"");
  try {
    scan=new Scanner(file);
    writer=new PrintWriter(out);
    int t=scan.nextInt();
    for (int i=1; i <= t; i++) {
      writer.print(""Case #"" + i + "": "");
      int n=scan.nextInt();
      Map<Integer,Integer> map=new HashMap<Integer,Integer>();
      for (int j=0; j < 2 * n - 1; j++) {
        for (int k=0; k < n; k++) {
          int a=scan.nextInt();
          Integer m=map.get(a);
          if (m == null) {
            m=1;
          }
 else {
            m++;
          }
          map.put(a,m);
        }
      }
      List<Integer> ret=new ArrayList<Integer>();
      for (      int k : map.keySet()) {
        if (map.get(k) % 2 == 1) {
          ret.add(k);
        }
      }
      Collections.sort(ret);
      for (int j=0; j < ret.size(); j++) {
        writer.print(ret.get(j) + "" "");
      }
      writer.println();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    scan.close();
    writer.close();
  }
}
"
30000212,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(br.readLine());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(br.readLine());
    TreeMap<Integer,Integer> count=new TreeMap<Integer,Integer>();
    for (int i=0; i < N * 2 - 1; i++) {
      String[] split=br.readLine().split("" "");
      for (      String s : split) {
        int num=Integer.parseInt(s);
        if (count.containsKey(num)) {
          count.put(num,count.get(num) + 1);
        }
 else {
          count.put(num,1);
        }
      }
    }
    System.out.print(""CASE #"" + t + "":"");
    for (    Map.Entry<Integer,Integer> e : count.entrySet()) {
      if (e.getValue() % 2 == 1)       System.out.print("" "" + e.getKey());
    }
    System.out.println();
  }
}
"
30000213,"public static void main(String[] args) throws IOException {
  Problems r=new Problems();
  Scanner sc=null;
  PrintWriter pw=null;
  try {
    sc=new Scanner(new File(""B-large.in""));
    pw=new PrintWriter(new File(""output.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  int t=sc.nextInt();
  HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
  for (int i=1; i <= t; i++) {
    int n=sc.nextInt();
    int soldier;
    for (int j=0; j < n * (2 * n - 1); j++) {
      soldier=sc.nextInt();
      if (map.containsKey(soldier)) {
        map.put(soldier,map.get(soldier) + 1);
      }
 else {
        map.put(soldier,1);
      }
    }
    Set<Integer> answer=new TreeSet<Integer>();
    Iterator it=map.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry pair=(Map.Entry)it.next();
      if ((int)pair.getValue() % 2 != 0) {
        answer.add((int)pair.getKey());
      }
      it.remove();
    }
    pw.print(""Case #"" + i + "":"");
    for (    int sd : answer) {
      pw.print("" "" + sd);
    }
    pw.println();
  }
  pw.close();
}
"
30000214,"public static void main(String[] args) throws IOException {
  Main r=new Main();
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int cases=Integer.parseInt(br.readLine());
  String line="""";
  String resp="""";
  for (int i=1; i <= cases; i++) {
    int n=Integer.parseInt(br.readLine());
    r.rep=new Hashtable<>();
    for (int j=0; j < n * 2 - 1; j++) {
      line=br.readLine();
      String[] nums=line.split("" "");
      for (int i2=0; i2 < nums.length; i2++) {
        Integer n1=r.rep.get(nums[i2]);
        if (n1 == null) {
          r.rep.put(nums[i2],1);
        }
 else {
          r.rep.put(nums[i2],n1 + 1);
        }
      }
    }
    Enumeration<String> k=r.rep.keys();
    int i1=0;
    int[] r1=new int[n];
    while (k.hasMoreElements()) {
      String actual=k.nextElement();
      int repeticiones=r.rep.get(actual);
      if (repeticiones % 2 != 0) {
        r1[i1]=Integer.parseInt(actual);
        i1++;
      }
    }
    String resp1="""";
    for (int i2=0; i2 < r1.length; i2++) {
      if (i2 != 0)       resp1+="" "";
      for (int j=i2 + 1; j < r1.length; j++) {
        if (r1[i2] > r1[j]) {
          int temp=r1[i2];
          r1[i2]=r1[j];
          r1[j]=temp;
        }
      }
      resp1+=r1[i2];
    }
    String ans=resp1;
    resp+=(Main.CASE + i + "": ""+ ans+ ""\n"");
  }
  System.out.print(resp);
}
"
30000215,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int cases=sc.nextInt();
  for (int c=1; c <= cases; c++) {
    int n=sc.nextInt();
    int[] heights=new int[2501];
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        heights[sc.nextInt()]++;
      }
    }
    System.out.printf(""Case #%d:"",c);
    for (int i=0; i < 2501; i++)     if (heights[i] % 2 != 0)     System.out.print("" "" + i);
    System.out.println();
  }
}
"
30000216,"public static void main(String[] args) throws Exception {
  String inputFile=""B-large1.in"";
  BufferedInputStream bs=new BufferedInputStream(new FileInputStream(inputFile));
  BufferedReader r=new BufferedReader(new InputStreamReader(bs,StandardCharsets.UTF_8));
  int t=Integer.parseInt(r.readLine());
  int count=1;
  String outputFile=""B-large_output1.txt"";
  PrintWriter p=new PrintWriter(outputFile);
  while (t > 0) {
    int n=Integer.parseInt(r.readLine());
    Map<Integer,Integer> countMap=new HashMap<>();
    for (int i=0; i < 2 * n - 1; i++) {
      String str[]=r.readLine().split("" "");
      for (int j=0; j < str.length; j++) {
        int num=Integer.parseInt(str[j]);
        if (countMap.get(num) == null)         countMap.put(num,0);
        countMap.put(num,countMap.get(num) + 1);
      }
    }
    List<Integer> l=new ArrayList<>();
    PriorityQueue<Integer> q=new PriorityQueue<>();
    for (    Map.Entry<Integer,Integer> entry : countMap.entrySet()) {
      if (entry.getValue() % 2 == 1)       l.add(entry.getKey());
    }
    Collections.sort(l);
    String ans="""";
    for (    Integer num : l) {
      ans+=num + "" "";
    }
    p.write(""Case #"" + count + "": ""+ ans.substring(0,ans.length() - 1)+ ""\n"");
    t--;
    count++;
  }
  p.close();
  r.close();
}
"
30000217,"public static void main(String[] args) throws IOException {
  BufferedReader sc=new BufferedReader(new InputStreamReader(System.in));
  int n, lim=Integer.parseInt(sc.readLine()), a, b, c;
  String cad;
  int[] array;
  ArrayList<Integer> lista=new ArrayList<Integer>();
  StringTokenizer st;
  for (int i=1; i <= lim; i++) {
    n=Integer.parseInt(sc.readLine());
    array=new int[2501];
    for (int filas=0; filas < 2 * n - 1; filas++) {
      cad=sc.readLine();
      st=new StringTokenizer(cad);
      for (int datos=0; datos < n; datos++) {
        array[Integer.parseInt(st.nextToken())]++;
      }
    }
    for (int r=1; r < 2501; r++) {
      if (array[r] % 2 != 0) {
        lista.add(r);
      }
    }
    System.out.print(""Case #"" + i + "":"");
    for (    Integer t : lista) {
      System.out.print("" "" + t);
    }
    System.out.println("""");
    lista.clear();
  }
}
"
30000218,"public B(Scanner s){
  scan=s;
}
"
30000219,"public static void main(String[] arg){
  Scanner sc=new Scanner(System.in);
  int T=Integer.parseInt(sc.nextLine());
  for (int ii=1; ii <= T; ++ii) {
    int N=sc.nextInt();
    int[] heights=new int[3000];
    for (int i=0; i < 2 * N - 1; ++i) {
      for (int j=0; j < N; ++j) {
        int height=sc.nextInt();
        heights[height]++;
      }
    }
    int[] ans=new int[N + 1];
    int ptr=0;
    System.err.print(ii + "" : "");
    for (int i=0; i < heights.length; ++i) {
      if (heights[i] % 2 == 1) {
        ans[ptr]=i;
        ptr++;
        System.err.print(i + "" "");
      }
    }
    System.err.println();
    System.out.printf(""Case #%d: "",ii);
    for (int i=0; i < N; ++i) {
      System.out.print(ans[i]);
      if (i != N - 1)       System.out.print("" "");
      if (i == N - 1)       System.out.println();
    }
  }
}
"
30000220,"public static void main(String[] args) throws java.lang.Exception {
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int k=1; k <= t; k++) {
    int n=sc.nextInt();
    List al=new ArrayList();
    int g=2 * n - 1;
    while (g-- > 0) {
      for (int m=1; m <= n; m++) {
        int c=sc.nextInt();
        al.add(c);
      }
    }
    Set set=new TreeSet();
    Collections.sort(al);
    for (int i=0; i < al.size(); i++) {
      int f=Collections.frequency(al,al.get(i));
      if (f % 2 != 0) {
        set.add(al.get(i));
      }
    }
    System.out.print(""Case #"" + k + "": "");
    Iterator itr=set.iterator();
    while (itr.hasNext()) {
      System.out.print(itr.next() + "" "");
    }
    System.out.println();
  }
}
"
30000221,"public static void main(String[] args){
  try {
    BufferedReader f=new BufferedReader(new InputStreamReader(System.in));
    int t=Integer.parseInt(f.readLine());
    FileWriter fout=new FileWriter(""rankandfile.out"");
    for (int i=1; i <= t; i++) {
      int n=Integer.parseInt(f.readLine());
      int[] count=new int[2501];
      for (int j=0; j < 2 * n - 1; j++) {
        StringTokenizer st=new StringTokenizer(f.readLine());
        for (int k=0; k < n; k++) {
          int height=Integer.parseInt(st.nextToken());
          count[height]++;
        }
      }
      StringBuffer s=new StringBuffer("""");
      for (int j=1; j <= 2500; j++) {
        if (count[j] % 2 == 1)         s.append(j + "" "");
      }
      String output=s.toString().trim();
      System.out.println(""Case #"" + i + "": ""+ output);
      fout.write(""Case #"" + i + "": ""+ output+ ""\n"");
    }
    f.close();
    fout.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000222,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int numberOfTests=in.nextInt();
  for (int i=0; i < numberOfTests; i++) {
    int n=in.nextInt();
    int[] arr=new int[2500];
    for (int j=1; j < 2 * n; j++) {
      for (int k=1; k <= n; k++) {
        arr[in.nextInt() - 1]++;
      }
    }
    System.out.print(""Case #"" + (i + 1) + "":"");
    int found=0;
    for (int k=0; k < 2500; k++) {
      if (arr[k] != 0 && arr[k] % 2 != 0) {
        System.out.print("" "" + (k + 1));
        found++;
        if (found == n) {
          break;
        }
      }
    }
    System.out.println("""");
  }
}
"
30000223,"public static void main(String[] args) throws FileNotFoundException {
  File inputFile=new File(""B-large.in"");
  PrintWriter out=new PrintWriter(""B_out_b.txt"");
  Scanner in=new Scanner(inputFile);
  int T=in.nextInt();
  int N;
  for (int i=0; i < T; i++) {
    N=in.nextInt();
    int[] nums=new int[2501];
    int cur;
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        cur=in.nextInt();
        nums[cur]++;
      }
    }
    String ans="""";
    for (int m=0; m < 2501; m++) {
      if (nums[m] % 2 != 0) {
        ans+=m;
        ans+="" "";
      }
    }
    out.printf(""Case #%d: %s\n"",i + 1,ans.trim());
  }
  in.close();
  out.close();
}
"
30000224,"public static void main(String[] args) throws IOException {
  Scanner file=new Scanner(new File(""b-large.in""));
  PrintWriter out=new PrintWriter(new FileWriter(new File(""out.txt"")));
  int zz=file.nextInt();
  for (int i=1; i <= zz; i++) {
    int[] n=new int[2501];
    int N=file.nextInt();
    for (int j=0; j < N * N * 2 - N; j++) {
      int next=file.nextInt();
      n[next]++;
    }
    String ans="""";
    for (int j=0; j < 2501; j++) {
      if (n[j] % 2 == 1)       ans+=j + "" "";
    }
    out.printf(""Case #%d: %s%n"",i,ans);
  }
  out.close();
}
"
30000225,"public static void main(String args[]) throws IOException {
  FileInputStream in=new FileInputStream(""B-large.in"");
  FileOutputStream outer=new FileOutputStream(""output.txt"");
  InputStreamReader inn=new InputStreamReader(in);
  BufferedReader br=new BufferedReader(inn);
  PrintWriter ob=new PrintWriter(outer,true);
  String bb=br.readLine();
  int i;
  int t=Integer.parseInt(bb);
  int j=0;
  while (t-- > 0) {
    ++j;
    String a=br.readLine();
    int n=Integer.parseInt(a);
    int k[]=new int[2501];
    for (i=1; i < 2 * n; i++) {
      String b[]=br.readLine().split("" "");
      for (int l=0; l < n; l++)       k[Integer.parseInt(b[l])]++;
    }
    ob.print(""Case #"" + j + "": "");
    for (i=1; i <= 2500; i++) {
      if (k[i] % 2 != 0)       ob.print(i + "" "");
    }
    ob.println();
  }
  in.close();
  outer.flush();
  outer.close();
}
"
30000226,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scan=new Scanner(new File(""src/Input.txt""));
  int T=Integer.parseInt(scan.nextLine());
  for (int i=1; i <= T; i++) {
    int N=Integer.parseInt(scan.nextLine());
    List<String> list=new ArrayList<String>();
    for (int j=0; j < (2 * N - 1); j++) {
      String line=scan.nextLine();
      StringTokenizer str=new StringTokenizer(line);
      while (str.hasMoreTokens()) {
        String check=str.nextToken();
        if (list.contains(check)) {
          list.remove(check);
        }
 else {
          list.add(check);
        }
      }
    }
    int array[]=new int[N];
    int j=0;
    for (    String l : list) {
      array[j]=Integer.parseInt(l);
      j++;
    }
    Arrays.sort(array);
    String ans=""Case #"" + i + "":"";
    for (    int l : array) {
      ans=ans + "" "" + l;
    }
    System.out.println(ans);
  }
}
"
30000227,"public static void main(String[] args) throws IOException {
  R1B r=new R1B();
  List<String> lines=Files.readAllLines(FileSystems.getDefault().getPath(R1B.PATH + ""B-small-attempt0.in""));
  PrintWriter writer=new PrintWriter(R1B.PATH + ""B.out"",""UTF-8"");
  int idx=0;
  int t=Integer.parseInt(lines.get(idx));
  idx++;
  for (int ca=1; ca <= t; ca++) {
    int n=Integer.parseInt(lines.get(idx));
    idx++;
    int[] c=new int[2501];
    for (int i=0; i < n * 2 - 1; i++) {
      String v=lines.get(idx);
      idx++;
      final String[] split=v.split("" "");
      for (      String s : split) {
        c[Integer.parseInt(s)]++;
      }
    }
    StringBuilder result=new StringBuilder();
    for (int i=0; i < c.length; i++) {
      if (c[i] % 2 == 1) {
        result.append(i).append("" "");
      }
    }
    final String s=result.substring(0,result.length() - 1);
    writer.println(String.format(""Case #%d: %s"",ca,s));
  }
  writer.close();
}
"
30000228,"public static void main(String[] args) throws Exception {
  reader=new Scanner(new File(""B-large.in""));
  outWrite=new PrintWriter(new File(""B-output.txt""));
  int nTest=reader.nextInt();
  int i, j;
  for (int test=1; test <= nTest; test++) {
    n=reader.nextInt();
    m=(2 * n) - 1;
    a=new int[m][n];
    for (i=0; i < m; i++) {
      for (j=0; j < n; j++)       a[i][j]=reader.nextInt();
    }
    if (test > 1)     outWrite.println();
    int i1, j1;
    Arrays.fill(c,0);
    res=new int[n];
    for (i1=0; i1 < m; i1++)     for (j1=0; j1 < n; j1++)     c[a[i1][j1]]++;
    j1=0;
    for (i1=0; i1 < c.length; i1++) {
      if ((c[i1] % 2) == 1) {
        res[j1]=i1;
        j1++;
      }
    }
    outWrite.print(""Case #"" + test + "": "");
    for (j=0; j < res.length; j++) {
      if (j > 0)       outWrite.print("" "");
      outWrite.print(res[j]);
    }
  }
  outWrite.close();
}
"
30000229,"public static void main(String args[]){
  Main r=(new Main());
  Scanner cin=new Scanner(System.in);
  int T=cin.nextInt();
  for (int C=1; C <= T; ++C) {
    int N=cin.nextInt();
    int size=N * 2 - 1;
    int count[]=new int[2501];
    for (int i=0; i < size; ++i) {
      for (int j=0; j < N; ++j) {
        ++count[cin.nextInt()];
      }
    }
    List<Integer> ans=new ArrayList<Integer>();
    for (int i=1; i <= 2500; ++i) {
      if (count[i] % 2 != 0) {
        ans.add(i);
      }
    }
    System.out.print(""Case #"" + C + "":"");
    for (    int v : ans) {
      System.out.print("" "" + v);
    }
    System.out.println();
  }
}
"
30000230,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int z=1; z <= t; ++z) {
    int N=in.nextInt();
    int[][] arr=new int[N][N];
    List<int[]> separate=new ArrayList<>();
    List<int[]> rows=new ArrayList<>();
    List<int[]> cols=new ArrayList<>();
    HashMap<Integer,Integer> all=new HashMap<>();
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        int n=in.nextInt();
        if (all.containsKey(n)) {
          all.put(n,all.get(n) + 1);
        }
 else {
          all.put(n,1);
        }
      }
    }
    List<Integer> missing=new ArrayList<>();
    for (    int n : all.keySet()) {
      if (all.get(n) % 2 != 0) {
        missing.add(n);
      }
    }
    Collections.sort(missing);
    System.out.print(""Case #"" + z + "":"");
    for (    int k : missing) {
      System.out.print("" "" + k);
    }
    System.out.println();
  }
}
"
30000231,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int caseNumber=in.nextInt();
  for (int i=0; i < caseNumber; i++) {
    int N=in.nextInt();
    Map<Integer,Integer> map=new HashMap<Integer,Integer>();
    for (int j=0; j < (2 * N - 1) * N; j++) {
      int k=in.nextInt();
      if (map.containsKey(k))       map.put(k,map.get(k) + 1);
 else       map.put(k,1);
    }
    int[] miss=new int[N];
    int index=0;
    for (    int key : map.keySet()) {
      if (map.get(key) % 2 == 1)       miss[index++]=key;
    }
    Arrays.sort(miss);
    System.out.print(""Case #"" + (i + 1) + "":"");
    for (int t=0; t < N; t++) {
      System.out.print("" "" + miss[t]);
    }
    System.out.println();
  }
}
"
30000232,"public static void main(String args[]){
  RandAndFile obj=new RandAndFile();
  try {
    System.setOut(new PrintStream(new File(""/home/roide/codejam/src/roide/rankfile/output_large.txt"")));
    String fileName=""/home/roide/codejam/src/roide/rankfile/B-large.txt"";
    File f=new File(fileName);
    Scanner scan=new Scanner(f);
    int nCases=scan.nextInt();
    for (int i=1; i <= nCases; i++) {
      int N=scan.nextInt();
      int count=(2 * N - 1) * N;
      TreeSet<Integer> set=new TreeSet<>();
      for (int j=0; j < count; j++) {
        int next=scan.nextInt();
        if (set.contains(next)) {
          set.remove(next);
        }
 else {
          set.add(next);
        }
      }
      StringBuilder ans=new StringBuilder();
      for (      Integer i1 : set) {
        ans.append(i1).append("" "");
      }
      String val=ans.toString();
      System.out.println(""Case #"" + i + "": ""+ val);
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30000233,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int t=scanner.nextInt();
  for (int i=0; i < t; i++) {
    int n=scanner.nextInt();
    int[] ht=new int[2501];
    for (int x=0; x < n; x++) {
      for (int y=0; y < (2 * n - 1); y++) {
        ht[scanner.nextInt()]++;
      }
    }
    System.out.print(""Case #"" + (i + 1) + "": "");
    for (int j=1; j < ht.length; j++) {
      if (ht[j] < 1 || ht[j] % 2 == 0) {
        continue;
      }
      System.out.print(j + "" "");
    }
    System.out.println();
  }
}
"
30000234,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    sSet.clear();
    int totalNumber=n * (2 * n - 1);
    for (int count=0; count < totalNumber; count++) {
      int current=in.nextInt();
      if (sSet.contains(current)) {
        sSet.remove(current);
      }
 else {
        sSet.add(current);
      }
    }
    Integer[] sorted=sSet.toArray(new Integer[]{});
    Arrays.sort(sorted);
    System.out.print(""Case #"" + i + "":"");
    for (    int c : sorted) {
      System.out.print("" "");
      System.out.print(c);
    }
    System.out.print(""\n"");
  }
}
"
30000235,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  final int T=Integer.parseInt(sc.nextLine());
  for (int caseCount=1; caseCount <= T; caseCount++) {
    System.out.print(""Case #"" + caseCount + "":"");
    final int N=sc.nextInt();
    int[] arr=new int[2501];
    for (int i=0; i < 2 * N * N - N; i++) {
      arr[sc.nextInt()]++;
    }
    ArrayList<Integer> al=new ArrayList<Integer>();
    for (int i=0; i < arr.length; i++) {
      if (arr[i] % 2 != 0) {
        al.add(i);
      }
    }
    Collections.sort(al);
    for (int i=0; i < al.size(); i++) {
      System.out.print("" "" + al.get(i));
    }
    System.out.println();
  }
}
"
30000236,"public static void main(String[] args) throws IOException {
  try {
    File newTextFile=new File(""/Users/classxiaoli/Downloads/output.txt"");
    FileWriter fw=new FileWriter(newTextFile);
    BufferedReader reader=new BufferedReader(new FileReader(""/Users/classxiaoli/Downloads/B-large.in""));
    int i=0;
    String line;
    reader.readLine();
    while ((line=reader.readLine()) != null) {
      i++;
      int a=Integer.parseInt(line);
      Map<Integer,Integer> map=new HashMap<Integer,Integer>();
      for (int j=0; j < 2 * a - 1; j++) {
        line=reader.readLine();
        for (        String str : line.split("" "")) {
          int k=Integer.parseInt(str);
          if (!map.containsKey(k))           map.put(k,1);
 else           map.put(k,map.get(k) + 1);
        }
      }
      ArrayList<Integer> r=new ArrayList<>();
      for (      int k : map.keySet()) {
        if (map.get(k) % 2 == 1)         r.add(k);
      }
      Collections.sort(r);
      String result="""" + r.get(0);
      for (int j=1; j < r.size(); j++)       result+="" "" + r.get(j);
      fw.write(""Case #"" + i + "": ""+ result+ ""\n"");
    }
    fw.close();
  }
  finally {
  }
}
"
30000237,"public static void main(String[] args) throws IOException {
  in=new Scanner(new BufferedReader(new InputStreamReader(USE_FILE ? new FileInputStream(FILE_NAME + "".in"") : System.in)));
  out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(USE_FILE ? new FileOutputStream(FILE_NAME + "".out"") : System.out)));
  int testCount=in.nextInt();
  for (int test=0; test < testCount; test++) {
    int n=in.nextInt();
    int[] a=new int[2501];
    for (int i=0; i < (2 * n - 1) * n; i++) {
      a[in.nextInt()]++;
    }
    List<Integer> list=new ArrayList<>();
    for (int i=0; i < a.length; i++) {
      if (a[i] > 0 && a[i] % 2 == 1) {
        list.add(i);
      }
    }
    Collections.sort(list);
    String s=list.toString().replace("","","""").replace(""["","""").replace(""]"","""");
    out.println(""Case #"" + (test + 1) + "": ""+ s);
  }
  in.close();
  out.close();
}
"
30000238,"public static void main(String[] args) throws IOException {
  br=new BufferedReader(new FileReader(""in.txt""));
  out=new PrintWriter(new FileWriter(""out.txt""));
  T=Integer.parseInt(next());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(next());
    int[] val=new int[2501];
    for (int i=0; i < 2 * N - 1; i++)     for (int j=0; j < N; j++)     val[Integer.parseInt(next())]++;
    out.printf(""Case #%d: "",t);
    for (int i=1; i <= 2500; i++)     if (val[i] > 0 && val[i] % 2 == 1)     out.printf(""%d "",i);
    out.println();
  }
  out.close();
}
"
30000239,"/** 
 * Default constructor.
 * @param scanner Scanner instance that allows to parse problem input. 
 */
private RankandFileSolver(final Scanner scanner){
  this.scanner=scanner;
}
"
30000240,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  Long t=in.nextLong();
  for (int i=1; i <= t; ++i) {
    int line=in.nextInt();
    System.out.print(""Case #"" + i + "":"");
    int[] result=new int[line];
    HashSet<Integer> hs=new HashSet<Integer>();
    for (int j=1; j <= line * 2 - 1; j++) {
      for (int k=1; k <= line; k++) {
        int number=in.nextInt();
        if (hs.contains(number)) {
          hs.remove(number);
        }
 else {
          hs.add(number);
        }
      }
    }
    int j=0;
    for (    Integer ele : hs) {
      result[j]=ele;
      j++;
    }
    Arrays.sort(result);
    for (    Integer ele : result) {
      System.out.print("" "" + ele);
    }
    System.out.println();
  }
}
"
30000241,"public static void main(String[] args){
  try {
    File inputFile=new File(""B-large.in"");
    FileInputStream streamin=new FileInputStream(inputFile);
    BufferedReader br=new BufferedReader(new InputStreamReader(streamin));
    String line=br.readLine();
    int numTests=Integer.parseInt(line);
    int testNum=0;
    File outputFile=new File(""B-large-solution.txt"");
    PrintWriter writer=new PrintWriter(outputFile);
    while ((line=br.readLine()) != null) {
      testNum++;
      int N=Integer.parseInt(line);
      int[][] input=new int[2 * N - 1][N];
      for (int i=0; i < 2 * N - 1; i++) {
        line=br.readLine();
        String[] parts=line.split("" "");
        for (int j=0; j < N; j++) {
          input[i][j]=Integer.parseInt(parts[j]);
        }
      }
      HashMap<Integer,Integer> map=new HashMap<>();
      for (int i=0; i < 2 * N - 1; i++) {
        for (int j1=0; j1 < N; j1++) {
          Integer count=map.get(input[i][j1]);
          if (count != null) {
            map.put(input[i][j1],count + 1);
          }
 else {
            map.put(input[i][j1],1);
          }
        }
      }
      int[] res1=new int[N];
      int count=0;
      for (      int key : map.keySet()) {
        if (map.get(key) % 2 != 0) {
          res1[count]=key;
          count++;
        }
      }
      Arrays.sort(res1);
      int[] res=res1;
      String out;
      out=""Case #"" + testNum + "":"";
      for (int j=0; j < N; j++) {
        out=out + "" "" + res[j];
      }
      writer.println(out);
    }
    writer.close();
  }
 catch (  IOException e) {
    System.out.println(""IOException"");
  }
}
"
30000242,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(new File(""B-large1.in""));
  int total=scanner.nextInt();
  System.out.println(total);
  FileWriter fw=new FileWriter(""out.txt"");
  for (int i=0; i < total; i++) {
    int n=scanner.nextInt();
    int[][] grid=new int[2 * n - 1][n];
    for (int k=0; k < 2 * n - 1; k++) {
      for (int j=0; j < n; j++) {
        grid[k][j]=scanner.nextInt();
      }
    }
    int[] count=new int[2500];
    ArrayList<Integer> obj1=new ArrayList<Integer>();
    for (int i3=0; i3 < 2500; i3++)     count[i3]=0;
    for (int i1=0; i1 < 2 * n - 1; i1++) {
      for (int j=0; j < n; j++) {
        count[grid[i1][j] - 1]++;
      }
    }
    int k1=0;
    for (int i2=0; i2 < 2500; i2++) {
      if (count[i2] % 2 != 0)       obj1.add(i2 + 1);
    }
    Collections.sort(obj1);
    ArrayList<Integer> obj=obj1;
    fw.write(""Case #"" + (i + 1) + "": "");
    for (int k=0; k < n; k++) {
      fw.write(obj.get(k) + "" "");
    }
    fw.write(""\n"");
  }
  fw.close();
}
"
30000243,"public static void main(String args[]){
  Scanner s=null;
  try {
    s=new Scanner(System.in);
    int T=s.nextInt();
    int N;
    int index=0;
    ArrayList<TreeSet<Integer>> output=new ArrayList<TreeSet<Integer>>();
    while (index < T) {
      N=s.nextInt();
      int innerIndex=0;
      TreeSet<Integer> heightSet=new TreeSet<Integer>();
      int height;
      while (innerIndex < ((2 * N) - 1) * N) {
        height=s.nextInt();
        if (heightSet.contains(height))         heightSet.remove(height);
 else         heightSet.add(height);
        innerIndex++;
      }
      output.add(heightSet);
      index++;
    }
    index=0;
    while (index < T) {
      TreeSet<Integer> heightSet=output.get(index);
      System.out.print(""Case #"" + (index + 1) + "":"");
      for (      Integer height : heightSet) {
        System.out.print("" "" + height);
      }
      System.out.println();
      index++;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    s.close();
  }
}
"
30000244,"public static void main(String[] args) throws IOException {
  final BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  final PrintStream ps=new PrintStream(System.out);
  final StringBuilder solution=new StringBuilder();
  final int T=Integer.parseInt(br.readLine());
  for (int t=1; t <= T; t++) {
    solution.append(""Case #"" + t + "":"");
    final int N=Integer.parseInt(br.readLine());
    HashMap<Integer,Integer> numAppearances=new HashMap<Integer,Integer>();
    for (int i=0; i < (2 * N) - 1; i++) {
      final String input=br.readLine();
      final String[] inputArray=input.split("" "");
      for (      String s : inputArray) {
        int sInt=Integer.parseInt(s);
        if (!numAppearances.containsKey(sInt)) {
          numAppearances.put(sInt,1);
        }
 else {
          numAppearances.put(sInt,numAppearances.get(sInt) + 1);
        }
      }
    }
    ArrayList<Integer> solutionList=new ArrayList<Integer>();
    for (    Map.Entry<Integer,Integer> entry : numAppearances.entrySet()) {
      int key=entry.getKey();
      int value=entry.getValue();
      if (value % 2 == 1) {
        solutionList.add(key);
      }
    }
    Collections.sort(solutionList);
    for (    int i : solutionList) {
      solution.append("" "" + i);
    }
    solution.append(""\n"");
  }
  ps.print(solution);
}
"
30000245,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  for (int i=1; i <= T; i++) {
    int n=scan.nextInt();
    HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
    for (int j=0; j < (2 * n * n) - n; j++) {
      int input=scan.nextInt();
      if (hm.containsKey(input)) {
        hm.put(input,hm.get(input) + 1);
      }
 else {
        hm.put(input,1);
      }
    }
    Iterator it=hm.entrySet().iterator();
    ArrayList<Integer> aList=new ArrayList();
    while (it.hasNext()) {
      Map.Entry pair=(Map.Entry)it.next();
      if (((int)pair.getValue()) % 2 == 1) {
        aList.add((int)pair.getKey());
      }
      it.remove();
    }
    Collections.sort(aList);
    String s="""";
    while (!aList.isEmpty()) {
      s=s + aList.remove(0) + "" "";
    }
    System.out.print(""Case #"" + i + "": ""+ s.trim()+ ""\n"");
  }
}
"
30000246,"public static void main(String[] args) throws FileNotFoundException {
  java.io.PrintStream out=new java.io.PrintStream(""C:/users/Josh/documents/output.txt"");
  int run=in.nextInt();
  for (int p=0; p < run; p++) {
    int lists=in.nextInt();
    int slots[][]=new int[lists][2501];
    int slots1[]=new int[2501];
    for (int c=0; c < (2 * lists) - 1; c++) {
      for (int d=0; d < lists; d++) {
        int temp=in.nextInt();
        slots[d][temp]++;
        slots1[temp]++;
      }
    }
    String outp="""";
    int arr[]=new int[lists];
    int count=0;
    for (int b=0; b < 2500; b++) {
      if (slots1[b] % 2 != 0) {
        arr[count]=b;
        count++;
      }
    }
    for (int x=0; x < lists; x++) {
      for (int y=0; y < lists - 1; y++) {
        if (arr[y] > arr[y + 1]) {
          int temp=arr[y];
          arr[y]=arr[y + 1];
          arr[y + 1]=temp;
        }
      }
    }
    for (int x=0; x < lists; x++) {
      outp+=arr[x];
      outp+="" "";
    }
    out.println(""Case #"" + (p + 1) + "": ""+ outp);
  }
}
"
30000247,"public static void main(String[] args) throws Exception {
  Scanner input=new Scanner(new FileReader(FILENAME + "".in""));
  PrintWriter output=new PrintWriter(new FileWriter(FILENAME + "".out""));
  long start=System.currentTimeMillis();
  int testCase=input.nextInt();
  for (int t=1; t <= testCase; t++) {
    int N=input.nextInt();
    boolean[] check=new boolean[2501];
    Arrays.fill(check,false);
    for (int i=0; i < (2 * N - 1); i++) {
      for (int j=0; j < N; j++) {
        int n=input.nextInt();
        check[n]=!check[n];
      }
    }
    output.print(""Case #"" + t + "":"");
    for (int i=1; i <= 2500; i++) {
      if (check[i])       output.print("" "" + i);
    }
    output.print(""\n"");
  }
  System.out.printf(""Total duration: %dms\n"",System.currentTimeMillis() - start);
  input.close();
  output.close();
}
"
30000248,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int i=0; i < t; i++) {
    int n=sc.nextInt();
    int arr[][]=new int[((2 * n) - 1)][n];
    int a[]=new int[2501];
    for (int j=0; j < (2 * n) - 1; j++) {
      for (int k=0; k < n; k++) {
        arr[j][k]=sc.nextInt();
        a[arr[j][k]]++;
      }
    }
    int b[]=new int[n];
    int z=0;
    for (int j=1; j <= 2500; j++)     if (a[j] % 2 != 0)     b[z++]=j;
    Arrays.sort(b);
    System.out.print(""Case #"" + (i + 1) + "": "");
    for (int j=0; j < n; j++)     System.out.print(b[j] + "" "");
    System.out.println();
  }
}
"
30000249,"public B(int N){
  this.N=N;
}
"
30000250,"public static void main(String[] args) throws Exception {
  Locale.setDefault(Locale.US);
  Scanner in=new Scanner(new File(""problem.in""));
  PrintStream out=new PrintStream(new File(""problem.out""));
  int T=in.nextInt();
  for (int test=1; test <= T; test++) {
    int[] count=new int[2501];
    int n=in.nextInt();
    for (int i=0; i < (2 * n - 1) * n; i++) {
      int a=in.nextInt();
      count[a]++;
    }
    int[] res=new int[n];
    int k=0;
    for (int i=1; i <= 2500; i++) {
      if (count[i] % 2 == 1) {
        res[k]=i;
        k++;
      }
    }
    out.printf(""Case #%d:"",test);
    for (int i=0; i < n; i++) {
      out.printf("" %d"",res[i]);
    }
    out.println();
  }
}
"
30000251,"public static void main(String args[]){
  String path=""round1A/RankAndFile/"";
  String filename=path + ""B-large.in"";
  String out=path + ""result_large.txt"";
  File file=new File(filename);
  File outfile=new File(out);
  BufferedReader br=null;
  PrintWriter pw=null;
  try {
    br=new BufferedReader(new FileReader(file));
    pw=new PrintWriter(new BufferedWriter(new FileWriter(outfile)));
    int testCase=Integer.parseInt(br.readLine());
    for (int t=1; t <= testCase; t++) {
      System.out.println(""test "" + t);
      int[] count=new int[2501];
      Arrays.fill(count,0);
      int N=Integer.parseInt(br.readLine());
      for (int i=0; i < 2 * N - 1; i++) {
        String[] numbers=br.readLine().split("" "");
        for (        String tmp : numbers) {
          int number=Integer.parseInt(tmp);
          count[number]++;
        }
      }
      List<Integer> list=new ArrayList<Integer>();
      for (int i=1; i <= 2500; i++) {
        if (count[i] == 0) {
          continue;
        }
        if (count[i] % 2 != 0) {
          list.add(i);
        }
      }
      Collections.sort(list);
      String result="""";
      for (int i=0; i < N; i++) {
        result+=list.get(i) + "" "";
      }
      pw.println(""Case #"" + t + "": ""+ result);
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    System.exit(1);
  }
catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
        System.exit(1);
      }
    }
    if (pw != null) {
      pw.close();
    }
  }
}
"
30000252,"public static void main(String[] args) throws Exception {
  int t=(int)getInt();
  for (int c=0; c < t; c++) {
    Set<Integer> s=new TreeSet<Integer>();
    ArrayList<Integer> arr=new ArrayList<Integer>();
    System.out.print(""Case #"" + (c + 1) + "": "");
    int n=(int)getInt();
    for (int i=0; i < (2 * n - 1); i++) {
      String arr1[]=br.readLine().split("" "");
      int a[]=new int[arr1.length];
      for (int i1=0; i1 < a.length; i1++) {
        a[i1]=Integer.parseInt(arr1[i1]);
      }
      int par[]=a;
      for (int j=0; j < n; j++) {
        s.add(par[j]);
        arr.add(par[j]);
      }
    }
    for (    int i : s) {
      if (Collections.frequency(arr,i) % 2 == 1) {
        System.out.print(i + "" "");
      }
    }
    System.out.println();
  }
}
"
30000253,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int i=0; i < t; i++) {
    int n=in.nextInt();
    int[][] arr=new int[2 * n - 1][n];
    for (int x=0; x < 2 * n - 1; x++)     for (int y=0; y < n; y++)     arr[x][y]=in.nextInt();
    HashMap<Integer,Integer> h=new HashMap<Integer,Integer>();
    ArrayList<Integer> a=new ArrayList<Integer>();
    for (int i3=0; i3 < 2 * n - 1; i3++)     for (int j=0; j < n; j++) {
      if (h.containsKey(arr[i3][j]))       h.put(arr[i3][j],h.get(arr[i3][j]) + 1);
 else       h.put(arr[i3][j],1);
    }
    Set<Integer> keyset=h.keySet();
    ArrayList<Integer> array=new ArrayList<Integer>(keyset);
    for (int i2=0; i2 < array.size(); i2++) {
      if (h.get(array.get(i2)) % 2 == 1) {
        a.add(array.get(i2));
      }
    }
    int[] newarr=new int[a.size()];
    for (int i4=0; i4 < n; i4++)     newarr[i4]=a.get(i4);
    Arrays.sort(newarr);
    System.out.print(""Case #"" + (i + 1) + "":"");
    for (int i1=0; i1 < newarr.length; i1++)     System.out.print("" "" + newarr[i1]);
    System.out.println();
  }
}
"
30000254,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int tc=1; tc <= T; tc++) {
    System.out.print(""Case #"" + tc + "":"");
    int N=sc.nextInt();
    int[] heightCounts=new int[3000];
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        int height=sc.nextInt();
        heightCounts[height]++;
      }
    }
    List<Integer> missings=new ArrayList<Integer>();
    for (int i=0; i < heightCounts.length; i++) {
      if (heightCounts[i] % 2 != 0) {
        missings.add(i);
      }
    }
    Collections.sort(missings);
    for (    int missing : missings) {
      System.out.print("" "" + missing);
    }
    System.out.println();
  }
  sc.close();
}
"
30000255,"public static void main(String[] args){
  File file=new File(""soldiers/large.txt"");
  String[] problem=null;
  int size=0;
  ArrayList<Integer>[] sol=null;
  try {
    Scanner sc=new Scanner(file);
    size=sc.nextInt();
    sc.nextLine();
    problem=new String[size];
    sol=new ArrayList[size];
    for (int i=0; i < size; i++) {
      sol[i]=new ArrayList<Integer>();
      int N=sc.nextInt();
      int[] digits=new int[3000];
      for (int j=0; j < N * (2 * N - 1); j++) {
        digits[sc.nextInt()]++;
      }
      for (int j=0; j < 3000; j++) {
        if (digits[j] % 2 == 1) {
          sol[i].add(j);
        }
      }
      Collections.sort(sol[i]);
    }
    sc.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  PrintWriter writer=null;
  try {
    writer=new PrintWriter(""sol.txt"",""UTF-8"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  for (int i=0; i < size; i++) {
    writer.print(""Case #"" + (i + 1) + "":"");
    long index=i + 1;
    System.out.print(""Case #"" + index + "":"");
    for (    int j : sol[i]) {
      writer.print("" "" + j);
      System.out.print("" "" + j);
    }
    writer.println("""");
    System.out.println("""");
  }
  writer.close();
}
"
30000256,"public static void main(String[] args) throws FileNotFoundException {
  FileInputStream fis=null;
  fis=new FileInputStream(""B-large.in"");
  PrintStream ps=new PrintStream(new FileOutputStream(""B-large.out""));
  System.setIn(fis);
  System.setOut(ps);
  Scanner input=new Scanner(System.in);
  PrintStream out=System.out;
  int t=input.nextInt();
  for (int i=1; i <= t; i++) {
    int n=input.nextInt();
    int[] height=new int[2501];
    int number=(2 * n - 1) * n;
    for (int j=0; j < number; j++) {
      int h=input.nextInt();
      height[h]++;
    }
    out.format(""Case #%d:"",i);
    for (int h=1; h < height.length; h++) {
      if (height[h] % 2 == 1)       out.format("" %d"",h);
    }
    out.println();
  }
}
"
30000257,"public static void main(String[] args){
  try {
    Scanner scanner=new Scanner(new File(""/Users/xiangyixie/Documents/eclipse_workspace/2016CodeJamRound1A/bin/B-large.in""));
    FileWriter writer=new FileWriter(new File(""/Users/xiangyixie/Documents/eclipse_workspace/2016CodeJamRound1A/bin/B-large-output.out""));
    int T=scanner.nextInt();
    for (int i=0; i < T; i++) {
      int N=scanner.nextInt();
      int[] count=new int[3000];
      for (int j=0; j < count.length; j++) {
        count[j]=0;
      }
      for (int j=0; j < N * (2 * N - 1); j++) {
        count[scanner.nextInt()]++;
      }
      int[] array=new int[N];
      int cur=0;
      for (int j=0; j < count.length; j++) {
        if (count[j] % 2 != 0) {
          System.out.println(j);
          array[cur++]=j;
        }
      }
      Arrays.sort(array,0,N);
      writer.write(""Case #"" + (i + 1) + "":"");
      for (int j=0; j < N; j++) {
        writer.write("" "" + array[j]);
      }
      writer.write(""\n"");
    }
    writer.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000258,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    HashMap<Integer,Integer> map=new HashMap<>();
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        int temp=in.nextInt();
        if (!map.containsKey(temp)) {
          map.put(temp,1);
        }
 else {
          map.put(temp,map.get(temp) + 1);
        }
      }
    }
    PriorityQueue<Integer> q=new PriorityQueue<>();
    for (    Entry<Integer,Integer> s : map.entrySet()) {
      if (s.getValue() % 2 == 1) {
        q.add(s.getKey());
      }
    }
    System.out.print(""Case #"" + i + "": "");
    int temp;
    for (temp=q.poll(); !q.isEmpty(); temp=q.poll()) {
      System.out.print(temp + "" "");
    }
    System.out.print(temp + ""\n"");
  }
}
"
30000259,"public static void main(String[] args){
  FileInputStream instream=null;
  PrintStream outstream=null;
  try {
    instream=new FileInputStream(INPUT);
    outstream=new PrintStream(new FileOutputStream(OUTPUT));
    System.setIn(instream);
    System.setOut(outstream);
  }
 catch (  Exception e) {
    System.err.println(""Error Occurred."");
  }
  in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    System.out.print(""Case #"" + t + "":"");
    int N=in.nextInt();
    int[] flags=new int[2502];
    for (int i=0; i < N * (2 * N - 1); i++) {
      int x=in.nextInt();
      flags[x]++;
    }
    for (int i=1; i < 2501; i++) {
      if ((flags[i] % 2) != 0)       System.out.print("" "" + i);
    }
    System.out.println();
  }
  System.err.println(""done."");
  in.close();
  return;
}
"
30000260,"public static void main(String[] args){
  ArmyProject myClass=new ArmyProject();
  try {
    myClass.in=new Scanner(new BufferedReader(new FileReader(""B-large.in"")));
    myClass.writer=new FileWriter(""the-file-name.txt"");
    int T=myClass.in.nextInt();
    for (int i=1; i <= T; i++) {
      int N=myClass.in.nextInt();
      HashMap<Integer,Integer> countHeights=new HashMap<Integer,Integer>();
      for (int j=1; j <= (2 * N - 1); j++) {
        for (int k=1; k <= N; k++) {
          int h=myClass.in.nextInt();
          if (!countHeights.containsKey(h)) {
            countHeights.put(h,0);
          }
          countHeights.put(h,countHeights.get(h) + 1);
        }
      }
      ArrayList<Integer> list=new ArrayList<Integer>();
      for (      Integer k : countHeights.keySet()) {
        if ((countHeights.get(k) % 2) != 0) {
          list.add(k);
        }
      }
      Collections.sort(list);
      StringBuilder s=new StringBuilder();
      s.append(""Case #"");
      s.append(i);
      s.append("": "");
      for (int j=0; j < list.size(); j++) {
        s.append(list.get(j) + "" "");
      }
      s.append(""\n"");
      myClass.writer.write(s.toString());
    }
    myClass.writer.close();
  }
 catch (  IOException e) {
  }
}
"
30000261,"public static void main(String[] args) throws Exception {
  File inputFile=new File(""B-large.in"");
  Scanner in=new Scanner(inputFile);
  File outputFile=new File(""output.txt"");
  PrintWriter out=new PrintWriter(outputFile);
  int T=in.nextInt();
  for (int t=0; t < T; t++) {
    int N=in.nextInt();
    int[] stat=new int[2501];
    for (int i=0; i < N * (2 * N - 1); i++) {
      int height=in.nextInt();
      stat[height]++;
    }
    StringBuilder output=new StringBuilder();
    for (int i=1; i <= 2500; i++) {
      if (stat[i] % 2 == 1) {
        output.append(' ').append(i);
      }
    }
    out.println(""Case #"" + (t + 1) + "":""+ output);
  }
  out.close();
}
"
30000262,"public static void main(String[] args){
  String fileName=""B-large.in"";
  String line=null;
  int tempInt=0;
  Writer writer=null;
  boolean[] boolArr=new boolean[2501];
  try {
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""B-large.out""),""utf-8""));
    try {
      FileReader fileReader=new FileReader(fileName);
      BufferedReader bufferedReader=new BufferedReader(fileReader);
      int a=Integer.parseInt(bufferedReader.readLine());
      System.out.println(""There are "" + a + "" entries."");
      for (int e=0; e < a; e++) {
        Arrays.fill(boolArr,false);
        int b=Integer.parseInt(bufferedReader.readLine());
        System.out.println(""N :"" + b);
        for (int i=0; i < (2 * b - 1); i++) {
          line=bufferedReader.readLine();
          String[] nums=line.split("" "");
          for (int j=0; j < nums.length; j++) {
            tempInt=Integer.parseInt(nums[j]);
            if (boolArr[tempInt]) {
              boolArr[tempInt]=false;
            }
 else {
              boolArr[tempInt]=true;
            }
            ;
          }
        }
        writer.write(""Case #"" + (e + 1) + "":"");
        for (int k=0; k < 2500; k++) {
          if (boolArr[k]) {
            writer.write("" "" + k);
          }
        }
        writer.append(System.lineSeparator());
      }
      bufferedReader.close();
    }
 catch (    FileNotFoundException ex) {
      System.out.println(""Unable to open file '"" + fileName + ""'"");
    }
catch (    IOException ex) {
      System.out.println(""Error reading file '"" + fileName + ""'"");
    }
  }
 catch (  IOException ex) {
  }
 finally {
    try {
      writer.close();
    }
 catch (    Exception ex) {
    }
  }
}
"
30000263,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  StringTokenizer myTokens=new StringTokenizer(in.readLine());
  int T=Integer.parseInt(myTokens.nextToken());
  for (int i=0; i < T; i++) {
    myTokens=new StringTokenizer(in.readLine());
    int N=Integer.parseInt(myTokens.nextToken());
    int[] heights=new int[2501];
    for (int j=0; j < 2 * N - 1; j++) {
      myTokens=new StringTokenizer(in.readLine());
      for (int k=0; k < N; k++) {
        heights[Integer.parseInt(myTokens.nextToken())]++;
      }
    }
    System.out.print(""Case #"" + (i + 1) + "":"");
    for (int q=0; q < 2501; q++) {
      if (heights[q] % 2 == 1) {
        System.out.print("" "" + q);
      }
    }
    System.out.println("""");
  }
}
"
30000264,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int cases=1; cases <= T; cases++) {
    int N=sc.nextInt();
    int[] seen=new int[2501];
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        int k=sc.nextInt();
        seen[k]++;
      }
    }
    System.out.print(""Case #"" + cases + "":"");
    for (int i=0; i <= 2500; i++) {
      if (seen[i] % 2 == 1)       System.out.print("" "" + i);
    }
    System.out.println();
  }
  sc.close();
}
"
30000265,"public static void main(String[] args){
  Scanner sc=null;
  PrintWriter w=null;
  try {
    w=new PrintWriter(new BufferedWriter(new FileWriter(""out-rankfile-l.txt"",false)));
    sc=new Scanner(new File(""B-large.in""));
    sc.useDelimiter("" |\n"");
    int T=sc.nextInt();
    for (int z=0; z < T; z++) {
      N=sc.nextInt();
      sc.nextLine();
      list=new ArrayList<>(2 * N - 1);
      for (int i=0; i < 2 * N - 1; i++) {
        String s=sc.nextLine();
        list.add(s.split("" ""));
      }
      String result="""";
      TreeSet<Integer> res=new TreeSet<>();
      HashSet<String> set=new HashSet<>();
      for (      String[] s : list) {
        for (        String ss : s) {
          if (set.contains(ss))           set.remove(ss);
 else           set.add(ss);
        }
      }
      for (      String ss : set) {
        res.add(Integer.valueOf(ss));
      }
      for (      Integer in : res) {
        result+=(in + "" "");
      }
      result=result.substring(0,result.length() - 1);
      String ress=result;
      System.out.println(""Case #"" + (z + 1) + "": ""+ ress);
      w.println(""Case #"" + (z + 1) + "": ""+ ress);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    sc.close();
    w.close();
  }
}
"
30000266,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""resources/A-large-solder.in""));
  FileWriter fw=new FileWriter(""resources/A-large-solder.out"");
  int C=new Integer(in.readLine());
  for (int i=1; i <= C; i++) {
    int N=new Integer(in.readLine());
    int[][] heights=new int[2500 * 2500][2];
    for (int j=0; j < 2 * N - 1; j++) {
      StringTokenizer st=new StringTokenizer(in.readLine());
      for (int v=0; v < N; v++) {
        int height=new Integer(st.nextToken());
        boolean matched=false;
        int i1=0;
        for (; i1 < N * N && heights[i1][0] > 0; i1++) {
          if (height == heights[i1][0]) {
            heights[i1][1]++;
            matched=true;
          }
        }
        if (!matched) {
          heights[i1][0]=height;
          heights[i1][1]++;
        }
      }
    }
    ArrayList result=new ArrayList();
    for (int i2=0; i2 < N * N && heights[i2][0] > 0; i2++) {
      if (heights[i2][1] % 2 == 1)       result.add(heights[i2][0]);
    }
    Collections.sort(result);
    fw.write(""Case #"" + i + "": "");
    for (int i1=0; i1 < result.size(); i1++) {
      fw.write(result.get(i1) + "" "");
    }
    fw.write(""\n"");
  }
  fw.flush();
  fw.close();
}
"
30000267,"public static void main(String[] args) throws FileNotFoundException {
  File inputFile=new File(args[0]);
  RankAndFile t=new RankAndFile(inputFile);
  for (int i=0; i < t.caseArray.length; i++) {
    System.out.println(""Case #"" + (i + 1) + "": ""+ t.caseArray[i].evaluateCase());
  }
}
"
30000268,"public static void main(String[] args){
  try {
    Scanner sc=new Scanner(new FileInputStream(new File(filename)));
    int no_of_times=sc.nextInt();
    for (int i=0; i < no_of_times; ++i) {
      int N=sc.nextInt();
      int[][] array=new int[2 * N - 1][N];
      for (int j=0; j < 2 * N - 1; ++j) {
        for (int k=0; k < N; ++k) {
          array[j][k]=sc.nextInt();
        }
      }
      HashMap<Integer,Integer> count=new HashMap<Integer,Integer>();
      int[] ret=new int[array[0].length];
      for (int j1=0; j1 < array.length; ++j1) {
        for (int k=0; k < array[0].length; ++k) {
          if (!count.containsKey(array[j1][k])) {
            count.put(array[j1][k],1);
          }
 else {
            count.put(array[j1][k],count.get(array[j1][k]) + 1);
          }
        }
      }
      int index=0;
      for (      Integer key : count.keySet()) {
        if (count.get(key) % 2 != 0) {
          ret[index]=key;
          index++;
        }
      }
      Arrays.sort(ret);
      int[] soln=ret;
      FileOutputStream fos=new FileOutputStream(output,true);
      fos.write((""Case #"" + (i + 1) + "":"").getBytes());
      for (int j=0; j < soln.length; ++j) {
        fos.write(("" "" + soln[j]).getBytes());
      }
      fos.write((""\n"").getBytes());
      fos.close();
    }
    sc.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000269,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int count=in.nextInt();
  for (int k=0; k < count; k++) {
    int sideSize=in.nextInt();
    int[] side=new int[sideSize * (2 * sideSize - 1)];
    ArrayList<Integer> sideToSort=new ArrayList<>();
    for (int i=0; i < side.length; i++) {
      side[i]=in.nextInt();
    }
    for (int i=0; i < side.length; i++) {
      int counter=1;
      for (int j=0; j < side.length; j++) {
        if (i != j && side[i] == side[j]) {
          counter++;
        }
      }
      if (counter % 2 != 0 && !sideToSort.contains(side[i])) {
        sideToSort.add(side[i]);
      }
      if (sideToSort.size() == sideSize) {
        break;
      }
    }
    Collections.sort(sideToSort);
    System.out.print(""Case #"" + (k + 1) + "": "");
    for (int j=0; j < sideToSort.size(); j++) {
      System.out.print(sideToSort.get(j) + "" "");
    }
    System.out.println();
  }
}
"
30000270,"public static void main(String[] args) throws FileNotFoundException {
  System.setOut(new PrintStream(""RankandFile.out""));
  Scanner s=new Scanner(System.in);
  int tests=s.nextInt();
  for (int test=1; test <= tests; test++) {
    int n=s.nextInt();
    int[] count=new int[3000];
    for (int i=0; i < n * 2 - 1; i++) {
      for (int j=0; j < n; j++) {
        count[s.nextInt()]++;
      }
    }
    ArrayList<Integer> answer=new ArrayList<>();
    for (int i=0; i < count.length; i++) {
      if (count[i] % 2 == 1) {
        answer.add(i);
      }
    }
    Collections.sort(answer);
    String k="""";
    for (int i=0; i < answer.size(); i++) {
      k=k + answer.get(i) + "" "";
    }
    System.err.println(""Case #"" + test + "": ""+ k);
    System.out.println(""Case #"" + test + "": ""+ k);
  }
}
"
30000271,"public static void main(String[] args) throws FileNotFoundException {
  PrintWriter writer=new PrintWriter(new FileOutputStream(""output""));
  Scanner in=new Scanner(new FileInputStream(""B-large.in""));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int col=in.nextInt();
    Map<Integer,Integer> map=new HashMap<>();
    for (int j=0; j < 2 * col - 1; j++) {
      for (int k=0; k < col; k++) {
        int num=in.nextInt();
        if (!map.containsKey(num)) {
          map.put(num,1);
        }
 else {
          int count=map.get(num);
          map.put(num,count + 1);
        }
      }
    }
    TreeSet<Integer> missing=new TreeSet<>();
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      if (entry.getValue() % 2 == 1) {
        missing.add(entry.getKey());
      }
    }
    StringBuilder output=new StringBuilder();
    for (    int num : missing) {
      output.append(num).append("" "");
    }
    writer.printf(FORMAT,i,output.toString());
  }
  writer.flush();
  writer.close();
}
"
30000272,"public static void main(String[] args) throws FileNotFoundException {
}
"
30000273,"public static void main(String[] args) throws FileNotFoundException {
  FileReader file=new FileReader(""B-large.in"");
  Scanner in=new Scanner(file);
  PrintWriter out=new PrintWriter(""output.txt"");
  int t=in.nextInt();
  for (int b=1; b <= t; b++) {
    int n=in.nextInt();
    int[] a=new int[2501];
    int[] result=new int[n];
    int k=0;
    for (int i=0; i < ((2 * n - 1) * n); i++) {
      a[in.nextInt()]+=1;
    }
    for (int j=0; j < a.length; j++) {
      if (!((a[j] % 2) == 0)) {
        result[k]=j;
        k++;
      }
    }
    String output="""";
    for (int s=0; s < result.length; s++) {
      output+="" "" + result[s];
    }
    out.println(""Case #"" + b + "":""+ output);
  }
  in.close();
  out.close();
}
"
30000274,"public static void main(String[] args){
  try {
    Scanner sc=new Scanner(new FileReader(""B-large (1).in""));
    FileWriter fw=new FileWriter(new File(""Output.txt""));
    PrintWriter pw=new PrintWriter(fw);
    int t=sc.nextInt();
    sc.nextLine();
    for (int r=1; r <= t; r++) {
      int n=sc.nextInt();
      ArrayList<Integer> list=new ArrayList<Integer>();
      for (int i=0; i < 2 * n - 1; i++) {
        for (int j=0; j < n; j++) {
          int temp=sc.nextInt();
          boolean add=true;
          for (int k=0; k < list.size(); k++) {
            if (temp == list.get(k)) {
              list.remove(k);
              add=false;
              break;
            }
          }
          if (add)           list.add(temp);
        }
      }
      Collections.sort(list);
      pw.print(""Case #"" + r + "":"");
      for (int i=0; i < n; i++) {
        pw.print("" "" + list.get(i));
      }
      pw.println();
    }
    pw.flush();
    pw.close();
  }
 catch (  IOException ioe) {
    System.out.print(ioe);
  }
}
"
30000275,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""B.in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""B.out""));
  int T=Integer.parseInt(in.readLine());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(in.readLine());
    int[] freq=new int[2501];
    for (int i=0; i < 2 * N - 1; i++) {
      StringTokenizer st=new StringTokenizer(in.readLine());
      for (int j=0; j < N; j++)       freq[Integer.parseInt(st.nextToken())]++;
    }
    out.write(""Case #"" + t + "": "");
    for (int i=1; i <= 2500; i++)     if (freq[i] % 2 == 1)     out.write(i + "" "");
    out.write(""\n"");
  }
  in.close();
  out.close();
}
"
30000276,"public static void main(String[] args){
}
"
30000277,"public static void main(String[] args){
  File input=new File(""B-large.in copy.txt"");
  try {
    Scanner in=new Scanner(input);
    int total=in.nextInt();
    Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""RankAndFileLargeOutput.out""),""utf-8""));
    for (int i=1; i <= total; i++) {
      int N=in.nextInt();
      int[][] reminderList=new int[2 * N - 1][N];
      for (int j=0; j < 2 * N - 1; j++) {
        for (int k=0; k < N; k++) {
          reminderList[j][k]=in.nextInt();
        }
      }
      int[] missing=new int[N];
      int[] height=new int[2500];
      for (int i1=0; i1 < 2500; i1++) {
        height[i1]=0;
      }
      int missIndex=0;
      for (int j1=0; j1 < 2 * N - 1; j1++) {
        for (int k=0; k < N; k++) {
          height[reminderList[j1][k] - 1]++;
        }
      }
      for (int i2=0; i2 < 2500; i2++) {
        if (height[i2] % 2 != 0) {
          missing[missIndex]=i2 + 1;
          missIndex++;
        }
      }
      System.out.println(Arrays.toString(missing));
      int[] missingList=missing;
      String temp=String.format(""Case #%d:"",i);
      writer.write(temp);
      for (int j=0; j < N; j++) {
        temp=String.format("" %d"",missingList[j]);
        writer.write(temp);
      }
      temp=String.format(""%n"");
      writer.write(temp);
    }
    writer.close();
    in.close();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}
"
30000278,"public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
  Scanner scanner=new Scanner(new File(""B-large.in""));
  PrintWriter writer=new PrintWriter(""B-large.out"",""UTF-8"");
  int numberOfTestCases=scanner.nextInt();
  scanner.nextLine();
  for (int testCaseCounter=1; testCaseCounter <= numberOfTestCases; testCaseCounter++) {
    int n=Integer.parseInt(scanner.nextLine());
    Map<Integer,Integer> heightMap=new HashMap<Integer,Integer>();
    for (int i=0; i < (2 * n - 1); i++) {
      String[] line=scanner.nextLine().split("" "");
      for (int j=0; j < line.length; j++) {
        Integer count=heightMap.get(Integer.parseInt(line[j]));
        if (count == null) {
          count=1;
        }
 else {
          count++;
        }
        heightMap.put(Integer.parseInt(line[j]),count);
      }
    }
    int[] output=new int[n];
    int i=0;
    for (    Integer height : heightMap.keySet()) {
      Integer count=heightMap.get(height);
      if ((count % 2) != 0) {
        output[i]=height;
        i++;
      }
    }
    Arrays.sort(output);
    StringBuilder outputBuilder=new StringBuilder();
    for (int j=0; j < output.length; j++) {
      outputBuilder.append(output[j] + "" "");
    }
    String res=outputBuilder.toString().trim();
    writer.println(""Case #"" + testCaseCounter + "": ""+ res);
  }
  scanner.close();
  writer.close();
}
"
30000279,"public static void main(String[] args) throws Exception {
  Scanner scanner=new Scanner(new File(""B-large.in""));
  int cases=scanner.nextInt();
  for (int t=0; t < cases; t++) {
    int rows=scanner.nextInt();
    int[] nums=new int[2501];
    String output="""";
    for (int r=0; r < 2 * rows - 1; r++) {
      for (int k=0; k < rows; k++) {
        int currnum=scanner.nextInt();
        nums[currnum]++;
      }
    }
    for (int i=0; i < nums.length; i++) {
      if ((nums[i] % 2) != 0) {
        output+="" "" + Integer.toString(i);
      }
    }
    System.out.printf(""Case #%d:%s\n"",t + 1,output);
  }
}
"
30000280,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  sc.nextLine();
  Writer writer=null;
  try {
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""filename.txt""),""utf-8""));
    for (int k=0; k < T; k++) {
      System.out.println(k);
      int N=sc.nextInt();
      StringBuilder sb=new StringBuilder();
      HashSet<Integer> set=new HashSet<Integer>();
      for (int i=0; i < N * (2 * N - 1); i++) {
        int t=sc.nextInt();
        if (set.contains(t))         set.remove(t);
 else         set.add(t);
      }
      ArrayList<Integer> res=new ArrayList<Integer>();
      res.addAll(set);
      Collections.sort(res);
      for (int i=0; i < res.size() - 1; i++) {
        sb.append(res.get(i));
        sb.append(' ');
      }
      sb.append(res.get(res.size() - 1));
      writer.write(""Case #"" + (k + 1) + "": ""+ sb.toString()+ ""\n"");
    }
  }
 catch (  IOException ex) {
  }
 finally {
    try {
      writer.close();
    }
 catch (    Exception ex) {
    }
  }
}
"
30000281,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""input.in""));
  PrintWriter pw=new PrintWriter(""output.out"");
  int n_case=sc.nextInt();
  for (int i=1; i <= n_case; i++) {
    int[] count=new int[2501];
    int n=sc.nextInt();
    for (int r=0; r < 2 * n - 1; r++) {
      for (int k=0; k < n; k++) {
        int v=sc.nextInt();
        count[v]++;
        count[v]=count[v] % 2;
      }
    }
    String ris="""";
    for (int el=1; el <= 2500; el++) {
      if (count[el] != 0) {
        ris+=el + "" "";
      }
    }
    pw.println(""Case #"" + i + "": ""+ ris);
  }
  sc.close();
  pw.close();
}
"
30000282,"public static void main(String ar[]){
  Scanner input=new Scanner(System.in);
  int t=input.nextInt();
  int n;
  for (int i=1; i <= t; i++) {
    System.out.print(""Case #"" + i + "": "");
    n=input.nextInt();
    int a[]=new int[2501];
    for (int j=0; j < 2501; j++)     a[j]=0;
    int l=(2 * n * n - n);
    for (int j=0; j < l; j++) {
      int k=input.nextInt();
      a[k]++;
    }
    for (int j=0; j < 2501; j++) {
      if (a[j] % 2 != 0)       System.out.print(j + "" "");
    }
    System.out.println();
  }
}
"
30000283,"public static void main(String[] args) throws NumberFormatException, IOException {
  @SuppressWarnings(""resource"") BufferedReader br=new BufferedReader(new FileReader(""/home/local/JASPERINDIA/gitanshu.behal/Desktop/Jam/1A/Q2/input1.in""));
  BufferedWriter wr=new BufferedWriter(new FileWriter(""/home/local/JASPERINDIA/gitanshu.behal/Desktop/Jam/1A/Q2/output1.out""));
  int testCases=Integer.parseInt(br.readLine());
  for (int I=1; I <= testCases; I++) {
    int N=Integer.parseInt(br.readLine());
    int[] array=new int[2 * N * N];
    int[] flag=new int[3000];
    int J=0;
    for (int i=0; i < (2 * N - 1); i++) {
      String[] arr=br.readLine().split("" "");
      for (int j=0; j < arr.length; j++) {
        array[J]=Integer.parseInt(arr[j]);
        if (flag[array[J]] == 0) {
          flag[array[J]]=1;
        }
 else {
          flag[array[J]]=0;
        }
        J++;
      }
    }
    Integer[] answer=new Integer[N];
    int K=0;
    for (int i=1; i < 2501; i++) {
      if (flag[i] == 1) {
        answer[K++]=i;
      }
    }
    Arrays.sort(answer);
    wr.write(""Case #"" + I + "": "");
    for (int i=0; i < answer.length; i++) {
      wr.write(answer[i].toString() + "" "");
    }
    wr.newLine();
  }
  wr.close();
}
"
30000284,"public static void main(String[] args) throws Exception {
  File file=new File(""/Volumes/Macintosh HD/Users/avorobyev/Downloads/B-large.in"");
  Scanner input=new Scanner(file);
  int totalCases=input.nextInt();
  for (int i=1; i < totalCases + 1; i++) {
    check=new HashMap<Integer,Integer>();
    int n=input.nextInt();
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        Integer m=input.nextInt();
        if (check.get(m) == null) {
          check.put(m,1);
        }
 else {
          Integer old=check.get(m);
          Integer newOld=old + 1;
          check.put(m,newOld);
        }
      }
    }
    ArrayList<Integer> toSort=new ArrayList<>();
    Iterator it=check.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry pair=(Map.Entry)it.next();
      Integer toCheck=(Integer)pair.getValue();
      if ((toCheck % 2) != 0) {
        toSort.add((Integer)pair.getKey());
      }
    }
    Collections.sort(toSort);
    System.out.print(""Case #"" + i + "": "");
    for (int j=0; j < n; j++) {
      System.out.print(toSort.get(j) + "" "");
    }
    System.out.println();
  }
}
"
30000285,"public static void main(String[] args) throws IOException {
}
"
30000286,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(""C:/Users/John/Documents/Java/2016/der.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""C:/Users/John/Documents/Java/2016/outlarge.out"")));
  int cases=Integer.parseInt(f.readLine());
  for (int q=0; q < cases; q++) {
    int n=Integer.parseInt(f.readLine());
    List<Integer> master=new ArrayList<Integer>();
    List<Integer> solution=new ArrayList<Integer>();
    for (int w=0; w < (n + n - 1); w++) {
      String in=f.readLine();
      String[] parts=in.split("" "");
      for (int i=0; i < parts.length; i++) {
        master.add(Integer.parseInt(parts[i]));
      }
    }
    System.out.println(master);
    do {
      if (master.size() == 1) {
        solution.add(master.get(0));
        System.out.println(""IN HERE"" + master);
        break;
      }
      int j=master.get(0);
      master.remove(0);
      if (master.contains(j)) {
        for (int p=0; p < master.size(); p++) {
          if (master.get(p).equals(j)) {
            master.remove(p);
            break;
          }
        }
      }
 else {
        solution.add(j);
      }
    }
 while (master.size() != 0);
    Collections.sort(solution);
    System.out.println(solution);
    String output1="""";
    for (int y=0; y < solution.size(); y++) {
      if ((y + 1) == solution.size()) {
        output1=output1 + solution.get(y);
        break;
      }
      output1=output1 + solution.get(y) + "" "";
    }
    out.write(""Case #"" + (q + 1) + "": ""+ output1);
    if ((q + 1) != cases) {
      out.write(""\n"");
    }
  }
  out.close();
  f.close();
}
"
30000287,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  final int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    final int N=in.nextInt();
    int[] h=new int[2501];
    for (int j=0; j < (2 * N - 1) * N; j++)     h[in.nextInt()]++;
    System.out.print(""Case #"" + i + "":"");
    for (int j=0; j < h.length; j++)     if (h[j] % 2 == 1)     System.out.print("" "" + j);
    System.out.println();
  }
}
"
30000288,"public static void main(String args[]) throws NumberFormatException, IOException {
  BufferedReader bufferReader=new BufferedReader(new FileReader(""C:\\Users\\anaka\\Desktop\\trial.in""));
  int noOfTestCases=Integer.parseInt(bufferReader.readLine());
  List resultList=new ArrayList();
  for (int count=0; count < noOfTestCases; count++) {
    int number=Integer.parseInt(bufferReader.readLine());
    int[] heights=new int[2501];
    for (int i=1; i <= 2 * number - 1; i++) {
      String line=bufferReader.readLine();
      String[] splitLine=line.split(""\\s+"");
      for (int j=0; j < splitLine.length; j++) {
        int parsedInt=Integer.parseInt(splitLine[j]);
        if (heights[parsedInt] == 0) {
          heights[parsedInt]=1;
        }
 else {
          heights[parsedInt]=heights[parsedInt] + 1;
        }
      }
    }
    resultList.add(heights);
  }
  bufferReader.close();
  File file=new File(""C:\\Users\\anaka\\Desktop\\output.txt"");
  if (!file.exists()) {
    file.createNewFile();
  }
  FileWriter fileWriter=new FileWriter(file.getAbsoluteFile());
  BufferedWriter bufferedWriter=new BufferedWriter(fileWriter);
  for (int count=0; count < resultList.size(); count++) {
    int testCaseNumber=count + 1;
    bufferedWriter.write(""Case #"" + testCaseNumber + "": "");
    int[] result=(int[])resultList.get(count);
    for (int i=0; i < result.length; i++) {
      if (result[i] % 2 != 0) {
        bufferedWriter.write(i + "" "");
      }
    }
    bufferedWriter.write(System.lineSeparator());
  }
  bufferedWriter.close();
}
"
30000289,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    int count[]=new int[2501];
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        int temp=in.nextInt();
        count[temp]++;
      }
    }
    System.out.print(""Case #"" + i + "": "");
    int missing[]=new int[n];
    int c=0;
    for (int j=0; j < 2501; j++) {
      if (count[j] % 2 != 0) {
        missing[c++]=j;
        System.out.print(j + "" "");
      }
    }
    System.out.println("""");
  }
}
"
30000290,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int testCases=in.nextInt();
  for (int i=1; i <= testCases; i++) {
    int N=in.nextInt();
    Map<Integer,Boolean> temp=new HashMap<Integer,Boolean>();
    for (int j=1; j <= (2 * N - 1); j++) {
      for (int k=1; k <= N; k++) {
        int soldHeight=in.nextInt();
        if (temp.containsKey(soldHeight)) {
          temp.remove(soldHeight);
        }
 else {
          temp.put(soldHeight,true);
        }
      }
    }
    List<Integer> sortedKeys=new ArrayList<Integer>(temp.keySet());
    Collections.sort(sortedKeys);
    String missingRowOrCol="""";
    for (int k=0; k < sortedKeys.size(); k++) {
      missingRowOrCol+="" "" + sortedKeys.get(k);
    }
    System.out.println(""Case #"" + i + "":""+ missingRowOrCol);
  }
}
"
30000291,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=1; i <= T; i++) {
    int numR=sc.nextInt();
    int[] arr=new int[2505];
    for (int j=0; j < numR * 2 - 1; j++) {
      for (int k=0; k < numR; k++) {
        int temp=sc.nextInt();
        arr[temp]++;
      }
    }
    ArrayList<Integer> list=new ArrayList<Integer>();
    for (int x=0; x < arr.length; x++) {
      if (arr[x] % 2 == 1) {
        list.add(x);
      }
    }
    Collections.sort(list);
    System.out.print(""Case #"" + i + "": "");
    int p=0;
    for (p=0; p < list.size() - 1; p++) {
      System.out.print(list.get(p) + "" "");
    }
    System.out.println(list.get(p));
  }
}
"
30000292,"public static void main(String[] args){
  if (args.length == 0) {
    System.out.println(""No arguments provided"");
    return;
  }
  try {
    File file=new File(args[0]);
    Scanner input=new Scanner(file);
    FileWriter fileOut=new FileWriter(""output.txt"");
    BufferedWriter writer=new BufferedWriter(fileOut);
    int numTests=input.nextInt();
    int i;
    for (i=0; i < numTests; i++) {
      int lineLength=input.nextInt();
      Hashtable<Integer,Integer> heights=new Hashtable<Integer,Integer>();
      int j;
      for (j=0; j < (2 * lineLength - 1) * lineLength; j++) {
        Integer nextHeight=input.nextInt();
        if (heights.containsKey(nextHeight)) {
          heights.put(nextHeight,new Integer(heights.get(nextHeight) + 1));
        }
 else {
          heights.put(nextHeight,1);
        }
      }
      ArrayList<Integer> oddHeights=new ArrayList<Integer>();
      for (      Integer height : heights.keySet()) {
        if (heights.get(height) % 2 == 1) {
          oddHeights.add(height);
        }
      }
      Collections.sort(oddHeights);
      writer.write(""Case #"" + (i + 1) + "":"");
      for (j=0; j < oddHeights.size(); j++) {
        writer.write("" "" + oddHeights.get(j));
      }
      writer.write(""\n"");
    }
    writer.close();
    fileOut.close();
    input.close();
  }
 catch (  FileNotFoundException e) {
    System.out.println(""Error reading input file"");
  }
catch (  IOException e) {
    System.out.println(""Error writing output"");
  }
}
"
30000293,"/** 
 * @param args
 */
public static void main(String[] args) throws IOException {
  Scanner s=new Scanner(new File(PROBLEM + "".in""));
  int n=s.nextInt();
  s.nextLine();
  FileWriter fw=new FileWriter(new File(PROBLEM + "".out""));
  for (int i=0; i < n; i++) {
    int size=s.nextInt();
    ArrayList<ArrayList<Integer>> data=new ArrayList<ArrayList<Integer>>();
    for (int j=0; j < size * 2 - 1; j++) {
      ArrayList<Integer> thisSet=new ArrayList<Integer>();
      for (int p=0; p < size; p++) {
        thisSet.add(s.nextInt());
      }
      data.add(thisSet);
    }
    int[] distributions=new int[2501];
    for (    ArrayList<Integer> arr : data) {
      for (      int x : arr) {
        System.out.print(x + "" "");
        distributions[x]++;
      }
      System.out.println();
    }
    int[] odd=new int[size * size];
    int oddCount=0;
    for (int p=0; p < distributions.length; p++) {
      if (distributions[p] % 2 == 1) {
        odd[oddCount++]=p;
      }
    }
    for (int p=0; p < odd.length; p++) {
      if (odd[p] == 0) {
        odd[p]=Integer.MAX_VALUE;
      }
    }
    Arrays.sort(odd);
    String output="""";
    for (int p=0; p < size; p++) {
      output+="" "" + odd[p];
    }
    fw.write(""Case #"" + (i + 1) + "":""+ output+ ""\n"");
  }
  fw.close();
  s.close();
}
"
30000294,"public static void main(String[] args){
  try {
    Scanner input=new Scanner(new File(""D:/xѧϰ/eclipse2/eclipseWorkSpace/GoogleCodeJam2016/src/input/roundA1/B-large.in""));
    try {
      FileWriter fw=new FileWriter(new File(""D:/xѧϰ/eclipse2/eclipseWorkSpace/GoogleCodeJam2016/src/output/roundA1/B-large.out""));
      int caseNum=Integer.parseInt(input.nextLine());
      for (int i=1; i <= caseNum; i++) {
        int N=Integer.parseInt(input.nextLine());
        int[] cnt=new int[2501];
        int total=2 * N - 1;
        for (int j=0; j < total; j++) {
          String list=input.nextLine();
          String[] strArray=list.split(""\\s{1,}"");
          for (int k=0; k < N; k++) {
            cnt[Integer.parseInt(strArray[k])]++;
          }
        }
        int[] missingList=new int[N];
        int k=0;
        for (int j=1; j < 2501; j++) {
          if (cnt[j] % 2 != 0) {
            missingList[k++]=j;
          }
          if (k == N) {
            break;
          }
        }
        Arrays.sort(missingList);
        String output="""";
        for (int j=0; j < N; j++) {
          output+=missingList[j] + "" "";
        }
        output=""Case #"" + i + "": ""+ output+ ""\n"";
        fw.write(output);
      }
      fw.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    input.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30000295,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(INPUT_LOCATION + ""B-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(INPUT_LOCATION + ""B-large.in.out""));
  int cnttests=sc.nextInt();
  for (int i=0; i < cnttests; i++) {
    int[] trackcounts=new int[2501];
    int j=sc.nextInt();
    int x=(2 * j - 1) * j;
    for (int k=0; k < x; k++)     trackcounts[sc.nextInt()]+=1;
    pw.print(""Case #"" + (i + 1) + "":"");
    for (int p=1; p < 2500; p++) {
      if (trackcounts[p] % 2 == 1)       pw.print("" "" + p);
    }
    pw.println();
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000296,"public static void main(String[] args) throws FileNotFoundException, IOException {
  int casetotal=0;
  int casenumber=1;
  int totalline=0;
  String line="""";
  try (FileReader fr=new FileReader(""data/B-large.in"");BufferedReader br=new BufferedReader(fr);FileWriter fw=new FileWriter(""data/B-large.out"");PrintWriter bw=new PrintWriter(fw)){
    while ((line=br.readLine()) != null) {
      if (totalline == 0) {
        casetotal=Integer.parseInt(line);
        totalline++;
        continue;
      }
      if (casenumber > casetotal) {
        System.out.println(""###Error: The casenumber has problem!!!"");
        System.out.println(""###Error: This error happened in line number"" + totalline);
        System.exit(0);
      }
      HashMap<Integer,Integer> count=new HashMap<Integer,Integer>();
      int N=Integer.parseInt(line);
      for (int i=0; i < 2 * N - 1; i++) {
        line=br.readLine();
        String[] arrS=line.split("" "",N);
        for (        String s : arrS) {
          int no=Integer.parseInt(s);
          if (count.get(no) != null)           count.put(no,count.get(no) + 1);
 else           count.put(no,1);
        }
        totalline++;
      }
      ArrayList<Integer> list=new ArrayList<Integer>();
      for (      int key : count.keySet()) {
        if (count.get(key) % 2 == 1)         list.add(key);
      }
      Collections.sort(list);
      bw.print(""Case #"" + casenumber + "": "");
      for (      int no : list) {
        bw.print(no);
        bw.print("" "");
      }
      bw.println();
      casenumber++;
      totalline++;
    }
  }
 }
"
30000297,"public static void main(String[] args) throws FileNotFoundException {
  Scanner input=new Scanner(new File(""B-large.in""));
  PrintWriter out=new PrintWriter(new File(""pB.out""));
  while (input.hasNext()) {
    int T=input.nextInt();
    for (int t=1; t <= T; ++t) {
      int N=input.nextInt();
      int lineNum=2 * N - 1;
      int[] countHeight=new int[2500 + 1];
      for (int i=0; i < lineNum; ++i) {
        for (int j=0; j < N; ++j) {
          ++countHeight[input.nextInt()];
        }
      }
      out.printf(""Case #%d: "",t);
      boolean isFirstNum=true;
      for (int i=0; i < countHeight.length; ++i) {
        if (countHeight[i] % 2 == 1) {
          if (isFirstNum) {
            out.print(i);
            isFirstNum=false;
          }
 else {
            out.printf("" %d"",i);
          }
        }
      }
      out.println();
    }
  }
  out.close();
  input.close();
}
"
30000298,"public static void main(String[] args) throws IOException {
  FileReader fin=new FileReader(""RankInput.txt"");
  BufferedReader bin=new BufferedReader(fin);
  int t=Integer.parseInt(bin.readLine());
  FileWriter fout=new FileWriter(""RankOutput.txt"");
  BufferedWriter bout=new BufferedWriter(fout);
  PrintWriter pout=new PrintWriter(bout);
  for (int i=0; i < t; i++) {
    int n=Integer.parseInt(bin.readLine());
    String answer="""";
    int count[]=new int[2501];
    for (int j=0; j < 2501; j++)     count[j]=0;
    for (int j=0; j < 2 * n - 1; j++) {
      String s=bin.readLine();
      StringTokenizer sb=new StringTokenizer(s);
      for (int k=0; k < n; k++) {
        int l=Integer.parseInt(sb.nextToken());
        count[l]++;
      }
    }
    for (int j=1; j < 2501; j++) {
      if (count[j] % 2 == 1) {
        answer=answer + """" + j+ "" "";
      }
    }
    pout.println(""Case #"" + (i + 1) + "": ""+ answer.trim());
  }
  pout.close();
}
"
30000299,"public static void main(String[] runOnce){
  int testCases=Integer.parseInt(sc.nextLine());
  for (int caseNo=0; caseNo < testCases; caseNo++) {
    int N;
    boolean[] height=new boolean[2501];
    int[] remainingPeople, arrangedPeople;
    int currentRead, ram1, ram2, z;
    N=Integer.parseInt(sc.nextLine());
    for (int y=0; y < ((2 * N) - 1); y++) {
      for (int x=0; x < N; x++) {
        currentRead=sc.nextInt();
        height[currentRead]=!height[currentRead];
      }
      sc.nextLine();
    }
    remainingPeople=new int[N];
    int y=0;
    for (int x=0; x < 2501; x++) {
      if (height[x]) {
        remainingPeople[y]=x;
        y++;
      }
    }
    ram1=Integer.MAX_VALUE;
    for (int x=0; x < N; x++)     if (remainingPeople[x] < ram1)     ram1=remainingPeople[x];
    arrangedPeople=new int[N];
    arrangedPeople[0]=ram1;
    for (y=1; y < N; y++) {
      ram2=Integer.MAX_VALUE;
      for (int x=0; x < N; x++) {
        z=remainingPeople[x];
        if (z < ram2 && z > ram1) {
          ram2=z;
        }
      }
      arrangedPeople[y]=ram1=ram2;
    }
    System.out.print(""Case #"" + (caseNo + 1) + "": "");
    for (y=0; y < N; y++) {
      System.out.print(arrangedPeople[y]);
      if (y != N - 1)       System.out.print("" "");
    }
    System.out.println("""");
  }
}
"
30000300,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    Set<Integer> set=new TreeSet<>();
    int k=in.nextInt();
    for (int l=0; l < (k * 2) - 1; l++) {
      for (int n=0; n < k; n++) {
        int num=in.nextInt();
        boolean remove=false;
        for (        int a : set) {
          if (a == num) {
            remove=true;
            break;
          }
        }
        if (remove) {
          set.remove(num);
        }
 else {
          set.add(num);
        }
      }
    }
    String str="""";
    for (    int n : set) {
      str+="" "" + n;
    }
    System.out.println(""Case #"" + i + "": ""+ str.trim());
  }
}
"
30000301,"public static void main(String[] args) throws Exception {
  int n=Integer.parseInt(bf.readLine());
  for (int i=0; i < n; i++) {
    int m=Integer.parseInt(bf.readLine());
    int Len=(2 * m) - 1;
    int[] ans=new int[m];
    int ansC=0;
    for (int j=0; j < Len; j++) {
      for (      String s : bf.readLine().split("" "")) {
        int c=Integer.parseInt(s);
        if (map.containsKey(c)) {
          int val=map.get(c);
          map.put(c,val + 1);
        }
 else {
          map.put(c,1);
        }
      }
    }
    for (    Entry<Integer,Integer> item : map.entrySet()) {
      if (item.getValue() % 2 != 0)       ans[ansC++]=item.getKey();
    }
    Arrays.sort(ans);
    String fans="""";
    for (int j=0; j < ans.length; j++) {
      fans+="" "" + ans[j];
    }
    map.clear();
    list.add(fans);
  }
  for (int i=0; i < list.size(); i++) {
    System.out.println(""Case #"" + (i + 1) + "":""+ list.get(i));
  }
}
"
30000302,"public static void main(String[] args) throws Exception {
  Round1AProblemB r=(new Round1AProblemB());
  Scanner sc=new Scanner(new FileReader(""input.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""output.txt""));
  int T=sc.nextInt();
  for (int t=0; t < T; t++) {
    String ans="""";
    List<Integer> list=new ArrayList<Integer>();
    System.out.println(""Now case "" + (t + 1));
    int N=sc.nextInt();
    for (int i=0; i < (2 * N - 1) * N; i++) {
      String s=sc.next();
      if (list.contains(Integer.valueOf(s))) {
        list.remove(list.indexOf(Integer.valueOf(s)));
      }
 else {
        list.add(Integer.valueOf(s));
      }
    }
    Collections.sort(list);
    pw.print(""Case #"" + (t + 1) + "":"");
    Iterator<Integer> it=list.iterator();
    while (it.hasNext()) {
      pw.print("" "" + it.next());
    }
    pw.println();
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000303,"public static void main(String[] args){
  B b=new B();
  try {
    Scanner sc=new Scanner(new FileReader(b.smallInput));
    PrintWriter pw=new PrintWriter(b.smallOutput);
    b.n=sc.nextInt();
    for (int c=1; c <= b.n; c++) {
      b.d=sc.nextInt();
      for (int i1=0; i1 < 2501; i1++) {
        b.a[i1]=0;
      }
      for (int i=0; i < 2 * b.d * b.d - b.d; i++) {
        int r=sc.nextInt();
        b.a[r]++;
      }
      pw.print(""Case #"" + c + "":"");
      for (int j=0; j < 2501; j++) {
        if (b.a[j] % 2 == 1)         pw.print("" "" + j);
      }
      pw.println();
    }
    sc.close();
    pw.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30000304,"public static void main(String[] args) throws IOException {
  FileReader fr=new FileReader(""B-large.in"");
  BufferedReader br=new BufferedReader(fr);
  String s;
  int T;
  if ((s=br.readLine()) != null)   T=Integer.parseInt(s);
 else {
    System.out.println(""File has nothing to read."");
    return;
  }
  if (T < 1 || T > 100) {
    System.out.println(""Improper number of test cases."");
    return;
  }
  HashMap<Integer,Integer> obj=new HashMap<Integer,Integer>();
  int N;
  Integer arr[][];
  int one=1;
  String strarr[];
  for (int k=0; k < T; k++) {
    obj.clear();
    if ((s=br.readLine()) != null)     N=Integer.parseInt(s);
 else {
      System.out.println(""File has nothing to read."");
      return;
    }
    arr=new Integer[2 * N - 1][N];
    for (int i=0; i < 2 * N - 1; i++) {
      if ((s=br.readLine()) == null) {
        System.out.println(""File has nothing to read."");
        return;
      }
      strarr=null;
      strarr=s.split("" "");
      for (int j=0; j < N; j++) {
        arr[i][j]=Integer.parseInt(strarr[j]);
        if (!obj.containsKey(arr[i][j]))         obj.put((Integer)arr[i][j],(Integer)1);
 else         obj.put((Integer)arr[i][j],(Integer)(obj.get(arr[i][j]) + 1));
      }
    }
    Set setobj=obj.entrySet();
    Iterator it=setobj.iterator();
    int out[]=new int[N];
    int i=0;
    while (it.hasNext()) {
      Map.Entry me=(Map.Entry)it.next();
      int temp=(int)me.getValue();
      if (temp % 2 == 1) {
        out[i]=(int)me.getKey();
        i++;
      }
    }
    Arrays.sort(out);
    System.out.print(""Case #"" + (k + 1) + "": "");
    for (int j=0; j < N; j++)     System.out.print(out[j] + "" "");
    System.out.println();
  }
}
"
30000305,"public static void main(String[] args){
  Scanner scn=new Scanner(System.in);
  int T=scn.nextInt();
  for (int c=1; c <= T; c++) {
    HashMap<Integer,Integer> hM=new HashMap<Integer,Integer>();
    int N=scn.nextInt();
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        int number=scn.nextInt();
        if (!hM.containsKey(number))         hM.put(number,1);
 else         hM.put(number,hM.get(number) + 1);
      }
    }
    int[] list=new int[N];
    int counter=0;
    for (    Integer number : hM.keySet()) {
      if (hM.get(number) % 2 != 0) {
        list[counter]=number;
        counter++;
      }
    }
    Arrays.sort(list);
    System.out.print(""Case #"" + c + "": "");
    for (int i=0; i < list.length; i++) {
      System.out.print(list[i] + "" "");
    }
    System.out.println();
  }
}
"
30000306,"public static void main(String args[]) throws IOException {
}
"
30000307,"public static void main(String[] args){
  try {
    System.setIn(new FileInputStream(new File(""in.txt"")));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  try {
    System.setOut(new PrintStream(new File(""out.txt"")));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  for (int c=0; c < t; c++) {
    int n=s.nextInt();
    int[] good=new int[3000];
    for (int i=0; i < 2 * n * (n - 1) + n; i++) {
      int aa=s.nextInt();
      good[aa]++;
    }
    StringBuilder sb=new StringBuilder();
    sb.append(""Case #"" + (c + 1) + "":"");
    for (int i=0; i < good.length; i++) {
      if (good[i] % 2 == 1) {
        sb.append("" "" + i);
      }
    }
    System.out.println(sb);
  }
}
"
30000308,"public static void main(String[] args) throws Exception {
  Scanner input=new Scanner(System.in);
  PrintWriter writer=new PrintWriter(""output"",""UTF-8"");
  int T=input.nextInt();
  for (int i=1; i <= T; i++) {
    int N=input.nextInt();
    boolean line[]=new boolean[2501];
    for (int j=0; j < line.length; j++)     line[j]=true;
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        int n=input.nextInt();
        line[n]=(line[n] == false);
      }
    }
    writer.print(""Case #"" + i + "":"");
    for (int j=1; j < line.length; j++) {
      if (line[j] == false)       writer.print("" "" + j);
    }
    writer.println();
  }
  input.close();
  writer.close();
}
"
30000309,"public static void main(String[] args){
  Scanner console=null;
  try {
    console=new Scanner(new File(""input.txt""));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  try {
    writer=new PrintWriter(""output.txt"",""UTF-8"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  int t=console.nextInt();
  for (int ti=0; ti < t; ti++) {
    int n=console.nextInt();
    String x="""";
    int[] a=new int[2505];
    for (int i=0; i < (2 * n - 1) * n; i++) {
      int c=console.nextInt();
      a[c]=1 - a[c];
    }
    for (int i=0; i < 2505; i++) {
      if (a[i] == 1) {
        x+="" "" + i;
      }
    }
    x=x.trim();
    writer.printf(""Case #%d: %s\n"",ti + 1,x);
  }
  writer.close();
}
"
30000310,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""D:\\B-large.in""));
  PrintWriter pw=new PrintWriter(new BufferedWriter(new FileWriter(""D:\\Blarge.txt"")));
  int cases=Integer.parseInt(br.readLine());
  for (int t=1; t <= cases; t++) {
    int n=Integer.parseInt(br.readLine());
    HashSet<Integer> hs=new HashSet<Integer>();
    for (int i=0; i < 2 * n - 1; i++) {
      StringTokenizer st=new StringTokenizer(br.readLine());
      for (int j=0; j < n; j++) {
        int tmp=Integer.parseInt(st.nextToken());
        if (hs.contains(tmp)) {
          hs.remove(tmp);
        }
 else         hs.add(tmp);
      }
    }
    int[] rc=new int[n];
    int index=0;
    for (    int num : hs) {
      rc[index]=num;
      index++;
    }
    Arrays.sort(rc);
    pw.print(""Case #"" + t + "":"");
    for (int i=0; i < n; i++) {
      pw.print("" "" + rc[i]);
    }
    pw.println();
  }
  pw.close();
}
"
30000311,"public static void main(String[] args) throws java.lang.Exception {
  BufferedReader rd=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter wr=new PrintWriter(System.out);
  int testCases=Integer.parseInt(rd.readLine());
  int testCase=1;
  while (testCases-- > 0) {
    wr.print(""Case #"" + testCase++ + "": "");
    int n=Integer.parseInt(rd.readLine());
    int[] array=new int[MAX + 1];
    for (int i=0; i < 2 * n - 1; i++) {
      String[] tokens=rd.readLine().split("" "");
      for (int j=0; j < n; j++) {
        array[Integer.parseInt(tokens[j])]++;
      }
    }
    ArrayList<Integer> list=new ArrayList<Integer>();
    for (int i=1; i <= MAX; i++) {
      if (array[i] % 2 != 0) {
        list.add(i);
      }
    }
    Collections.sort(list);
    for (    int i : list) {
      wr.print(i + "" "");
    }
    wr.println();
  }
  wr.close();
}
"
30000312,"public static void main(String[] args) throws IOException {
  Scanner kb=new Scanner(System.in);
  PrintWriter out=new PrintWriter(new FileWriter(""rankfile.out""));
  int cases=kb.nextInt();
  for (int n=0; n < cases; n++) {
    out.print(""Case #"" + (n + 1) + "":"");
    int len=kb.nextInt();
    int[] heights=new int[2501];
    for (int i=0; i < len * 2 - 1; i++) {
      for (int j=0; j < len; j++) {
        heights[kb.nextInt()]++;
      }
    }
    for (int i=0; i <= 2500; i++) {
      if (heights[i] % 2 == 1)       out.print("" "" + i);
    }
    out.println();
  }
  out.close();
}
"
30000313,"public static void main(String[] args){
  File a=new File(""B-large.in"");
  Scanner input=null;
  try {
    input=new Scanner(a);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  File b=new File(""B-output.txt"");
  FileWriter fw=null;
  try {
    fw=new FileWriter(b);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int number=input.nextInt();
  input.nextLine();
  int cases=number;
  while (number > 0) {
    int n=input.nextInt();
    String result="""";
    HashSet<Integer> present=new HashSet<Integer>();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int d=input.nextInt();
        if (present.contains(d)) {
          present.remove(d);
        }
 else {
          present.add(d);
        }
      }
    }
    List<Integer> sortList=new ArrayList<Integer>(present);
    Collections.sort(sortList);
    for (int i=0; i < sortList.size(); i++) {
      result+=sortList.get(i) + "" "";
    }
    try {
      fw.write(""Case #"" + (cases - number + 1) + "": ""+ result+ ""\n"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    number--;
  }
  try {
    fw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000314,"public static void main(String[] unused){
  Scanner scanner=new Scanner(System.in);
  int t=scanner.nextInt();
  for (int i=1; i <= t; i++) {
    int N=scanner.nextInt();
    Map<Integer,Integer> m=new HashMap<Integer,Integer>();
    for (int j=0; j < (2 * N - 1) * N; j++) {
      int x=scanner.nextInt();
      Integer v=m.get(x);
      if (v == null) {
        m.put(x,1);
      }
 else {
        m.put(x,v + 1);
      }
    }
    List<Integer> l=new ArrayList<Integer>();
    for (    Map.Entry<Integer,Integer> entry : m.entrySet()) {
      int v=entry.getValue();
      if (v % 2 == 1) {
        l.add(entry.getKey());
      }
    }
    Collections.sort(l);
    System.out.printf(""Case #%d:"",i);
    for (int j=0; j < N; j++) {
      System.out.printf("" %s"",l.get(j));
    }
    System.out.println();
  }
  scanner.close();
}
"
30000315,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int t=scanner.nextInt();
  for (int i=1; i <= t; i++) {
    int length=scanner.nextInt();
    int[][] c=new int[2 * length - 1][length];
    int[] p=new int[2501];
    for (int j=0; j < 2501; j++) {
      p[j]=0;
    }
    for (int j=0; j < 2 * length - 1; j++) {
      for (int k=0; k < length; k++) {
        c[j][k]=scanner.nextInt();
        p[c[j][k]]++;
      }
    }
    int[] pc=new int[length];
    int x=0;
    for (int j=1; j < 2501; j++) {
      if (p[j] % 2 != 0) {
        pc[x++]=j;
      }
    }
    Arrays.sort(pc);
    System.out.print(""Case #"" + i + "":"");
    for (int j=0; j < length; j++) {
      System.out.print("" "" + pc[j]);
    }
    System.out.println("""");
  }
}
"
30000316,"public static void main(String[] args) throws Exception {
  List<String[]> lines=new ArrayList<String[]>();
  try (BufferedReader br=new BufferedReader(new FileReader(new File(""round1/B-large.in"")))){
    String line;
    while ((line=br.readLine()) != null) {
      lines.add(line.split("" ""));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  String h="""";
  int testCases=Integer.valueOf(lines.get(0)[0].trim());
  int prevN=0;
  for (int z=0; z < testCases; z++) {
    int n=Integer.valueOf(lines.get(z + 1 + prevN)[0].trim());
    int p=n * 2 - 1;
    List<Integer> list=new ArrayList<Integer>();
    for (int i=0; i < p; i++) {
      String[] st=lines.get(z + i + 2+ prevN);
      for (      String s : st) {
        Integer a=Integer.valueOf(s);
        if (list.contains(a)) {
          list.remove(a);
        }
 else {
          list.add(a);
        }
      }
    }
    Collections.sort(list);
    StringBuilder sb=new StringBuilder(list.size());
    for (    Integer c : list)     sb.append(c + "" "");
    String result1=sb.toString();
    h+=""Case #"" + (z + 1) + "": ""+ new String(result1)+ ""\n"";
    prevN+=2 * n - 1;
  }
  String result=h;
  System.out.println(result);
  PrintWriter writer=new PrintWriter(""round1/B-large.txt"",""UTF-8"");
  writer.println(result);
  writer.close();
}
"
30000317,"public Bsmall(){
  super();
}
"
30000318,"public RankAndFile(){
}
"
30000319,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int j=in.nextInt();
    System.out.print(""Case #"" + i + "": "");
    ArrayList<Integer> list=new ArrayList();
    for (int a=0; a < j * (2 * j - 1); a++) {
      list.add(in.nextInt());
    }
    Collections.sort(list);
    int tmp=0;
    for (int a=0; a < list.size(); a++) {
      if (tmp != list.get(a)) {
        int count=Collections.frequency(list,list.get(a));
        if (count % 2 != 0) {
          System.out.print(list.get(a) + "" "");
        }
        tmp=list.get(a);
      }
    }
    System.out.println();
  }
}
"
30000320,"public static void main(String[] args){
  Round1B t=new Round1B();
  Scanner scan;
  try {
    scan=new Scanner(new File(""input.txt""));
    PrintStream p=new PrintStream(""output.txt"");
    long num=scan.nextLong();
    for (long i=1; i <= num; i++) {
      scan.nextLine();
      int sizeN=scan.nextInt();
      int[] array=new int[2501];
      for (int j=0; j < 2 * sizeN - 1; j++) {
        ;
        for (int k=0; k < sizeN; k++) {
          int current=scan.nextInt();
          array[current]++;
        }
      }
      String answer="""";
      for (int r=1; r <= 2500; r++) {
        if (array[r] % 2 != 0) {
          answer+=r + "" "";
        }
      }
      p.println(""Case #"" + i + "": ""+ answer);
      System.out.println(""Case #"" + i + "": ""+ answer);
    }
    p.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30000321,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int k=0; k < t; k++) {
    int n=in.nextInt();
    int[] heights=new int[2501];
    for (int i=0; i < (2 * n) - 1; i++) {
      for (int j=0; j < n; j++) {
        heights[in.nextInt()]++;
      }
    }
    System.out.print(""Case #"" + (k + 1) + "":"");
    for (int i=1; i <= 2500; i++) {
      if (heights[i] % 2 == 1)       System.out.print("" "" + i);
    }
    System.out.println();
  }
}
"
30000322,"public static void main(String[] args){
  ProblemB app=new ProblemB();
  try (BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(ProblemB.INPUT_PATH))))){
    List<String> answerList=new ArrayList<String>();
    int testCaseCount=Integer.parseInt(br.readLine());
    for (int testCaseIndex=0; testCaseIndex < testCaseCount; testCaseIndex++) {
      int n=Integer.parseInt(br.readLine());
      int[][] elem=new int[2 * n - 1][n];
      for (int i=0; i < 2 * n - 1; i++) {
        String[] line=br.readLine().split("" "");
        for (int j=0; j < n; j++) {
          elem[i][j]=Integer.parseInt(line[j]);
        }
      }
      Map<Integer,Integer> map=new HashMap<>();
      for (      int[] eA : elem) {
        for (        int e : eA) {
          Integer num=map.get(e);
          if (num == null) {
            num=0;
          }
          num++;
          map.put(e,num);
        }
      }
      Map<Integer,Integer> useMap=new TreeMap<>();
      for (      Map.Entry<Integer,Integer> entry : map.entrySet()) {
        if (entry.getValue() % 2 == 1) {
          Integer useNum=useMap.get(entry.getKey());
          if (useNum == null) {
            useNum=new Integer(0);
          }
          useNum++;
          useMap.put(entry.getKey(),useNum);
        }
      }
      StringBuilder sb=new StringBuilder();
      for (      int k : useMap.keySet()) {
        int v=useMap.get(k);
        for (int i=0; i < v; i++) {
          sb.append(k + "" "");
        }
      }
      String answer=sb.substring(0,sb.length() - 1);
      answerList.add(answer);
      System.out.printf(""%s: %s : %s \r\n"",testCaseIndex + 1,elem,answer);
    }
    try (BufferedWriter bufferedWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(ProblemB.OUTPUT_PATH))))){
      for (int i=0; i < answerList.size(); i++) {
        Object[] ans=new Object[2];
        ans[0]=String.valueOf(i + 1);
        ans[1]=answerList.get(i);
        String write=MessageFormat.format(ProblemB.FORMAT,ans);
        bufferedWriter.write(write);
        bufferedWriter.newLine();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000323,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int n=input.nextInt();
  for (int i=1; i <= n; i++) {
    int x=input.nextInt();
    List<Integer> numbers=new LinkedList<Integer>();
    for (int j=0; j < (2 * x - 1) * x; j++) {
      numbers.add(input.nextInt());
    }
    Collections.sort(numbers);
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    for (    Integer i1 : numbers) {
      if (map.containsKey(i1)) {
        map.put(i1,map.get(i1) + 1);
      }
 else {
        map.put(i1,1);
      }
    }
    List<Integer> result=new LinkedList<Integer>();
    for (    Integer i2 : map.keySet()) {
      if (map.get(i2) % 2 == 0)       continue;
      result.add(i2);
    }
    Collections.sort(result);
    StringBuilder formatter=new StringBuilder();
    for (    Integer c : result) {
      formatter.append(c);
      formatter.append("" "");
    }
    System.out.println(String.format(""Case #%s: %s"",i,formatter.toString()));
  }
  input.close();
}
"
30000324,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""files/"" + FILE_IN));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""files/"" + FILE_OUT)));
  int T=Integer.parseInt(in.readLine());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(in.readLine());
    int lines=2 * N - 1;
    ArrayList<Integer> set=new ArrayList<Integer>();
    StringTokenizer st;
    for (int i=1; i <= lines; i++) {
      st=new StringTokenizer(in.readLine());
      int next, index;
      for (int j=1; j <= N; j++) {
        next=Integer.parseInt(st.nextToken());
        index=set.indexOf(next);
        if (index >= 0)         set.remove(index);
 else         set.add(next);
      }
    }
    Collections.sort(set);
    StringBuilder res=new StringBuilder(Integer.toString(set.get(0)));
    int length=set.size();
    for (int i=1; i < length; i++)     res.append("" "").append(set.get(i));
    String result=res.toString();
    System.out.printf(""Case #%d: %s%n"",t,result);
    out.printf(""Case #%d: %s%n"",t,result);
  }
  System.out.println(""Complete"");
  in.close();
  out.close();
}
"
30000325,"public static void main(String[] args) throws Exception {
  Scanner inp=new Scanner(new File(""inLarge.txt""));
  PrintWriter pw=new PrintWriter(new File(""outLarge.txt""));
  int c=0;
  int cases=inp.nextInt();
  while (c < cases) {
    int n=inp.nextInt();
    int[] h=new int[2501];
    int[] m=new int[n];
    for (int i=0; i < 2 * n * n - n; i++) {
      h[inp.nextInt()]++;
    }
    int p=0;
    for (int i=0; i < 2500; i++) {
      if (h[i] % 2 != 0) {
        m[p]=i;
        p++;
      }
    }
    String r="""";
    for (int i=0; i < n; i++) {
      r+="" "" + m[i];
    }
    System.out.println(""Case #"" + (c + 1) + "":""+ r);
    pw.println(""Case #"" + (c + 1) + "":""+ r);
    c++;
  }
  pw.close();
}
"
30000326,"public static void main(String[] args) throws IOException {
  BufferedReader reader=new BufferedReader(new FileReader(INPUT_FILENAME));
  BufferedWriter write=new BufferedWriter(new FileWriter(OUTPUT_FILENAME));
  Scanner scanInput=new Scanner(reader);
  int t=scanInput.nextInt();
  for (int i=0; i < t; ++i) {
    int n=scanInput.nextInt();
    final int fixed=2 * n - 1;
    List<Integer> output=new ArrayList<Integer>();
    StringBuilder sb=new StringBuilder();
    int[] list=new int[n * fixed];
    for (int j=0; j < n * fixed; j++) {
      list[j]=scanInput.nextInt();
    }
    Arrays.sort(list);
    int count=1;
    int k=0;
    for (k=0; k < list.length - 1; k++) {
      if (list[k] == list[k + 1]) {
        count++;
      }
 else {
        if (count % 2 != 0) {
          output.add(list[k]);
        }
        count=1;
      }
    }
    if (output.size() != n) {
      output.add(list[k]);
    }
    sb.append(""Case #"" + (i + 1) + "": "");
    for (    int a : output) {
      sb.append(a + "" "");
    }
    write.write(sb.toString().trim() + ""\n"");
  }
  scanInput.close();
  write.flush();
  write.close();
}
"
30000327,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int i, j, k, C=in.nextInt(), N, num;
  StringJoiner joiner;
  Set<Integer> set=new HashSet<>();
  List<Integer> list;
  for (i=1; i <= C; i++) {
    N=in.nextInt();
    set.clear();
    for (j=0; j < 2 * N - 1; j++) {
      for (k=0; k < N; k++) {
        num=in.nextInt();
        if (set.contains(num))         set.remove(num);
 else         set.add(num);
      }
    }
    list=new ArrayList<>(set);
    Collections.sort(list);
    System.out.print(""Case #"" + i + "": "");
    joiner=new StringJoiner("" "");
    for (    int nn : list)     joiner.add(Integer.toString(nn));
    System.out.println(joiner.toString());
  }
  in.close();
}
"
30000328,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    int[][] lines=new int[2 * n - 1][n];
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        lines[j][k]=in.nextInt();
      }
    }
    System.out.print(""Case #"" + i + "":"");
    ArrayList<Integer> val=new ArrayList<>();
    int m=2 * n - 1;
    for (int i1=0; i1 < m; i1++) {
      for (int j=0; j < n; j++) {
        val.add(lines[i1][j]);
      }
    }
    ArrayList<Integer> missing=new ArrayList<>();
    for (int i2=0; i2 < 2500; i2++) {
      int count=0;
      for (int j=0; j < val.size(); j++) {
        if (val.get(j) == i2)         count++;
      }
      if (count % 2 != 0) {
        System.out.print("" "" + i2);
        missing.add(i2);
      }
    }
    System.out.println("""");
  }
}
"
30000329,"public static void main(String[] args){
  Scanner scan=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int problemcount=scan.nextInt();
  int i=1;
  while (i <= problemcount) {
    int count=scan.nextInt();
    int countmen=count;
    count*=count;
    count*=2;
    count-=countmen;
    int[] heights=new int[2501];
    while (count > 0) {
      int height=scan.nextInt();
      heights[height]++;
      count--;
    }
    int[] missing=new int[countmen];
    int index=0;
    for (int k=0; k < heights.length; k++) {
      if (heights[k] % 2 == 1) {
        missing[index]=k;
        index++;
      }
    }
    Arrays.sort(missing);
    String aux="""";
    for (    Integer k : missing) {
      aux+=k + "" "";
    }
    aux.trim();
    System.out.println(""Case #"" + i + "": ""+ aux);
    i++;
  }
}
"
30000330,"public static void main(String[] args) throws FileNotFoundException {
  Scanner cin=new Scanner(new File(""B-large.in""));
  PrintStream cout=new PrintStream(""B-large.out"");
  int _case=0;
  for (int T=cin.nextInt(); T > 0; T--) {
    _case++;
    StringBuilder ans=new StringBuilder();
    int n=cin.nextInt();
    int[] cnt=new int[10000];
    for (int i=0; i < 2 * n - 1; i++)     for (int j=0; j < n; j++)     cnt[cin.nextInt()]++;
    for (int i=0; i < cnt.length; i++)     if (cnt[i] % 2 == 1) {
      ans.append("" "");
      ans.append(i);
    }
    cout.printf(""Case #%d:%s%n"",_case,ans.toString());
  }
  cin.close();
  cout.close();
}
"
30000331,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int N=in.nextInt();
    int[][] data=new int[2 * N - 1][N];
    int[] map=new int[2501];
    for (int j=0; j < 2 * N - 1; j++)     for (int j2=0; j2 < N; j2++) {
      data[j][j2]=in.nextInt();
      map[data[j][j2]]++;
    }
    int[] finalArr=new int[N];
    int idx=0;
    for (int j=0; j < 2501; j++) {
      if ((map[j] & 1) == 1)       finalArr[idx++]=j;
    }
    Arrays.sort(finalArr);
    System.out.print(""Case #"" + i + "": "");
    for (int j=0; j < finalArr.length; j++) {
      System.out.print(finalArr[j] + "" "");
    }
    System.out.println();
  }
}
"
30000332,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int t=scanner.nextInt();
  for (int x=1; x <= t; ++x) {
    int n=scanner.nextInt();
    boolean[] soldiers=new boolean[2500];
    for (int i=0; i < 2 * n - 1; ++i) {
      for (int j=0; j < n; ++j) {
        int s=scanner.nextInt();
        soldiers[s - 1]=!soldiers[s - 1];
      }
    }
    int count=0;
    System.out.print(""Case #"" + x + "": "");
    for (int i=1; i <= 2500; ++i) {
      if (soldiers[i - 1]) {
        ++count;
        if (count < n) {
          System.out.print(i + "" "");
        }
 else {
          System.out.println(i);
        }
      }
    }
  }
}
"
30000333,"public static void main(String[] args) throws Exception {
  if (CONSOLE_MODE) {
    writer=new PrintWriter(System.out);
    reader=new Scanner(System.in);
  }
 else {
    in=new File(""C:/Codejam/in/"" + fileName + "".in"");
    out=new File(""C:/Codejam/result.out"");
    writer=new PrintWriter(new FileOutputStream(out));
    reader=new Scanner(new FileInputStream(in));
  }
  int cases=reader.nextInt();
  System.out.println(""Cases: "" + cases);
  for (int i=1; i <= cases; i++) {
    System.out.println(""On case "" + i);
    int n=reader.nextInt();
    HashMap<Integer,Integer> set=new HashMap<>();
    int inputs=n * (2 * n - 1);
    for (int i1=0; i1 < inputs; i1++) {
      int in=reader.nextInt();
      set.put(in,set.getOrDefault(in,0) + 1);
    }
    ArrayList<Integer> result1=new ArrayList<>();
    for (    Integer i2 : set.keySet()) {
      if (set.get(i2) % 2 != 0)       result1.add(i2);
    }
    Collections.sort(result1);
    List<Integer> result=result1;
    writer.print(""Case #"" + i + "": "");
    for (    int j : result)     writer.print(j + "" "");
    writer.println();
  }
  writer.close();
  reader.close();
}
"
30000334,"public static void main(String[] args){
  B r=new B();
  final int cn=r.sc.nextInt();
  r.sc.nextLine();
  for (int ci=1; ci <= cn; ci++) {
    r.counter=new HashMap<Integer,Integer>();
    r.n=Integer.parseInt(r.sc.nextLine());
    int length=2 * r.n - 1;
    for (int i=0; i < length; i++) {
      String[] nums=r.sc.nextLine().split("" "");
      for (      String num : nums) {
        int ni=Integer.parseInt(num);
        if (r.counter.containsKey(ni)) {
          r.counter.put(ni,r.counter.get(ni) + 1);
        }
 else {
          r.counter.put(ni,1);
        }
      }
    }
    System.out.printf(""Case #%d: "",ci);
    ArrayList<Integer> result=new ArrayList<Integer>();
    for (    Map.Entry<Integer,Integer> entry : r.counter.entrySet()) {
      if (entry.getValue() % 2 == 1) {
        result.add(entry.getKey());
      }
    }
    Collections.sort(result);
    for (int i=0; i < result.size(); i++) {
      if (i != 0) {
        System.out.print("" "");
      }
      System.out.print(result.get(i));
    }
    System.out.println();
  }
}
"
30000335,"public static void main(String[] args){
}
"
30000336,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; i++) {
    int n=in.nextInt();
    Hashtable<Integer,Integer> counts=new Hashtable<Integer,Integer>();
    int length=2 * n * n - n;
    for (int j=1; j <= length; j++) {
      int cur=in.nextInt();
      if (counts.containsKey(cur)) {
        int c=counts.get(cur);
        c++;
        counts.put(cur,c);
      }
 else {
        counts.put(cur,1);
      }
    }
    int[] list=new int[n];
    int k=0;
    Set<Integer> keys=counts.keySet();
    for (    int key : keys) {
      if (counts.get(key) % 2 != 0) {
        list[k]=key;
        k++;
      }
    }
    Arrays.sort(list);
    System.out.print(""Case #"" + i + "": "");
    for (int j=0; j < n; j++) {
      System.out.print(list[j] + "" "");
    }
    System.out.println();
  }
}
"
30000337,"public static void main(String[] args) throws Throwable {
  long start=System.currentTimeMillis();
  String pkg=new Object(){
  }
.getClass().getEnclosingClass().getPackage().getName().replace('.','/');
  String dir=""src/"" + pkg;
  String filename="""";
  if (true) {
    filename=""B-large.in"";
  }
  Scanner sc=null;
  try {
    sc=new Scanner(new File(dir + ""/"" + filename));
  }
 catch (  FileNotFoundException e) {
    Object[] o={e.getMessage()};
    System.err.println(Arrays.deepToString(o));
    return;
  }
  PrintWriter fout=new PrintWriter(new File(dir + ""/"" + filename+ "".res""));
  GCJ obj=new GCJ();
  int T=sc.nextInt();
  for (int t=0; t < T; t++) {
    fout.write(String.format(""Case #%d: "",(t + 1)));
    int n=sc.nextInt();
    int[] count=new int[2501];
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int x=sc.nextInt();
        count[x]++;
      }
    }
    for (int i=0; i < count.length; i++)     if (count[i] % 2 == 1)     fout.print("" "" + i);
    fout.println();
    fout.flush();
  }
  fout.flush();
  fout.close();
  long end=System.currentTimeMillis();
  Object[] o={(end - start) + ""ms""};
  System.err.println(Arrays.deepToString(o));
}
"
30000338,"/** 
 * @param args
 * @throws IOException 
 */
public static void main(String[] args) throws IOException {
  File file=new File(""C:\\Users\\manju\\Downloads\\B-large.in.txt"");
  File outFile=new File(""C:\\Users\\manju\\Downloads\\B-large.out.txt"");
  BufferedReader br=new BufferedReader(new FileReader(file));
  BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
  int testCases=Integer.parseInt(br.readLine());
  for (int t=1; t <= testCases; t++) {
    String line=br.readLine().trim();
    Integer n=Integer.parseInt(line);
    int endIn=2 * n - 1;
    int a[][]=new int[n][n];
    List<List<Integer>> inList=new ArrayList<List<Integer>>();
    Set<Integer> out=new TreeSet<Integer>();
    Map<Integer,Integer> itMap=new HashMap<Integer,Integer>();
    for (int i=0; i < endIn; i++) {
      line=br.readLine().trim();
      String[] numberArray=line.split("" "");
      char ch[]=line.toCharArray();
      for (      String number : numberArray) {
        int key=Integer.parseInt(number);
        if (!(itMap.containsKey(key))) {
          itMap.put(key,1);
        }
 else {
          itMap.put(key,itMap.get(key) + 1);
        }
      }
    }
    System.out.println(itMap);
    for (    Entry<Integer,Integer> entry : itMap.entrySet()) {
      if (entry.getValue() % 2 != 0) {
        out.add(entry.getKey());
      }
    }
    System.out.println(out);
    bw.write(""Case #"" + t + "": "");
    for (    Integer i : out) {
      bw.write(i + "" "");
    }
    if (t != testCases) {
      bw.newLine();
    }
  }
  br.close();
  bw.close();
}
"
30000339,"public static void main(String args[]) throws Exception {
  String fn=args.length > 0 ? args[0] : ""B-large.in"";
  LineNumberReader in=new LineNumberReader(new FileReader(fn));
  PrintWriter out=new PrintWriter(new FileWriter(fn.replace("".in"","".out"")));
  int T=Integer.parseInt(in.readLine());
  for (int i=0; i < T; i++) {
    out.print(""Case #"" + (i + 1) + "":"");
    final int N=Integer.parseInt(in.readLine());
    ArrayList<Integer> missing=new ArrayList<Integer>();
    for (int l=2 * N - 1; --l >= 0; ) {
      StringTokenizer st=new StringTokenizer(in.readLine());
      for (int k=0; k < N; k++) {
        int s=Integer.parseInt(st.nextToken());
        int n=missing.indexOf(s);
        if (n < 0)         missing.add(s);
 else         missing.remove(n);
      }
    }
    Collections.sort(missing);
    for (int k=0; k < N; k++) {
      out.print(' ');
      out.print(missing.get(k));
    }
    out.println();
    out.flush();
  }
  out.close();
}
"
30000340,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(args[0]));
  BufferedWriter bw=new BufferedWriter(new FileWriter(args[1]));
  int totalCases=Integer.parseInt(br.readLine());
  for (int i=0; i < totalCases; i++) {
    int n=Integer.parseInt(br.readLine());
    int[] counter=new int[2501];
    int linesGiven=2 * n - 1;
    String missingLine1="""";
    for (int i1=0; i1 < linesGiven; i1++) {
      String temp=br.readLine();
      String[] tempArray=temp.split("" "");
      for (int i2=0; i2 < tempArray.length; i2++) {
        int index=Integer.parseInt(tempArray[i2]);
        counter[index]++;
      }
    }
    String line="""";
    for (int i1=0; i1 < counter.length; i1++) {
      if (counter[i1] != 0) {
        if (counter[i1] % 2 != 0) {
          line=line + "" "" + i1;
        }
      }
    }
    missingLine1=line;
    String missingLine=missingLine1;
    String result=""Case #"" + (i + 1) + "": ""+ missingLine;
    bw.write(result);
    bw.newLine();
  }
  br.close();
  bw.flush();
  bw.close();
}
"
30000341,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new File(""B-large.in""));
  PrintWriter out=new PrintWriter(new File(""B-large.out""));
  PrintWriter debug=new PrintWriter(new File(""debug-bl.txt""));
  int a=sc.nextInt();
  sc.nextLine();
  for (int i=0; i < a; i++) {
    int size=sc.nextInt();
    sc.nextLine();
    Set<Integer> odds=new TreeSet<>();
    for (int j=0; j < size * 2 - 1; j++) {
      for (int k=0; k < size; k++) {
        int h=sc.nextInt();
        if (odds.contains(h))         odds.remove(h);
 else         odds.add(h);
      }
    }
    Iterator<Integer> left=odds.iterator();
    String output="""";
    while (left.hasNext())     output+=(left.next() + "" "");
    out.printf(""CASE #%d: %s%n"",i + 1,output.trim());
  }
  sc.close();
  out.close();
  debug.close();
}
"
30000342,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(input));
  PrintWriter out=new PrintWriter(new FileWriter(output));
  int t=Integer.parseInt(in.readLine());
  for (int i=1; i <= t; i++) {
    out.print(""Case #"" + i + "": "");
    int n=Integer.parseInt(in.readLine());
    HashMap<Integer,Integer> map=new HashMap<>();
    for (int i1=1; i1 < n * 2; i1++) {
      StringTokenizer tok=new StringTokenizer(in.readLine());
      while (tok.hasMoreTokens()) {
        int a=Integer.parseInt(tok.nextToken());
        if (map.containsKey(a)) {
          map.put(a,map.get(a) + 1);
        }
 else {
          map.put(a,1);
        }
      }
    }
    ArrayList<Integer> res=new ArrayList<>();
    Iterator<Integer> iter=map.keySet().iterator();
    while (iter.hasNext()) {
      int height=iter.next();
      int count=map.get(height);
      if (count % 2 == 1) {
        res.add(height);
      }
    }
    Collections.sort(res);
    for (    int a : res) {
      out.print(a + "" "");
    }
    if (res.size() != n) {
      System.out.println(""error"");
    }
    out.println();
  }
  out.flush();
}
"
30000343,"public static void main(String[] args){
  Scanner input;
  Formatter output;
  int b=1;
  try {
    output=new Formatter(""output.txt"");
    input=new Scanner(new File(""B-large(1).in""));
    int T=input.nextInt();
    for (int i=0; i < T; i++) {
      int N=input.nextInt();
      int[][] grid=new int[(2 * N) - 1][N];
      int[][] sqr=new int[N][N];
      for (int j=0; (j < (2 * N) - 1); j++) {
        for (int k=0; k < N; k++) {
          grid[j][k]=input.nextInt();
        }
      }
      int[] miss=new int[50000];
      for (int c=0; c < ((2 * N) - 1); c++) {
        for (int d=0; d < N; d++) {
          miss[grid[c][d]]++;
        }
      }
      int[] num=new int[N];
      int count=0;
      for (int c=0; c < 2500; c++) {
        if ((miss[c] % 2) != 0) {
          num[count]=c;
          count++;
        }
      }
      output.format(""Case #%d: "",(i + 1));
      for (int c=0; c < N; c++) {
        output.format(""%d "",num[c]);
      }
      output.format(""\n"");
    }
    output.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000344,"public static void main(String[] args) throws java.lang.Exception {
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int testCase=1; testCase <= t; testCase++) {
    int n=sc.nextInt();
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    int temp;
    int x=2 * n - 1;
    for (int i=0; i < x; i++) {
      for (int j=0; j < n; j++) {
        temp=sc.nextInt();
        if (map.containsKey(temp)) {
          map.put(temp,map.get(temp) + 1);
        }
 else {
          map.put(temp,1);
        }
      }
    }
    TreeSet<Integer> ts=new TreeSet<Integer>();
    for (    Map.Entry m : map.entrySet()) {
      int key=(int)m.getKey();
      int value=(int)m.getValue();
      if (value % 2 != 0)       ts.add(key);
    }
    System.out.print(""\nCase #"" + testCase + "":"");
    for (    Integer i : ts)     System.out.print("" "" + i);
  }
}
"
30000345,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    int[][] lists=new int[2 * n - 1][n];
    int[][] result=new int[n][n];
    Map<Integer,Integer> amounts=new HashMap<Integer,Integer>();
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        int v=in.nextInt();
        lists[j][k]=v;
        if (amounts.containsKey(v)) {
          amounts.put(v,amounts.get(v) + 1);
        }
 else {
          amounts.put(v,1);
        }
      }
    }
    int j=0;
    int[] missingRow=new int[n];
    for (    Integer v : amounts.keySet()) {
      if (amounts.get(v) % 2 == 1) {
        missingRow[j++]=v;
      }
    }
    Arrays.sort(missingRow);
    System.out.print(""Case #"" + i + "": "");
    for (j=0; j < n; j++) {
      System.out.print(missingRow[j] + "" "");
    }
    System.out.println();
  }
}
"
30000346,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    HashMap<Integer,Integer> hmap=new HashMap<>();
    for (int j=0; j < n * (2 * n - 1); j++) {
      int x=in.nextInt();
      Integer value=hmap.get(x);
      if (value != null) {
        hmap.put(x,++value);
      }
 else {
        hmap.put(x,1);
      }
    }
    ArrayList<Integer> result=new ArrayList<>();
    for (    Map.Entry<Integer,Integer> entry : hmap.entrySet()) {
      if (entry.getValue() % 2 != 0) {
        result.add(entry.getKey());
      }
    }
    Collections.sort(result);
    StringBuilder sb=new StringBuilder();
    for (    Integer a : result) {
      sb.append("" "");
      sb.append(a);
    }
    System.out.println(""Case #"" + i + "":""+ sb.toString());
  }
}
"
30000347,"public static void main(String[] args){
  String in=""/Users/Moshin/Code Jam/large.in"";
  String out=""/Users/Moshin/Code Jam/large.out"";
  try {
    BufferedReader bufferedReader=new BufferedReader(new FileReader(in));
    BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(out));
    int noOfTestCases=Integer.valueOf(bufferedReader.readLine());
    for (int t=0; t < noOfTestCases; t++) {
      List<Integer> distinctHeights=new ArrayList<>();
      Map<Integer,Integer> heightCounts=new HashMap<>();
      List<Integer> resultArray=new ArrayList<>();
      int n=Integer.parseInt(bufferedReader.readLine());
      int l=2 * n - 1;
      for (int i=0; i < l; i++) {
        String line=bufferedReader.readLine();
        String[] heights=line.split("" "");
        for (        String tempHeight : heights) {
          int height=Integer.valueOf(tempHeight);
          if (distinctHeights.contains(height))           heightCounts.put(height,heightCounts.get(height) + 1);
 else {
            distinctHeights.add(height);
            heightCounts.put(height,1);
          }
        }
      }
      for (      Integer tempHeight : distinctHeights)       if (heightCounts.get(tempHeight) % 2 == 1)       resultArray.add(tempHeight);
      Collections.sort(resultArray);
      bufferedWriter.write(""Case #"" + (t + 1) + "": ""+ resultArray.toString().replace(""["","""").replace(""]"","""").replaceAll("","","""")+ ""\n"");
    }
    bufferedReader.close();
    bufferedWriter.close();
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
}
"
30000348,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(""B-large.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""B-large.out"")));
  int t, n;
  t=Integer.parseInt(f.readLine());
  for (int tt=1; tt <= t; tt++) {
    int[] dp=new int[2501];
    n=Integer.parseInt(f.readLine());
    for (int j=0; j < 2 * n - 1; j++) {
      StringTokenizer st=new StringTokenizer(f.readLine());
      for (int k=0; k < n; k++) {
        dp[Integer.parseInt(st.nextToken())]++;
      }
    }
    int l=1;
    StringBuffer buf=new StringBuffer();
    while (l < 2501) {
      if (dp[l] != 0 && dp[l] % 2 == 1) {
        buf.append(l + "" "");
      }
      l++;
    }
    buf.deleteCharAt(buf.length() - 1);
    System.out.println(""Case #"" + (tt) + "": ""+ buf);
    out.println(""Case #"" + (tt) + "": ""+ buf);
  }
  f.close();
  out.close();
  System.out.println(""done bro!"");
}
"
30000349,"public static void main(String[] args) throws Exception {
  String workingDir=System.getProperty(""user.dir"");
  System.setOut(new PrintStream(new File(workingDir,OUTPATH)));
  Scanner in=new Scanner(new File(workingDir,INPATH));
  int T=in.nextInt();
  for (int zz=1; zz <= T; zz++) {
    int size=in.nextInt();
    int[] number=new int[2500];
    for (int i=0; i < 2 * size - 1; i++) {
      for (int j=0; j < size; j++) {
        int num=in.nextInt();
        number[num]=number[num] + 1;
      }
    }
    System.out.format(""Case #%d:"",zz);
    for (int i=0; i < 2500; i++) {
      if (number[i] % 2 != 0)       System.out.format("" %d"",i);
    }
    System.out.format(""\n"");
  }
  in.close();
}
"
30000350,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new File(""/home/mbroshi/Downloads/B-large.in""));
  int numCases=sc.nextInt();
  StringBuffer output=new StringBuffer();
  for (int i=1; i <= numCases; i++) {
    int numRows=sc.nextInt();
    int[] intCounts=new int[2501];
    for (int h=0; h < (2 * numRows - 1) * numRows; h++) {
      int next=sc.nextInt();
      intCounts[next]+=1;
    }
    List<Integer> missing=new ArrayList<>(numRows);
    for (int j=1; j < 2501; j++) {
      if (intCounts[j] % 2 == 1) {
        missing.add(j);
      }
    }
    Collections.sort(missing);
    StringBuilder builder=new StringBuilder(2 * numRows);
    for (    int m : missing) {
      builder.append("" "").append(m);
    }
    output.append(String.format(""Case #%d: %s\n"",i,builder));
  }
  System.out.println(output);
  FileWriter fw=new FileWriter(new File(""/home/mbroshi/Downloads/B-large.out""));
  BufferedWriter bw=new BufferedWriter(fw);
  bw.write(output.toString());
  bw.close();
}
"
30000351,"public static void main(String[] args) throws Exception {
  Scanner input=new Scanner(System.in);
  PrintWriter out=new PrintWriter(""A.txt"");
  int numCases=input.nextInt();
  for (int i=0; i < numCases; i++) {
    int N=input.nextInt();
    HashSet<Integer> st=new HashSet<Integer>();
    for (int j=0; j < (2 * N - 1) * N; j++) {
      int n=input.nextInt();
      if (st.contains(n)) {
        st.remove(n);
      }
 else {
        st.add(n);
      }
    }
    ArrayList<Integer> subres=new ArrayList<>();
    for (    Integer num : st) {
      subres.add(num);
    }
    Collections.sort(subres);
    String res1="""";
    for (    Integer num : subres) {
      res1=res1 + num + "" "";
    }
    res1.trim();
    String res=res1;
    int index=i + 1;
    out.print(""Case #"" + index + "": ""+ res+ ""\n"");
  }
  input.close();
  out.close();
}
"
30000352,"public static void main(String[] args) throws Exception {
  System.setOut(new PrintStream(new File(""a.out"")));
  Scanner scan=new Scanner(new File(""a.in""));
  int numCases=scan.nextInt();
  for (int z=1; z <= numCases; z++) {
    int[] count=new int[2501];
    N=scan.nextInt();
    grid=new int[N][N];
    inputs=new int[2 * N - 1][N];
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        inputs[i][j]=scan.nextInt();
        count[inputs[i][j]]++;
      }
    }
    System.out.print(""Case #"" + z + "":"");
    for (int i=0; i < count.length; i++) {
      if (count[i] % 2 != 0) {
        System.out.print("" "" + i);
      }
    }
    System.out.println();
  }
  scan.close();
}
"
30000353,"public static void main(String[] args){
  Scanner inputScanner=new Scanner(System.in);
  int totalCases=inputScanner.nextInt();
  for (int caseId=1; caseId <= totalCases; caseId++) {
    int n=inputScanner.nextInt();
    Integer[] numbers=new Integer[n * (2 * n - 1)];
    for (int i=0; i < numbers.length; i++) {
      numbers[i]=inputScanner.nextInt();
    }
    HashMap<Integer,Integer> timesMap=new HashMap<Integer,Integer>();
    for (    Integer num : numbers) {
      Integer times=timesMap.get(num);
      if (times == null)       times=1;
 else       times++;
      timesMap.put(num,times);
    }
    Integer[] oddTimesNums=new Integer[n];
    int count=0;
    for (    Entry<Integer,Integer> entry : timesMap.entrySet()) {
      Integer num=entry.getKey();
      Integer times=entry.getValue();
      if (times % 2 != 0) {
        oddTimesNums[count]=num;
        count++;
      }
    }
    Arrays.sort(oddTimesNums);
    Integer[] result=oddTimesNums;
    StringBuilder sb=new StringBuilder();
    sb.append(result[0]);
    for (int i=1; i < n; i++) {
      sb.append(' ');
      sb.append(result[i]);
    }
    System.out.println(""Case #"" + caseId + "": ""+ sb.toString());
  }
  inputScanner.close();
}
"
30000354,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(System.in);
  String loopS=sc.nextLine();
  int loops=Integer.parseInt(loopS);
  for (int j=0; j < loops; j++) {
    String N=sc.nextLine();
    int nums=Integer.parseInt(N);
    HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
    List<Integer> soln=new ArrayList<Integer>();
    for (int i=0; i < 2 * nums - 1; i++) {
      String line=sc.nextLine();
      String[] strArray=line.split("" "");
      for (int k=0; k < strArray.length; k++) {
        int key=Integer.parseInt(strArray[k]);
        if (hm.containsKey(key)) {
          hm.put(key,hm.get(key) + 1);
        }
 else {
          hm.put(key,1);
        }
      }
    }
    for (    Map.Entry<Integer,Integer> entry : hm.entrySet()) {
      if (entry.getValue() % 2 != 0) {
        soln.add(entry.getKey());
      }
    }
    Collections.sort(soln);
    int counter=j;
    counter++;
    System.out.print(""Case #"" + counter + "": "");
    for (int i=0; i < soln.size() - 1; i++) {
      System.out.print(soln.get(i) + "" "");
    }
    System.out.println(soln.get(soln.size() - 1));
  }
  sc.close();
}
"
30000355,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(""B-large(1).in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""rankandfile.out"")));
  StringTokenizer st=new StringTokenizer(f.readLine());
  int cases=Integer.parseInt(st.nextToken());
  for (int i=0; i < cases; i++) {
    st=new StringTokenizer(f.readLine());
    int n=Integer.parseInt(st.nextToken());
    LinkedList<int[]> vals=new LinkedList<int[]>();
    for (int j=0; j < 2 * n - 1; j++) {
      st=new StringTokenizer(f.readLine());
      int[] holder=new int[n];
      for (int k=0; k < n; k++) {
        holder[k]=(Integer.parseInt(st.nextToken()));
      }
      vals.add(holder);
    }
    LinkedList<int[]> store1=new LinkedList<int[]>();
    LinkedList<int[]> store2=new LinkedList<int[]>();
    int index=0;
    int missing=-1;
    while (index < n) {
      int min=Integer.MAX_VALUE;
      for (int j=0; j < vals.size(); j++) {
        if (vals.get(j)[index] < min) {
          min=vals.get(j)[index];
        }
      }
      int count=0;
      for (int j=0; j < vals.size(); j++) {
        if (vals.get(j)[index] == min) {
          if (count == 0)           store1.add(Arrays.copyOf(vals.get(j),n));
          if (count == 1)           store2.add(Arrays.copyOf(vals.get(j),n));
          vals.remove(j);
          j-=1;
          count++;
        }
      }
      int[] holder={};
      if (count < 2)       store2.add(holder);
      if (count < 2)       missing=index;
      index++;
    }
    String ans="""";
    for (int j=0; j < n; j++) {
      if (j == missing)       ans+=store1.get(missing)[missing] + "" "";
 else       if (store1.get(j)[missing] == store1.get(missing)[j])       ans+=store2.get(j)[missing] + "" "";
 else       ans+=store1.get(j)[missing] + "" "";
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ ans.trim());
    out.println(""Case #"" + (i + 1) + "": ""+ ans.trim());
  }
  out.close();
  System.exit(0);
}
"
30000356,"public static void main(String[] args) throws Exception {
  RankAndFile r=new RankAndFile();
  r.numCases=Integer.parseInt(RankAndFile.in.readLine().trim());
  for (int i=1; i <= r.numCases; i++) {
    RankAndFile.out.print(""Case #"" + i + "":"");
    String line=RankAndFile.in.readLine();
    Scanner scan=new Scanner(line);
    int N=scan.nextInt();
    int[] count=new int[2501];
    for (int i1=0; i1 < 2 * N - 1; i1++) {
      line=RankAndFile.in.readLine();
      scan=new Scanner(line);
      for (int j=0; j < N; j++) {
        int height=scan.nextInt();
        count[height]++;
      }
    }
    for (int i2=0; i2 < 2501; i2++) {
      if (count[i2] % 2 == 1) {
        System.out.print("" "" + i2);
      }
    }
    System.out.println();
  }
}
"
30000357,"public static void main(String[] args) throws IOException {
  Scanner qwe=new Scanner(System.in);
  PrintWriter out=new PrintWriter(""B.out"");
  int T=qwe.nextInt();
  for (int cse=1; cse <= T; cse++) {
    int N=qwe.nextInt();
    int[] counts=new int[2501];
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        counts[qwe.nextInt()]++;
      }
    }
    out.print(""Case #"" + cse + "": "");
    for (int i=0; i < counts.length; i++) {
      if (counts[i] % 2 == 1)       out.print(i + "" "");
    }
    out.println();
  }
  out.close();
  qwe.close();
}
"
30000358,"public static void main(String s[]){
  RankAndFile solution=new RankAndFile();
  Scanner scanner=null;
  StringBuilder builder=new StringBuilder();
  try {
    scanner=new Scanner(new File(""B-large.in""));
    int T=scanner.nextInt();
    for (int i=0; i < T; i++) {
      int N=scanner.nextInt();
      int repeat=2 * N - 1;
      int[][] lists=new int[repeat][N];
      for (int j=0; j < repeat; j++) {
        for (int k=0; k < N; k++) {
          lists[j][k]=scanner.nextInt();
        }
      }
      builder.setLength(0);
      Map<Integer,Integer> countMap=new HashMap<>();
      for (int j=0; j < 2 * N - 1; j++) {
        for (int k=0; k < N; k++) {
          if (countMap.containsKey(lists[j][k])) {
            int count=countMap.get(lists[j][k]);
            count++;
            countMap.put(lists[j][k],count);
          }
 else {
            countMap.put(lists[j][k],1);
          }
        }
      }
      Iterator<Entry<Integer,Integer>> iterator=countMap.entrySet().iterator();
      List<Integer> missingElements=new ArrayList<Integer>();
      while (iterator.hasNext()) {
        Entry<Integer,Integer> entry=iterator.next();
        if (entry.getValue() % 2 == 1) {
          missingElements.add(entry.getKey());
        }
      }
      Collections.sort(missingElements);
      List<Integer> missingList=missingElements;
      for (      int num : missingList) {
        builder.append(num + "" "");
      }
      System.out.println(String.format(""Case #%d: %s"",i + 1,builder.toString()));
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (scanner != null) {
      scanner.close();
    }
  }
}
"
30000359,"public static void main(String[] args) throws FileNotFoundException {
  System.setOut(new PrintStream(new File(""ans2.txt"")));
  Scanner a=new Scanner(new BufferedInputStream(new FileInputStream(""2.txt"")));
  int caseNum=a.nextInt();
  for (int i=1; i <= caseNum; i++) {
    int n=a.nextInt();
    System.out.print(""Case #"" + i + "": "");
    HashMap<Integer,Integer> myMap=new HashMap<Integer,Integer>();
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        int s=a.nextInt();
        if (myMap.containsKey(s)) {
          myMap.put(s,myMap.get(s) + 1);
        }
 else {
          myMap.put(s,1);
        }
      }
    }
    ArrayList<Integer> b=new ArrayList<Integer>();
    for (    Integer p : myMap.keySet()) {
      if (myMap.get(p) % 2 != 0) {
        b.add(p);
      }
    }
    Collections.sort(b);
    for (int k=0; k < b.size(); k++) {
      System.out.print(b.get(k) + "" "");
    }
    System.out.println();
  }
}
"
30000360,"public RandAndFile(int n,int[][] lists){
  this.lists=lists;
  this.n=n;
}
"
30000361,"public static void main(String[] args) throws IOException {
  String filename=args.length > 0 ? args[0] : ""A2\\B-large.in"";
  File fout=new File(""A2\\resultL.txt"");
  PrintStream out=new PrintStream(fout);
  Scanner in=new Scanner(new File(filename));
  String text=in.next();
  int N=Integer.parseInt(text);
  try {
    for (int i=0; i < N; i++) {
      String ma=in.next();
      int nn=Integer.parseInt(ma);
      int nums[]=new int[(2 * nn - 1) * nn];
      int k=0;
      for (int j=0; j < nums.length; j++) {
        ma=in.next();
        nums[k++]=Integer.parseInt(ma);
      }
      Arrays.sort(nums);
      int max=nums[nums.length - 1];
      int count[]=new int[max];
      int count1[]=new int[max];
      for (int i3=0; i3 < nums.length; i3++) {
        count[nums[i3] - 1]++;
      }
      for (int i1=0; i1 < count.length; i1++) {
        if (count[i1] % 2 == 1) {
          count1[i1]=1;
        }
      }
      String s="""";
      for (int i2=0; i2 < count1.length; i2++) {
        if (count1[i2] == 1) {
          s+=i2 + 1 + "" "";
        }
      }
      String outRes=s;
      out.println(""Case #"" + (i + 1) + "": ""+ outRes);
      System.out.println(""Case #"" + (i + 1) + "": ""+ outRes);
    }
  }
 catch (  Exception ex) {
    System.out.println(ex);
  }
}
"
30000362,"public static void main(String[] args) throws Exception {
  ProblemB r=new ProblemB();
  String name=""B-large"";
  String path="""";
  Locale.setDefault(Locale.US);
  Scanner sc=new Scanner(new File(path + name + "".in""));
  PrintWriter pw=new PrintWriter(path + name + "".out"");
  int testCases=sc.nextInt();
  for (int testCase=1; testCase <= testCases; testCase++) {
    int N=sc.nextInt();
    pw.print(""Case #"" + testCase + "": "");
    int[] counts=new int[2501];
    Arrays.fill(counts,0);
    for (int k=0; k < ((2 * N - 1) * N); k++) {
      int current=sc.nextInt();
      counts[current]++;
    }
    for (int k=0; k < counts.length; k++) {
      if (counts[k] % 2 == 1) {
        pw.print(k + "" "");
      }
    }
    pw.println();
    pw.flush();
  }
  pw.close();
  sc.close();
}
"
30000363,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  PrintWriter out=new PrintWriter(new File(""RankAndFile.out""));
  RankAndFile r=new RankAndFile();
  int T=in.nextInt();
  for (int i=0; i < T; i++) {
    int N=in.nextInt();
    HashMap<Integer,Integer> heightCounts=new HashMap<>();
    for (int j=0; j < (2 * N - 1) * N; j++) {
      int h=in.nextInt();
      if (heightCounts.containsKey(h)) {
        int count=heightCounts.get(h);
        heightCounts.put(h,count + 1);
      }
 else {
        heightCounts.put(h,1);
      }
    }
    int missingNumbers[]=new int[N];
    int j=0;
    for (    Map.Entry<Integer,Integer> entry : heightCounts.entrySet()) {
      if (entry.getValue() % 2 == 1) {
        missingNumbers[j]=entry.getKey();
        j++;
      }
    }
    Arrays.sort(missingNumbers);
    StringBuilder sb=new StringBuilder();
    for (j=0; j < N; j++) {
      sb.append("" "");
      sb.append(missingNumbers[j]);
    }
    out.println(String.format(""Case #%d:%s"",i + 1,sb.toString()));
  }
  out.close();
}
"
30000364,"public static void main(String[] args) throws FileNotFoundException {
  input=new Scanner(new File(inFileName));
  output=new PrintWriter(new File(outFileName));
  testCases=input.nextInt();
  StringBuilder answer;
  int N;
  int[] list;
  for (int i=0; i < testCases; i++) {
    N=input.nextInt();
    input.nextLine();
    answer=new StringBuilder();
    list=new int[2 * N * N - N];
    for (int x=0; x < 2 * N * N - N; x++) {
      list[x]=input.nextInt();
    }
    Arrays.sort(list);
    int temp, count=1;
    temp=list[0];
    for (int y=1; y < list.length; y++) {
      if (temp == list[y])       count++;
 else {
        if (count % 2 != 0) {
          answer.append(temp + "" "");
        }
        count=1;
        temp=list[y];
      }
    }
    if (count % 2 != 0) {
      answer.append(temp + "" "");
    }
    output.write(""Case #"" + (i + 1) + "": ""+ answer.toString().trim()+ ""\n"");
  }
  input.close();
  output.close();
}
"
30000365,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int testcase=1; testcase <= t; testcase++) {
    int n=sc.nextInt();
    List<Integer> list=new ArrayList<Integer>();
    for (int a=0; a < n * 2 - 1; a++) {
      for (int b=0; b < n; b++) {
        list.add(sc.nextInt());
      }
    }
    list.sort(new Comparator<Integer>(){
      @Override public int compare(      Integer o1,      Integer o2){
        if (o1 > o2)         return 1;
 else         if (o1 < o2)         return -1;
 else         return 0;
      }
    }
);
    List<Integer> answer=new ArrayList<Integer>();
    int size=list.size();
    int prev=list.get(0);
    int count=1;
    for (int i=1; i < size; i++) {
      if (list.get(i) != prev) {
        if (count % 2 == 1) {
          answer.add(prev);
        }
        count=1;
        prev=list.get(i);
      }
 else {
        count++;
      }
    }
    if (count % 2 == 1) {
      answer.add(prev);
    }
    System.out.printf(""Case #%d:"",testcase);
    for (int j=0; j < answer.size(); j++) {
      System.out.print("" "" + answer.get(j));
    }
    System.out.println();
  }
}
"
30000366,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter pw=new PrintWriter(System.out);
  int T=Integer.parseInt(br.readLine());
  int N=2500;
  for (int t=1; t <= T; t++) {
    int n=Integer.parseInt(br.readLine());
    int[] aa=new int[N + 1];
    for (int i=0; i < 2 * n - 1; i++) {
      StringTokenizer st=new StringTokenizer(br.readLine());
      for (int j=0; j < n; j++) {
        int a=Integer.parseInt(st.nextToken());
        aa[a]++;
      }
    }
    StringBuilder sb=new StringBuilder();
    sb.append(""Case #"" + t + "":"");
    for (int i=1; i <= N; i++)     if (aa[i] % 2 == 1)     sb.append("" "" + i);
    pw.println(sb);
  }
  pw.close();
}
"
30000367,"public static void main(String[] args){
  Scanner sc=null;
  try {
    sc=new Scanner(new FileReader(""B-large.in""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  String tStr=sc.nextLine();
  int t=0;
  try {
    t=Integer.parseInt(tStr);
  }
 catch (  NumberFormatException nfe) {
    nfe.printStackTrace();
  }
  inputH=new String[t];
  inputN=new int[t];
  for (int i3=0; i3 < t; i3++) {
    int input=0;
    try {
      input=Integer.parseInt(sc.nextLine());
    }
 catch (    NumberFormatException nfe) {
      nfe.printStackTrace();
    }
    inputN[i3]=input;
    inputH[i3]="""";
    for (int j=0; j < 2 * inputN[i3] - 1; j++)     inputH[i3]+="" "" + sc.nextLine();
  }
  sc.close();
  String[] res=new String[inputN.length];
  for (int i=0; i < inputN.length; i++) {
    String[] input=inputH[i].trim().split("" "");
    System.out.println(Arrays.toString(input));
    ArrayList<Integer> l=new ArrayList<Integer>();
    for (    String is : input) {
      int input1=0;
      try {
        input1=Integer.parseInt(is);
      }
 catch (      NumberFormatException nfe) {
        nfe.printStackTrace();
      }
      int v=input1;
      if (l.contains(new Integer(v))) {
        l.remove(new Integer(v));
      }
 else {
        l.add(v);
      }
    }
    Integer[] miss=l.toArray(new Integer[0]);
    System.out.println(Arrays.toString(miss));
    int[] misslist=new int[miss.length];
    for (int i1=0; i1 < miss.length; i1++) {
      misslist[i1]=miss[i1];
    }
    Arrays.sort(misslist);
    String res1="""";
    for (    int i2 : misslist) {
      res1+=i2 + "" "";
    }
    res[i]=res1;
    System.out.println(res[i]);
  }
  File out=new File(""testOut.txt"");
  if (!out.exists()) {
    try {
      out.createNewFile();
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
  }
  PrintWriter pw=null;
  try {
    pw=new PrintWriter(new FileWriter(out));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  for (int i=0; i < res.length; i++) {
    pw.write(""Case #"" + (i + 1) + "": ""+ res[i]+ ""\n"");
  }
  pw.close();
}
"
30000368,"public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    int N=sc.nextInt();
    int[] counts=new int[2501];
    for (int i=0; i < N * (2 * N - 1); i++) {
      counts[sc.nextInt()]++;
    }
    System.out.print(""Case #"" + t + "":"");
    for (int i=0; i < 2501; i++) {
      if (counts[i] % 2 == 1) {
        System.out.print("" "" + i);
      }
    }
    System.out.println();
  }
  sc.close();
}
"
30000369,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(""input.txt""));
  PrintWriter pw=new PrintWriter(new FileWriter(""output.txt""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    System.out.println(""Processing Test Case "" + (caseNum + 1));
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    RankFile r=new RankFile();
    int n=sc.nextInt();
    Integer[][] input=new Integer[2 * n - 1][n];
    int[] count=new int[2501];
    String result="""";
    for (int i=0; i < input.length; i++) {
      for (int j=0; j < input[i].length; j++) {
        input[i][j]=sc.nextInt();
        count[input[i][j]]++;
      }
    }
    for (int i=1; i < count.length; i++) {
      if (count[i] % 2 != 0) {
        result+=(i + "" "");
      }
    }
    pw.write(result.substring(0,result.length() - 1) + ""\n"");
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000370,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int test=1; test <= T; test++) {
    int N=sc.nextInt();
    int rows=2 * N - 1;
    int arr[][]=new int[rows][N];
    for (int i=0; i < rows; i++) {
      for (int j=0; j < N; j++) {
        arr[i][j]=sc.nextInt();
      }
    }
    for (int bm=0; bm < (1 << rows); bm++) {
      if (Integer.bitCount(bm) != N)       continue;
      int Test[][]=new int[N][N];
      int r=0;
      for (int j=0; j < rows; j++) {
        if ((bm & (1 << j)) > 0) {
          for (int c=0; c < N; c++) {
            Test[r][c]=arr[j][c];
          }
          r++;
        }
      }
      boolean continu=false;
      for (int i=0; i < N; i++) {
        for (int j=i + 1; j < N; j++) {
          for (int k=0; k < N; k++) {
            if (Test[i][k] == Test[j][k]) {
              continu=true;
            }
          }
        }
      }
      if (continu)       continue;
      int cond=0;
      for (int i=0; i < N; i++) {
        cond=0;
        for (int j=i + 1; j < N; j++) {
          for (int k=0; k < N; k++) {
            if (Test[i][k] > Test[j][k]) {
              for (int k1=0; k1 < N; k1++) {
                int tmp=Test[i][k1];
                Test[i][k1]=Test[j][k1];
                Test[j][k1]=tmp;
              }
            }
          }
        }
      }
      boolean columns[]=new boolean[N];
      int checkings=0;
      for (int j=0; j < rows; j++) {
        if ((bm & (1 << j)) == 0) {
          for (int c=0; c < N; c++) {
            int temp=0;
            for (r=0; r < N; r++) {
              if (Test[r][c] != arr[j][r]) {
                break;
              }
 else {
                temp++;
              }
            }
            if (temp == N) {
              if (!columns[c]) {
                columns[c]=true;
                checkings++;
              }
            }
          }
        }
      }
      if (checkings != (N - 1)) {
        continue;
      }
      boolean found=false;
      for (int i=0; i < N; i++) {
        if (!columns[i]) {
          System.out.print(""Case #"" + test + "": "");
          for (int j=0; j < N; j++) {
            System.out.print(Test[j][i] + "" "");
          }
          System.out.println();
          found=true;
        }
      }
      if (found)       break;
    }
  }
}
"
30000371,"public static void main(String[] args){
  Scanner in=null;
  B b=new B();
  try {
    in=new Scanner(System.in);
    int count=in.nextInt();
    for (int test=1; test <= count; test++) {
      int N=in.nextInt();
      int[][] lists=new int[2 * N - 1][N];
      for (int j=0; j < 2 * N - 1; j++) {
        for (int k=0; k < N; k++) {
          lists[j][k]=in.nextInt();
        }
      }
      HashMap<Integer,Integer> map=new HashMap<>();
      int[] result1=new int[N];
      StringBuilder res=new StringBuilder();
      int pivot=0;
      for (int j=0; j < lists.length; j++) {
        for (int k=0; k < N; k++) {
          if (map.containsKey(lists[j][k])) {
            int count1=map.get(lists[j][k]);
            map.put(lists[j][k],count1 + 1);
          }
 else {
            map.put(lists[j][k],1);
          }
        }
      }
      for (      Integer key : map.keySet()) {
        int count2=map.get(key);
        if (count2 % 2 != 0) {
          result1[pivot]=key;
          pivot++;
        }
      }
      Arrays.sort(result1);
      for (int i=0; i < N; i++) {
        res.append("" "" + result1[i]);
      }
      String result=res.toString();
      System.out.println(""Case #"" + test + "":""+ result);
    }
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000372,"public static void main(String[] args){
  try (Scanner scanner=new Scanner(new FileInputStream(""input.txt""))){
    scanner.useLocale(Locale.ENGLISH);
    BufferedWriter out=new BufferedWriter(new FileWriter(""output.txt""));
    int tests=scanner.nextInt();
    for (int i=0; i < tests; i++) {
      int n=scanner.nextInt();
      Map<Integer,Integer> heightCounts=new TreeMap<>();
      for (int j=0; j < (2 * n - 1) * n; j++) {
        int next=scanner.nextInt();
        int oldValue=0;
        if (heightCounts.containsKey(next)) {
          oldValue=heightCounts.get(next);
        }
        heightCounts.put(next,oldValue + 1);
      }
      StringBuilder result=new StringBuilder();
      for (      Entry<Integer,Integer> entry : heightCounts.entrySet()) {
        if (entry.getValue() % 2 == 1) {
          result.append("" "").append(entry.getKey());
        }
      }
      out.write(""Case #"" + (i + 1) + "": ""+ result.toString()+ ""\n"");
    }
    out.close();
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
  }
}
"
30000373,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(new File(""B.in"")));
  PrintWriter pw=new PrintWriter(new BufferedWriter(new FileWriter(new File(""B.out""))));
  int T=Integer.parseInt(br.readLine());
  for (int t=0; t < T; t++) {
    int[] count=new int[2500 + 1];
    int N=Integer.parseInt(br.readLine());
    for (int i=0; i < N * 2 - 1; i++) {
      String[] str=br.readLine().split("" "");
      for (int j=0; j < N; j++) {
        count[Integer.parseInt(str[j])]++;
      }
    }
    pw.print(""Case #"" + (t + 1) + "":"");
    for (int i=1; i < count.length; i++) {
      if (count[i] % 2 > 0)       pw.print("" "" + i);
    }
    pw.println();
    pw.flush();
  }
  pw.close();
  br.close();
}
"
30000374,"public static void main(String... orange) throws Exception {
  System.setIn(new FileInputStream(""B-large.in""));
  System.setOut(new PrintStream(new File(""B-large-output-file.txt"")));
  Scanner input=new Scanner(System.in);
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    int N=input.nextInt();
    int a;
    int[] b=new int[2501];
    int[] c=new int[N];
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        a=input.nextInt();
        b[a]++;
      }
    }
    int index=0;
    for (int j=0; j < 2501; j++)     if (b[j] != 0 && b[j] % 2 != 0)     c[index++]=j;
    System.out.printf(""Case #%d: "",n + 1);
    for (int j=0; j < N; j++)     System.out.printf(""%d "",c[j]);
    System.out.print(""\n"");
  }
}
"
30000375,"public static void main(String[] args){
  int numOfCases=in.nextInt();
  for (int i=0; i < numOfCases; i++) {
    int n=in.nextInt();
    int[] res=new int[n];
    int lists[][]=new int[2 * n - 1][n];
    int[] nums=new int[2501];
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        lists[j][k]=in.nextInt();
      }
    }
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        nums[lists[j][k]]++;
      }
    }
    int cnt=0;
    for (int j=0; j < nums.length; j++) {
      if (nums[j] % 2 != 0) {
        res[cnt]=j;
        cnt++;
      }
    }
    System.out.print(""Case #"" + (i + 1) + "": "");
    for (int j=0; j < res.length; j++) {
      System.out.print(res[j] + "" "");
    }
    System.out.println();
  }
}
"
30000376,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  for (int i=1; i <= t; i++) {
    int n=s.nextInt();
    int[][] a=new int[n + n][n];
    for (int j=0; j < n + n - 1; j++) {
      for (int k=0; k < n; k++) {
        a[j][k]=s.nextInt();
      }
    }
    HashMap<Integer,Integer> h=new HashMap<Integer,Integer>();
    for (int j=0; j < n + n - 1; j++) {
      for (int k=0; k < n; k++) {
        h.put(a[j][k],0);
      }
    }
    for (int j=0; j < n + n - 1; j++) {
      for (int k=0; k < n; k++) {
        h.put(a[j][k],(h.get(a[j][k]) + 1));
      }
    }
    int[] p=new int[n + n];
    int g=0;
    for (int j=0; j < n + n - 1; j++) {
      for (int k=0; k < n; k++) {
        if ((h.get(a[j][k])) % 2 != 0) {
          p[g]=a[j][k];
          g++;
          h.put(a[j][k],2);
        }
      }
    }
    for (int m=1; m < n; m++) {
      for (int j=m; j > 0; j--) {
        if (p[j] < p[j - 1]) {
          int temp=p[j - 1];
          p[j - 1]=p[j];
          p[j]=temp;
        }
      }
    }
    System.out.print(""Case #"" + i + "": "");
    for (int k=0; k < n; k++) {
      System.out.print(p[k] + "" "");
    }
    System.out.println();
  }
}
"
30000377,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(System.in);
  PrintWriter out=new PrintWriter(new File(""largeout.txt""));
  int t=in.nextInt();
  for (int i=0; i < t; i++) {
    int n=in.nextInt();
    int[] tracker=new int[2501];
    int end=(2 * n - 1) * n;
    int k;
    for (int j=0; j < end; j++) {
      k=in.nextInt();
      tracker[k]=(++tracker[k]) % 2;
    }
    out.print(""Case #"" + (i + 1) + "":"");
    for (int j=0; j < 2501; j++) {
      if (tracker[j] != 0) {
        out.print("" "" + j);
      }
    }
    out.print(""\n"");
  }
  out.close();
}
"
30000378,"public static void main(String[] args) throws Exception {
  Scanner scan=new Scanner(new File(""B-large.in""));
  PrintWriter out=new PrintWriter(new File(""B-out.txt""));
  int n=Integer.parseInt(scan.nextLine());
  for (int i=1; i <= n; i++) {
    int size=Integer.parseInt(scan.nextLine());
    int[] counts=new int[2500];
    for (int j=0; j < 2 * size - 1; j++) {
      String[] heights=scan.nextLine().split("" "");
      for (int k=0; k < heights.length; k++) {
        counts[Integer.parseInt(heights[k]) - 1]++;
      }
    }
    ArrayList<Integer> solution=new ArrayList<Integer>();
    for (int j=0; j < counts.length; j++) {
      if (counts[j] % 2 != 0)       solution.add(j + 1);
    }
    Collections.sort(solution);
    out.print(""Case #"" + i + "": ""+ solution.get(0));
    for (int j=1; j < solution.size(); j++) {
      out.print("" "" + solution.get(j));
    }
    out.println();
  }
  out.close();
}
"
30000379,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new FileReader(infname));
  BufferedWriter bw=new BufferedWriter(new FileWriter(oufname));
  int Tn, T;
  Tn=sc.nextInt();
  sc.nextLine();
  for (T=1; T <= Tn; T++) {
    bw.write(String.format(""Case #%d: "",T));
    int n=sc.nextInt();
    HashMap<Integer,Integer> cnt=new HashMap<Integer,Integer>();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int num=sc.nextInt();
        if (!cnt.containsKey(num)) {
          cnt.put(num,1);
        }
 else {
          cnt.put(num,cnt.get(num) + 1);
        }
      }
    }
    for (int i=1; i <= 2500; i++) {
      if (cnt.containsKey(i) && cnt.get(i) % 2 != 0) {
        bw.write(Integer.toString(i) + ' ');
      }
    }
    bw.write('\n');
  }
  bw.close();
}
"
30000380,"public static void main(String[] args) throws Exception {
  Second o=new Second();
  Scanner sc=new Scanner(new FileReader(dir + ""B-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(dir + ""output.txt""));
  int caseCnt=sc.nextInt();
  sc.nextLine();
  for (int n=0; n < caseCnt; n++) {
    pw.print(""Case #"" + (n + 1) + "": "");
    int no=sc.nextInt();
    int[][] a=new int[2 * no - 1][no];
    int b[]=new int[2502];
    for (int i=0; i < 2 * no - 1; i++) {
      sc.nextLine();
      for (int k=0; k < no; k++) {
        int j=sc.nextInt();
        if (b[j] == 0) {
          b[j]=1;
        }
 else {
          b[j]=b[j] - 1;
        }
      }
    }
    for (int i=0; i < 2502; i++) {
      if (b[i] == 1) {
        System.out.print(i + "" "");
        pw.print(i + "" "");
      }
    }
    System.out.println();
    pw.println();
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000381,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int runs=Integer.parseInt(sc.nextLine().trim());
  for (int run=1; run <= runs; run++) {
    System.out.print(""Case #"" + run + "":"");
    int N=Integer.parseInt(sc.nextLine().trim());
    TreeSet<Integer> list=new TreeSet<Integer>();
    for (int i=0; i < 2 * N - 1; i++) {
      String[] line=sc.nextLine().split(""\\s+"");
      for (      String sNum : line) {
        int num=Integer.parseInt(sNum);
        if (list.contains(num)) {
          list.remove(num);
        }
 else {
          list.add(num);
        }
      }
    }
    for (    int num : list) {
      System.out.print("" "" + num);
    }
    System.out.println();
  }
}
"
30000382,"public static void main(String[] args){
  BufferedReader reader=null;
  File file=new File(""C:\\Users\\vincent\\workspace\\code jam\\src\\r1a\\B-large.txt"");
  File answer=new File(""C:\\Users\\vincent\\workspace\\code jam\\src\\r1a\\output.txt"");
  Writer writer=null;
  try {
    reader=new BufferedReader(new FileReader(file));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(answer),""utf-8""));
    String text=null;
    text=reader.readLine();
    int numberOfTestCases=Integer.parseInt(text);
    int index=1;
    while (numberOfTestCases > 0) {
      text=reader.readLine();
      int N=Integer.parseInt(text);
      List<Integer> digits=new ArrayList<Integer>();
      for (int i=0; i < 2 * N - 1; i++) {
        String entry=reader.readLine();
        String[] entries=entry.split("" "");
        for (int j=0; j < entries.length; j++) {
          int number=Integer.valueOf(entries[j]);
          if (digits.contains(number)) {
            digits.remove((Integer)number);
          }
 else {
            digits.add(number);
          }
        }
      }
      Collections.sort(digits);
      String answer2="""";
      for (      int digit : digits) {
        answer2=answer2 + digit + "" "";
      }
      String answer1=answer2.substring(0,answer2.length() - 1);
      writer.write(""Case #"" + String.valueOf(index) + "": ""+ answer1+ ""\n"");
      numberOfTestCases--;
      index++;
    }
  }
 catch (  IOException x) {
    System.err.format(""IOException: %s%n"",x);
  }
 finally {
    try {
      if (reader != null) {
        reader.close();
      }
      if (writer != null) {
        writer.close();
      }
    }
 catch (    IOException e) {
    }
  }
  System.out.println(""done"");
}
"
30000383,"public static void main(String[] args) throws Exception {
  String filename=""B-large"";
  Scanner scan=new Scanner(new FileReader(filename + "".in""));
  PrintWriter out=new PrintWriter(filename + "".out"");
  int problems=scan.nextInt();
  for (int count=0; count < problems; count++) {
    System.out.print(""Case #"" + (count + 1) + "":"");
    out.print(""Case #"" + (count + 1) + "":"");
    B r=new B();
    int n=scan.nextInt();
    Set<Integer> set=new HashSet<>();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int current=scan.nextInt();
        if (!set.contains(current)) {
          set.add(current);
        }
 else {
          set.remove(current);
        }
      }
    }
    int[] array=new int[n];
    int i=0;
    for (    int element : set) {
      array[i]=element;
      i++;
    }
    Arrays.sort(array);
    for (    int element : array) {
      System.out.print("" "" + element);
      out.print("" "" + element);
    }
    System.out.println();
    out.println();
  }
  out.flush();
  out.close();
  scan.close();
}
"
30000384,"/** 
 * @param args
 */
public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int N=in.nextInt();
    HashSet<Integer> set=new HashSet<>();
    for (int j=0; j < N * 2 - 1; j++) {
      for (int j2=0; j2 < N; j2++) {
        int num=in.nextInt();
        if (set.contains(num)) {
          set.remove(num);
        }
 else {
          set.add(num);
        }
      }
    }
    int[] nums=new int[N];
    int k=0;
    for (    int key : set) {
      nums[k++]=key;
    }
    Arrays.sort(nums);
    System.out.print(""Case #"" + i + "": "");
    for (int j=0; j < nums.length - 1; j++) {
      System.out.print(nums[j] + "" "");
    }
    System.out.println(nums[nums.length - 1]);
  }
}
"
30000385,"public static void main(String[] args) throws IOException {
  BufferedReader bf=new BufferedReader(new FileReader(""input.in""));
  String count=null;
  FileWriter fw=new FileWriter(""output.out"");
  count=bf.readLine();
  ArrayList<Integer> times=new ArrayList<Integer>();
  for (int i=0; i < Integer.parseInt(count); i++) {
    times.clear();
    for (int i1=0; i1 < 2501; i1++) {
      Integer a=new Integer(0);
      times.add(i1,a);
    }
    Integer n=Integer.parseInt(bf.readLine());
    for (int i2=1; i2 < 2 * n; i2++) {
      String lines=bf.readLine();
      String[] nums=lines.split("" "");
      for (int i1=0; i1 < nums.length; i1++) {
        Integer temp=Integer.parseInt(nums[i1]);
        times.set(temp,times.get(temp) + 1);
      }
    }
    String buffers="""";
    for (Integer i1=0; i1 < 2501; i1++) {
      if (times.get(i1) % 2 != 0) {
        buffers+=i1.toString() + "" "";
      }
    }
    fw.write(""Case #"" + (i + 1) + "": ""+ buffers+ ""\n"");
  }
  bf.close();
  fw.close();
}
"
30000386,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int m=Integer.valueOf(s.nextInt());
  String[] result=new String[m];
  for (int i=0; i < m; ++i) {
    int n=Integer.valueOf(s.nextInt());
    int[] input=new int[n * (2 * n - 1)];
    for (int j=0; j < n * (2 * n - 1); ++j) {
      input[j]=s.nextInt();
    }
    HashMap<Integer,Integer> counter=new HashMap<>();
    for (    int i1 : input) {
      if (!counter.containsKey(i1))       counter.put(i1,0);
      counter.put(i1,counter.get(i1) + 1);
    }
    ArrayList<Integer> result1=new ArrayList<>();
    for (    HashMap.Entry<Integer,Integer> entry : counter.entrySet()) {
      if (entry.getValue() % 2 != 0) {
        result1.add(entry.getKey());
      }
    }
    Collections.sort(result1);
    StringBuilder sb=new StringBuilder();
    for (    int i2 : result1) {
      sb.append(i2);
      sb.append("" "");
    }
    sb.deleteCharAt(sb.length() - 1);
    result[i]=sb.toString();
  }
  for (int i=0; i < m; ++i) {
    System.out.print(""Case #"" + String.valueOf(i + 1) + "": "");
    System.out.println(result[i]);
  }
}
"
30000387,"public static void main(String[] args){
  long time=System.currentTimeMillis();
  Scanner sc=new Scanner(new BufferedInputStream(System.in));
  int t=sc.nextInt();
  for (int i=1; i <= t; i++) {
    int n=sc.nextInt();
    int[] result=new int[2 * n * n - n];
    for (int i2=0; i2 < 2 * n * n - n; i2++) {
      result[i2]=sc.nextInt();
    }
    int[] heights=result;
    int[] counts=new int[2501];
    for (    int h : heights) {
      counts[h]++;
    }
    ArrayList<Integer> answer=new ArrayList<>(n);
    for (int j=1; j < 2501; j++) {
      if (counts[j] % 2 == 1) {
        answer.add(j);
        if (answer.size() == n) {
          break;
        }
      }
    }
    StringBuilder sb=new StringBuilder();
    sb.append(""Case #"").append(i).append("":"");
    for (    Integer i1 : answer) {
      sb.append(' ').append(i1);
    }
    System.out.println(sb.toString());
  }
  sc.close();
  System.err.println(System.currentTimeMillis() - time);
}
"
30000388,"public static void main(String[] args) throws IOException {
}
"
30000389,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int k=1; k <= t; k++) {
    int n=sc.nextInt();
    TreeSet<Integer> set=new TreeSet<>();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int a=sc.nextInt();
        if (set.contains(a)) {
          set.remove(a);
        }
 else {
          set.add(a);
        }
      }
    }
    System.out.print(""Case #"" + k + "":"");
    for (    int a : set) {
      System.out.print("" "" + a);
    }
    System.out.println();
  }
}
"
30000390,"/** 
 * @param args
 */
public static void main(String[] args){
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  String s;
  try {
    s=in.readLine();
    int case_num=Integer.parseInt(s);
    for (int kk=0; kk < case_num; kk++) {
      s=in.readLine();
      int num=Integer.parseInt(s);
      int[] count=new int[2500];
      for (int row=0; row < (2 * num - 1); row++) {
        s=in.readLine();
        String[] height=s.split("" "");
        for (int i=0; i < height.length; i++) {
          count[Integer.parseInt(height[i]) - 1]++;
        }
      }
      String ans="""";
      for (int i=0; i < count.length; i++) {
        if (count[i] % 2 != 0) {
          ans=ans + "" "" + (i + 1);
        }
      }
      System.out.println(""Case #"" + (kk + 1) + "":""+ ans);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000391,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int caseN=1; caseN <= t; caseN++) {
    int n=in.nextInt();
    int[] counts=new int[2501];
    for (int i=0; i < 2 * n - 1; i++)     for (int ii=0; ii < n; ii++) {
      int x=in.nextInt();
      counts[x]++;
    }
    System.out.print(""Case #"" + caseN + "":"");
    for (int i=1; i < 2501; i++) {
      if (counts[i] > 0 && counts[i] % 2 == 1)       System.out.print("" "" + i);
    }
    System.out.println();
  }
}
"
30000392,"public static void main(String... args){
  Scanner scanner=new Scanner(System.in);
  Integer cnt=scanner.nextInt();
  for (int c=1; c <= cnt; c++) {
    map=new TreeMap<Integer,Integer>();
    int n=scanner.nextInt();
    for (int j=0; j < n; j++) {
      for (int k=0; k < n; k++) {
        Integer key=scanner.nextInt();
        if (!map.containsKey(key)) {
          map.put(key,1);
        }
 else {
          map.put(key,map.get(key) + 1);
        }
        ;
      }
    }
    for (int j=0; j < n - 1; j++) {
      for (int k=0; k < n; k++) {
        Integer key=scanner.nextInt();
        if (!map.containsKey(key)) {
          map.put(key,1);
        }
 else {
          map.put(key,map.get(key) + 1);
        }
        ;
      }
    }
    System.out.print(""Case #"" + c + "":"");
    for (    Integer key : map.keySet()) {
      if (map.get(key) % 2 == 1) {
        System.out.print("" "" + key);
      }
    }
    System.out.println(""\n"");
  }
  scanner.close();
}
"
30000393,"public static void main(String[] args) throws IOException {
  FileReader fr=new FileReader(""/Users/SISQUAKE/workspace/code_jam/input/B-small-attempt0_1.in"");
  BufferedReader br=new BufferedReader(fr);
  int n;
  n=Integer.parseInt(br.readLine());
  for (int i=1; i <= n; i++) {
    int N=Integer.parseInt(br.readLine());
    int[][] m=new int[2 * N - 1][N];
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    for (int j=0; j < 2 * N - 1; j++) {
      String str=br.readLine();
      int k=0;
      String[] s=str.split("" "");
      for (      String st : s) {
        int number=Integer.parseInt(st);
        if (map.containsKey(number)) {
          int tmp=map.get(number);
          map.put(number,tmp + 1);
        }
 else {
          map.put(number,1);
        }
      }
    }
    ArrayList<Integer> l=new ArrayList<Integer>();
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      if (entry.getValue() % 2 != 0) {
        l.add(entry.getKey());
      }
    }
    Collections.sort(l);
    System.out.print(""Case #"" + i + "": ""+ l.get(0));
    for (int k=1; k < l.size(); k++) {
      System.out.print("" "" + l.get(k));
    }
    System.out.println("""");
  }
  fr.close();
}
"
30000394,"public static void main(String[] args) throws IOException {
  in=new Scanner(new BufferedReader((new FileReader(""/Users/sandz/Downloads/B-large.in""))));
  BufferedWriter out=new BufferedWriter(new FileWriter(outputFile));
  int testCases=in.nextInt();
  StringBuilder stringBuilder=new StringBuilder();
  for (int i=1; i <= testCases; i++) {
    int n=in.nextInt();
    Map<Integer,Integer> map=new HashMap<Integer,Integer>();
    for (int i1=0; i1 < 2 * n - 1; i1++) {
      for (int j=0; j < n; j++) {
        int row=in.nextInt();
        Integer count=map.get(row);
        if (count == null) {
          count=0;
        }
        map.put(row,++count);
      }
    }
    List<Integer> x=new LinkedList<Integer>();
    for (    Integer key : map.keySet()) {
      int count=map.get(key);
      if (count % 2 == 1) {
        x.add(key);
      }
    }
    Collections.sort(x);
    StringBuffer buffer=new StringBuffer();
    for (    Integer integer : x) {
      buffer.append(integer + "" "");
    }
    String ans=buffer.toString();
    stringBuilder.append(""CASE #"" + (i) + "": ""+ ans+ ""\n"");
  }
  System.out.println(stringBuilder.toString());
  out.write(stringBuilder.toString());
  out.flush();
  in.close();
  out.close();
}
"
30000395,"public static void main(String[] args){
  B b=new B();
  try {
    BufferedReader br=new BufferedReader(new FileReader(""B-large.in""));
    BufferedWriter out=new BufferedWriter(new FileWriter(""B-large.in"".split(""\\."")[0] + ""_output.txt""));
    String s;
    if ((s=br.readLine()) != null) {
      int noLines=Integer.parseInt(s);
      if (noLines != 0) {
        for (int index=0; index < noLines; index++) {
          if ((s=br.readLine()) != null) {
            int[][] inputMatrix=new int[2 * Integer.parseInt(s.trim()) - 1][Integer.parseInt(s.trim())];
            for (int i=0; i < (2 * Integer.parseInt(s.trim()) - 1); i++) {
              String inA=br.readLine();
              String[] tokenizer=inA.split("" "");
              for (int j=0; j < tokenizer.length; j++) {
                inputMatrix[i][j]=Integer.parseInt(tokenizer[j]);
              }
            }
            String outputString=""Case #"" + (index + 1) + "": "";
            HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
            for (            int[] in : inputMatrix) {
              for (              int key : in) {
                if (hm.containsKey(key)) {
                  hm.put(key,hm.get(key) + 1);
                }
 else {
                  hm.put(key,1);
                }
              }
            }
            List<Integer> tempList=new ArrayList<>();
            for (            int key : hm.keySet()) {
              if (hm.get(key) % 2 != 0) {
                tempList.add(key);
              }
            }
            Collections.sort(tempList);
            String returnStr="""";
            for (            int rI : tempList) {
              returnStr+=rI + "" "";
            }
            String output1=returnStr.trim();
            outputString+=output1;
            System.out.println(outputString);
            out.write(outputString);
            out.newLine();
          }
        }
      }
    }
    out.close();
    br.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000396,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""B-large.in""));
  PrintWriter pw=new PrintWriter(new File(""B-large.out""));
  st=new StringTokenizer(br.readLine());
  int T=Integer.parseInt(st.nextToken());
  for (int t=1; t <= T; t++) {
    st=new StringTokenizer(br.readLine());
    int n=Integer.parseInt(st.nextToken());
    ArrayList<ArrayList<Integer>> masterList=new ArrayList<ArrayList<Integer>>();
    for (int i=0; i < 2 * n - 1; i++) {
      st=new StringTokenizer(br.readLine());
      ArrayList<Integer> list=new ArrayList<Integer>();
      for (int j=0; j < n; j++) {
        list.add(Integer.parseInt(st.nextToken()));
      }
      masterList.add(list);
    }
    int[] count=new int[2501];
    for (int i=0; i < masterList.size(); i++) {
      for (      Integer j : masterList.get(i)) {
        count[j]++;
      }
    }
    ArrayList<Integer> leftover=new ArrayList<Integer>();
    for (int i=0; i < count.length; i++) {
      if (count[i] % 2 != 0) {
        leftover.add(i);
      }
    }
    StringBuffer sb=new StringBuffer();
    for (int i=0; i < leftover.size(); i++) {
      sb.append(leftover.get(i) + "" "");
    }
    pw.println(""Case #"" + t + "": ""+ sb.toString().trim());
  }
  pw.close();
}
"
30000397,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=Integer.parseInt(in.nextLine());
  for (int t=0; t < T; t++) {
    int N=Integer.parseInt(in.nextLine());
    int[] heights=new int[2501];
    for (int i=0; i < 2 * N - 1; i++) {
      String[] inp=in.nextLine().split("" "");
      for (int j=0; j < inp.length; j++) {
        heights[Integer.parseInt(inp[j])]++;
      }
    }
    StringBuilder sb=new StringBuilder("""");
    for (int i=1; i < heights.length; i++) {
      if (heights[i] % 2 == 1)       sb.append(i + "" "");
    }
    sb.deleteCharAt(sb.length() - 1);
    System.out.println(""Case #"" + (t + 1) + "": ""+ sb);
  }
}
"
30000398,"public static void main(String[] args) throws IOException {
  InputStream is=new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
  FileWriter fr=new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
  Scanner s=new Scanner(is);
  int n=s.nextInt();
  for (int i=1; i <= n; ++i) {
    int N=s.nextInt();
    Map<Integer,Integer> map=new HashMap<>();
    for (int j=0; j < (2 * N - 1) * N; ++j) {
      int num=s.nextInt();
      if (!map.containsKey(num)) {
        map.put(num,1);
      }
 else {
        map.put(num,map.get(num) + 1);
      }
    }
    PriorityQueue<Integer> pq=new PriorityQueue<>();
    for (    int key : map.keySet()) {
      if (map.get(key) % 2 != 0)       pq.add(key);
    }
    fr.write(String.format(""Case #%d:"",i));
    while (!pq.isEmpty()) {
      fr.write(String.format("" %d"",pq.poll()));
    }
    fr.write(String.format(""\n""));
  }
  fr.close();
  s.close();
}
"
30000399,"public static void main(String[] args){
  main_22_2 m=new main_22_2();
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int times=in.nextInt();
    int total=2 * times * times - times;
    int[] input=new int[total];
    for (int j=0; j < total; j++) {
      input[j]=in.nextInt();
    }
    Set<Integer> set=new HashSet<Integer>();
    for (int i3=0; i3 < input.length; i3++) {
      if (!set.contains(input[i3])) {
        set.add(input[i3]);
      }
 else {
        set.remove(input[i3]);
      }
    }
    int[] ans1=new int[set.size()];
    int index=0;
    for (    int i1 : set) {
      ans1[index++]=i1;
    }
    Arrays.sort(ans1);
    StringBuffer sb=new StringBuffer();
    for (int i2=0; i2 < ans1.length; ++i2) {
      sb.append(ans1[i2]).append("" "");
    }
    String ans=sb.substring(0,sb.length() - 1);
    System.out.print(""Case #"" + i + "": ""+ ans);
    System.out.println();
  }
}
"
30000400,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int i=1; i < t + 1; i++) {
    int n=in.nextInt();
    int[] sol=new int[2501];
    for (int j=0; j < (2 * n) - 1; j++) {
      for (int k=0; k < n; k++) {
        int x=in.nextInt();
        sol[x]+=1;
      }
    }
    System.out.print(""Case #"" + i + "": "");
    for (int j=0; j < 2501; j++) {
      if (sol[j] % 2 != 0) {
        System.out.print(j + "" "");
      }
    }
    System.out.println();
  }
}
"
30000401,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int testcases=Integer.parseInt(scanner.nextLine());
  for (int i=1; i <= testcases; i++) {
    int N=Integer.parseInt(scanner.nextLine());
    List<List<Integer>> matrix=new ArrayList<List<Integer>>();
    for (int j=0; j < 2 * N - 1; j++) {
      String[] arr=scanner.nextLine().split("" "");
      List<Integer> list=new ArrayList<Integer>();
      for (int k=0; k < arr.length; k++) {
        list.add(Integer.parseInt(arr[k]));
      }
      matrix.add(list);
    }
    System.out.print(String.format(""Case #%d: "",i));
    Set<Integer> set=new HashSet<Integer>();
    for (int i1=0; i1 < matrix.size(); i1++) {
      for (int j=0; j < matrix.get(i1).size(); j++) {
        int num=matrix.get(i1).get(j);
        if (set.contains(num)) {
          set.remove(num);
        }
 else {
          set.add(num);
        }
      }
    }
    int[] arr=new int[N];
    int index=0;
    for (    int num : set) {
      arr[index++]=num;
    }
    Arrays.sort(arr);
    for (int i2=0; i2 < arr.length; i2++) {
      System.out.print(arr[i2] + "" "");
    }
    System.out.println();
  }
  scanner.close();
}
"
30000402,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    ArrayList<Integer> ranks=new ArrayList<Integer>();
    for (int j=0; j < n * (2 * n - 1); j++) {
      Integer rank=new Integer(in.nextInt());
      if (ranks.contains(rank))       ranks.remove(rank);
 else       ranks.add(rank);
    }
    Collections.sort(ranks);
    ;
    String output="""";
    for (    int rank : ranks) {
      output+=rank + "" "";
    }
    System.out.println(""Case #"" + i + "": ""+ output.trim());
  }
}
"
30000403,"public static void main(String[] args) throws Exception {
  out=new PrintWriter(new FileWriter(""out.txt""));
  int t=Integer.parseInt(next());
  for (int r=1; r <= t; r++) {
    int n=Integer.parseInt(next());
    int[] heights=new int[2501];
    for (int i=0; i < 2 * n - 1; i++)     for (int j=0; j < n; j++)     heights[Integer.parseInt(next())]++;
    ArrayList<Integer> missing=new ArrayList<Integer>();
    for (int i=1; i <= 2500; i++)     if (heights[i] % 2 != 0)     missing.add(i);
    Collections.sort(missing);
    String ans="""";
    for (    int num : missing)     ans+=num + "" "";
    ans=ans.trim();
    out.printf(""Case #%d: %s\n"",r,ans);
  }
  out.close();
}
"
30000404,"public static void main(String[] args) throws Exception {
  final String FILE=""B-large"";
  PrintWriter outPrinter=new PrintWriter(new File(""C:\\Users\\ivo.correia\\Downloads\\"" + FILE + "".out""));
  Scanner scanIn=new Scanner(new File(""C:\\Users\\ivo.correia\\Downloads\\"" + FILE + "".in""));
  final int T=Integer.parseInt(scanIn.nextLine());
  for (int entry=0; entry < T; entry++) {
    final int N=Integer.parseInt(scanIn.nextLine());
    int[] numbers=new int[2501];
    for (int lines=0; lines < N * 2 - 1; lines++) {
      String[] rawIn=scanIn.nextLine().split("" "");
      for (int i=0; i < N; i++) {
        int number=Integer.parseInt(rawIn[i]);
        numbers[number]=numbers[number] + 1;
      }
    }
    outPrinter.write(""Case #"" + (entry + 1) + "":"");
    for (int i=0; i < 2501; i++) {
      if (numbers[i] > 0 && numbers[i] % 2 == 1) {
        outPrinter.write("" "" + i);
      }
    }
    outPrinter.write(""\n"");
  }
  outPrinter.close();
  scanIn.close();
}
"
30000405,"public static void main(String[] args) throws Exception {
  System.out.println(""Solving "" + PROBLEM_NAME + ""..."");
  System.out.println(""Input: "" + INPUT_PATH);
  System.out.println(""Output: "" + OUTPUT_PATH);
  PrintWriter out=new PrintWriter(OUTPUT_PATH,""US-ASCII"");
  Scanner in=new Scanner(new File(INPUT_PATH),""US-ASCII"");
  in.useLocale(Locale.US);
  int testCasesNumber=in.nextInt();
  in.nextLine();
  System.out.println(""Test cases: "" + testCasesNumber);
  try {
    for (int testCase=1; testCase <= testCasesNumber; testCase++) {
      System.out.println(""Solving test case: "" + testCase + ""..."");
      out.print(""Case #"" + testCase + "": "");
      RankAndFile r=new RankAndFile();
      int N=in.nextInt();
      Map<Integer,Integer> M=new HashMap<>((2 * N - 1) * N);
      for (int i=0; i < 2 * N - 1; i++) {
        for (int j=0; j < N; j++) {
          int h=in.nextInt();
          if (M.containsKey(h))           M.put(h,M.get(h) + 1);
 else           M.put(h,1);
        }
      }
      ArrayList<Integer> result=new ArrayList<>();
      for (      Map.Entry<Integer,Integer> entry : M.entrySet()) {
        if (entry.getValue() % 2 != 0)         result.add(entry.getKey());
      }
      Collections.sort(result);
      for (      Integer i : result) {
        out.print(i + "" "");
      }
      out.println();
      out.flush();
    }
  }
  finally {
    in.close();
    out.close();
  }
  System.out.println(""All test cases solved!"");
}
"
30000406,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    Map<Integer,Integer> map=new HashMap<>();
    Set<Integer> set=new HashSet<>();
    int n=in.nextInt();
    for (int j=0; j < n * 2 - 1; j++) {
      for (int k=0; k < n; k++) {
        int e=in.nextInt();
        set.add(e);
        if (map.containsKey(e))         map.put(e,map.get(e) + 1);
 else         map.put(e,1);
      }
    }
    int[] numbers=new int[set.size()];
    int[] res=new int[n];
    int start=0;
    for (    Integer p : set) {
      numbers[start++]=p;
    }
    Arrays.sort(numbers);
    start=0;
    for (int j=0; j < numbers.length; j++) {
      if (map.get(numbers[j]) % 2 != 0)       res[start++]=numbers[j];
    }
    System.out.print(""Case #"" + i + "": "");
    for (int j=0; j < res.length; j++) {
      if (j == res.length - 1)       System.out.println(res[j]);
 else       System.out.print(res[j] + "" "");
    }
  }
}
"
30000407,"public PanCakes() throws IOException {
  File outputFile=new File(""/home/devil/java/testjava/src/Result.txt"");
  this.fw=new FileWriter(outputFile);
  this.scan=new Scanner(new BufferedReader(new FileReader(new File(""/home/devil/java/testjava/src/B-large.in""))));
  this.length=this.scan.nextInt();
  this.output=new ArrayList<Integer>();
  this.result=new HashMap<Integer,Integer>();
}
"
30000408,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int num=in.nextInt();
  for (int i=1; i <= num; i++) {
    int N=in.nextInt();
    HashSet<Integer> set=new HashSet<Integer>();
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        int cur=in.nextInt();
        if (set.contains(cur)) {
          set.remove(cur);
        }
 else {
          set.add(cur);
        }
      }
    }
    int[] rst=new int[set.size()];
    int index=0;
    for (    int j : set) {
      rst[index]=j;
      index++;
    }
    Arrays.sort(rst);
    StringBuilder sb=new StringBuilder();
    for (int j=0; j < rst.length; j++) {
      sb.append(rst[j] + "" "");
    }
    System.out.println(""Case #"" + i + "": ""+ sb.toString().trim());
  }
}
"
30000409,"public RankFile() throws FileNotFoundException, UnsupportedEncodingException {
  in=new Scanner(new FileReader(""rankfile_small_in.txt""));
  out=new PrintWriter(""rankfile_large_out.txt"",""UTF-8"");
}
"
30000410,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  int max=0;
  for (int testCase=1; testCase <= t; testCase++) {
    int n=in.nextInt();
    int[] heights=new int[2501];
    for (int i=0; i < 2 * n - 1; i++) {
      for (int k=0; k < n; k++) {
        int height=in.nextInt();
        heights[height]+=1;
        if (height > max) {
          max=height;
        }
      }
    }
    System.out.format(""Case #%d: "",testCase);
    for (int j=1; j <= max; j++) {
      if (heights[j] % 2 != 0) {
        System.out.format(""%d "",j);
      }
    }
    System.out.format(""\n"");
  }
}
"
30000411,"public static void main(String args[]) throws Exception {
  sc=new BufferedReader(new InputStreamReader(System.in));
  BufferedReader in=new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in""));
  pw=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
  String str;
  int[] a=new int[2510];
  String text=in.readLine();
  int T=Integer.parseInt(text);
  for (int tc=0; tc < T; tc++) {
    int n=Integer.parseInt(in.readLine());
    int[] out=new int[n];
    for (int i=0; i < 2 * n - 1; i++) {
      text=in.readLine();
      String[] tmp=text.split("" "");
      for (int j=0; j < tmp.length; j++) {
        a[Integer.parseInt(tmp[j])]++;
      }
    }
    int cnt=0;
    for (int i=0; i < a.length; i++) {
      if (a[i] != 0) {
        if (a[i] % 2 == 1) {
          out[cnt]=i;
          cnt++;
        }
      }
    }
    Arrays.sort(out);
    String s="""";
    for (int i=0; i < out.length; i++) {
      s+=Integer.toString(out[i]) + "" "";
    }
    pw.println(""Case #"" + (tc + 1) + "": ""+ s.substring(0,s.length() - 1));
  }
  pw.close();
}
"
30000412,"public static void main(String[] args) throws IOException {
  String filename=""B-large"";
  System.setIn(new FileInputStream(filename + "".in""));
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  String line=in.nextLine();
  for (int z=1; z <= T; z++) {
    System.out.print(""Case #"" + z + "": "");
    int N=in.nextInt();
    line=in.nextLine();
    HashSet nums=new HashSet();
    for (int i=0; i < (2 * N) - 1; i++) {
      for (int j=0; j < N; j++) {
        int num=in.nextInt();
        if (nums.contains(num))         nums.remove(num);
 else         nums.add(num);
      }
    }
    TreeSet myTreeSet=new TreeSet();
    myTreeSet.addAll(nums);
    for (    Object n : myTreeSet) {
      System.out.print(n);
      System.out.print("" "");
    }
    System.out.println("""");
  }
  System.exit(0);
}
"
30000413,"public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
  int t, n, min, max;
  t=sc.nextInt();
  int arr[];
  int ans[];
  for (int i=1; i <= t; i++) {
    n=sc.nextInt();
    arr=new int[2501];
    min=Integer.MAX_VALUE;
    max=Integer.MIN_VALUE;
    for (int j=0; j < (2 * n - 1); j++) {
      for (int k=0; k < n; k++) {
        int x=sc.nextInt();
        arr[x]++;
        min=Math.min(min,x);
        max=Math.max(max,x);
      }
    }
    ans=new int[n];
    for (int k=min, l=0; k <= max; k++) {
      if (arr[k] % 2 != 0) {
        ans[l]=k;
        l++;
      }
    }
    System.out.print(""Case #"" + i + "": "");
    for (int k=0; k < n; k++) {
      System.out.print(ans[k] + "" "");
    }
    System.out.println();
  }
  sc.close();
}
"
30000414,"public static void main(String[] args){
  Path p=Paths.get(largeIn);
  try {
    Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(Files.newInputStream(p))));
    int test=sc.nextInt();
    StringBuilder sb=new StringBuilder();
    for (int t=1; t <= test; t++) {
      int N=sc.nextInt();
      int nums=N * N + N * (N - 1);
      HashMap<Integer,Integer> map=new HashMap();
      for (int i=0; i < nums; i++) {
        int num=sc.nextInt();
        if (!map.containsKey(num)) {
          map.put(num,1);
        }
 else {
          map.put(num,map.get(num) + 1);
        }
      }
      ArrayList<Integer> ret=new ArrayList();
      for (      Integer i : map.keySet()) {
        if (map.get(i) % 2 == 1) {
          ret.add(i);
        }
      }
      Collections.sort(ret);
      sb.append(""Case #"" + t + "": "");
      for (int i=0; i < ret.size(); i++) {
        sb.append(ret.get(i));
        if (i != ret.size() - 1) {
          sb.append("" "");
        }
      }
      if (t != test) {
        sb.append(""\n"");
      }
    }
    Path p1=Paths.get(largeOut);
    try {
      Files.write(p1,sb.toString().getBytes());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    sc.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000415,"public static void main(String[] args){
  Scanner scn=new Scanner(System.in);
  int t=Integer.parseInt(scn.nextLine());
  String str;
  String arr[];
  for (int i=1; i <= t; i++) {
    int n=Integer.parseInt(scn.nextLine());
    HashMap<Integer,Integer> data=new HashMap<Integer,Integer>();
    for (int j=1; j < 2 * n; j++) {
      str=scn.nextLine();
      arr=str.split("" "");
      for (int k=0; k < n; k++) {
        int val=Integer.parseInt(arr[k]);
        if (data.containsKey(val)) {
          data.put(val,data.get(val) + 1);
        }
 else {
          data.put(val,1);
        }
      }
    }
    ArrayList<Integer> missingList=new ArrayList<Integer>();
    Iterator<Integer> ite=data.keySet().iterator();
    while (ite.hasNext()) {
      Integer key=(Integer)ite.next();
      Integer cnt=data.get(key);
      if (cnt % 2 == 1)       missingList.add(key);
    }
    Collections.sort(missingList);
    System.out.print(""Case #"" + i + "": "");
    for (int j=0; j < n; j++) {
      if (j > 0)       System.out.print("" "");
      System.out.print(missingList.get(j));
    }
    System.out.println();
  }
  scn.close();
}
"
30000416,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int numCases=in.nextInt();
  for (int thisNum=1; thisNum <= numCases; thisNum++) {
    int numRows=in.nextInt();
    Integer[][] allRows=new Integer[numRows * 2 - 1][numRows];
    for (int i=0; i < numRows * 2 - 1; i++) {
      Integer[] nextRow=new Integer[numRows];
      for (int row=0; row < numRows; row++)       nextRow[row]=in.nextInt();
      allRows[i]=nextRow;
    }
    for (int row=0; row < numRows; row++) {
      for (int col=0; col < numRows; col++) {
        for (int j=0; j < numRows * 2 - 1; j++) {
          Integer[] testRow=allRows[j];
          for (int k=0; k < numRows * 2 - 1; k++) {
            if (k != j && allRows[k][row].equals(allRows[j][col])) {
              allRows[k][row]=-1;
              allRows[j][col]=-1;
            }
          }
        }
      }
    }
    Vector<Integer> result=new Vector<Integer>(numRows);
    for (int j=0; j < numRows * 2 - 1; j++) {
      for (int col=0; col < numRows; col++) {
        if (allRows[j][col] != -1)         result.add(allRows[j][col]);
      }
    }
    Integer[] resultArray=(Integer[])result.toArray(new Integer[numRows]);
    Arrays.sort(resultArray);
    String output="""";
    for (int col=0; col < numRows; col++) {
      output+=resultArray[col] + "" "";
    }
    output=output.trim();
    System.out.format(""Case #%d: %s\n"",thisNum,output);
  }
}
"
30000417,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int numCases=input.nextInt();
  for (int i=1; i <= numCases; i++) {
    int N=input.nextInt();
    HashSet<Integer> set=new HashSet<Integer>();
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        int temp=input.nextInt();
        if (set.contains(temp)) {
          set.remove(temp);
        }
 else {
          set.add(temp);
        }
      }
    }
    int[] remaining=new int[N];
    int index=0;
    for (    int num : set) {
      remaining[index++]=num;
    }
    Arrays.sort(remaining);
    System.out.print(""Case #"" + i + "": "");
    for (int k=0; k < remaining.length; k++) {
      System.out.print(remaining[k]);
      if (k != remaining.length - 1) {
        System.out.print(' ');
      }
 else {
        System.out.println();
      }
    }
  }
  input.close();
}
"
30000418,"public static void main(String[] args) throws IOException {
  String fileName=""B-large.in"";
  StringBuffer fileContent1=new StringBuffer();
  String line1=new String();
  FileReader fileReader=null;
  try {
    fileReader=new FileReader(fileName);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  BufferedReader bufferedReader=new BufferedReader(fileReader);
  try {
    while ((line1=bufferedReader.readLine()) != null) {
      fileContent1.append(line1 + "";"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  try {
    bufferedReader.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  String fileContent=fileContent1.toString();
  String[] inputString=fileContent.split("";"");
  StringBuffer outputString=new StringBuffer();
  int t=Integer.parseInt(inputString[0]);
  String[] input=new String[inputString.length - 1];
  int line=1;
  for (int z=0; z < t; z++) {
    outputString.append(""Case #"" + (z + 1) + "":"");
    int index=line;
    int n=Integer.parseInt(inputString[index]);
    index++;
    line=line + 2 * n;
    HashMap<Integer,Integer> height=new HashMap<Integer,Integer>();
    int[] miss=new int[n];
    ArrayList<Integer> number=new ArrayList<Integer>();
    int len=0;
    for (int i=0; i < (2 * n - 1); i++) {
      String[] lineHeight=inputString[index + i].split("" "");
      int[] num=new int[lineHeight.length];
      for (int j=0; j < lineHeight.length; j++) {
        num[j]=Integer.parseInt(lineHeight[j]);
        Integer key=new Integer(num[j]);
        if (height.containsKey(key)) {
          Integer value=height.get(key);
          value++;
          height.put(key,value);
        }
 else {
          height.put(key,1);
          number.add(new Integer(key));
        }
      }
    }
    int m=0;
    for (int i=0; i < number.size(); i++) {
      Integer value=height.get(number.get(i));
      if ((value % 2) == 1) {
        System.out.println(number.get(i));
        miss[m++]=number.get(i);
      }
    }
    Arrays.sort(miss);
    for (int i=0; i < miss.length; i++) {
      outputString.append("" "" + miss[i]);
    }
    outputString.append(""\n"");
  }
  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""result.txt"")));
  writer.write(outputString.toString());
  writer.close();
}
"
30000419,"public static void main(String args[]) throws Exception {
  sc=new Scanner(new File(IN));
  out=new PrintWriter(OUT);
  ProblemB r=new ProblemB();
  int t=ProblemB.sc.nextInt();
  for (int i=1; i <= t; i++) {
    ProblemB.out.print(""Case #"" + i + "": "");
    int ans=0;
    int n=ProblemB.sc.nextInt();
    int marks[]=new int[2501];
    for (int i1=0; i1 < n * 2 - 1; ++i1) {
      for (int j=0; j < n; ++j) {
        int tmp=ProblemB.sc.nextInt();
        marks[tmp]++;
      }
    }
    for (int i2=1; i2 <= 2500; i2++) {
      if (marks[i2] % 2 != 0) {
        ProblemB.out.print(i2);
        ProblemB.out.print("" "");
      }
    }
    ProblemB.out.println();
  }
  ProblemB.sc.close();
  ProblemB.out.close();
}
"
30000420,"public static void main(String[] args) throws IOException {
  infileName=args[0];
  outFileName=infileName.substring(0,infileName.indexOf('.')).concat("".out"");
  reader=Files.newBufferedReader(Paths.get(infileName));
  writer=Files.newBufferedWriter(Paths.get(outFileName));
  int numTests=Integer.parseInt(reader.readLine());
  for (int i=0; i < numTests; i++) {
    int len=Integer.parseInt(reader.readLine());
    int[][] in=new int[2 * len - 1][len];
    int count=0;
    int j1=0;
    for (; count < 2 * len - 1; count++) {
      for (      String s1 : reader.readLine().split(""\\s"")) {
        in[count][j1++]=Integer.parseInt(s1);
      }
      j1=0;
    }
    int hights[][]=in;
    Map<Integer,Integer> m=new HashMap<Integer,Integer>();
    for (int i1=0; i1 < 2 * len - 1; i1++)     for (int j=0; j < len; j++) {
      int num=hights[i1][j];
      if (m.get(num) == null)       m.put(num,1);
 else {
        m.put(num,m.get(num) + 1);
      }
    }
    Set<Integer> s=new TreeSet<Integer>();
    for (    Entry<Integer,Integer> e : m.entrySet()) {
      if (e.getValue() % 2 != 0)       s.add(e.getKey());
    }
    Iterator<Integer> iterator=s.iterator();
    String str="""";
    while (iterator.hasNext()) {
      str=str + iterator.next() + "" "";
    }
    String ans=str.trim();
    writer.write(""Case #"" + (i + 1) + "": ""+ (ans));
    writer.newLine();
  }
  reader.close();
  writer.close();
}
"
30000421,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter pw=new PrintWriter(""B.txt"");
  int T=Integer.parseInt(in.readLine());
  for (int c=1; c <= T; c++) {
    int n=Integer.parseInt(in.readLine());
    int[] hcount=new int[2600];
    for (int i=0; i < 2 * n - 1; i++) {
      String[] spl=in.readLine().split("" "");
      for (int j=0; j < n; j++) {
        hcount[Integer.parseInt(spl[j])]++;
      }
    }
    String ans="""";
    for (int i=1; i <= 2500; i++) {
      if (hcount[i] % 2 != 0) {
        ans=ans + "" "" + i;
      }
    }
    pw.println(""Case #"" + c + "":""+ ans);
  }
  pw.close();
}
"
30000422,"public static void main(String[] args){
}
"
30000423,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int total=scan.nextInt();
  for (int i=0; i < total; i++) {
    int sizeForList=scan.nextInt();
    HashMap<Integer,Integer> values=new HashMap<Integer,Integer>();
    for (int j=0; j < sizeForList * (sizeForList * 2 - 1); j++) {
      int tempValue=scan.nextInt();
      if (values.containsKey(tempValue)) {
        int val=values.get(tempValue);
        val++;
        values.put(tempValue,val);
      }
 else {
        values.put(tempValue,1);
      }
    }
    int[] list=new int[sizeForList];
    int index=0;
    for (    Entry<Integer,Integer> tempVal : values.entrySet()) {
      if (tempVal.getValue() % 2 == 1) {
        list[index]=tempVal.getKey();
        index++;
      }
    }
    Arrays.sort(list);
    System.out.print(""Case #"" + (i + 1) + "": "");
    for (int j=0; j < list.length; j++) {
      if (j == 0) {
        System.out.print(list[j]);
      }
 else {
        System.out.print("" "" + list[j]);
      }
    }
    System.out.println();
  }
}
"
30000424,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int num=sc.nextInt();
  for (int i=0; i < num; i++) {
    System.out.print(""Case #"" + (i + 1) + "": "");
    int n=sc.nextInt();
    int[] ar=new int[2505];
    int max=0;
    for (int j=0; j < (2 * n - 1) * n; j++) {
      int temp=sc.nextInt();
      ar[temp]++;
      if (temp > max) {
        max=temp;
      }
    }
    ArrayList<Integer> arr=new ArrayList<Integer>();
    for (int m=0; m <= max; m++) {
      if (ar[m] % 2 != 0) {
        arr.add(m);
      }
    }
    for (int nn=0; nn < arr.size() - 1; nn++) {
      System.out.print(arr.get(nn) + "" "");
    }
    System.out.println(arr.get(arr.size() - 1));
  }
}
"
30000425,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int t=input.nextInt();
  for (int i=0; i < t; i++) {
    int n=input.nextInt();
    ArrayList<Integer> listaMatrizOrdenada=new ArrayList<Integer>();
    for (int j=0; j < n * (2 * n - 1); j++)     listaMatrizOrdenada.add(input.nextInt());
    Collections.sort(listaMatrizOrdenada);
    listaMatrizOrdenada.add(-1);
    List<Integer> resultado=new ArrayList<Integer>();
    int count=0;
    Integer anterior=null;
    for (    Integer j : listaMatrizOrdenada) {
      if (j == 134)       System.out.println("""");
      if (anterior == null || j.equals(anterior)) {
        count++;
      }
 else {
        if (count % 2 != 0) {
          resultado.add(anterior);
        }
        count=1;
      }
      anterior=j;
    }
    System.out.print(""Case #"" + (i + 1) + "":"");
    for (    Integer numero : resultado)     System.out.print("" "" + numero);
    System.out.println("""");
  }
  input.close();
}
"
30000426,"public static void main(String[] args) throws FileNotFoundException {
  B r=new B();
  File input=new File(""data/gcj/2016/r1a/B-large.in"");
  r.scanner=new Scanner(input);
  File test=new File(""data/gcj/2016/r1a/B.out"");
  PrintStream out=new PrintStream(new FileOutputStream(test));
  System.setOut(out);
  int testCase=r.scanner.nextInt();
  r.scanner.nextLine();
  for (int i=1; i <= testCase; i++) {
    System.out.printf(""Case #%d:"",i);
    int[] count=new int[3000];
    int n=r.scanner.nextInt();
    for (int i2=0; i2 < n * (n + n - 1); i2++) {
      int a=r.scanner.nextInt();
      count[a]++;
    }
    for (int i1=0; i1 < count.length; i1++) {
      if (count[i1] % 2 == 1) {
        System.out.print("" "" + i1);
      }
    }
    System.out.println();
  }
}
"
30000427,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new File(INPUT));
  StringBuilder sb=new StringBuilder();
  int cases=sc.nextInt();
  for (int c=0; c < cases; c++) {
    int n=sc.nextInt();
    int[][] lists=new int[2 * n - 1][n];
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        lists[i][j]=sc.nextInt();
      }
    }
    String line=""Case #"" + (c + 1) + "": ""+ solve(lists);
    sb.append(line).append('\n');
    System.out.println(line);
  }
  Files.write(Paths.get(OUTPUT),sb.toString().getBytes());
}
"
30000428,"public static void main(String[] args) throws Exception {
  String round=""large"";
  String baseName=B.class.getName().replace('.','/');
  Scanner scanner=new Scanner(new BufferedReader(new FileReader(baseName + ""-"" + round+ "".in"")));
  PrintWriter writer=new PrintWriter(new FileWriter(baseName + ""-"" + round+ "".out""));
  System.out.println(""Running: "" + round);
  int count=scanner.nextInt();
  for (int i=0; i < count; i++) {
    writer.print(""Case #"" + (i + 1) + "":"");
    int N=scanner.nextInt();
    Map<Integer,Integer> map=new HashMap<>();
    for (int j=0; j < (2 * N - 1) * N; j++) {
      int v=scanner.nextInt();
      if (map.containsKey(v))       map.put(v,map.get(v) + 1);
 else       map.put(v,1);
    }
    List<Integer> heights=new ArrayList<Integer>();
    for (    Entry<Integer,Integer> entry : map.entrySet())     if (entry.getValue() % 2 > 0)     heights.add(entry.getKey());
    heights.sort(new Comparator<Integer>(){
      @Override public int compare(      Integer o1,      Integer o2){
        return o1 - o2;
      }
    }
);
    for (    int result : heights)     writer.print("" "" + result);
    writer.println();
  }
  writer.close();
  scanner.close();
}
"
30000429,"public static void main(String[] args){
  File f=new File(args[0] + "".in"");
  try (Scanner in=new Scanner(new FileInputStream(f));BufferedWriter out=new BufferedWriter(new FileWriter(new File(args[0] + "".out"")))){
    int T=in.nextInt();
    for (int i=0; i < T; i++) {
      int N=in.nextInt();
      int rows=2 * N - 1;
      int[] vals=new int[rows * N];
      int idx=0;
      int max=Integer.MIN_VALUE;
      for (int row=0; row < rows; row++) {
        for (int col=0; col < N; col++) {
          vals[idx]=in.nextInt();
          if (vals[idx] > max)           max=vals[idx];
          idx++;
        }
      }
      int[] count=new int[max + 1];
      for (      int j : vals)       count[j]++;
      int[] solution=new int[N];
      idx=0;
      for (int j=0; j < count.length; j++)       if (count[j] % 2 != 0)       solution[idx++]=j;
      Arrays.sort(solution);
      String str=""Case #"" + (i + 1) + "":"";
      for (      int j : solution)       str+="" "" + j;
      out.write(str);
      out.newLine();
      System.out.println(str);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000430,"public static void main(String... args) throws Exception {
  Scanner scan=new Scanner(new File(""B-large.in""));
  PrintWriter pout=new PrintWriter(new FileWriter(new File(""output.txt"")));
  int cases=Integer.parseInt(scan.nextLine());
  int n;
  short[] check;
  String[][] nums;
  String result;
  for (int bb=0; bb < cases; bb++) {
    result="""";
    check=new short[2500];
    n=Integer.parseInt(scan.nextLine());
    nums=new String[2 * n - 1][];
    for (int i=0; i < 2 * n - 1; i++) {
      nums[i]=scan.nextLine().trim().split("" "");
      for (int j=0; j < n; j++) {
        check[Integer.parseInt(nums[i][j]) - 1]++;
      }
    }
    for (int i=0; i < 2500; i++) {
      if (check[i] % 2 == 1)       result+=(i + 1) + "" "";
    }
    result=result.trim();
    if (result.length() > 2 * n) {
      System.out.println(""error"");
    }
    pout.println(""Case #"" + (bb + 1) + "": ""+ result);
  }
  pout.close();
}
"
30000431,"public static void main(String[] args) throws IOException {
  FileReader fileReader=new FileReader(""/Users/joy/Documents/workspace/GCJ2016R1/B-large.in"");
  FileWriter fileWriter=new FileWriter(""/Users/joy/Documents/workspace/GCJ2016R1/B-large.out"");
  BufferedReader in=new BufferedReader(fileReader);
  BufferedWriter out=new BufferedWriter(fileWriter);
  int t=Integer.parseInt(in.readLine());
  for (int i=0; i < t; i++) {
    int n=Integer.parseInt(in.readLine());
    int[] missing=new int[n];
    BitSet b=new BitSet(2500);
    for (int j=0; j < 2 * n - 1; j++) {
      String[] input=in.readLine().split("" "");
      for (int k=0; k < n; k++) {
        b.flip(Integer.parseInt(input[k]));
      }
    }
    int idx=0;
    for (int j=1; j <= 2500; j++) {
      if (b.get(j)) {
        missing[idx]=j;
        idx++;
      }
    }
    Arrays.sort(missing);
    String output="""";
    for (    int j : missing) {
      output+=(j + "" "");
    }
    System.out.println(output);
    out.write(String.format(""Case #%d: %s"",i + 1,output.substring(0,output.length() - 1)));
    if (i < t - 1)     out.write(""\n"");
  }
  in.close();
  out.close();
}
"
30000432,"public static void main(String[] args){
  try {
    File file=new File(""input.txt"");
    FileReader fileReader=new FileReader(file);
    BufferedReader bufferedReader=new BufferedReader(fileReader);
    StringBuffer output=new StringBuffer();
    int lines=Integer.parseInt(bufferedReader.readLine());
    for (int i=1; i <= lines; i++) {
      HashMap<Integer,Boolean> map=new HashMap<Integer,Boolean>();
      int size=Integer.parseInt(bufferedReader.readLine());
      for (int j=0; j < 2 * size - 1; j++) {
        String[] line=bufferedReader.readLine().split("" "");
        for (        String soldier : line) {
          int value=Integer.parseInt(soldier);
          if (map.get(value) == null || map.get(value) == false) {
            map.put(value,true);
          }
 else {
            map.put(value,false);
          }
        }
      }
      ArrayList<Integer> array=new ArrayList<Integer>();
      for (      Integer soldier : map.keySet()) {
        if (map.get(soldier) == true) {
          array.add(soldier);
        }
      }
      Collections.sort(array);
      String line="""";
      for (      Integer value : array) {
        line+="" "" + value;
      }
      output.append(""Case #"" + i + "": ""+ line.substring(1)+ ""\n"");
    }
    fileReader.close();
    file=new File(""output.txt"");
    FileWriter fileWriter=new FileWriter(file);
    fileWriter.write(output.toString());
    fileWriter.flush();
    fileWriter.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000433,"public static void main(String args[]){
  PrintStream printStream=null;
  try {
    printStream=new PrintStream(new BufferedOutputStream(new FileOutputStream(""result/B-large.out"")));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  System.setOut(printStream);
  Scanner scInput=new Scanner(System.in);
  int T=scInput.nextInt() + 1;
  for (int i=1; i < T; i++) {
    int N=scInput.nextInt();
    int listSize=N * 2 - 1;
    TreeMap<Integer,Integer> countMap=new TreeMap<Integer,Integer>();
    for (int j=0; j < listSize; j++) {
      for (int k=0; k < N; k++) {
        int currentNumber=scInput.nextInt();
        Integer currentNumberCount=countMap.get(currentNumber);
        if (currentNumberCount == null) {
          countMap.put(currentNumber,1);
        }
 else {
          countMap.put(currentNumber,++currentNumberCount);
        }
      }
    }
    StringBuilder result=new StringBuilder();
    for (    Entry<Integer,Integer> entry : countMap.entrySet()) {
      if (entry.getValue() % 2 == 1) {
        result.append("" "").append(entry.getKey());
      }
    }
    System.out.format(""Case #%d: %s\n"",i,result.toString().trim());
  }
  scInput.close();
  printStream.close();
}
"
30000434,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new FileReader(""B-large.in""));
  int t=Integer.parseInt(in.readLine());
  String[] input=new String[t];
  int[] sizes=new int[t];
  PrintWriter out=new PrintWriter(""output.txt"");
  for (int i=0; i < t; i++) {
    int size=Integer.parseInt(in.readLine());
    sizes[i]=size;
    String temp=in.readLine();
    for (int j=1; j < 2 * size - 1; j++) {
      temp+="" "" + in.readLine();
    }
    input[i]=temp;
  }
  for (int i=0; i < t; i++) {
    int n=sizes[i];
    String j=input[i];
    int[] list=new int[2501];
    for (int i2=0; i2 < 2501; i2++) {
      list[i2]=0;
    }
    String[] lst=j.split("" "");
    int l=lst.length;
    for (int i1=0; i1 < l; i1++) {
      int temp=Integer.parseInt(lst[i1]);
      list[temp]++;
    }
    int[] ans=new int[n];
    int count=0;
    int i3=0;
    while (count < n) {
      i3++;
      if (list[i3] % 2 == 1) {
        ans[count]=i3;
        count++;
      }
    }
    Arrays.sort(ans);
    String res="""";
    for (int d=0; d < n - 1; d++) {
      res+=ans[d] + "" "";
    }
    res+=ans[n - 1];
    String output=res;
    out.println(""Case #"" + (i + 1) + "": ""+ output);
  }
  out.close();
}
"
30000435,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=Integer.parseInt(in.nextLine());
  for (int caseNum=1; caseNum <= t; caseNum++) {
    int q=(Integer.parseInt(in.nextLine()) * 2) - 1;
    int[] heights=new int[2500];
    for (int i=0; i < q; i++) {
      String[] args1=in.nextLine().split("" "");
      for (      String s : args1) {
        int foo=Integer.parseInt(s);
        heights[foo - 1]++;
      }
    }
    List<String> ans=new ArrayList<String>();
    for (int i=0; i < heights.length; i++) {
      if (heights[i] % 2 != 0) {
        ans.add(String.valueOf(i + 1));
      }
    }
    System.out.print(""Case #"" + caseNum + "":"");
    for (    String s : ans) {
      System.out.print("" "" + s);
    }
    System.out.println();
  }
}
"
30000436,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  in.nextLine();
  for (int k=1; k <= t; k++) {
    System.out.print(""Case #"" + k + "": "");
    int[] height=new int[2501];
    for (int temp=0; temp <= 2500; temp++) {
      height[temp]=0;
    }
    int n=in.nextInt();
    in.nextLine();
    for (int j=1; j <= 2 * n - 1; j++) {
      for (int x=1; x <= n; x++) {
        int h=in.nextInt();
        height[h]++;
      }
      in.nextLine();
    }
    for (int temp=0; temp <= 2500; temp++) {
      if (height[temp] % 2 == 1) {
        System.out.print(temp + "" "");
      }
    }
    System.out.println();
  }
  in.close();
}
"
30000437,"public static void main(String[] args){
  in=new Scanner(System.in);
  int numCases=in.nextInt();
  for (int test=1; test <= numCases; test++) {
    System.out.print(""Case #"" + test + "":"");
    int n=in.nextInt();
    int[] numbers=new int[2501];
    Arrays.fill(numbers,0);
    for (int i=0; i < n; i++) {
      for (int j=0; j < 2 * n - 1; j++) {
        numbers[in.nextInt()]++;
      }
    }
    Set<Integer> solution=new TreeSet<>();
    for (int i=0; i < numbers.length; i++) {
      if (numbers[i] % 2 != 0) {
        solution.add(i);
      }
    }
    for (    Integer i : solution) {
      System.out.print("" "" + i);
    }
    System.out.println();
  }
  System.exit(0);
}
"
30000438,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int zz=1; zz <= T; zz++) {
    int N=in.nextInt();
    int[] soldiers=new int[N * (2 * N - 1)];
    for (int i=0; i < N * (2 * N - 1); i++) {
      soldiers[i]=in.nextInt();
    }
    Arrays.sort(soldiers);
    int[] found=new int[N];
    int foundIndex=0;
    int currentNum=soldiers[0];
    int numSum=1;
    for (int i1=1, len=soldiers.length; i1 < len; i1++) {
      int currentCheck=soldiers[i1];
      if (currentNum == currentCheck) {
        numSum++;
      }
 else {
        if (numSum % 2 == 1) {
          found[foundIndex]=currentNum;
          foundIndex++;
        }
        numSum=1;
        currentNum=currentCheck;
      }
    }
    if (numSum % 2 == 1) {
      found[foundIndex]=currentNum;
    }
    int[] answer=found;
    System.out.printf(""Case #%d: "",zz);
    for (int i=0; i < N; i++) {
      System.out.printf(""%d "",answer[i]);
    }
    System.out.println();
  }
}
"
30000439,"public static void main(String[] args) throws IOException {
  BufferedReader br=null;
  File fout=new File(""output.txt"");
  FileOutputStream fos=new FileOutputStream(fout);
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(fos));
  try {
    String sCurrentLine;
    br=new BufferedReader(new FileReader(""B-large.in""));
    String testCases=sCurrentLine=br.readLine();
    int testNum=Integer.parseInt(testCases);
    for (int i=0; i < testNum; i++) {
      int startNum=Integer.parseInt(br.readLine());
      ArrayList<String> lists=new ArrayList<String>();
      for (int j=0; j < 2 * startNum - 1; j++) {
        lists.add(br.readLine());
      }
      HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
      for (int i1=0; i1 < lists.size(); i1++) {
        String[] item=lists.get(i1).split("" "");
        for (        String valstr : item) {
          int val=Integer.parseInt(valstr);
          if (map.containsKey(val)) {
            map.put(val,map.get(val) + 1);
          }
 else {
            map.put(val,1);
          }
        }
      }
      ArrayList<Integer> rnt=new ArrayList<Integer>();
      for (      Integer val : map.keySet()) {
        if (map.get(val) % 2 == 1) {
          rnt.add(val);
        }
      }
      Collections.sort(rnt);
      String target=new String();
      for (int i2=0; i2 < rnt.size(); i2++) {
        if (i2 != rnt.size() - 1) {
          target=target + rnt.get(i2) + "" "";
        }
 else {
          target=target + rnt.get(i2);
        }
      }
      String lastRead=target;
      System.out.println(lastRead);
      bw.write(""Case #"" + (i + 1) + "": ""+ lastRead);
      if (i != testNum - 1)       bw.newLine();
    }
    bw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (br != null)       br.close();
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
}
"
30000440,"/** 
 * @param args
 * @throws IOException 
 */
public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; i++) {
    int n=in.nextInt();
    int[] a=new int[n * (n + (n - 1))];
    for (int j=0; j < n * (n + (n - 1)); j++) {
      a[j]=in.nextInt();
    }
    Arrays.sort(a);
    System.out.print(""Case #"" + i + "": "");
    for (int j=0; j < n * (n + (n - 1)); ) {
      if ((j + 1) != n * (n + (n - 1)) && a[j] == a[j + 1]) {
        j+=2;
      }
 else {
        System.out.print(a[j] + "" "");
        j++;
      }
    }
    System.out.println();
  }
  in.close();
}
"
30000441,"public static void main(String[] args) throws Exception {
  int caseNo=1;
  boolean noRead=false;
  try (BufferedReader br=new BufferedReader(new FileReader(""C:\\Users\\fengze\\scala_workspace\\jam\\input.txt""));FileWriter fw=new FileWriter(""output.txt"")){
    String line;
    while ((line=br.readLine()) != null) {
      if (!noRead) {
        noRead=true;
        continue;
      }
 else {
        int n=Integer.parseInt(line);
        String[] lines=new String[2 * n - 1];
        for (int i=0; i < lines.length; i++) {
          lines[i]=br.readLine();
        }
        RankAndFile rf=new RankAndFile(n,lines);
        int[] result=new int[rf.n];
        Map<Integer,Integer> map=new HashMap<>();
        for (int i1=0; i1 < 2 * rf.n - 1; i1++) {
          String[] temp=rf.list[i1].split(""\\s+"");
          for (int j=0; j < rf.n; j++) {
            Integer height=Integer.parseInt(temp[j]);
            if (map.containsKey(height)) {
              Integer count=map.get(height);
              map.put(height,count + 1);
            }
 else {
              map.put(height,1);
            }
          }
        }
        int i2=0;
        for (        Map.Entry<Integer,Integer> entry : map.entrySet()) {
          if (entry.getValue() % 2 != 0) {
            result[i2]=entry.getKey();
            i2++;
          }
        }
        Arrays.sort(result);
        int[] array=result;
        StringBuilder sb=new StringBuilder();
        for (int i=0; i < array.length; i++) {
          sb.append(' ');
          sb.append(array[i]);
        }
        fw.write(""Case #"" + caseNo + "":""+ sb.toString()+ ""\r\n"");
        caseNo++;
      }
    }
  }
 }
"
30000442,"public static void main(String[] args) throws IOException {
  String s1=""B"", s2=""large"";
  String fileName=s1 + ""-"" + s2+ "".in"", outputFileName=s1 + ""-"" + s2+ "".out"";
  RankAndFile obj=new RankAndFile();
  Path path=Paths.get(fileName);
  Scanner scanner=new Scanner(path);
  int numberOfCases=Integer.parseInt(scanner.nextLine());
  Object[] result=new Object[numberOfCases];
  for (int i=0; i < numberOfCases; i++) {
    int n=Integer.parseInt(scanner.nextLine());
    ArrayList<int[]> rows=new ArrayList<>();
    int lines=n * 2 - 1;
    for (int j=0; j < lines; j++) {
      String[] heights=scanner.nextLine().split("" "");
      int[] height=new int[n];
      for (int k=0; k < n; k++) {
        height[k]=Integer.parseInt(heights[k]);
      }
      rows.add(height);
    }
    ArrayList<int[]> rows1=new ArrayList<>();
    for (    int[] a : rows) {
      int[] b=Arrays.copyOf(a,a.length);
      rows1.add(b);
    }
    int target=0, row=0, min=0;
    for (int i1=0; i1 < rows1.get(0).length; i1++) {
      min=2500;
      boolean find=false;
      for (int j=0; j < rows1.size(); j++) {
        int cur=rows1.get(j)[i1];
        if (cur < min) {
          min=cur;
          row=j;
        }
      }
      int count=0, first=0, second=0;
      for (int j=0; j < rows1.size(); j++) {
        int cur=rows1.get(j)[i1];
        if (cur == min) {
          count++;
          if (count == 2) {
            second=j;
            find=true;
            break;
          }
 else           first=j;
        }
      }
      if (!find) {
        target=i1;
        break;
      }
 else {
        rows1.remove(second);
        rows1.remove(first);
      }
    }
    ArrayList<Integer> set=new ArrayList<>();
    for (    int[] a : rows) {
      set.add(a[target]);
    }
    for (    int a : rows1.get(row)) {
      if (a == min)       continue;
      for (int i2=0; i2 < set.size(); i2++) {
        if (set.get(i2) == a) {
          set.remove(i2);
          break;
        }
      }
    }
    Collections.sort(set);
    StringBuilder result1=new StringBuilder(set.size());
    for (    int a : set) {
      result1.append(a + "" "");
    }
    result[i]=result1;
    System.out.println(i);
  }
  PrintWriter out=new PrintWriter(outputFileName);
  for (int i=0; i < result.length; i++) {
    String s=""Case #"" + (i + 1) + "": ""+ result[i];
    out.println(s);
  }
  out.close();
  scanner.close();
}
"
30000443,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    System.out.print(""Case #"" + i + "": "");
    int p=0;
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    while (p < 2 * n * n - n) {
      p++;
      int key=in.nextInt();
      if (map.containsKey(key))       map.put(key,map.get(key) + 1);
 else       map.put(key,1);
    }
    Iterator it=map.entrySet().iterator();
    int[] missing=new int[n];
    int j=0;
    while (it.hasNext()) {
      Map.Entry pair=(Map.Entry)it.next();
      if ((int)pair.getValue() % 2 == 1) {
        missing[j]=(int)pair.getKey();
        j++;
      }
      it.remove();
    }
    Arrays.sort(missing);
    for (int k=0; k < n; k++) {
      System.out.print(missing[k] + "" "");
    }
    System.out.println("""");
  }
}
"
30000444,"public static void main(String... strings){
  Scanner sc=new Scanner(System.in);
  PrintStream ps=System.out;
  try {
    System.setOut(new PrintStream(new FileOutputStream(""out2.txt"")));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  ps.close();
  int numCases=Integer.valueOf(sc.nextLine());
  for (int i=0; i < numCases; i++) {
    HashMap<Integer,Integer> hm=new HashMap<>();
    int N=sc.nextInt();
    for (int j=0; j < N * (2 * N - 1); j++) {
      int a=sc.nextInt();
      if (hm.get(a) == null) {
        hm.put(a,1);
      }
 else {
        hm.put(a,hm.get(a) + 1);
      }
    }
    ArrayList<Integer> al=new ArrayList<>();
    for (    Map.Entry<Integer,Integer> entry : hm.entrySet()) {
      if (entry.getValue() % 2 == 1) {
        al.add(entry.getKey());
      }
    }
    Collections.sort(al);
    int len=al.size();
    System.out.printf(""Case #%d: %d"",i + 1,al.get(0));
    for (int k=1; k < len; k++) {
      System.out.printf("" %d"",al.get(k));
    }
    System.out.println();
  }
  sc.close();
}
"
30000445,"public static void main(String... args) throws Exception {
  File file=new File(loc);
  File[] paths=file.listFiles();
  List<File> input=new ArrayList<File>();
  for (  File f : paths) {
    String s=f.getName();
    if (s.startsWith(name_class) && s.endsWith("".in""))     input.add(f);
  }
  if (input.isEmpty()) {
    System.err.println(""LEYENDO DE CONSOLA"");
    in=new BufferedReader(new InputStreamReader(System.in));
  }
 else {
    File last_file=input.get(0);
    for (    File f : input) {
      if (f.lastModified() > last_file.lastModified())       last_file=f;
    }
    in=new BufferedReader(new FileReader(last_file.toString()));
    System.err.println(""LEYENDO DE ARCHIVO"");
  }
  FileWriter fw=new FileWriter(loc + ""/output.txt"");
  out=new PrintWriter(fw);
  int casos=Integer.parseInt(in.readLine());
  for (int casito=1; casito <= casos; casito++) {
    B r=new B();
    int n=Integer.parseInt(B.nextToken());
    int MAX=2500;
    boolean[] bs=new boolean[MAX + 1];
    for (int i=0; i < 2 * n - 1; i++) {
      int[] ret1=new int[n];
      for (int i1=0; i1 < n; i1++)       ret1[i1]=Integer.parseInt(B.nextToken());
      int[] arr=ret1;
      for (      int a : arr)       bs[a]=!bs[a];
    }
    List<Integer> ret=new ArrayList<>();
    for (int i=1; i < bs.length; i++) {
      if (bs[i])       ret.add(i);
    }
    StringBuilder str=new StringBuilder();
    for (int i=0; i < ret.size(); i++) {
      if (i != 0)       str.append("" "");
      str.append(ret.get(i));
    }
    Object o=str;
    out.println(""Case #"" + casito + "": ""+ o);
    System.out.println(""Case #"" + casito + "": ""+ o);
  }
  out.close();
}
"
30000446,"public static void main(String cmdArgs[]) throws Exception {
  long time=System.currentTimeMillis();
  String filename=cmdArgs[0];
  BufferedWriter writer=new BufferedWriter(new PrintWriter(filename + ""-output.txt"",""UTF-8""));
  BufferedReader reader=new BufferedReader(new FileReader(filename));
  String nextLine;
  nextLine=reader.readLine();
  int caseNum=1;
  while ((nextLine=reader.readLine()) != null) {
    int rows=Integer.valueOf(nextLine);
    TreeSet<Integer> soldiers=new TreeSet<Integer>();
    for (int i=0; i < 2 * rows - 1; i++) {
      nextLine=reader.readLine();
      String[] row=nextLine.split("" "");
      for (      String soldier : row) {
        int height=Integer.valueOf(soldier);
        if (soldiers.contains(height)) {
          soldiers.remove(height);
        }
 else {
          soldiers.add(height);
        }
      }
    }
    if (soldiers.size() != rows) {
      System.out.println(""BUG"");
    }
    writer.write(""Case #"" + caseNum + "":"");
    for (    Integer soldier : soldiers) {
      writer.write("" "" + soldier);
    }
    caseNum++;
    writer.newLine();
  }
  writer.close();
  long elapsed=System.currentTimeMillis() - time;
  System.out.println(""millis elapsed: "" + elapsed);
}
"
30000447,"public static void main(String[] args) throws IOException {
  bw=new BufferedWriter(new FileWriter(outputPath));
  in=new Scanner(new BufferedReader(new FileReader(inputPath)));
  numberTest=in.nextInt();
  for (int i=0; i < numberTest; i++) {
    System.out.println(""test :"" + (i + 1));
    n=in.nextInt();
    for (int i1=0; i1 < 2500; i1++) {
      numberApper[i1]=0;
    }
    for (int i2=0; i2 < 2 * n - 1; i2++) {
      int pre=0;
      for (int j=0; j < n; j++) {
        int x=in.nextInt();
        if (x == pre) {
          System.out.println(""-----------------------------"");
        }
        pre=x;
        numberApper[x]++;
      }
    }
    result=new ArrayList();
    for (int i1=0; i1 < 2500; i1++)     if (numberApper[i1] > 0 && numberApper[i1] % 2 == 1) {
      result.add(i1);
    }
    String list="""";
    for (    Integer s : result)     list+=s + "" "";
    String result1=""Case #"" + (i + 1) + "": ""+ list+ ""\n"";
    bw.write(result1);
  }
  bw.close();
}
"
30000448,"public static void main(String[] args) throws FileNotFoundException {
  File input=new File(""in.txt"");
  Scanner in=new Scanner(input);
  PrintWriter writer=new PrintWriter(""out.txt"");
  int T=in.nextInt();
  in.nextLine();
  RankAndFile r=new RankAndFile();
  for (int i=1; i <= T; i++) {
    writer.print(""Case #"" + i + "": "");
    int N=in.nextInt();
    in.nextLine();
    HashMap<Integer,Integer> m=new HashMap<Integer,Integer>();
    for (int row=0; row < 2 * N - 1; row++) {
      for (int i3=0; i3 < N; i3++) {
        int tmp=in.nextInt();
        if (m.containsKey(tmp))         m.put(tmp,m.get(tmp) + 1);
 else         m.put(tmp,1);
      }
      in.nextLine();
    }
    List<Integer> l=new LinkedList<Integer>();
    for (    int i1 : m.keySet()) {
      if (m.get(i1) % 2 == 1)       l.add(i1);
    }
    Collections.sort(l);
    for (int i2=0; i2 < N; i2++) {
      if (i2 < N - 1)       writer.print(l.get(i2) + "" "");
 else       writer.println(l.get(i2));
    }
  }
  in.close();
  writer.close();
}
"
30000449,"public static void main(String[] args) throws Exception {
}
"
30000450,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(br.readLine());
  for (int caseid=1; caseid <= T; caseid++) {
    int N=Integer.parseInt(br.readLine());
    int[] count=new int[2501];
    for (int i=0; i < 2 * N - 1; i++) {
      StringTokenizer st=new StringTokenizer(br.readLine());
      for (int j=0; j < N; j++) {
        int c=Integer.parseInt(st.nextToken());
        count[c]++;
      }
    }
    System.out.print(""Case #"" + caseid + "":"");
    int counter=0;
    for (int i=0; i < 2501; i++) {
      if (count[i] % 2 == 1) {
        counter++;
        System.out.print("" "" + i);
      }
    }
    System.out.println();
    if (counter != N)     System.out.println(""WJDALSKDJALKSDJAS"");
  }
}
"
30000451,"public static void main(String[] args) throws IOException {
  Scanner input=new Scanner(new File(""input.txt""));
  PrintWriter out=new PrintWriter(new File(""output.txt""));
  int cs=input.nextInt();
  for (int i=1; i <= cs; i++) {
    int[] arr=new int[2501];
    int sz=input.nextInt();
    for (int x=0; x < sz * (2 * sz - 1); x++) {
      arr[input.nextInt()]++;
    }
    out.printf(""Case #%d:"",i);
    for (int j=0; j < arr.length; j++)     if (arr[j] % 2 == 1)     out.print("" "" + j);
    out.println();
  }
  out.close();
}
"
30000452,"public static void main(String args[]) throws Exception {
  Writer writer=null;
  Scanner scanner=null;
  try {
    scanner=new Scanner(new BufferedReader(new FileReader(""input_files/B-large.in"")));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""output_files/rankfile_output_large.txt""),""utf-8""));
    int noOfTestCases=scanner.nextInt();
    System.out.println(noOfTestCases);
    SortedSet<Integer> sortedSet=null;
    for (int i=0; i < noOfTestCases; i++) {
      HashMap<Integer,Integer> map=new HashMap<>();
      sortedSet=new TreeSet<>();
      int noOfValues=scanner.nextInt();
      for (int j=0; j < (noOfValues * 2 - 1) * noOfValues; j++) {
        int val=scanner.nextInt();
        if (!map.containsKey(val))         map.put(val,1);
 else {
          int value=map.get(val);
          map.put(val,value + 1);
        }
      }
      for (      Map.Entry<Integer,Integer> entry : map.entrySet()) {
        int key=entry.getKey();
        int value=entry.getValue();
        if (value % 2 != 0) {
          sortedSet.add(key);
          if (sortedSet.size() == noOfValues)           break;
        }
      }
      String printLine=""Case #"" + (i + 1) + "": "";
      for (      Integer in : sortedSet)       printLine+=in + "" "";
      printLine=printLine.trim();
      printLine+=""\n"";
      writer.write(printLine);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    scanner.close();
    writer.close();
  }
}
"
30000453,"public static void main(String[] args) throws IOException {
}
"
30000454,"public static void main(String[] args){
  Scanner cin=new Scanner(System.in);
  while (cin.hasNext()) {
    int t=cin.nextInt();
    for (int caseNumber=1; caseNumber <= t; caseNumber++) {
      int pool[]=new int[3000];
      Arrays.fill(pool,0);
      int N=cin.nextInt();
      for (int i=1; i < 2 * N; i++) {
        for (int j=0; j < N; j++) {
          int x=cin.nextInt();
          pool[x]++;
        }
      }
      String result="""";
      for (int i=0; i < 3000; i++) {
        if ((pool[i] & 1) == 1) {
          result=result + i + "" "";
        }
      }
      String output=result.substring(0,result.length() - 1);
      System.out.println(""Case #"" + caseNumber + "": ""+ output);
    }
  }
}
"
30000455,"public static void main(String[] args) throws IOException {
}
"
30000456,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int numberOfTestCases=in.nextInt();
  int x=1;
  Map<Integer,List<List<Integer>>> testCaseMap=new HashMap<Integer,List<List<Integer>>>();
  for (int i=0; i < numberOfTestCases; i++) {
    List<List<Integer>> inputRowColumnList=new ArrayList<List<Integer>>();
    Integer gridSize=in.nextInt();
    for (int j=0; j < (2 * gridSize - 1); j++) {
      List<Integer> inputList=new ArrayList<Integer>();
      for (int k=0; k < gridSize; k++) {
        inputList.add(in.nextInt());
      }
      inputRowColumnList.add(inputList);
    }
    testCaseMap.put(i,inputRowColumnList);
  }
  for (int i=0; i < numberOfTestCases; i++) {
    List<Integer> missingList1=new ArrayList<Integer>();
    Map<Integer,Integer> oddEvenMap=new HashMap<Integer,Integer>();
    for (    List<Integer> list : testCaseMap.get(i)) {
      for (      Integer height : list) {
        Integer oddEvenCount=oddEvenMap.get(height);
        if (null == oddEvenCount) {
          oddEvenCount=1;
          oddEvenMap.put(height,oddEvenCount);
        }
 else {
          oddEvenCount=oddEvenCount + 1;
          oddEvenMap.put(height,oddEvenCount);
        }
      }
    }
    for (    Map.Entry<Integer,Integer> entry : oddEvenMap.entrySet()) {
      Integer height=entry.getKey();
      Integer oddEven=entry.getValue();
      if (oddEven % 2 != 0) {
        missingList1.add(height);
      }
    }
    Collections.sort(missingList1);
    List<Integer> missingList=missingList1;
    System.out.print(""Case #"" + x + "":"");
    for (    Integer temp : missingList) {
      System.out.print("" "" + temp);
    }
    System.out.println();
    x++;
  }
}
"
30000457,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  for (int f=1; f <= t; f++) {
    int n=s.nextInt();
    int[] arr1=new int[2501];
    int len=(2 * n - 1) * n;
    for (int i=0; i < len; i++) {
      arr1[s.nextInt()]++;
    }
    System.out.print(""Case #"" + f + "": "");
    for (int i=0; i < 2501; i++) {
      if (arr1[i] % 2 != 0)       System.out.print(i + "" "");
    }
    System.out.println();
  }
}
"
30000458,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(WORK_DIR + ""B-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(WORK_DIR + ""output.txt""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    System.out.println(""Processing test case "" + (caseNum + 1));
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    prblmB r=new prblmB();
    int N=sc.nextInt();
    int ar[][]=new int[2 * N - 1][N];
    int br[]=new int[2501];
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        ar[i][j]=sc.nextInt();
        if (br[ar[i][j]] == 0)         br[ar[i][j]]=1;
 else         br[ar[i][j]]=0;
      }
    }
    for (int i=0; i < 2501; i++) {
      if (br[i] == 1)       pw.print(i + "" "");
    }
    pw.println();
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000459,"public static void main(String[] args) throws IOException {
  String filename=""C:/Users/Administrator/Desktop/B-small-attempt1.in"";
  FileReader fr=new FileReader(filename);
  BufferedReader br=new BufferedReader(fr);
  FileWriter fw=new FileWriter(""C:/Users/Administrator/Desktop/out_b.txt"");
  BufferedWriter bw=new BufferedWriter(fw);
  String line;
  String inputs[]=new String[10000000];
  int N=0;
  while ((line=br.readLine()) != null) {
    inputs[N]=line;
    System.out.println(inputs[N]);
    N++;
  }
  int T=Integer.valueOf(inputs[0]);
  int case_num=1;
  for (int i=1; i < N; ) {
    int n=Integer.valueOf(inputs[i]);
    i++;
    HashMap<String,Integer> map=new HashMap<String,Integer>();
    for (int k=0; k < 2 * n - 1; i++, k++) {
      String array[]=inputs[i].split("" "");
      for (int m=0; m < array.length; m++) {
        if (map.containsKey(array[m])) {
          int times=map.get(array[m]);
          map.put(array[m],times + 1);
        }
 else {
          map.put(array[m],1);
        }
      }
    }
    ArrayList<String> list=new ArrayList<String>();
    for (    Map.Entry<String,Integer> entry : map.entrySet()) {
      String key=entry.getKey().toString();
      int times=entry.getValue();
      if (times % 2 != 0)       list.add(key);
    }
    int array[]=new int[list.size()];
    for (int j=0; j < array.length; j++)     array[j]=Integer.valueOf(list.get(j));
    Arrays.sort(array);
    bw.write(""Case #"" + case_num + "": "");
    for (int j=0; j < array.length; j++) {
      if (j < array.length - 1)       bw.write(array[j] + "" "");
 else       bw.write(array[j] + ""\n"");
    }
    case_num++;
  }
  bw.flush();
}
"
30000460,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    int n=in.nextInt();
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        int current=in.nextInt();
        if (!map.containsKey(current)) {
          map.put(current,1);
        }
 else {
          int temp=map.get(current);
          map.put(current,temp + 1);
        }
      }
    }
    ArrayList<Integer> list=new ArrayList<Integer>();
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      int val=entry.getValue();
      int key=entry.getKey();
      if (val % 2 != 0)       list.add(key);
    }
    Collections.sort(list);
    System.out.print(""Case #"" + i + "": "");
    for (int z=0; z < list.size(); z++) {
      if (z != list.size() - 1)       System.out.print(list.get(z) + "" "");
 else       System.out.print(list.get(z) + ""\n"");
    }
  }
}
"
30000461,"public static void main(String[] args) throws Exception {
  FileInputStream fs=new FileInputStream(""B-large.in"");
  FileWriter fw=new FileWriter(""B-large.txt"");
  Scanner s=new Scanner(fs);
  int num=s.nextInt();
  for (int i=0; i < num; i++) {
    int lineNum=s.nextInt();
    HashMap<Integer,Integer> hs=new HashMap<Integer,Integer>();
    for (int j=0; j < (lineNum * 2 - 1) * lineNum; j++) {
      int n=s.nextInt();
      if (hs.containsKey(n)) {
        hs.put(n,hs.get(n) + 1);
      }
 else {
        hs.put(n,1);
      }
    }
    int[] ans=new int[lineNum];
    int index=0;
    Iterator it=hs.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Map.Entry)it.next();
      if ((Integer)entry.getValue() % 2 == 1) {
        ans[index++]=(Integer)entry.getKey();
      }
    }
    Arrays.sort(ans);
    StringBuilder sb=new StringBuilder();
    for (int k=0; k < lineNum; k++)     sb.append(ans[k] + "" "");
    fw.write(""Case #"" + (i + 1) + "": ""+ sb.toString()+ ""\n"");
  }
  fs.close();
  fw.close();
}
"
30000462,"public static void main(String[] args) throws Exception {
  Scanner input=new Scanner(new File(""input/b_large.in""));
  PrintWriter output=new PrintWriter(new File(""output/b_large.out""));
  int testCases=input.nextInt();
  input.nextLine();
  primary:   for (int casen=1; casen <= testCases; casen++) {
    output.printf(""Case #%d:"",casen);
    int n=input.nextInt();
    Set<Integer> heights=new TreeSet<Integer>();
    for (int i=1; i < 2 * n; i++) {
      for (int j=0; j < n; j++) {
        int cur=input.nextInt();
        if (!heights.remove(cur)) {
          heights.add(cur);
        }
      }
    }
    for (    int x : heights) {
      output.print("" "" + x);
    }
    output.println();
    output.flush();
  }
  output.close();
}
"
30000463,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=1; i <= T; i++) {
    int N=sc.nextInt();
    Hashtable<Integer,Integer> numbers=new Hashtable<Integer,Integer>();
    for (int iter=0; iter < (2 * N * N - N); iter++) {
      int input=sc.nextInt();
      int count=0;
      if (numbers.containsKey(input)) {
        count=numbers.get(input);
      }
      numbers.put(input,count + 1);
    }
    int[] finalList=new int[N];
    int index=0;
    Set<Integer> keys=numbers.keySet();
    for (    Integer key : keys) {
      int counter=numbers.get(key);
      if (counter % 2 != 0) {
        finalList[index++]=key;
      }
    }
    Arrays.sort(finalList);
    String output=(""Case #"" + i + "":"");
    for (    int k : finalList) {
      output+=("" "" + k);
    }
    System.out.println(output);
  }
}
"
30000464,"public static void main(String[] args) throws Exception {
  File file=new File(""B-large.in"");
  Scanner input=new Scanner(file);
  int numCases=input.nextInt();
  boolean[] digits=new boolean[2501];
  for (int n=0; n < numCases; n++) {
    String s="""";
    for (int j=0; j < 2501; j++)     digits[j]=false;
    int r=input.nextInt();
    int nums=2 * r * r - r;
    for (int i=0; i < nums; i++) {
      int a=input.nextInt();
      digits[a]=digits[a] ? false : true;
    }
    for (int i=0; i < 2501; i++)     if (digits[i])     s=s + i + "" "";
    s=s.trim();
    System.out.println(""Case #"" + (n + 1) + "": ""+ s);
  }
}
"
30000465,"/** 
 * @param args
 */
public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    int N=input.nextInt();
    int t;
    int[] hei=new int[2501];
    for (int i=0; i < (2 * N - 1) * N; i++) {
      t=input.nextInt();
      hei[t]++;
    }
    int[] ans=new int[50];
    int mm=0;
    for (int i=1; i < 2501; i++) {
      if (hei[i] % 2 == 1) {
        ans[mm]=i;
        mm++;
      }
    }
    System.out.printf(""Case #%d:"",n + 1);
    for (int i=0; i < N; i++)     System.out.printf("" %d"",ans[i]);
    System.out.println();
  }
}
"
30000466,"public static void main(String[] args) throws NumberFormatException, IOException {
  String name=""B"";
  boolean isSmall=false;
  BufferedReader br;
  if (isSmall)   br=new BufferedReader(new FileReader(name + ""-small-attempt0 (2).in""));
 else   br=new BufferedReader(new FileReader(name + ""-large (1).in""));
  PrintWriter pw;
  if (isSmall)   pw=new PrintWriter(name + ""-small.txt"",""UTF-8"");
 else   pw=new PrintWriter(name + ""-large.txt"",""UTF-8"");
  int T=Integer.parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    int N=Integer.parseInt(br.readLine());
    int[][] vrst=new int[2 * N - 1][N];
    for (int j=0; j < 2 * N - 1; j++) {
      String[] tab=br.readLine().split("" "");
      for (int k=0; k < N; k++) {
        vrst[j][k]=Integer.parseInt(tab[k]);
      }
    }
    boolean[] bool=new boolean[2501];
    for (int i1=0; i1 < 2 * N - 1; i1++) {
      for (int j=0; j < N; j++) {
        bool[vrst[i1][j]]=!bool[vrst[i1][j]];
      }
    }
    StringBuilder st=new StringBuilder();
    for (int i2=0; i2 < bool.length; i2++) {
      if (bool[i2])       st.append(i2 + "" "");
    }
    String a=st.toString();
    System.out.print(""Case #"" + (i + 1) + "": ""+ a+ ""\n"");
    pw.write(""Case #"" + (i + 1) + "": ""+ a+ ""\n"");
  }
  pw.close();
}
"
30000467,"public static void main(String[] args){
  try {
    String filePath=""/Users/jimmychou516/Downloads/"";
    String inputFileName=""B-large.in.txt"";
    String outputFileName=""output.txt"";
    PrintStream myconsole=new PrintStream(new File(filePath + outputFileName));
    System.setOut(myconsole);
    Scanner in=new Scanner(new BufferedReader(new FileReader(new File(filePath + inputFileName))));
    int n=in.nextInt();
    for (int i=1; i <= n; i++) {
      int size=in.nextInt();
      List<Integer> list=new LinkedList<Integer>();
      for (int cases=1; cases <= size * size * 2 - size; cases++) {
        int num=in.nextInt();
        list.add(num);
      }
      Collections.sort(list);
      int index=0;
      List<Integer> temp=new LinkedList<Integer>();
      while (index < list.size() - 1) {
        if (list.get(index).equals(list.get(index + 1)) && index < list.size()) {
          index=index + 2;
        }
 else {
          temp.add(list.get(index));
          index++;
        }
      }
      if (temp.size() != size) {
        temp.add(list.get(list.size() - 1));
      }
      Collections.sort(temp);
      String str="""";
      for (      Integer number : temp) {
        str=str + "" "" + number;
      }
      System.out.println(""Case #"" + i + "": ""+ str.trim());
    }
  }
 catch (  Exception e) {
    System.out.println(e);
  }
}
"
30000468,"public static void main(String[] args){
  try {
    BufferedReader br=new BufferedReader(new FileReader(""B-large0.in""));
    int l=0;
    String line="""";
    int t=Integer.parseInt(br.readLine());
    String[] s=new String[t];
    for (int i=0; i < t; i++) {
      int N=Integer.parseInt(br.readLine());
      List<String> matrix=new ArrayList<String>();
      Map<String,Integer> hm=new HashMap<String,Integer>();
      int lines=2 * N - 1;
      for (int j=0; j < lines; j++) {
        matrix.add(br.readLine());
        String[] temp=matrix.get(j).split("" "");
        for (int k=0; k < temp.length; k++) {
          if (!hm.containsKey(temp[k])) {
            hm.put(temp[k],1);
          }
 else {
            hm.put(temp[k],hm.get(temp[k]) + 1);
          }
        }
      }
      List<String> res=new ArrayList<String>();
      for (      String k : hm.keySet()) {
        if (hm.get(k) % 2 != 0) {
          res.add(k);
        }
      }
      List<Integer> res1=new ArrayList<Integer>();
      for (int z=0; z < res.size(); z++) {
        res1.add(Integer.parseInt(res.get(z)));
      }
      Collections.sort(res1);
      System.out.print(""Case #"" + (i + 1) + "": "");
      for (int p=0; p < res1.size(); p++) {
        System.out.print(res1.get(p) + "" "");
      }
      System.out.println();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000469,"public static void main(String[] args){
  int TC=in.nextInt();
  for (int tc=1; tc <= TC; tc++) {
    int N=in.nextInt();
    int[][] list=new int[2 * N - 1][N];
    int[] count=new int[2501];
    for (int l=0; l < list.length; l++) {
      for (int n=0; n < N; n++) {
        list[l][n]=in.nextInt();
        count[list[l][n]]++;
      }
    }
    PriorityQueue<Integer> odds=new PriorityQueue<Integer>();
    for (int ZSOI=0; ZSOI < 2501; ZSOI++) {
      if ((count[ZSOI] & 1) == 1) {
        odds.offer(ZSOI);
      }
    }
    System.out.print(""Case #"" + tc + "":"");
    while (!odds.isEmpty()) {
      System.out.print("" "" + odds.poll());
    }
    System.out.println();
  }
}
"
30000470,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int trys, cases;
  trys=scanner.nextInt();
  cases=0;
  while (cases < trys) {
    cases++;
    int n=scanner.nextInt();
    ArrayList input=new ArrayList<>();
    Integer temp;
    for (int i=0; i < 2 * n - 1; i++)     for (int j=0; j < n; j++) {
      temp=scanner.nextInt();
      if (!input.contains(temp)) {
        input.add(temp);
      }
 else {
        input.remove(temp);
      }
    }
    Collections.sort(input);
    Iterator<Integer> values=input.iterator();
    System.out.print(""Case #"" + cases + "":"");
    while (values.hasNext()) {
      System.out.print("" "" + values.next());
    }
    System.out.println();
  }
}
"
30000471,"public static void main(String args[]){
  File input=new File(""F:\\CodeJam\\argusIn.txt"");
  File output=new File(""F:\\CodeJam\\argusOut.txt"");
  BufferedWriter out=null;
  Scanner s1;
  try {
    s1=new Scanner(input);
    String x=s1.nextLine();
    long t=Long.parseLong(x);
    try {
      out=new BufferedWriter(new FileWriter(output));
      for (int i=0; i < t; i++) {
        out.write(""Case #"" + (i + 1) + "": "");
        int n=s1.nextInt();
        HashMap<Integer,Integer> a=new HashMap<Integer,Integer>();
        for (int j=0; j < ((2 * n) - 1) * n; j++) {
          int temp=s1.nextInt();
          if (a.containsKey(temp)) {
            a.put(temp,(a.get(temp)) + 1);
          }
 else {
            a.put(temp,1);
          }
        }
        int arr[]=new int[n];
        int ct=0;
        for (        int p : a.keySet()) {
          if (a.get(p) % 2 == 1) {
            System.out.println(p);
            arr[ct]=p;
            ct++;
          }
        }
        Arrays.sort(arr);
        for (int k=0; k < n; k++) {
          out.write(arr[k] + "" "");
        }
        out.newLine();
      }
      out.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
}
"
30000472,"public static void main(String[] args) throws IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(INPUT_FILE))){
    String line;
    int t=Integer.parseInt(br.readLine());
    for (int i=0; i < t; i++) {
      int n=Integer.parseInt(br.readLine());
      int matrix[][]=new int[2 * n - 1][];
      for (int j=0; j < 2 * n - 1; j++) {
        matrix[j]=new int[n];
        String[] row=br.readLine().split("" "");
        for (int k=0; k < n; k++) {
          matrix[j][k]=Integer.parseInt(row[k]);
        }
      }
      HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
      for (int i2=0; i2 < 2 * n - 1; i2++) {
        for (int j=0; j < n; j++) {
          int element=matrix[i2][j];
          if (map.containsKey(element))           map.put(element,map.get(element) + 1);
 else           map.put(element,1);
        }
      }
      int[] arr=new int[n];
      int i1=0;
      for (      int height : map.keySet()) {
        if (map.get(height) % 2 == 0)         continue;
        arr[i1++]=height;
      }
      StringBuilder sb=new StringBuilder();
      Arrays.sort(arr);
      for (      int element : arr)       sb.append(element).append("" "");
      int c=OUTPUT.size() + 1;
      OUTPUT.add(""Case #"" + c + "": ""+ sb.toString().trim());
    }
  }
   Files.write(OUTPUT_PATH,OUTPUT,Charset.defaultCharset());
}
"
30000473,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=1; i <= T; i++) {
    System.out.print(""Case #"" + i + "": "");
    int N=sc.nextInt();
    int max=0;
    int C[][]=new int[2 * N - 1][N];
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        int F=sc.nextInt();
        if (F > max) {
          max=F;
        }
        C[j][k]=F;
      }
    }
    int A[]=new int[max];
    for (int j=0; j < max; j++) {
      int check=j + 1;
      for (int k=0; k < 2 * N - 1; k++) {
        for (int l=0; l < N; l++) {
          if (C[k][l] == check) {
            A[j]=A[j] + 1;
          }
        }
      }
    }
    for (int j=0; j < max; j++) {
      if (A[j] % 2 == 1) {
        System.out.print(j + 1 + "" "");
      }
    }
    System.out.println();
  }
}
"
30000474,"public static void main(String args[]){
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
    int test=Integer.parseInt(in.readLine());
    int a[];
    for (int t=1; t <= test; t++) {
      int n=Integer.parseInt(in.readLine());
      a=new int[3000];
      for (int i=0; i < (2 * n - 1); i++) {
        StringTokenizer st=new StringTokenizer(in.readLine());
        for (int j=0; j < n; j++) {
          int x=Integer.parseInt(st.nextToken());
          a[x]++;
        }
      }
      int pos=0;
      int ans[]=new int[n];
      for (int i=0; i < a.length; i++) {
        if (a[i] % 2 == 1) {
          ans[pos++]=i;
        }
      }
      Arrays.sort(ans);
      System.out.print(""Case #"" + t + "": "");
      for (int i=0; i < n; i++) {
        System.out.print(ans[i] + "" "");
      }
      System.out.println();
    }
    in.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000475,"public static void main(String[] args){
  try {
    Scanner scan=new Scanner(new File(""roundA/B.in""));
    PrintWriter w=new PrintWriter(new FileWriter(""roundA/B.out""));
    int caseC=scan.nextInt();
    for (int i=1; i <= caseC; i++) {
      HashSet<Integer> set=new HashSet<Integer>();
      int n=scan.nextInt();
      for (int j=0; j < (2 * n - 1) * n; j++) {
        int no=scan.nextInt();
        if (set.contains(no)) {
          set.remove(no);
        }
 else {
          set.add(no);
        }
      }
      Integer[] list=set.toArray(new Integer[set.size()]);
      Arrays.sort(list);
      w.print(String.format(""Case #%d:"",i));
      for (      Integer number : list) {
        w.print(String.format("" %d"",number));
      }
      w.println();
    }
    scan.close();
    w.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000476,"public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
  Scanner sc=new Scanner(new File(""in.txt""));
  writer=new PrintWriter(""out.txt"",""UTF-8"");
  int T=sc.nextInt();
  for (int t=0; t < T; t++) {
    int n=sc.nextInt();
    ArrayList<Integer> al=new ArrayList<>();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        al.add(sc.nextInt());
      }
    }
    Collections.sort(al);
    ArrayList<Integer> left=new ArrayList<>();
    for (int i=0; i < al.size(); i++) {
      int bb=al.get(i);
      if (i == al.size() - 1) {
        left.add(bb);
        break;
      }
      int cc=al.get(i + 1);
      if (bb == cc) {
        i++;
        continue;
      }
 else {
        left.add(bb);
      }
    }
    String m="""";
    for (    Integer g : left)     m+=g + "" "";
    m=m.substring(0,m.length() - 1);
    String s=""Case #"" + (t + 1) + "": ""+ m;
    writer.println(s);
    System.out.println(s);
  }
  writer.close();
}
"
30000477,"public static void main(String args[]) throws IOException {
  Scanner in=new Scanner(new File(""input.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(new File(""output.out"")));
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int n=in.nextInt();
    HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int tmp=in.nextInt();
        Integer obj=new Integer(tmp);
        if (hm.containsKey(obj)) {
          hm.put(obj,hm.get(obj) + 1);
        }
 else         hm.put(obj,1);
      }
    }
    List<Integer> list=new ArrayList<Integer>();
    for (    Map.Entry<Integer,Integer> entry : hm.entrySet()) {
      if ((Integer)entry.getValue() % 2 != 0) {
        list.add(entry.getKey());
      }
    }
    Collections.sort(list);
    String res=list.toString();
    pw.println(""Case #"" + t + "": ""+ res.substring(1,res.length() - 1).replaceAll("","",""""));
  }
  System.out.println(""Done"");
  pw.close();
}
"
30000478,"public static void main(String[] args){
  String filePath=""C:\\Users\\Victor\\IdeaProjects\\googleJam\\files\\B-large (1).in"";
  try {
    BufferedReader br=new BufferedReader(new FileReader(filePath));
    BufferedWriter bw=new BufferedWriter(new FileWriter(""C:\\Users\\Victor\\IdeaProjects\\googleJam\\files\\rankandfileresults.txt""));
    int count=1;
    Integer t=Integer.parseInt(br.readLine());
    for (int tt=0; tt < t; tt++) {
      int[] heightArray=new int[2500];
      Integer n=Integer.parseInt(br.readLine());
      ArrayList<Integer> missing=new ArrayList<Integer>();
      StringBuilder sb=new StringBuilder();
      for (int nn=0; nn < 2 * n - 1; nn++) {
        String list=br.readLine();
        for (int nnn=0; nnn < n; nnn++) {
          Integer height=Integer.parseInt(list.split(""\\s+"")[nnn]);
          heightArray[height - 1]=heightArray[height - 1] + 1;
        }
      }
      for (int i=0; i < heightArray.length; i++) {
        if (heightArray[i] % 2 != 0) {
          missing.add(i + 1);
        }
      }
      Collections.sort(missing);
      for (      Integer height : missing) {
        sb.append(height);
        sb.append("" "");
      }
      bw.write(""Case #"" + count + "": ""+ sb.toString());
      count++;
      bw.newLine();
    }
    br.close();
    bw.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
"
30000479,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int _t=1; _t <= t; _t++) {
    int n=sc.nextInt();
    sc.nextLine();
    List<Integer> list=new ArrayList<>(2 * n - 1);
    for (int _n=0; _n < 2 * n - 1; _n++) {
      String[] arr=sc.nextLine().split("" "");
      for (int i=0; i < arr.length; i++) {
        list.add(Integer.parseInt(arr[i]));
      }
    }
    Map<Integer,Integer> histo=new HashMap<>();
    for (int i=0; i < list.size(); i++) {
      int key=list.get(i);
      if (histo.containsKey(key)) {
        histo.put(key,histo.get(key) + 1);
      }
 else {
        histo.put(key,1);
      }
    }
    List<Integer> odd=new ArrayList<>();
    for (    Map.Entry<Integer,Integer> e : histo.entrySet()) {
      if (e.getValue() % 2 == 1) {
        odd.add(e.getKey());
      }
    }
    Collections.sort(odd);
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < odd.size(); i++) {
      sb.append(String.format(""%d "",odd.get(i)));
    }
    String result=sb.toString().trim();
    System.out.printf(""Case #%d: %s%n"",_t,result);
  }
}
"
30000480,"public static void main(String[] args){
  Scanner inputFile=null;
  PrintWriter fileWriter=null;
  try {
    fileWriter=new PrintWriter(""B-large-1.out"");
    inputFile=new Scanner(new FileReader(""B-large-1.in""));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int numberCases=inputFile.nextInt();
  inputFile.nextLine();
  for (int i=0; i < numberCases; i++) {
    int number=inputFile.nextInt();
    inputFile.nextLine();
    HashMap<Integer,Integer> map=new HashMap<>();
    for (int j=0; j < number * 2 - 1; j++) {
      String line=inputFile.nextLine();
      Scanner lineScanner=new Scanner(line);
      while (lineScanner.hasNext()) {
        int value=lineScanner.nextInt();
        if (map.containsKey(value)) {
          int freq=map.get(value);
          map.put(value,freq + 1);
        }
 else {
          map.put(value,1);
        }
      }
      lineScanner.close();
    }
    Set<Entry<Integer,Integer>> setOfValues=map.entrySet();
    Iterator<Entry<Integer,Integer>> iterator=setOfValues.iterator();
    ArrayList<Integer> resultList=new ArrayList<>();
    while (iterator.hasNext()) {
      Entry<Integer,Integer> tempEntry=iterator.next();
      if (tempEntry.getValue() % 2 != 0) {
        resultList.add(tempEntry.getKey());
      }
    }
    Collections.sort(resultList);
    String resultString="""";
    for (int j=0; j < resultList.size() - 1; j++) {
      resultString+=resultList.get(j) + "" "";
    }
    resultString+=resultList.get(resultList.size() - 1);
    fileWriter.println(""Case #"" + (i + 1) + "": ""+ resultString);
  }
  fileWriter.close();
  inputFile.close();
}
"
30000481,"public static void main(String args[]) throws IOException {
  try {
    TheLastWord word=new TheLastWord();
    word.file=new File(""input.txt"");
    word.in=new Scanner(word.file);
    word.out=new FileWriter(""output.txt"");
    int c;
    c=word.in.nextInt();
    word.testCases=new Integer(c);
    for (int i=1; i <= word.testCases; i++) {
      word.sequence=word.in.next();
      word.result=""Case #"" + i + "": "";
      String sequenceSol="""";
      sequenceSol+=word.sequence.charAt(0);
      for (int i1=1; i1 < word.sequence.length(); i1++) {
        if (Integer.valueOf(word.sequence.charAt(i1)) >= Integer.valueOf(sequenceSol.charAt(0))) {
          sequenceSol=word.sequence.charAt(i1) + sequenceSol;
        }
 else {
          sequenceSol=sequenceSol + word.sequence.charAt(i1);
        }
      }
      word.result+=sequenceSol;
      word.result=word.result + ""\n"";
      word.out.write(word.result);
    }
    word.in.close();
    word.out.close();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}
"
30000482,"public static void main(String[] args){
  File file=new File(""E://B-large.in"");
  try {
    writer=new PrintWriter(""E://B-large.out"");
    scan=new Scanner(file);
    int test=scan.nextInt();
    scan.nextLine();
    for (int i=0; i < test; i++) {
      writer.print(""Case #"" + (i + 1) + "": "");
      int n=scan.nextInt();
      HashMap<Integer,Integer> M=new HashMap<>();
      int[][] A=new int[n * 2 - 1][n];
      for (int i2=0; i2 < n * 2 - 1; i2++) {
        for (int j=0; j < n; j++) {
          int tmp=scan.nextInt();
          if (M.containsKey(tmp)) {
            int t=M.get(tmp);
            M.remove(tmp);
            M.put(tmp,t + 1);
          }
 else {
            M.put(tmp,1);
          }
        }
      }
      Set<Integer> K=M.keySet();
      List<Integer> KQ=new ArrayList<>();
      for (      Integer i3 : K) {
        int t=M.get(i3);
        if (t % 2 == 1)         KQ.add(i3);
      }
      Collections.sort(KQ);
      for (int i1=0; i1 < KQ.size(); i1++) {
        writer.print(KQ.get(i1) + "" "");
      }
      writer.println();
    }
    writer.close();
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
}
"
30000483,"public static void main(String[] args){
  Main6 m=new Main6();
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int times=in.nextInt();
    int total=2 * times * times - times;
    int[] input=new int[total];
    for (int j=0; j < total; j++) {
      input[j]=in.nextInt();
    }
    System.out.print(""Case #"" + i + "": "");
    int[] ans=new int[times];
    Set<Integer> set=new HashSet<Integer>();
    for (int i1=0; i1 < input.length; i1++) {
      if (set.contains(input[i1])) {
        set.remove(input[i1]);
      }
 else {
        set.add(input[i1]);
      }
    }
    int t1=0;
    for (    int s : set) {
      ans[t1]=s;
      t1++;
    }
    Arrays.sort(ans);
    for (int i2=0; i2 < ans.length; i2++) {
      System.out.print(ans[i2]);
      System.out.print("" "");
    }
    System.out.println();
  }
}
"
30000484,"public static void main(String[] args) throws FileNotFoundException {
  FileInputStream fin=new FileInputStream(""B-large.in.txt"");
  Scanner scanner=new Scanner(fin);
  FileOutputStream fout=new FileOutputStream(""B-large.out.txt"");
  PrintWriter writer=new PrintWriter(fout);
  int testCount=scanner.nextInt();
  for (int testCase=1; testCase <= testCount; ++testCase) {
    int n=scanner.nextInt();
    int[][] a=new int[2 * n - 1][n];
    for (int i=0; i < 2 * n - 1; ++i) {
      for (int j=0; j < n; ++j) {
        a[i][j]=scanner.nextInt();
      }
    }
    Map<Integer,Integer> m=new HashMap<>();
    for (    int[] ar : a) {
      for (      int e : ar) {
        if (!m.containsKey(e)) {
          m.put(e,0);
        }
        m.put(e,m.get(e) + 1);
      }
    }
    int[] res1=new int[a[0].length];
    int i1=0;
    for (    int e : m.keySet()) {
      if (m.get(e) % 2 == 1) {
        res1[i1++]=e;
      }
    }
    Arrays.sort(res1);
    int[] res=res1;
    String out="""" + res[0];
    for (int i=1; i < res.length; ++i) {
      out+="" "" + res[i];
    }
    writer.printf(""Case #%d: %s\n"",testCase,out);
  }
  writer.close();
}
"
30000485,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int T=scanner.nextInt();
  for (int k=0; k < T; k++) {
    Map<Integer,Integer> mentionsMap=new HashMap<>();
    int n=scanner.nextInt();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int x=scanner.nextInt();
        if (!mentionsMap.containsKey(x)) {
          mentionsMap.put(x,0);
        }
        mentionsMap.put(x,mentionsMap.get(x) + 1);
      }
    }
    System.out.print(""Case #"");
    System.out.print(k + 1);
    System.out.print("": "");
    List<Integer> weirdoList=new ArrayList<>();
    for (int i=1; i <= 2500; i++) {
      if (!mentionsMap.containsKey(i)) {
        continue;
      }
      if (mentionsMap.get(i) % 2 != 0) {
        weirdoList.add(i);
      }
    }
    for (    Integer weirdo : weirdoList) {
      System.out.print(weirdo);
      System.out.print(' ');
    }
    System.out.println();
  }
}
"
30000486,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int tc=sc.nextInt();
  int n;
  int tmp;
  for (int i=0; i < tc; ++i) {
    n=sc.nextInt();
    int[] hei=new int[2501];
    int[] row=new int[n];
    for (int a=0; a < 2 * n - 1; ++a) {
      for (int b=0; b < n; ++b) {
        tmp=sc.nextInt();
        hei[tmp]++;
      }
    }
    int pos=0;
    for (int a=0; a < 2501; ++a) {
      if (hei[a] % 2 != 0) {
        row[pos]=a;
        pos++;
      }
    }
    Arrays.sort(row);
    System.out.printf(""Case #%d: "",i + 1);
    for (int a=0; a < n - 1; ++a) {
      System.out.printf(""%d "",row[a]);
    }
    System.out.printf(""%d%n"",row[n - 1]);
  }
  sc.close();
}
"
30000487,"public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException {
  BufferedReader br=null;
  FileOutputStream fos=null;
  BufferedWriter bw=null;
  try {
    br=new BufferedReader(new FileReader(""B-large.in""));
    fos=new FileOutputStream(new File(""outputL.txt""));
    bw=new BufferedWriter(new OutputStreamWriter(fos));
    final int CASES=Integer.valueOf(br.readLine());
    String[] line=null;
    int N=0;
    StringBuilder sb=null;
    Set<Integer> result=new HashSet<Integer>();
    for (int i=1; i <= CASES; i++) {
      result=new HashSet<Integer>();
      sb=new StringBuilder();
      N=Integer.valueOf(br.readLine());
      for (int j=1; j <= 2 * N - 1; j++) {
        line=br.readLine().split(""\\s+"");
        for (        String stn : line) {
          if (result.contains(Integer.valueOf(stn))) {
            result.remove(Integer.valueOf(stn));
          }
 else {
            result.add(Integer.valueOf(stn));
          }
        }
      }
      ArrayList<Integer> arrayList=new ArrayList<>();
      arrayList.addAll(result);
      Collections.sort(arrayList);
      sb=new StringBuilder();
      for (int z=0; z < arrayList.size(); z++) {
        if (z != arrayList.size() - 1) {
          sb.append(String.format(""%s "",arrayList.get(z)));
        }
 else {
          sb.append(String.format(""%s"",arrayList.get(z)));
        }
      }
      bw.write(String.format(""Case #%s: %s"",i,sb.toString()));
      bw.newLine();
    }
    br.close();
    bw.close();
    fos.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000488,"public static void main(String... nopushupsformesarge) throws Exception {
  Scanner input=new Scanner(System.in);
  float T=input.nextFloat();
  for (int n=0; n < T; n++) {
    int N=input.nextInt();
    int[] inarr=new int[(2 * N - 1) * N];
    for (int i=0; i < (2 * N - 1) * N; i++) {
      inarr[i]=input.nextInt();
    }
    for (int j=1; j < (2 * N - 1) * N; j++) {
      int key=inarr[j];
      int i=j - 1;
      while ((i > -1) && (inarr[i] > key)) {
        inarr[i + 1]=inarr[i];
        i--;
      }
      inarr[i + 1]=key;
    }
    String str="""";
    for (int j=0; j < (2 * N - 1) * N; ) {
      int key=inarr[j];
      int count=0;
      while (j < (2 * N - 1) * N) {
        if (inarr[j] != key) {
          break;
        }
        j=j + 1;
        count++;
      }
      if (count % 2 != 0) {
        str=str + "" "" + key;
      }
    }
    System.out.println(""Case #"" + (n + 1) + "":""+ str);
  }
}
"
30000489,"public static void main(String args[]){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  int c=1;
  while (t > 0) {
    System.out.print(""Case #"" + c + "": "");
    int n=s.nextInt();
    int[][] a=new int[2 * n - 1][n];
    int[] r=new int[2501];
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        a[i][j]=s.nextInt();
      }
    }
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        r[a[i][j]]=r[a[i][j]] + 1;
      }
    }
    for (int i=0; i < 2501; i++) {
      if (r[i] % 2 == 1)       System.out.print(i + "" "");
    }
    System.out.println();
    t--;
    c++;
  }
}
"
30000490,"public static void main(String args[]) throws IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  StringTokenizer st;
  Scanner sc;
  int cases=Integer.parseInt(br.readLine());
  for (int i=1; i <= cases; i++) {
    System.out.print(String.format(""Case #%d:"",i));
    int n=Integer.parseInt(br.readLine());
    int[] counts=new int[3000];
    for (int i2=0; i2 < 2 * n - 1; i2++) {
      StringTokenizer st1=new StringTokenizer(br.readLine());
      int[] arr=new int[n];
      for (int i11=0; i11 < n; i11++) {
        arr[i11]=Integer.parseInt(st1.nextToken());
      }
      int[] line=arr;
      for (      int sol : line) {
        counts[sol]++;
      }
    }
    int[] out=new int[n];
    int j=0;
    for (int i1=0; i1 < 3000; i1++) {
      if (counts[i1] % 2 == 1) {
        out[j++]=i1;
      }
    }
    for (    int q : out) {
      System.out.print("" "" + q);
    }
    System.out.println();
  }
}
"
30000491,"public static void main(String[] args){
  try {
    String input=""d:\\B-large.in"";
    String output=""d:\\output.out"";
    Scanner sc=new Scanner(new FileReader(input));
    PrintWriter pw=new PrintWriter(output);
    int n=sc.nextInt();
    sc.nextLine();
    for (int c=0; c < n; c++) {
      int len=sc.nextInt();
      sc.nextLine();
      pw.print(""Case #"" + (c + 1) + "": "");
      List<String> list=new ArrayList<>();
      Map<Integer,Integer> map=new HashMap<Integer,Integer>();
      for (int i=0; i < 2 * len - 1; i++) {
        String z=sc.nextLine();
        String[] all=z.split("" "");
        for (        String j : all) {
          if (!j.isEmpty()) {
            int x=Integer.parseInt(j);
            if (!map.containsKey(x)) {
              map.put(x,1);
            }
 else             map.put(x,map.get(x) + 1);
          }
        }
      }
      List<Integer> tosort=new ArrayList<>(len);
      for (      int key : map.keySet()) {
        if (map.get(key) % 2 == 1) {
          tosort.add(key);
        }
      }
      Collections.sort(tosort);
      for (      int key : tosort) {
        pw.print(key + "" "");
      }
      pw.println();
    }
    pw.println();
    pw.flush();
    pw.close();
    sc.close();
  }
 catch (  FileNotFoundException ex) {
  }
}
"
30000492,"public static void main(String[] args){
  String line;
  int tab[]=new int[2500];
  int tmp;
  int n=0;
  try {
    BufferedReader reader=new BufferedReader(new FileReader(new File(""/home/talik/Dokumenty/1RoundB/B-large.in"")));
    Path path=Paths.get(""/home/talik/Dokumenty/1RoundB/output.txt"");
    PrintWriter writer=new PrintWriter(path.toString());
    int numberOfLines=Integer.parseInt(reader.readLine());
    for (int i=1; i <= numberOfLines; i++) {
      Arrays.fill(tab,0);
      line=reader.readLine();
      n=Integer.parseInt(line);
      for (int j=0; j < (2 * n - 1); j++) {
        line=reader.readLine();
        String[] cos=line.split(""\\s+"");
        for (        String x : cos) {
          tmp=Integer.parseInt(x);
          tab[tmp - 1]++;
        }
      }
      writer.print(""Case #"" + i + "":"");
      for (int j=0; j < tab.length; j++) {
        if (tab[j] % 2 == 1) {
          writer.print("" "" + (j + 1));
        }
      }
      writer.println();
    }
    writer.flush();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException io) {
    io.printStackTrace();
  }
}
"
30000493,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int testCases=in.nextInt();
  for (int t=1; t <= testCases; t++) {
    int N=in.nextInt();
    int[][] a=new int[2 * N - 1][N];
    Set<Integer> marks=new HashSet<Integer>();
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        int next=in.nextInt();
        if (marks.contains(next)) {
          marks.remove(next);
        }
 else {
          marks.add(next);
        }
      }
    }
    System.out.print(""Case #"" + t + "": "");
    for (int i=0; i < N; i++) {
      int smallest=-1;
      for (      Integer mark : marks) {
        if (smallest == -1)         smallest=mark;
 else         if (mark < smallest)         smallest=mark;
      }
      marks.remove(smallest);
      System.out.print(smallest + (i == N - 1 ? """" : "" ""));
    }
    System.out.println();
  }
}
"
30000494,"public static void main(String[] args){
  try (BufferedReader br=new BufferedReader(new InputStreamReader(System.in))){
    int T=Integer.parseInt(br.readLine());
    for (int i=1; i <= T; i++) {
      int N=Integer.parseInt(br.readLine());
      int toIter=2 * N - 1;
      String[] line;
      int[] arr=new int[2501];
      int[] naya=new int[N];
      for (int j=0; j < toIter; j++) {
        line=br.readLine().split(""\\s+"");
        for (int k=0; k < N; k++) {
          arr[Integer.parseInt(line[k])]++;
        }
      }
      int counter=0;
      for (int z=0; z < 2501; z++) {
        if (arr[z] % 2 != 0)         naya[counter++]=z;
      }
      System.out.print(""Case #"" + i + "":"");
      for (int x=0; x < N; x++) {
        System.out.print("" "" + naya[x]);
      }
      System.out.println("""");
    }
  }
 catch (  IOException e) {
  }
}
"
30000495,"public static void main(String[] args) throws Exception {
  in=new Scanner(new File(FILEIN));
  out=new PrintWriter(FILEOUT);
  int tests=in.nextInt();
  in.nextLine();
  for (int i=1; i <= tests; i++) {
    out.print(""Case #"" + i + "":"");
    int n=in.nextInt();
    boolean[] a=new boolean[2501];
    for (int i3=0; i3 < 2 * n * n - n; i3++) {
      int h=in.nextInt();
      a[h]=!a[h];
    }
    List<Integer> l=new ArrayList<Integer>();
    for (int i1=1; i1 <= 2500; i1++) {
      if (a[i1]) {
        l.add(i1);
      }
    }
    Collections.sort(l);
    for (    int i2 : l) {
      out.print("" "" + i2);
    }
    out.println();
    in.nextLine();
  }
  out.close();
}
"
30000496,"public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  PrintWriter writer=new PrintWriter(""outputB.txt"",""UTF-8"");
  for (int k=1; k <= T; k++) {
    int[] heights=new int[2501];
    int N=scan.nextInt();
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        int currNum=scan.nextInt();
        heights[currNum]++;
      }
    }
    int c=0;
    int[] missed=new int[N];
    for (int i=1; i < 2501; i++) {
      if (heights[i] % 2 == 1) {
        missed[c]=i;
        c++;
      }
    }
    Arrays.sort(missed);
    writer.print(""Case #"" + k + "": "");
    for (int i=0; i < N; i++) {
      if (i == N - 1) {
        writer.print(missed[i]);
      }
 else {
        writer.print(missed[i] + "" "");
      }
    }
    writer.println();
  }
  writer.close();
}
"
30000497,"public static void main(String args[]) throws Exception {
  File output_file=new File(""RankAndFile_large.txt"");
  FileWriter filewriter=new FileWriter(output_file);
  BufferedWriter bw=new BufferedWriter(filewriter);
  PrintWriter pw=new PrintWriter(bw);
  File input_file=new File(""B-large.in.txt"");
  Scanner sc=new Scanner(input_file);
  int T=sc.nextInt();
  for (int i=1; i <= T; i++) {
    int N=sc.nextInt();
    int checkNumber[]=new int[2501];
    int input_number=N * (2 * N - 1);
    for (int j=0; j < input_number; j++) {
      int target=sc.nextInt();
      checkNumber[target]+=1;
    }
    StringBuilder answer=new StringBuilder();
    for (int k=1; k <= 2500; k++) {
      if (checkNumber[k] % 2 == 1) {
        String new_answer="" "" + String.valueOf(k);
        answer.append(new_answer);
      }
    }
    pw.println(""Case #"" + String.valueOf(i) + "":""+ answer);
  }
  pw.close();
}
"
30000498,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=0; i < T; i++) {
    int n=sc.nextInt();
    Vector<Integer> numbers=new Vector<Integer>();
    int amount=(2 * n) - 1;
    while (amount != 0) {
      for (int j=0; j < n; j++) {
        int temp=sc.nextInt();
        numbers.add(temp);
      }
      amount--;
    }
    int[] num=new int[numbers.size()];
    for (int ni=0; ni < numbers.size(); ni++) {
      num[ni]=numbers.get(ni);
    }
    int[] sorted=num.clone();
    Arrays.sort(sorted);
    boolean odd=true;
    int len=0;
    for (int i1=1; i1 < sorted.length; ++i1) {
      if (sorted[i1] == sorted[i1 - 1]) {
        odd=!odd;
      }
 else {
        if (odd) {
          sorted[len++]=sorted[i1 - 1];
        }
        odd=true;
      }
    }
    if (odd) {
      sorted[len++]=sorted[sorted.length - 1];
    }
    int[] done=Arrays.copyOf(sorted,len);
    String finaldone="""";
    for (int joe=0; joe < done.length; joe++) {
      finaldone=finaldone + done[joe] + "" "";
    }
    Arrays.sort(done);
    int index=i + 1;
    System.out.println(""Case #"" + index + "": ""+ finaldone);
  }
}
"
30000499,"public static void main(String[] args) throws Exception {
  String fileName=""fileB"";
  PrintWriter writer=new PrintWriter(fileName + "".out"",""UTF-8"");
  Scanner scanner=new Scanner(new File(fileName + "".in""));
  int t=scanner.nextInt();
  for (int i=0; i < t; i++) {
    int n=scanner.nextInt();
    Hashtable<Integer,Integer> heights=new Hashtable<Integer,Integer>();
    for (int i1=0; i1 < n * (n * 2 - 1); i1++) {
      int height=scanner.nextInt();
      if (heights.containsKey(height)) {
        heights.put(height,1 + heights.get(height));
      }
 else {
        heights.put(height,1);
      }
    }
    ArrayList<Integer> missing=new ArrayList<Integer>();
    for (    Integer height : heights.keySet()) {
      if (heights.get(height) % 2 == 1) {
        missing.add(height);
      }
    }
    Collections.sort(missing);
    String ans=missing.toString().replace("","","""");
    ans=ans.substring(1,ans.length() - 1);
    writer.print(""Case #"" + (long)(i + 1) + "": ""+ ans);
    if (i < t - 1) {
      writer.println("""");
    }
  }
  writer.close();
  scanner.close();
}
"
30000500,"public static void main(String[] args) throws Exception {
  String line;
  String fileName=args[0];
  System.out.println(""fileName="" + fileName);
  FileWriter fw=new FileWriter(fileName + "".out.txt"");
  InputStream fis=new FileInputStream(fileName);
  InputStreamReader isr=new InputStreamReader(fis,Charset.forName(""UTF-8""));
  BufferedReader br=new BufferedReader(isr);
  try {
    line=br.readLine();
    Long count=Long.valueOf(line);
    System.out.println(""count="" + count);
    Long current=0L;
    while (current++ < count) {
      line=br.readLine();
      final int N=Integer.valueOf(line);
      final int rowNum=2 * N - 1;
      Map<Integer,Integer> countMap=new HashMap<Integer,Integer>();
      int i=0;
      while (i < rowNum) {
        String line1=br.readLine();
        String[] numbers=line1.split(""\\s+"");
        for (int i1=0; i1 < numbers.length; i1++) {
          int currentNumber=Integer.valueOf(numbers[i1]);
          int oldCount=0;
          if (countMap.containsKey(currentNumber)) {
            oldCount=countMap.get(currentNumber);
          }
          countMap.put(currentNumber,oldCount + 1);
        }
        i++;
      }
      int[] result2=new int[N];
      int i1=0;
      for (      Map.Entry<Integer,Integer> entry : countMap.entrySet()) {
        if (entry.getValue() % 2 != 0) {
          result2[i1++]=entry.getKey();
        }
      }
      int[] result1=result2;
      Arrays.sort(result1);
      StringBuilder tmp=new StringBuilder();
      for (int j=0; j < result1.length; j++) {
        tmp.append(String.valueOf(result1[j])).append("" "");
      }
      String result=tmp.toString().trim();
      fw.write(""Case #"" + current + "": ""+ result+ ""\n"");
    }
    fw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000501,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""B-large.in""));
  int numberOfCases=sc.nextInt();
  String[] result=new String[numberOfCases];
  for (int i=0; i < numberOfCases; i++) {
    int numberOfLines=sc.nextInt();
    sc.nextLine();
    String tempIn="""";
    for (int j=0; j < (numberOfLines * 2 - 1); j++) {
      String temp=sc.nextLine();
      tempIn+=temp + "" "";
    }
    String[] input=tempIn.split(""\\s+"");
    int[] intInput=new int[input.length];
    for (int i1=0; i1 < input.length; i1++) {
      intInput[i1]=Integer.parseInt(input[i1]);
    }
    Map<Integer,Integer> map=new HashMap<>();
    for (int i2=0; i2 < intInput.length; i2++) {
      if (map.get(intInput[i2]) == null) {
        map.put(intInput[i2],1);
      }
 else {
        map.put(intInput[i2],map.get(intInput[i2]) + 1);
      }
    }
    List<Integer> res=new ArrayList<>();
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      int value=entry.getValue();
      if (value % 2 != 0) {
        res.add(entry.getKey());
      }
    }
    Collections.sort(res);
    StringBuilder finalResult=new StringBuilder();
    for (    Integer e : res) {
      finalResult.append(e);
      finalResult.append("" "");
    }
    result[i]=finalResult.toString();
  }
  for (int i=0; i < numberOfCases; i++) {
    int caseNumber=i + 1;
    System.out.format(""Case #%d: %s\n"",caseNumber,result[i]);
  }
}
"
30000502,"public static void main(String[] args) throws IOException {
  long start=System.currentTimeMillis();
  Scanner scanner=new Scanner(new File(""./input_large.txt""));
  PrintWriter writer=new PrintWriter(""./output_large.txt"");
  int nTests=scanner.nextInt();
  scanner.nextLine();
  int bigN;
  int numSheets;
  int[] possibleHeights;
  for (int i=0; i < nTests; i++) {
    bigN=scanner.nextInt();
    numSheets=2 * bigN - 1;
    possibleHeights=new int[2501];
    writer.print(""Case #"" + (i + 1) + "":"");
    for (int j=0; j < numSheets; j++) {
      scanner.nextLine();
      for (int k=0; k < bigN; k++) {
        possibleHeights[scanner.nextInt()]++;
      }
    }
    for (int height=0; height < possibleHeights.length; height++) {
      if (possibleHeights[height] % 2 == 1)       writer.print("" "" + height);
    }
    writer.println();
  }
  scanner.close();
  writer.close();
  long finish=System.currentTimeMillis();
  System.out.println(""Time="" + (finish - start) + ""ms"");
}
"
30000503,"public static void main(String[] args){
  Rank r=new Rank();
  int i, T;
  T=r.sc.nextInt();
  for (i=1; i <= T; i++) {
    r.out.printf(""Case #%d: "",i);
    r.N=r.sc.nextInt();
    int allsize=(2 * r.N - 1) * r.N;
    int i1, i0, j;
    r.all=new int[allsize];
    r.missing=new int[r.N];
    for (i1=0; i1 < allsize; i1++)     r.all[i1]=r.sc.nextInt();
    i1=j=i0=0;
    Arrays.sort(r.all);
    while (true) {
      i0=i1;
      if (i0 >= allsize)       break;
      while (i1 < allsize && r.all[i0] == r.all[i1])       i1++;
      int count=i1 - i0;
      if ((count & 1) == 1)       r.missing[j++]=r.all[i0];
    }
    for (    int x : r.missing)     r.out.printf(""%d "",x);
    r.out.println();
  }
}
"
30000504,"public static void main(String[] args) throws Exception {
  br=new BufferedReader(new FileReader(""B-large.in""));
  bw=new BufferedWriter(new FileWriter(""result.txt""));
  int size=Integer.parseInt(br.readLine());
  String line="""";
  int index=0;
  while (size != 0) {
    index++;
    line=br.readLine();
    int length=Integer.parseInt(line);
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    for (int j=0; j < 2 * length - 1; j++) {
      line=br.readLine();
      String[] strs=line.split("" "");
      int[] hes=new int[strs.length];
      for (int i=0; i < hes.length; i++) {
        hes[i]=Integer.parseInt(strs[i]);
        if (map.containsKey(hes[i])) {
          map.put(hes[i],map.get(hes[i]) + 1);
        }
 else {
          map.put(hes[i],1);
        }
      }
    }
    Iterator<Integer> iterator=map.keySet().iterator();
    ArrayList<Integer> res=new ArrayList<Integer>();
    while (iterator.hasNext()) {
      int key=iterator.next();
      if (map.get(key) % 2 == 1)       res.add(key);
    }
    Collections.sort(res);
    String finalres="""";
    for (    Integer i : res) {
      finalres+=(i + "" "");
    }
    String info=""Case #"" + index + "": ""+ finalres;
    System.out.println(info);
    bw.write(info);
    bw.newLine();
    size--;
  }
  if (bw != null) {
    bw.close();
  }
  if (br != null) {
    br.close();
  }
}
"
30000505,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int cas=in.nextInt();
  for (int c=1; c <= cas; c++) {
    System.out.print(""Case #"" + c + "": "");
    int num=in.nextInt();
    int as=(num * 2) - 1;
    as*=num;
    int exp=num;
    int[] h=new int[2501];
    for (int i=0; i < as; i++) {
      h[in.nextInt()]++;
    }
    for (int i=1; i <= 2500; i++) {
      if (h[i] % 2 == 1) {
        if (exp == 1) {
          System.out.println(i);
        }
 else {
          System.out.print(i + "" "");
          exp--;
        }
      }
    }
  }
}
"
30000506,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int io=in.nextInt();
  for (int pq=1; pq <= io; pq++) {
    int tot=in.nextInt();
    int ar[][]=new int[(2 * tot) - 1][tot];
    int odd[]=new int[tot];
    int even[]=new int[tot * tot];
    int evennum=0, oddnum=0;
    for (int p=0; p < (2 * tot) - 1; p++) {
      for (int q=0; q < tot; q++)       ar[p][q]=in.nextInt();
    }
    for (int p=0; p < (2 * tot) - 1; p++) {
      AB:       for (int q=0; q < tot; q++) {
        for (int k=0; k < evennum; k++) {
          if (ar[p][q] == even[k])           continue AB;
        }
        for (int k=0; k < oddnum; k++) {
          if (ar[p][q] == odd[k])           continue AB;
        }
        int total=0;
        for (int m=0; m < (2 * tot) - 1; m++) {
          for (int n=0; n < tot; n++) {
            if (ar[p][q] == ar[m][n])             total++;
          }
        }
        if (total % 2 == 0) {
          even[evennum]=ar[p][q];
          evennum++;
        }
 else {
          odd[oddnum]=ar[p][q];
          oddnum++;
        }
      }
    }
    Arrays.sort(odd);
    System.out.print(""Case #"" + pq + "": "");
    for (int o=0; o < odd.length; o++) {
      System.out.print(odd[o] + "" "");
    }
    System.out.println();
  }
}
"
30000507,"public static void main(String[] args){
  Scanner stdin=new Scanner(System.in);
  int numCases=stdin.nextInt();
  for (int loop=1; loop <= numCases; loop++) {
    int[] freq=new int[2501];
    int n=stdin.nextInt();
    for (int i=0; i < n * (2 * n - 1); i++)     freq[stdin.nextInt()]++;
    System.out.print(""Case #"" + loop + "":"");
    for (int i=1; i < 2500; i++)     if (freq[i] % 2 == 1)     System.out.print("" "" + i);
    System.out.println();
  }
}
"
30000508,"public static void main(String[] args){
  boolean printToFile=true;
  try {
    if (printToFile) {
      System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(""out.txt"")),true));
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  new B();
}
"
30000509,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t, n, i, j;
  t=sc.nextInt();
  for (i=1; i <= t; i++) {
    n=sc.nextInt();
    int[] arr=new int[(2 * n - 1) * n];
    for (j=0; j < arr.length; j++)     arr[j]=sc.nextInt();
    int[] distinct=new int[arr.length];
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    int p=0;
    for (j=0; j < arr.length; j++) {
      if (!map.containsKey(arr[j])) {
        distinct[p++]=arr[j];
        map.put(arr[j],1);
      }
 else       map.put(arr[j],map.get(arr[j]) + 1);
    }
    int cnt=0;
    int[] missing=new int[n];
    for (j=0; j < p; j++)     if (map.get(distinct[j]) % 2 != 0)     missing[cnt++]=distinct[j];
    Arrays.sort(missing);
    System.out.print(""Case #"" + i + "":"");
    for (j=0; j < n; j++)     System.out.print("" "" + missing[j]);
    System.out.println();
  }
}
"
30000510,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int count=in.nextInt();
  for (int l=0; l < count; l++) {
    int n=in.nextInt();
    int[] array=new int[2501];
    for (int i=0; i < 2501; i++) {
      array[i]=0;
    }
    for (int j=0; j < ((2 * n * n) - n); j++) {
      int next=in.nextInt();
      array[next]=array[next] + 1;
    }
    System.out.print(""Case #"" + (l + 1) + "":"");
    for (int i=0; i < 2501; i++) {
      if (array[i] % 2 == 1)       System.out.print("" "" + i);
    }
    System.out.println();
  }
}
"
30000511,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int testCaseNum=in.nextInt();
  for (int i=1; i <= testCaseNum; i++) {
    int n=in.nextInt();
    TreeMap<Integer,Integer> note=new TreeMap<Integer,Integer>();
    for (int j=0; j < 2 * n - 1; j++) {
      for (int x=0; x < n; x++) {
        int soldier=in.nextInt();
        if (note.containsKey(soldier)) {
          note.put(soldier,note.get(soldier) + 1);
        }
 else {
          note.put(soldier,1);
        }
      }
    }
    StringBuffer ret=new StringBuffer(""Case #"");
    ret.append(i);
    ret.append("": "");
    ArrayList<Integer> missing=new ArrayList<Integer>();
    for (    Map.Entry<Integer,Integer> entry : note.entrySet()) {
      if (entry.getValue() % 2 == 1) {
        missing.add(entry.getKey());
      }
    }
    Collections.sort(missing);
    System.out.print(ret);
    for (int i1=0; i1 < missing.size(); i1++) {
      System.out.print(missing.get(i1));
      if (i1 != missing.size() - 1)       System.out.print("" "");
    }
    System.out.println("""");
  }
}
"
30000512,"public static void main(String[] args) throws FileNotFoundException {
  if (isSubmit) {
    System.setIn(new FileInputStream(""test/"" + fn + "".in""));
    System.setOut(new PrintStream(""test/"" + fn + "".out""));
  }
  Scanner in=new Scanner(System.in);
  int t0=in.nextInt();
  for (int i0=1; i0 <= t0; i0++) {
    int n=in.nextInt();
    int[] a=new int[2510];
    for (int i=0; i < n * (2 * n - 1); i++) {
      a[in.nextInt()]++;
    }
    System.out.print(""Case #"" + i0 + "":"");
    for (int i=1; i <= 2500; i++) {
      if (a[i] % 2 != 0) {
        System.out.print("" "" + i);
      }
    }
    System.out.println();
  }
  in.close();
}
"
30000513,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new File(""B-large.in""));
  PrintWriter out=new PrintWriter(new File(""fileBoutput.txt""));
  int times=Integer.parseInt(in.nextLine());
  for (int i=0; i < times; i++) {
    int size=in.nextInt();
    in.nextLine();
    Set<Integer> odds=new TreeSet<>();
    for (int j=0; j < size * 2 - 1; j++) {
      for (int k=0; k < size; k++) {
        int h=in.nextInt();
        if (odds.contains(h))         odds.remove(h);
 else         odds.add(h);
      }
    }
    Iterator<Integer> remain=odds.iterator();
    String result="""";
    while (remain.hasNext())     result+=(remain.next() + "" "");
    System.out.println(""Case #"" + (i + 1) + "": ""+ result);
    out.println(""Case #"" + (i + 1) + "": ""+ result);
  }
  in.close();
  out.close();
}
"
30000514,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int i=0; i < t; i++) {
    int N=sc.nextInt();
    int[] count=new int[2501];
    int[] arr=new int[N];
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        count[sc.nextInt()]++;
      }
    }
    int initial=-1;
    int s=0;
    for (int j=0; j < 2501; j++) {
      if (count[j] % 2 == 1) {
        arr[s++]=j;
        if (s == N) {
          break;
        }
      }
    }
    Arrays.sort(arr);
    System.out.print(""Case #"" + (i + 1) + "":"");
    for (int j=0; j < N; j++) {
      System.out.print("" "" + arr[j]);
    }
    System.out.println("""");
  }
}
"
30000515,"public static void main(String[] args){
  ArrayList<String> values=new ArrayList<String>();
  ;
  try {
    FileInputStream fis=new FileInputStream(fileName);
    BufferedReader br=new BufferedReader(new InputStreamReader(fis));
    FileWriter fw=new FileWriter(fileName + "".out"");
    BufferedWriter bw=new BufferedWriter(fw);
    int count=Integer.parseInt(br.readLine());
    for (int i=0; i < count; i++) {
      int n=Integer.parseInt(br.readLine());
      HashMap<Integer,Integer> heights=new HashMap<Integer,Integer>();
      for (int j=0; j < 2 * n - 1; j++) {
        String line=br.readLine();
        String[] hvalues=line.split("" "");
        for (int k=0; k < hvalues.length; k++) {
          int val=Integer.parseInt(hvalues[k]);
          if (heights.containsKey(val))           heights.remove(val);
 else           heights.put(val,1);
        }
      }
      ArrayList<Integer> list=new ArrayList<Integer>(heights.keySet());
      Collections.sort(list);
      bw.write(""Case #"" + (i + 1) + "": ""+ list.toString().replace(""["","""").replace(""]"","""").replace("","","""")+ ""\n"");
      bw.flush();
    }
    br.close();
    bw.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000516,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(System.in);
  int cases=Integer.parseInt(sc.nextLine());
  for (int Case=1; Case <= cases; ++Case) {
    int count=sc.nextInt();
    ArrayList<Integer> all=new ArrayList<>();
    int total=(count * 2 - 1) * count;
    for (int i=0; i < total; ++i) {
      all.add(sc.nextInt());
    }
    Collections.sort(all);
    int ind=0;
    out:     while (all.size() > count) {
      int val=all.get(ind);
      for (int i=ind + 1; i < all.size(); ++i) {
        if (all.get(i) == val) {
          all.remove(i);
          all.remove(ind);
          ind=0;
          continue out;
        }
      }
      ind++;
    }
    Collections.sort(all);
    System.out.print(""Case #"" + Case + "":"");
    for (int i=0; i < all.size(); ++i) {
      System.out.print("" "" + all.get(i));
    }
    System.out.println();
  }
}
"
30000517,"public static void main(String[] args){
  try {
    BufferedReader reader=new BufferedReader(new FileReader(LARGE_IN_FILE));
    BufferedWriter writer=new BufferedWriter(new FileWriter(LARGE_OUT_FILE));
    int cases=Integer.parseInt(reader.readLine());
    for (int caseNum=1; caseNum <= cases; caseNum++) {
      int n=Integer.parseInt(reader.readLine());
      List<Integer> counts=new ArrayList<Integer>();
      for (int i=1; i <= 2500; i++) {
        counts.add(0);
      }
      for (int i=0; i < 2 * n - 1; i++) {
        String in=reader.readLine();
        String[] split=in.split("" "");
        for (        String tmp : split) {
          Integer integer=Integer.parseInt(tmp);
          counts.set(integer - 1,counts.get(integer - 1) + 1);
        }
      }
      String missing="""";
      int counter=0;
      for (int i=0; i < counts.size(); i++) {
        if (counts.get(i) % 2 != 0) {
          missing+=(i + 1) + "" "";
          counter++;
          if (counter >= n) {
            break;
          }
        }
      }
      writer.write(""Case #"" + caseNum + "": ""+ missing.trim()+ ""\n"");
    }
    writer.flush();
    writer.close();
    reader.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000518,"/** 
 * @param args
 */
public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  ArrayList<Integer> hash=new ArrayList<Integer>();
  for (int aux=0; aux < 2501; aux++) {
    hash.add(0);
  }
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    Integer num=input.nextInt();
    for (int aux=0; aux < 2501; aux++) {
      hash.set(aux,0);
    }
    for (int i=0; i < num * 2 - 1; i++) {
      for (int j=0; j < num; j++) {
        Integer numerito=input.nextInt();
        hash.set(numerito,hash.get(numerito) + 1);
      }
    }
    ArrayList<Integer> lista=new ArrayList<Integer>();
    for (int aux=0; aux < 2501; aux++) {
      if (hash.get(aux) % 2 == 1) {
        lista.add(aux);
      }
    }
    lista.sort(null);
    System.out.printf(""Case #"" + (n + 1) + "":"");
    for (    Integer jojo : lista) {
      System.out.print("" "" + jojo);
    }
    System.out.println();
  }
}
"
30000519,"public static void main(String[] args) throws FileNotFoundException {
}
"
30000520,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""B-large (1).in""));
  PrintWriter out=new PrintWriter(new File(""hippieOutL.txt""));
  long numTests=in.nextLong();
  for (long test=0; test < numTests; test++) {
    in.nextLine();
    long testSize=in.nextLong();
    ArrayList<Integer> heights=new ArrayList<Integer>();
    for (long linenum=0; linenum < 2 * testSize - 1; linenum++) {
      in.nextLine();
      for (int col=0; col < testSize; col++) {
        Integer h=in.nextInt();
        if (heights.contains(h)) {
          heights.remove(h);
        }
 else {
          heights.add(h);
        }
      }
    }
    Collections.sort(heights);
    out.print(""Case #"" + (test + 1) + "": "");
    if (heights.size() > 0) {
      out.print(heights.get(0));
      for (int i=1; i < heights.size(); i++) {
        out.print("" "" + heights.get(i));
      }
    }
    out.println();
  }
  out.close();
  in.close();
}
"
30000521,"public static void main(String args[]) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""C:\\Users\\manas\\Downloads\\blrg.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""C:\\Users\\manas\\Documents\\google code jams\\second_large.txt""));
  int t=Integer.parseInt(br.readLine());
  int a=1;
  while (t > 0) {
    int n=Integer.parseInt(br.readLine());
    HashMap<Integer,Integer> count=new HashMap<Integer,Integer>();
    ArrayList<Integer> list=new ArrayList<Integer>();
    for (int i=0; i < 2 * n - 1; i++) {
      String[] nums=br.readLine().split("" "");
      for (      String n1 : nums) {
        int val=Integer.parseInt(n1);
        if (count.containsKey(val))         count.put(val,count.get(val) + 1);
 else         count.put(val,1);
        if (count.get(val) % 2 == 1)         list.add(val);
 else         list.remove(new Integer(val));
      }
    }
    Collections.sort(list);
    bw.write(""Case #"" + a + "": "");
    System.out.print(""Case #"" + a + "": "");
    for (    int a1 : list) {
      bw.write(a1 + "" "");
      System.out.print(a1 + "" "");
    }
    System.out.println();
    a++;
    bw.newLine();
    t--;
  }
  bw.close();
}
"
30000522,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int T=in.nextInt();
  for (int i=0; i < T; i++) {
    int N=in.nextInt();
    HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
    HashSet<Integer> numbers=new HashSet<Integer>();
    int index0=0;
    for (int j=0; j < 2 * N - 1; j++) {
      for (int k=0; k < N; k++) {
        int s=in.nextInt();
        if (hm.containsKey(s)) {
          int number=hm.get(s) + 1;
          hm.remove(s);
          hm.put(s,number);
        }
 else {
          hm.put(s,1);
          numbers.add(s);
        }
      }
    }
    int[] missing=new int[N];
    int index=0;
    for (    int num : numbers) {
      int value=hm.get(num);
      if (value % 2 == 1) {
        missing[index]=num;
        index+=1;
      }
    }
    java.util.Arrays.sort(missing);
    String out="""";
    for (    int missed : missing) {
      out=out + missed + "" "";
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ out);
  }
  in.close();
}
"
30000523,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(new File(""B-small-attempt0.in"")))));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    for (int j=1; j <= n * (2 * n - 1); j++) {
      int num=in.nextInt();
      int value=1;
      if (map.containsKey(num)) {
        value+=map.get(num);
      }
      map.put(num,value);
    }
    int[] result=new int[n];
    int k=0;
    for (    int key : map.keySet()) {
      int count=map.get(key);
      if (count % 2 != 0) {
        result[k]=key;
        k++;
      }
    }
    Arrays.sort(result);
    try {
      String path=""1.txt"";
      File file=new File(path);
      if (!file.exists())       file.createNewFile();
      FileOutputStream out=new FileOutputStream(file,true);
      out.write((""Case #"" + i + "":"").getBytes(""utf-8""));
      out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    for (    int r : result) {
      try {
        String path=""1.txt"";
        File file=new File(path);
        if (!file.exists())         file.createNewFile();
        FileOutputStream out=new FileOutputStream(file,true);
        out.write(("" "" + r).getBytes(""utf-8""));
        out.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    try {
      String path=""1.txt"";
      File file=new File(path);
      if (!file.exists())       file.createNewFile();
      FileOutputStream out=new FileOutputStream(file,true);
      out.write(""\n"".getBytes(""utf-8""));
      out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
"
30000524,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int loops=in.nextInt();
  for (int loop=1; loop <= loops; ++loop) {
    int n=in.nextInt();
    TreeMap<Integer,Integer> map=new TreeMap<Integer,Integer>();
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int temp=in.nextInt();
        if (!map.containsKey(temp))         map.put(temp,0);
        int value=map.get(temp);
        map.put(temp,value + 1);
      }
    }
    TreeSet<Integer> set=new TreeSet<Integer>();
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      if (entry.getValue() % 2 == 1)       set.add(entry.getKey());
    }
    StringBuilder builder=new StringBuilder();
    for (    int value : set) {
      builder.append("" "" + value);
    }
    String out=String.format(""Case #%1$s:%2$s"",loop,builder.toString());
    System.out.println(out);
  }
  in.close();
}
"
30000525,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  for (int i=0; i < t; i++) {
    int n=s.nextInt();
    int a[]=new int[3000];
    for (int j=0; j < 3000; j++) {
      a[j]=0;
    }
    for (int j=0; j < n * ((2 * n) - 1); j++) {
      int x=s.nextInt();
      a[x]++;
    }
    int y[]=new int[n];
    int count=0;
    for (int j=0; j < 3000; j++) {
      if (a[j] % 2 == 1) {
        y[count]=j;
        count++;
      }
    }
    Arrays.sort(y);
    System.out.print(""Case #"" + (i + 1) + "": "");
    for (int j=0; j < n; j++) {
      System.out.print(y[j] + "" "");
    }
    System.out.println();
  }
}
"
30000526,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int nt=in.nextInt();
  for (int t=1; t <= nt; t++) {
    int n=in.nextInt();
    int[] c=new int[2500];
    for (int i=0; i < (2 * n - 1) * n; i++)     c[in.nextInt() - 1]++;
    System.out.print(""Case #"" + t + "":"");
    int j=0;
    for (int i=0; i < c.length; i++)     if (c[i] % 2 != 0) {
      System.out.print("" "" + (i + 1));
      j++;
    }
    System.out.println();
    if (j != n)     throw new AssertionError();
  }
}
"
30000527,"public static void main(String[] args) throws IOException {
  sc=new Scanner(new File(""infile.txt""));
  ps=new PrintStream(new FileOutputStream(new File(""outfile.txt"")));
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    ps.format(""Case #%d:"",t);
    int n=sc.nextInt();
    int n2=(2 * n - 1) * n;
    Map<Integer,Integer> count=new TreeMap<>();
    for (int i=0; i < n2; i++) {
      int j=sc.nextInt();
      if (!count.containsKey(j))       count.put(j,0);
      count.put(j,count.get(j) + 1);
    }
    List<Integer> ans=new ArrayList<>();
    for (    Integer i : count.keySet()) {
      if (count.get(i) % 2 == 1)       ans.add(i);
    }
    for (    Integer i : ans)     ps.print("" "" + i);
    ps.println();
  }
}
"
30000528,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    HashMap<Integer,Integer> seen=new HashMap<Integer,Integer>();
    for (int j=0; j < 2 * n - 1; j++) {
      for (int k=0; k < n; k++) {
        int m=in.nextInt();
        if (seen.get(m) == null) {
          seen.put(m,1);
        }
 else {
          seen.put(m,seen.get(m) + 1);
        }
      }
    }
    PriorityQueue<Integer> q=new PriorityQueue<Integer>();
    Set<Integer> entrySet=seen.keySet();
    for (    Integer key : entrySet) {
      if (seen.get(key) % 2 == 1) {
        q.add(key);
      }
    }
    String res="""";
    while (q.size() > 0) {
      res+=q.poll() + "" "";
    }
    System.out.println(""Case #"" + i + "": ""+ res);
  }
}
"
30000529,"public static void main(String[] args) throws IOException {
  final Scanner sc=new Scanner(new FileReader(""Bin.in""));
  final BufferedWriter w=new BufferedWriter(new FileWriter(""Bout.txt""));
  if (sc.hasNext()) {
    final int testNumber=sc.nextInt();
    for (int test=1; test <= testNumber; test++) {
      int N=sc.nextInt();
      String answer="""";
      HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
      for (int j=0; j < ((N * N * 2) - N); j++) {
        Integer num=sc.nextInt();
        if (!map.containsKey(num)) {
          map.put(num,1);
        }
 else {
          map.replace(num,map.get(num) + 1);
        }
      }
      ArrayList<Integer> al=new ArrayList<Integer>();
      for (      Map.Entry<Integer,Integer> entry : map.entrySet()) {
        if ((entry.getValue() % 2) == 1) {
          al.add(entry.getKey());
        }
      }
      int temp;
      for (int i=1; i < al.size(); i++) {
        for (int j=i; j > 0; j--) {
          if (al.get(j - 1) > al.get(j)) {
            temp=al.get(j - 1);
            al.set(j - 1,al.get(j));
            al.set(j,temp);
          }
        }
      }
      for (      int num : al) {
        answer+=num + "" "";
      }
      w.write(""Case #"" + test + "": ""+ answer+ ""\n"");
      System.out.println(""Case #"" + test + "": ""+ answer);
    }
  }
  sc.close();
  w.flush();
  w.close();
}
"
30000530,"public static void main(String[] args){
  Scanner scanIn=new Scanner(System.in);
  int T=scanIn.nextInt();
  for (int i=0; i < T; ++i) {
    Jam2016_1AB inst=new Jam2016_1AB();
    int n=scanIn.nextInt();
    int N=2 * n - 1;
    int[][] d=new int[N][n];
    for (int j=0; j < N; ++j) {
      for (int k=0; k < n; ++k) {
        d[j][k]=scanIn.nextInt();
      }
    }
    int n1=d[0].length;
    int[] h=new int[2501];
    for (int i1=0; i1 < d.length; ++i1) {
      for (int j1=0; j1 < n1; ++j1) {
        h[d[i1][j1]]++;
      }
    }
    int idx=0;
    int[] ret1=new int[n1];
    for (int i2=0; i2 < 2501; ++i2) {
      int dd=h[i2];
      if (dd % 2 != 0)       ret1[idx++]=i2;
    }
    int[] ret=ret1;
    System.out.print(""Case #"" + (i + 1) + "":"");
    for (    int j : ret)     System.out.print("" "" + j);
    System.out.println();
  }
  scanIn.close();
}
"
30000531,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int nocase=sc.nextInt();
  sc.nextLine();
  for (int ind=1; ind <= nocase; ind++) {
    int N=sc.nextInt();
    HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
    for (int r=0; r < 2 * N - 1; r++)     for (int c=0; c < N; c++) {
      int n=sc.nextInt();
      int count=0;
      if (hm.containsKey(n))       count=hm.get(n);
      hm.put(n,count + 1);
    }
    Set<Integer> ks=hm.keySet();
    ArrayList<Integer> L=new ArrayList<Integer>();
    for (    Integer n : ks) {
      int count=hm.get(n);
      if (count % 2 != 0)       L.add(n);
    }
    Collections.sort(L);
    StringBuffer sb=new StringBuffer();
    for (    Integer n : L) {
      sb.append(n);
      sb.append(' ');
    }
    String soln=sb.toString();
    System.out.printf(""Case #%d: %s\n"",ind,soln);
  }
}
"
30000532,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(""src/sample.in""))));
  int t, n, i, j, k;
  t=sc.nextInt();
  for (i=1; i <= t; i++) {
    if (i != 1)     System.out.println();
    System.out.print(""Case #"" + i + "": "");
    n=sc.nextInt();
    int[] g=new int[2510];
    Arrays.fill(g,0);
    int tot=2 * n * n - n;
    int tmp;
    for (j=0; j < tot; j++) {
      tmp=sc.nextInt();
      g[tmp]++;
    }
    for (j=0; j <= 2500; j++)     if (g[j] % 2 == 1)     System.out.print("" "" + j);
  }
}
"
30000533,"public static void main(String[] args) throws IOException {
  FileInputStream in=null;
  in=new FileInputStream(""input.in"");
  DataInputStream input=new DataInputStream(in);
  BufferedReader br=new BufferedReader(new InputStreamReader(in));
  String line="""";
  line=br.readLine();
  int numberOfCases=Integer.parseInt(line);
  FileOutputStream out=null;
  out=new FileOutputStream(""out.txt"");
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(out));
  for (int i=0; i < numberOfCases; i++) {
    int n=Integer.parseInt(br.readLine());
    int[] heights=new int[2501];
    for (int j=0; j < 2 * (n) - 1; j++) {
      line=br.readLine();
      String[] intsString=line.split("" "");
      for (int k=0; k < intsString.length; k++) {
        heights[Integer.parseInt(intsString[k])]+=1;
      }
    }
    String answer="""";
    for (int j=0; j < 2501; j++) {
      if (heights[j] % 2 != 0) {
        answer+=j + "" "";
      }
    }
    bw.write(""Case #"" + (i + 1) + "": ""+ answer+ ""\n"");
  }
  br.close();
  bw.close();
}
"
30000534,"public static void main(String[] args) throws java.lang.Exception {
  int a=4, b=0;
  try {
    int c=a / b;
  }
 catch (  Exception e) {
    System.out.println(""A"");
  }
 finally {
    System.out.println(""B"");
  }
}
"
30000535,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numCases=sc.nextInt();
  for (int caseNum=1; caseNum <= numCases; caseNum++) {
    int N=sc.nextInt();
    Map<Integer,Integer> counts=new HashMap<>();
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        int height=sc.nextInt();
        if (counts.containsKey(height)) {
          counts.put(height,counts.get(height) + 1);
        }
 else {
          counts.put(height,1);
        }
      }
    }
    List<Integer> heights=new ArrayList<>();
    for (    Map.Entry<Integer,Integer> entry : counts.entrySet()) {
      if (entry.getValue() % 2 != 0) {
        heights.add(entry.getKey());
      }
    }
    Collections.sort(heights);
    System.out.print(""Case #"" + caseNum + "":"");
    for (    int h : heights) {
      System.out.print("" "" + h);
    }
    System.out.println();
  }
}
"
30000536,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int tests=sc.nextInt();
  int maxHeight=2500;
  for (int testNum=1; testNum <= tests; testNum++) {
    int n=sc.nextInt();
    int[] heightCounts=new int[maxHeight + 1];
    for (int i=0; i < 2 * n - 1; i++) {
      for (int j=0; j < n; j++) {
        int nextHeight=sc.nextInt();
        heightCounts[nextHeight]++;
      }
    }
    System.out.print(""Case #"" + testNum + "": "");
    for (int i=0; i <= maxHeight; i++) {
      if (heightCounts[i] % 2 == 1) {
        System.out.print(i + "" "");
      }
    }
    System.out.println();
  }
  sc.close();
}
"
30000537,"public static void main(String[] args) throws Exception {
  QuestionTwo questionTwo=new QuestionTwo();
  String fileName=""B-large"";
  String inputFile=""codeJam/2016/round_one/question_two/"" + fileName + "".in"";
  String outputFIle=""/Users/sdu/Dropbox/workspace/eclipse/JavaPractice/src/main/java/com/sdu/practice/codeJam/round_one/q2_"" + fileName + "".out"";
  ClassLoader classLoader=questionTwo.getClass().getClassLoader();
  File file=new File(classLoader.getResource(inputFile).getFile());
  try (Scanner scanner=new Scanner(file)){
    String line=scanner.nextLine();
    int t=Integer.parseInt(line.trim());
    int caseT=0;
    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFIle),""utf-8""));
    while (++caseT <= t) {
      int[] array=new int[2501];
      ArrayList<Integer> result=new ArrayList<>();
      String rStr="""";
      line=scanner.nextLine();
      int n=Integer.parseInt(line.trim());
      int r=0;
      while (++r < 2 * n) {
        line=scanner.nextLine();
        String[] chars=line.trim().split("" "");
        for (int j=0; j < n; j++) {
          array[Integer.valueOf(chars[j])]++;
        }
      }
      for (int j=0; j < 2500; j++) {
        if (array[j] % 2 != 0) {
          result.add(j);
        }
      }
      for (int j=0; j < result.size(); j++) {
        rStr=rStr + result.get(j) + "" "";
      }
      rStr=rStr.trim();
      writer.write(""Case #"" + caseT + "": ""+ rStr);
      writer.newLine();
    }
    scanner.close();
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000538,"public static void main(String[] args) throws IOException {
  BufferedReader bf=new BufferedReader(new FileReader(""/Users/yonggoo/Desktop/B-large.in""));
  FileWriter fw=new FileWriter(""/Users/yonggoo/Desktop/1a_2_l.txt"",true);
  int T=Integer.parseInt(bf.readLine());
  for (int i=1; i <= T; i++) {
    int N=Integer.parseInt(bf.readLine());
    List<Integer> result=new ArrayList<Integer>();
    for (int k=1; k <= 2 * N - 1; k++)     for (    String val : bf.readLine().split("" ""))     result.add(Integer.parseInt(val));
    Set<Integer> unqResult=new HashSet<Integer>(result);
    String result_str="""";
    for (    Integer v : unqResult)     if (Collections.frequency(result,v) % 2 == 1)     result_str+="" "" + v;
    result_str=result_str.substring(1);
    String[] temp=result_str.split("" "");
    int[] real=new int[temp.length];
    for (int iii=0; iii < temp.length; iii++)     real[iii]=Integer.parseInt(temp[iii]);
    Arrays.sort(real);
    String result_go="""";
    for (    int val : real) {
      result_go+="" "" + val;
    }
    fw.write(""Case #"" + i + "":"");
    fw.write(result_go);
    fw.write(""\n"");
  }
  fw.flush();
}
"
30000539,"public static void main(String[] arguments) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(new File(""C:\\Java\\A-small-attempt0.in"")));
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(""C:\\Java\\A-large.out"")));
  BufferedWriter bw2=new BufferedWriter(new FileWriter(new File(""C:\\Java\\PractiseData2.out"")));
  int T=java.lang.Integer.parseInt(br.readLine());
  String[] Line;
  int[] Arr=new int[2501];
  for (int t=0; t < T; ++t) {
    for (int j=0; j < 2501; j++) {
      Arr[j]=0;
    }
    int N=java.lang.Integer.parseInt(br.readLine());
    for (int n=0; n < (N * 2 - 1); ++n) {
      Line=br.readLine().split("" "");
      for (int i=0; i < N; i++) {
        Arr[java.lang.Integer.parseInt(Line[i])]++;
      }
    }
    bw.write(""Case #"" + (t + 1) + "": "");
    int count=1;
    for (int k=0; k < 2501; k++) {
      if (Arr[k] > 0)       bw2.write("""" + k + ""=""+ Arr[k]+ "" "");
      if (Arr[k] > 0) {
        if (Arr[k] % 2 != 0) {
          if (count == N)           bw.write("""" + (k));
 else           bw.write("""" + (k) + "" "");
          count++;
        }
      }
    }
    bw.newLine();
  }
  bw.close();
  bw2.close();
}
"
30000540,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scan=new Scanner(new File(""src/Input.txt""));
  int T=Integer.parseInt(scan.nextLine());
  for (int i=1; i <= T; i++) {
    int N=Integer.parseInt(scan.nextLine());
    List<String> list=new ArrayList<String>();
    for (int j=0; j < (2 * N - 1); j++) {
      String line=scan.nextLine();
      StringTokenizer str=new StringTokenizer(line);
      while (str.hasMoreTokens()) {
        String check=str.nextToken();
        if (list.contains(check)) {
          list.remove(check);
        }
 else {
          list.add(check);
        }
      }
    }
    int array[]=new int[N];
    int j=0;
    for (    String l : list) {
      array[j]=Integer.parseInt(l);
      j++;
    }
    Arrays.sort(array);
    String ans=""Case #"" + i + "":"";
    for (    int l : array) {
      ans=ans + "" "" + l;
    }
    System.out.println(ans);
  }
}
"
30000541,"public static void main(String[] args){
  try (BufferedReader br=new BufferedReader(new FileReader(""./input.txt""))){
    String line;
    int cases=Integer.parseInt(br.readLine());
    int i=0;
    while ((line=br.readLine()) != null && i < cases) {
      int N=Integer.parseInt(line);
      int count=2 * N - 1;
      ArrayList<String> list=new ArrayList<String>();
      for (int j=0; j < count; j++) {
        list.add(br.readLine());
      }
      int caseNumber=i + 1;
      if (caseNumber != 1)       builder.append(System.getProperty(""line.separator""));
      builder.append(""Case #"" + caseNumber + "": "");
      HashMap<Integer,Integer> counts=new HashMap<Integer,Integer>();
      for (int i1=0; i1 < list.size(); i1++) {
        String[] characters=list.get(i1).split("" "");
        for (        String str : characters) {
          Integer val=Integer.parseInt(str);
          if (counts.containsKey(val)) {
            counts.put(val,counts.get(val) + 1);
          }
 else {
            counts.put(val,1);
          }
        }
      }
      ArrayList<Integer> odds=new ArrayList<Integer>();
      for (      Map.Entry<Integer,Integer> set : counts.entrySet()) {
        if (set.getValue() % 2 != 0) {
          odds.add(set.getKey());
        }
      }
      Collections.sort(odds);
      StringBuilder aa=new StringBuilder();
      for (      Integer str : odds) {
        aa.append(str + "" "");
      }
      builder.append(aa.toString().trim());
      i++;
    }
    try {
      File file=new File(""./output.txt"");
      FileWriter fileWriter=new FileWriter(file);
      fileWriter.write(builder.toString());
      fileWriter.flush();
      fileWriter.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000542,"public static void main(String[] args){
  Scanner scnr=new Scanner(System.in);
  int t=scnr.nextInt();
  String ans[]=new String[t];
  scnr.nextLine();
  for (int i=0; i < t; i++) {
    HashMap<Integer,Boolean> data=new HashMap<>();
    int n=scnr.nextInt();
    Integer j=0;
    Integer constant=2 * n * n - n;
    while (j < constant) {
      Integer in=scnr.nextInt();
      if (data.containsKey(in)) {
        data.remove(in);
      }
 else {
        data.putIfAbsent(in,false);
      }
      j++;
    }
    StringBuilder reqString=new StringBuilder();
    for (j=1; j <= 2500; j++) {
      if (data.containsKey(j)) {
        reqString.append(j);
        reqString.append("" "");
      }
    }
    ans[i]=reqString.toString();
  }
  for (int i=0; i < t; i++) {
    System.out.println(""Case #"" + (i + 1) + "": ""+ ans[i]);
  }
}
"
30000543,"public static void main(String[] arg) throws IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  StringBuffer sb=new StringBuffer();
  T=Integer.parseInt(br.readLine());
  for (int t=1; t <= T; t++) {
    sb.append(""Case #"" + t + "":"");
    N=Integer.parseInt(br.readLine());
    M=2 * N - 1;
    input=new int[M][N];
    int[] height=new int[2501];
    for (int i=0; i < M; i++) {
      StringTokenizer st=new StringTokenizer(br.readLine());
      for (int j=0; j < N; j++) {
        input[i][j]=Integer.parseInt(st.nextToken());
        height[input[i][j]]+=1;
      }
    }
    for (int i=0; i <= 2500; i++) {
      if (height[i] % 2 == 1) {
        sb.append("" "").append(i);
      }
    }
    sb.append(""\n"");
  }
  System.out.println(sb);
}
"
30000544,"public static void main(String[] args) throws Exception {
}
"
30000545,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int C=in.nextInt();
  for (int thisCase=1; thisCase <= C; thisCase++) {
    int counts[]=new int[2500];
    int N=in.nextInt();
    for (int i=0; i < 2 * N - 1; i++) {
      for (int j=0; j < N; j++) {
        counts[in.nextInt() - 1]++;
      }
    }
    System.out.printf(""Case #%d:"",thisCase);
    for (int i=0; i < 2500; i++) {
      if (counts[i] % 2 == 1) {
        System.out.printf("" %d"",(i + 1));
      }
    }
    System.out.println();
  }
}
"
30000546,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int T=scanner.nextInt();
  for (int t=1; t <= T; t++) {
    int N=scanner.nextInt();
    HashMap<Integer,Integer> count=new HashMap<Integer,Integer>();
    for (int row=0; row < N * 2 - 1; row++) {
      for (int col=0; col < N; col++) {
        int height=scanner.nextInt();
        if (count.containsKey(height)) {
          count.put(height,count.get(height) + 1);
        }
 else {
          count.put(height,1);
        }
      }
    }
    ArrayList<Integer> miss=new ArrayList<Integer>(N);
    for (    Integer key : count.keySet()) {
      if (count.get(key) % 2 == 1) {
        miss.add(key);
      }
    }
    Collections.sort(miss);
    System.out.printf(""Case #%d:"",t);
    for (    Integer height : miss) {
      System.out.print("" "" + height);
    }
    System.out.print(""\n"");
  }
}
"
30000547,"public static void main(String[] args) throws IOException {
  Scanner scan=new Scanner(System.in);
  int cases=scan.nextInt();
  for (int round=1; round <= cases; round++) {
    int n=scan.nextInt();
    int[] arr=new int[2501];
    Arrays.fill(arr,0);
    for (int i=0; i < n * (2 * n - 1); i++) {
      arr[scan.nextInt()]++;
    }
    ArrayList<Integer> list=new ArrayList<Integer>();
    for (int i=0; i < arr.length; i++) {
      if (arr[i] % 2 == 1)       list.add(i);
    }
    Collections.sort(list);
    System.out.printf(""Case #"" + round + "":"");
    for (    Integer i : list) {
      System.out.printf("" %d"",i);
    }
    System.out.println();
  }
}
"
30000548,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""in.txt""));
  PrintWriter pw=new PrintWriter(new FileWriter(""out.txt""));
  int N=Integer.parseInt(br.readLine());
  for (int p=0; p < N; p++) {
    int n=Integer.parseInt(br.readLine());
    Set<Integer> set=new HashSet<Integer>();
    for (int i=0; i < 2 * n - 1; i++) {
      String[] s=br.readLine().split("" "");
      for (int j=0; j < n; j++) {
        int v=Integer.parseInt(s[j]);
        if (set.contains(v)) {
          set.remove(v);
        }
 else {
          set.add(v);
        }
      }
    }
    int[] ret=new int[n];
    int at=0;
    for (    int vv : set) {
      ret[at]=vv;
      at++;
    }
    Arrays.sort(ret);
    pw.print(""Case #"" + (p + 1) + "":"");
    for (int i=0; i < n; i++)     pw.print("" "" + ret[i]);
    pw.println();
  }
  pw.flush();
  pw.close();
}
"
30000549,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new File(args[0]));
    BufferedWriter bw=new BufferedWriter(new FileWriter(new File(""A-output.txt""),false));
    int T=in.nextInt();
    for (int i=0; i < T; i++) {
      int totNum=in.nextInt();
      int[] musStates=new int[totNum];
      int methodA=0;
      int methodB=0;
      int maxDiff=0;
      musStates[0]=in.nextInt();
      for (int j=1; j < totNum; j++) {
        musStates[j]=in.nextInt();
        int di=musStates[j] - musStates[j - 1];
        if (di < 0) {
          di=Math.abs(di);
          methodA+=di;
          if (maxDiff < di) {
            maxDiff=di;
          }
        }
      }
      for (int j=0; j < totNum - 1; j++) {
        if (musStates[j] < maxDiff) {
          methodB+=musStates[j];
        }
 else {
          methodB+=maxDiff;
        }
      }
      System.out.println(""Case #"" + (i + 1) + "": ""+ methodA+ "" ""+ methodB);
      bw.write(""Case #"" + (i + 1) + "": ""+ methodA+ "" ""+ methodB);
      bw.newLine();
    }
    if (in != null)     in.close();
    if (bw != null)     bw.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
"
30000550,"public static void main(String[] args) throws FileNotFoundException, IOException {
  Scanner sc=new Scanner(new File(""A-large.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(""out.txt"")));
  int T=sc.nextInt();
  for (int i=0; i < T; i++) {
    int N=sc.nextInt();
    int arr[]=new int[N];
    int met1=0;
    float maxdif=0;
    for (int j=0; j < N; j++) {
      int n=sc.nextInt();
      arr[j]=n;
      if (j != 0 && arr[j] < arr[j - 1]) {
        met1+=arr[j - 1] - arr[j];
        if (arr[j - 1] - arr[j] > maxdif) {
          maxdif=arr[j - 1] - arr[j];
        }
      }
    }
    maxdif=maxdif / 10.0f;
    int met2=0;
    if (maxdif != 0) {
      for (int j=0; j < arr.length - 1; j++) {
        if (arr[j] < (maxdif * 10)) {
          met2+=arr[j];
        }
 else {
          met2+=maxdif * 10;
        }
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ met1+ "" ""+ met2);
    bw.write(""Case #"" + (i + 1) + "": ""+ met1+ "" ""+ met2);
    bw.newLine();
  }
  bw.close();
}
"
30000551,"public static void main(String[] args){
  try {
    File fin=new File(""A-large.in"");
    Scanner sc=new Scanner(fin);
    File fout=new File(""aout.txt"");
    PrintWriter pw=new PrintWriter(fout);
    int T=sc.nextInt();
    for (int cn=1; cn <= T; cn++) {
      int N=sc.nextInt();
      int[] m=new int[N];
      for (int i=0; i < N; i++) {
        m[i]=sc.nextInt();
      }
      A a=new A();
      int[] res1=new int[2];
      int last=0;
      int rate=0;
      for (      int y : m) {
        int dec=Math.max(0,last - y);
        res1[0]+=dec;
        rate=Math.max(rate,dec);
        last=y;
      }
      for (int i=0; i + 1 < m.length; i++) {
        res1[1]+=Math.min(m[i],rate);
      }
      int[] res=res1;
      pw.write(""Case #"" + cn + "": ""+ res[0]+ "" ""+ res[1]+ ""\n"");
    }
    pw.flush();
    pw.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000552,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
  int T=Integer.parseInt(in.readLine());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(in.readLine());
    String[] data=in.readLine().split("" "");
    int[] M1=new int[N];
    for (int i=0; i < N; i++)     M1[i]=Integer.parseInt(data[i]);
    int[] M=M1;
    int m=0;
    for (int i=1; i < M.length; i++)     if (M[i] < M[i - 1])     m+=M[i - 1] - M[i];
    int y=m;
    int m1=0;
    double rate=0;
    for (int i=1; i < M.length; i++) {
      int diff=M[i - 1] - M[i];
      if (diff > 0) {
        double r=diff / 10.0;
        if (r > rate)         rate=r;
      }
    }
    for (int i=1; i < M.length; i++)     m1+=Math.min(rate * 10,M[i - 1]);
    int z=m1;
    out.println(""Case #"" + t + "": ""+ y+ "" ""+ z);
  }
  out.close();
}
"
30000553,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""b.in""));
  int cases=in.nextInt();
  for (int caseNo=1; caseNo <= cases; caseNo++) {
    int size=in.nextInt();
    int[] pieces=new int[size];
    for (int i=0; i < size; i++) {
      pieces[i]=in.nextInt();
    }
    int count=0;
    int base=pieces[0];
    for (int i=1; i < pieces.length; i++) {
      int curr=pieces[i];
      if (curr < base)       count+=(base - curr);
      base=curr;
    }
    int res1=count;
    int max=0;
    int base1=pieces[0];
    for (int i=1; i < pieces.length; i++) {
      int curr=pieces[i];
      if (curr < base1) {
        int diff=(base1 - curr);
        if (diff > max)         max=diff;
      }
      base1=curr;
    }
    int rate=max / 10;
    int count1=0;
    base1=pieces[0];
    int eaten=max;
    for (int i=0; i < pieces.length - 1; i++) {
      int curr=pieces[i];
      if (curr < eaten)       count1+=curr;
 else       count1+=max;
      base1=curr;
    }
    int res2=count1;
    System.out.println(""Case #"" + caseNo + "": ""+ res1+ "" ""+ res2);
  }
}
"
30000554,"public static void main(String[] args) throws NumberFormatException, IOException {
  writer=new PrintWriter(""output"");
  Scanner sc=new Scanner(new File(""input""));
  int nbTest=sc.nextInt();
  for (int i=1; i <= nbTest; i++) {
    int N=sc.nextInt();
    int[] m=new int[N];
    int res1=0, res2=0;
    int biggestDif=0;
    int last=sc.nextInt();
    m[0]=last;
    for (int j=1; j < N; j++) {
      m[j]=sc.nextInt();
      int diff=last - m[j];
      if (diff > 0) {
        res1+=diff;
      }
      if (diff > biggestDif) {
        biggestDif=diff;
      }
      last=m[j];
    }
    for (int j=0; j < N - 1; j++) {
      res2+=Math.min(biggestDif,m[j]);
    }
    SolverMush.writer.println(""Case #"" + i + "": ""+ res1+ "" ""+ res2);
  }
  writer.flush();
}
"
30000555,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int num=in.nextInt();
  in.nextLine();
  for (int i=0; i < num; ++i) {
    int currNum=in.nextInt();
    in.nextLine();
    int[] arr=new int[currNum];
    for (int j=0; j < currNum; ++j)     arr[j]=in.nextInt();
    int first=0;
    for (int j=1; j < currNum; ++j) {
      if (arr[j - 1] > arr[j])       first+=arr[j - 1] - arr[j];
    }
    int second=0;
    int speed=0;
    for (int j=0; j < currNum - 1; ++j)     speed=Math.max(speed,arr[j] - arr[j + 1]);
    for (int j=0; j < currNum - 1; ++j) {
      if (arr[j] <= speed)       second+=arr[j];
 else       second+=speed;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ first+ "" ""+ second);
    in.nextLine();
  }
  in.close();
}
"
30000556,"public static void main(String[] args) throws FileNotFoundException {
  Scanner cin=new Scanner(new File(""A-large.in""));
  PrintStream cout=new PrintStream(""A-large.out"");
  int _case=0;
  for (int T=cin.nextInt(); T > 0; T--) {
    _case++;
    n=cin.nextInt();
    a=new int[n];
    for (int i=0; i < n; i++)     a[i]=cin.nextInt();
    int one=0;
    int two=0;
    int maxGap=0;
    for (int i=1; i < n; i++)     if (a[i] < a[i - 1]) {
      one+=a[i - 1] - a[i];
      maxGap=Math.max(maxGap,a[i - 1] - a[i]);
    }
    for (int i=1; i < n; i++)     two+=Math.min(a[i - 1],maxGap);
    cout.printf(""Case #%d: %d %d%n"",_case,one,two);
  }
  cin.close();
  cout.close();
}
"
30000557,"public static void main(String args[]) throws Exception {
  second a=new second();
  File file=new File(""/Users/apple/Desktop/A-large.in"");
  BufferedReader reader=new BufferedReader(new FileReader(file));
  String temp1=null;
  int line=0;
  while ((temp1=reader.readLine()) != null) {
    if (line == 0) {
      a.num=Integer.valueOf(temp1);
    }
 else {
      if (line % 2 == 1) {
        line++;
        continue;
      }
      String[] now1=temp1.split("" "");
      ArrayList<Integer> cur1=new ArrayList<Integer>();
      for (int i1=0; i1 < now1.length; i1++) {
        cur1.add(Integer.valueOf(now1[i1]));
      }
      a.content.add(cur1);
    }
    line++;
  }
  reader.close();
  for (int i=0; i < a.num; i++) {
    ArrayList<Integer> now=a.content.get(i);
    if (now.size() == 0) {
      System.out.println(""in"");
      int[] cur=new int[2];
      a.result.add(cur);
      continue;
    }
    int sum1=0;
    int sum2=0;
    int max=0;
    for (int j=0; j < now.size() - 1; j++) {
      if (now.get(j) > now.get(j + 1)) {
        max=Math.max(max,now.get(j) - now.get(j + 1));
        sum1=sum1 + now.get(j) - now.get(j + 1);
      }
    }
    for (int j=0; j < now.size() - 1; j++) {
      sum2=sum2 + Math.min(max,now.get(j));
    }
    int[] temp=new int[2];
    temp[0]=sum1;
    temp[1]=sum2;
    a.result.add(temp);
  }
  FileWriter writer=new FileWriter(""/Users/apple/Desktop/output.txt"");
  for (int i=0; i < a.result.size(); i++) {
    int j=i + 1;
    writer.write(""case #"" + j + "": ""+ a.result.get(i)[0]+ "" ""+ a.result.get(i)[1]+ ""\n"");
  }
  writer.close();
}
"
30000558,"public static void main(String[] args){
  try {
    input=new Scanner(new File(""data/"" + ID + "".in""));
    output=new PrintWriter(new FileWriter(""data/"" + ID + "".out""));
    long time=System.currentTimeMillis();
    int T=input.nextInt();
    for (int t=1; t <= T; t++) {
      int min1=0, min2=0, largestDiff=0;
      int N=input.nextInt();
      int[] m=new int[N];
      for (int i=0; i < N; i++) {
        m[i]=input.nextInt();
        if (i > 0) {
          int diff=m[i - 1] - m[i];
          if (diff > 0) {
            min1+=diff;
            if (diff > largestDiff) {
              largestDiff=diff;
            }
          }
        }
      }
      for (int i=0; i < N - 1; i++) {
        if (m[i] >= largestDiff) {
          min2+=largestDiff;
        }
 else {
          min2+=m[i];
        }
      }
      output.printf(""Case #%d: %d %d\n"",t,min1,min2);
    }
    output.flush();
    output.close();
    input.close();
    time=System.currentTimeMillis() - time;
    System.out.printf(""[%s] finished in %d ms\n"",ID,time);
  }
 catch (  Exception ex) {
    ex.printStackTrace(System.out);
  }
}
"
30000559,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  String line=in.nextLine();
  for (int t=0; t < T; t++) {
    line=in.nextLine();
    String[] sN=line.split("" "");
    int N=Integer.parseInt(sN[0]);
    line=in.nextLine();
    String[] ss=line.split("" "");
    int[] Num=new int[N];
    for (int i=0; i < N; i++) {
      Num[i]=Integer.parseInt(ss[i]);
    }
    int min1=0;
    for (int i=0; i < N - 1; i++) {
      if (Num[i + 1] < Num[i])       min1+=Num[i] - Num[i + 1];
    }
    int min2=0;
    ArrayList<Double> diff=new ArrayList<Double>();
    for (int i=0; i < N - 1; i++) {
      double temp=Num[i] - Num[i + 1];
      diff.add(temp);
    }
    double max_diff=Collections.max(diff);
    for (int i=0; i < N - 1; i++) {
      if (Num[i + 1] > Num[i]) {
        if (Num[i] <= max_diff)         min2+=Num[i];
 else         min2+=max_diff;
      }
 else {
        if (Num[i] < max_diff)         min2+=Num[i];
 else         min2+=max_diff;
      }
    }
    System.out.printf(""Case #%d: "",t + 1);
    System.out.println(min1 + "" "" + min2);
  }
}
"
30000560,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int test=1, cases=Integer.parseInt(sc.nextLine());
  ArrayList<Integer> mushrooms=new ArrayList<Integer>();
  int times;
  int last;
  int curr;
  int minEaten, minRate, rateEaten;
  int i;
  while (test <= cases) {
    mushrooms.clear();
    times=sc.nextInt();
    last=sc.nextInt();
    mushrooms.add(last);
    minEaten=0;
    minRate=0;
    for (i=1; i < times; i++) {
      curr=sc.nextInt();
      mushrooms.add(curr);
      if (curr < last) {
        minEaten+=last - curr;
        minRate=Math.max(last - curr,minRate);
      }
      last=curr;
    }
    rateEaten=0;
    for (i=0; i < mushrooms.size() - 1; i++) {
      curr=mushrooms.get(i);
      if (minRate > curr)       rateEaten+=curr;
 else       rateEaten+=minRate;
    }
    System.out.println(""Case #"" + test + "": ""+ minEaten+ "" ""+ rateEaten);
    test++;
  }
}
"
30000561,"public static void main(String[] args) throws Exception {
  PrintWriter writer=new PrintWriter(new FileOutputStream(""A.out""));
  Scanner scanner=new Scanner(new FileInputStream(""A.in""));
  int T=scanner.nextInt();
  for (int t=1; t <= T; t++) {
    int N=scanner.nextInt();
    int[] m=new int[N];
    for (int i=0; i < N; i++) {
      m[i]=scanner.nextInt();
    }
    int s1=0;
    int maxDiff=0;
    for (int i=1; i < N; i++) {
      if (m[i - 1] > m[i]) {
        int diff=m[i - 1] - m[i];
        s1+=diff;
        if (diff > maxDiff) {
          maxDiff=diff;
        }
      }
    }
    int s2=0;
    for (int i=0; i < N - 1; i++) {
      if (m[i] < maxDiff) {
        s2+=m[i];
      }
 else {
        s2+=maxDiff;
      }
    }
    writer.println(String.format(""Case #%d: %d %s"",t,s1,s2));
  }
  scanner.close();
  writer.close();
}
"
30000562,"public static void main(String[] args) throws FileNotFoundException, IOException {
  String inPath=args[0];
  String outPath=args[1];
  File inFile=new File(inPath);
  BufferedReader br=new BufferedReader(new FileReader(inFile));
  File outFile=new File(outPath);
  FileWriter fw=new FileWriter(outPath);
  BufferedWriter bw=new BufferedWriter(fw);
  StringTokenizer st=null;
  int caseNumber=Integer.parseInt(br.readLine());
  for (int i=0; i < caseNumber; i++) {
    int numberOfInput=Integer.parseInt(br.readLine());
    st=new StringTokenizer(br.readLine(),"" "");
    int minX=0;
    int minY=0;
    int maxSpeed=0;
    int[] input=new int[numberOfInput];
    for (int n=0; n < numberOfInput; n++) {
      input[n]=Integer.parseInt(st.nextToken());
    }
    for (int m=0; m < numberOfInput - 1; m++) {
      int diff=input[m] - input[m + 1];
      if (diff > 0)       minX+=diff;
      if (diff > maxSpeed)       maxSpeed=diff;
    }
    for (int p=0; p < numberOfInput - 1; p++) {
      if (input[p] < maxSpeed)       minY+=input[p];
 else       minY+=maxSpeed;
    }
    bw.write(""Case #"" + (i + 1) + "": ""+ minX+ "" ""+ minY);
    bw.newLine();
  }
  bw.close();
}
"
30000563,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int z=1; z <= T; z++) {
    int N=sc.nextInt();
    int[] arr=new int[N];
    for (int i=0; i < N; i++)     arr[i]=sc.nextInt();
    int count1=0;
    int count2=0;
    int i=0;
    while (i < N - 1) {
      if (arr[i] < arr[i + 1])       i++;
 else {
        count1+=arr[i] - arr[i + 1];
        i++;
      }
    }
    int max=arr[0] - arr[1];
    for (int j=1; j < N - 1; j++)     if (max < arr[j] - arr[j + 1])     max=arr[j] - arr[j + 1];
    for (int k=0; k < N - 1; k++) {
      if (arr[k] - max <= 0) {
        count2+=arr[k];
      }
 else       count2+=max;
    }
    System.out.println(""Case #"" + z + "": ""+ count1+ "" ""+ count2);
  }
}
"
30000564,"public static void main(String[] args) throws IOException {
  System.setIn(new FileInputStream(""A-large.in""));
  BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(bf.readLine());
  for (int XXX=0; XXX < T; XXX++) {
    bf.readLine();
    int X[];
    String data[]=bf.readLine().split("" "");
    X=new int[data.length];
    int prev=Integer.parseInt(data[0]);
    X[0]=prev;
    int A=0;
    int B=0;
    int dif=0;
    int Z=0;
    for (int i=1; i < data.length; i++) {
      X[i]=Integer.parseInt(data[i]);
      if (prev > X[i]) {
        dif=prev - X[i];
        A+=dif;
        if (dif > Z) {
          Z=dif;
        }
      }
      prev=X[i];
    }
    B=0;
    for (int i=0; i < data.length - 1; i++) {
      if (X[i] <= Z) {
        B+=X[i];
      }
 else {
        B+=Z;
      }
    }
    System.out.printf(""Case #%d: %d %d\n"",XXX + 1,A,B);
  }
}
"
30000565,"public static void main(String[] args) throws IOException {
  File inf=new File(""/Users/Kang/Documents/workspace/CodeJamRound1/src/A.in"");
  File outf=new File(""/Users/Kang/Documents/workspace/CodeJamRound1/src/A.out"");
  in=new BufferedReader(new FileReader(inf));
  out=new PrintWriter(outf);
  int cases=Integer.parseInt(in.readLine());
  for (int i=0; i < cases; i++) {
    tok=new StringTokenizer(in.readLine());
    int method1=0;
    int method2=0;
    int len=Integer.parseInt(tok.nextToken());
    tok=new StringTokenizer(in.readLine());
    int[] mushrooms=new int[len];
    int max=0;
    for (int j=0; j < len; j++) {
      mushrooms[j]=Integer.parseInt(tok.nextToken());
    }
    for (int j=1; j < len; j++) {
      if (mushrooms[j] < mushrooms[j - 1])       method1+=mushrooms[j - 1] - mushrooms[j];
      max=Math.max(max,mushrooms[j - 1] - mushrooms[j]);
    }
    for (int j=0; j < len - 1; j++) {
      method2+=Math.min(max,mushrooms[j]);
    }
    method2=method2;
    out.print(""Case #"" + """" + (i + 1) + "": ""+ method1+ "" ""+ method2+ ""\n"");
  }
  in.close();
  out.close();
}
"
30000566,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""C:\\Users\\Valentin\\workspace_luna\\CodeJam\\src\\A-large(1).in""));
  System.setOut(new PrintStream(new File(""C:\\Users\\Valentin\\workspace_luna\\CodeJam\\src\\test.out"")));
  int t=sc.nextInt();
  for (int k=0; k < t; k++) {
    int n=sc.nextInt();
    List<Integer> list=new ArrayList<>();
    for (int i=0; i < n; i++) {
      list.add(sc.nextInt());
    }
    long normal=0;
    long special=0;
    int pred=list.get(0);
    for (int i=1; i < list.size(); i++) {
      if (pred > list.get(i)) {
        normal+=pred - list.get(i);
      }
      pred=list.get(i);
    }
    int max_diff=-1;
    pred=list.get(0);
    for (int i=1; i < list.size(); i++) {
      int curr=list.get(i);
      if (pred - curr > max_diff) {
        max_diff=pred - curr;
      }
      pred=curr;
    }
    for (int i=1; i < list.size(); i++) {
      int curr=list.get(i - 1);
      special+=Math.min(max_diff,curr);
    }
    System.out.println(""Case #"" + (k + 1) + "": ""+ normal+ "" ""+ special);
  }
}
"
30000567,"public static void main(String[] args) throws FileNotFoundException {
  A r=new A();
  Scanner in=new Scanner(new File(""al.in""));
  PrintWriter out=new PrintWriter(""al.out"");
  int t=in.nextInt();
  for (int test=1; test <= t; test++) {
    int n=in.nextInt();
    int[] a=new int[n];
    for (int i=0; i < n; i++)     a[i]=in.nextInt();
    int cnt1=0;
    for (int i=0; i < n - 1; i++)     if (a[i + 1] < a[i])     cnt1+=a[i] - a[i + 1];
    int max=0;
    for (int i=0; i < n - 1; i++)     if (a[i] > a[i + 1])     max=Math.max(max,a[i] - a[i + 1]);
    int cnt2=0;
    for (int i=0; i < n - 1; i++)     cnt2+=Math.min(max,a[i]);
    out.println(""Case #"" + test + "": ""+ cnt1+ "" ""+ cnt2);
  }
  out.close();
}
"
30000568,"public static void main(String[] args) throws IOException {
  Mushroom solution=new Mushroom();
  Scanner input=new Scanner(new File(""A-large.in""));
  PrintWriter writer=new PrintWriter(""MushroomOutput.txt"");
  int numCases=Integer.parseInt(input.nextLine());
  for (int x=0; x < numCases; x++) {
    int numPlates=Integer.parseInt(input.nextLine());
    String tempLine=input.nextLine();
    ArrayList<Integer> nums=new ArrayList<Integer>();
    StringTokenizer io=new StringTokenizer(tempLine);
    while (io.hasMoreTokens()) {
      nums.add(Integer.parseInt(io.nextToken()));
    }
    int firstAttempt=0;
    int secondAttempt=0;
    for (int i=0; i < nums.size() - 1; i++) {
      int first=nums.get(i);
      int second=nums.get(i + 1);
      if ((first - second) >= 0) {
        firstAttempt=firstAttempt + (first - second);
      }
    }
    int maxDrop=0;
    for (int i=0; i < nums.size() - 1; i++) {
      int first=nums.get(i);
      int second=nums.get(i + 1);
      int tempDrop=first - second;
      if (tempDrop > maxDrop) {
        maxDrop=tempDrop;
      }
    }
    double rate=maxDrop / 10;
    for (int i=0; i < nums.size() - 1; i++) {
      int tempStack=nums.get(i);
      if (tempStack >= maxDrop) {
        secondAttempt+=maxDrop;
      }
 else {
        secondAttempt+=tempStack;
      }
    }
    writer.println(""Case #"" + (x + 1) + "": ""+ firstAttempt+ "" ""+ secondAttempt);
  }
  writer.close();
}
"
30000569,"public static void main(String[] args) throws FileNotFoundException {
  File f=new File(""A-large.in"");
  Scanner s=new Scanner(f);
  String line=s.nextLine();
  int T=Integer.parseInt(line);
  File f2=new File(""largeresult.txt"");
  PrintWriter p=new PrintWriter(f2);
  for (int i=1; i <= T; i++) {
    int num=Integer.parseInt(s.nextLine());
    String nums=s.nextLine();
    int[] vals=new int[num];
    Scanner scan=new Scanner(nums);
    for (int j=0; j < num; j++) {
      vals[j]=scan.nextInt();
    }
    int count=0;
    for (int j=0; j < num - 1; j++) {
      if (vals[j] - vals[j + 1] > 0) {
        count+=vals[j] - vals[j + 1];
      }
    }
    int count2=0;
    int maxrate=0;
    for (int j=0; j < num - 1; j++) {
      if (vals[j] - vals[j + 1] > maxrate) {
        maxrate=vals[j] - vals[j + 1];
      }
    }
    for (int j=0; j < num - 1; j++) {
      count2+=Math.min(maxrate,vals[j]);
    }
    p.println(""Case #"" + i + "": ""+ count+ "" ""+ count2);
  }
  p.close();
  s.close();
}
"
30000570,"/** 
 * 3
 * Usage: java ProblemAMushroomMonster < fileIn.txt > fileOut.txt
 * @param args
 */
public static void main(String[] args) throws FileNotFoundException {
  Scanner scanner=new Scanner(System.in);
  byte testCount=scanner.nextByte();
  for (byte t=0; t < testCount; t++) {
    int N=scanner.nextInt();
    int[] shrooms=new int[N];
    for (int i=0; i < N; i++) {
      shrooms[i]=scanner.nextInt();
    }
    int counter1=0;
    int maxInterval=-1;
    int currInterval=0;
    int previousNumber=shrooms[0];
    int currentNumber=0;
    for (int i=1; i < shrooms.length; i++) {
      currentNumber=shrooms[i];
      currInterval=Math.max(0,previousNumber - currentNumber);
      counter1+=currInterval;
      maxInterval=Math.max(maxInterval,currInterval);
      previousNumber=currentNumber;
    }
    int counter2=Math.min(maxInterval,shrooms[0]);
    for (int i=1; i < shrooms.length - 1; i++) {
      int minEaten=Math.min(maxInterval,shrooms[i]);
      counter2+=minEaten;
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ counter1+ "" ""+ counter2);
  }
}
"
30000571,"public static void main(String[] args){
  try {
    Scanner sc=new Scanner(new File(""A-large.in""));
    @SuppressWarnings(""unused"") File file=new File(""A-large.out"");
    PrintWriter pw=new PrintWriter(""A-large.out"");
    int numCase=sc.nextInt();
    for (int zz=0; zz < numCase; zz++) {
      int numRound=sc.nextInt();
      int[] table=new int[numRound];
      int minEaten=0;
      int minEatenConstant=0;
      int maxConstant=-1;
      for (int i=0; i < numRound; i++) {
        table[i]=sc.nextInt();
        if (i > 0) {
          if (table[i - 1] >= table[i]) {
            int eaten=table[i - 1] - table[i];
            minEaten+=eaten;
            if (maxConstant < eaten) {
              maxConstant=eaten;
            }
          }
        }
      }
      for (int i=0; i < numRound - 1; i++) {
        minEatenConstant+=Math.min(maxConstant,table[i]);
      }
      pw.printf(""Case #%d: %d %d\n"",(zz + 1),minEaten,minEatenConstant);
    }
    sc.close();
    pw.close();
  }
 catch (  Exception e) {
  }
}
"
30000572,"long gcd(long a,long b){
  return b == 0 ? a : gcd(b,a % b);
}
"
30000573,"public static void main(String[] args) throws Exception {
  InputStreamReader isr=new InputStreamReader(System.in);
  BufferedReader br=new BufferedReader(isr);
  int T=Integer.parseInt(br.readLine());
  for (int t=1; t <= T; t++) {
    int n=Integer.parseInt(br.readLine());
    StringTokenizer st=new StringTokenizer(br.readLine());
    int[] m=new int[n];
    for (int i=0; i < n; i++) {
      m[i]=Integer.parseInt(st.nextToken());
    }
    long y=0, z=0, max=0;
    for (int i=0; i < n - 1; i++) {
      if (m[i] > m[i + 1]) {
        int d=m[i] - m[i + 1];
        y+=d;
        if (d > max) {
          max=d;
        }
      }
    }
    for (int i=0; i < n - 1; i++) {
      z+=Math.min(m[i],max);
    }
    System.out.println(String.format(""Case #%d: %d %d"",t,y,z));
  }
}
"
30000574,"public static void main(String[] args){
  try {
    BufferedWriter bw=new BufferedWriter(new FileWriter(""test1.out""));
    BufferedReader br=new BufferedReader(new FileReader(""test.in""));
    int T=Integer.parseInt(br.readLine());
    for (int i=1; i <= T; i++) {
      br.readLine();
      String[] temp=br.readLine().split("" "");
      int[] nums=new int[temp.length];
      for (int j=0; j < temp.length; j++)       nums[j]=Integer.parseInt(temp[j]);
      int maxDiff=-1;
      for (int j=0; j < temp.length - 1; j++) {
        if (nums[j] - nums[j + 1] > maxDiff)         maxDiff=nums[j] - nums[j + 1];
      }
      int z=0;
      for (int j=0; j < nums.length - 1; j++) {
        if (nums[j] - maxDiff <= 0)         z+=nums[j];
 else         z+=maxDiff;
      }
      int y=0;
      for (int j=0; j < nums.length - 1; j++) {
        if (nums[j + 1] < nums[j])         y+=(nums[j] - nums[j + 1]);
      }
      bw.write(""Case #"" + i + "": ""+ y+ "" ""+ z);
      bw.newLine();
    }
    bw.close();
    br.close();
  }
 catch (  Exception ex) {
    System.out.println(ex.getMessage());
  }
}
"
30000575,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int nCase=scanner.nextInt();
  for (int nc=1; nc <= nCase; nc++) {
    int N=scanner.nextInt();
    int[] m=new int[N];
    for (int i=0; i < N; i++)     m[i]=scanner.nextInt();
    int y=0;
    for (int i=1; i < N; i++) {
      if (m[i] < m[i - 1])       y+=m[i - 1] - m[i];
    }
    int z=0;
    int max=0;
    for (int i=0; i < N - 1; i++) {
      max=Math.max(m[i] - m[i + 1],max);
    }
    for (int i=0; i < N - 1; i++) {
      z+=Math.min(m[i],max);
    }
    System.out.println(""Case #"" + nc + "": ""+ y+ "" ""+ z);
  }
}
"
30000576,"/** 
 * @param args
 */
public static void main(String[] args){
  long startTime=System.currentTimeMillis();
  try {
    BufferedReader in=new BufferedReader(new FileReader(""A-large.in""));
    BufferedWriter out=new BufferedWriter(new FileWriter(""A-large.out""));
    String line=null;
    line=in.readLine();
    int T=Integer.parseInt(line);
    for (int i=0; i < T; i++) {
      line=in.readLine();
      int N=Integer.parseInt(line);
      line=in.readLine();
      String[] tokens=line.split("" "");
      int[] V=new int[N];
      for (int k=0; k < N; k++) {
        V[k]=Integer.parseInt(tokens[k]);
      }
      int a=0, b=0, max=0;
      for (int k=0; k < N - 1; k++) {
        if (V[k] > V[k + 1]) {
          a=a + V[k] - V[k + 1];
          if (V[k] - V[k + 1] > max) {
            max=V[k] - V[k + 1];
          }
        }
      }
      for (int k=0; k < N - 1; k++) {
        if (V[k] >= max) {
          b=b + max;
        }
 else {
          b=b + V[k];
        }
      }
      System.out.println(""Case #"" + (i + 1) + "": ""+ a+ "" ""+ b);
      out.write(""Case #"" + (i + 1) + "": ""+ a+ "" ""+ b+ ""\n"");
    }
    in.close();
    out.close();
  }
 catch (  FileNotFoundException e) {
    System.out.println(""File not found"");
    e.printStackTrace();
  }
catch (  IOException e) {
    System.out.println(""IOException"");
    e.printStackTrace();
  }
  long endTime=System.currentTimeMillis();
  System.out.println(""Running time is "" + (endTime - startTime) + ""ms"");
}
"
30000577,"public static void main(String[] args) throws Exception {
  Locale.setDefault(Locale.US);
  Scanner in=new Scanner(new File(""problem.in""));
  PrintStream out=new PrintStream(new File(""problem.out""));
  int T=in.nextInt();
  for (int test=1; test <= T; test++) {
    int n=in.nextInt();
    int[] m=new int[n];
    for (int i=0; i < n; i++) {
      m[i]=in.nextInt();
    }
    int min1=0;
    for (int i=1; i < n; i++) {
      if (m[i] < m[i - 1]) {
        min1+=m[i - 1] - m[i];
      }
    }
    int min2=0;
    int d=0;
    for (int i=1; i < n; i++) {
      if (m[i] < m[i - 1]) {
        if (m[i - 1] - m[i] > d) {
          d=m[i - 1] - m[i];
        }
      }
    }
    if (d > 0) {
      for (int i=1; i < n; i++) {
        min2+=Math.min(m[i - 1],d);
      }
    }
    out.println(""Case #"" + test + "": ""+ min1+ "" ""+ min2);
  }
}
"
30000578,"public Mushroom(){
}
"
30000579,"public static void main(String[] args){
  try {
    outputFilePath+=inputFilePath.substring(inputFilePath.lastIndexOf(""/"") + 1,inputFilePath.length() - 3) + "".out"";
    br=new BufferedReader(new FileReader(inputFilePath));
    bw=new BufferedWriter(new FileWriter(outputFilePath));
    final int T=Integer.parseInt(br.readLine());
    for (int caseNum=1; caseNum <= T; caseNum++) {
      int N=Integer.parseInt(br.readLine());
      plate=new int[N];
      String[] parts=br.readLine().split("" "");
      for (int i=0; i < N; i++) {
        plate[i]=Integer.parseInt(parts[i]);
      }
      long eaten=0;
      int prev=plate[0];
      for (int i=1; i < plate.length; i++) {
        if (prev > plate[i]) {
          eaten+=(prev - plate[i]);
        }
        prev=plate[i];
      }
      long m1=eaten;
      long eaten1=0;
      int biggestDiff=0;
      int prev1=plate[0];
      for (int i=1; i < plate.length; i++) {
        if (prev1 - plate[i] > biggestDiff) {
          biggestDiff=prev1 - plate[i];
        }
        prev1=plate[i];
      }
      for (int i=0; i < plate.length - 1; i++) {
        if (plate[i] > 0) {
          eaten1+=Math.min(biggestDiff,plate[i]);
        }
      }
      long m2=eaten1;
      String result=String.format(""Case #%d: %d %d%n"",caseNum,m1,m2);
      bw.write(result);
      System.out.println(result);
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
 finally {
    try {
      if (br != null)       br.close();
      if (bw != null)       bw.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
  }
  System.out.println(""========================================"");
  System.out.println(""Done! :)"");
}
"
30000580,"public static void main(String[] args){
  try {
    Scanner scanner=(new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));
    FileOutputStream out=new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");
    int numberOfCases;
    numberOfCases=scanner.nextInt();
    scanner.nextLine();
    PrintWriter wr=new PrintWriter(out);
    for (int i=0; i < numberOfCases; i++) {
      int caseNumber=i + 1;
      int n=scanner.nextInt();
      int[] nn=new int[n];
      for (int i1=0; i1 < n; i1++) {
        nn[i1]=scanner.nextInt();
      }
      int maxDiff=0;
      int result1=0;
      for (int i2=1; i2 < n; i2++) {
        if (nn[i2] < nn[i2 - 1]) {
          int diff=nn[i2 - 1] - nn[i2];
          if (diff > maxDiff) {
            maxDiff=diff;
          }
          result1+=diff;
        }
      }
      int result2=0;
      for (int i3=0; i3 < n - 1; i3++) {
        if (nn[i3] >= maxDiff) {
          result2+=maxDiff;
        }
 else {
          result2+=nn[i3];
        }
      }
      wr.println(""Case #"" + caseNumber + "": ""+ result1+ "" ""+ result2);
      System.out.println(""Case #"" + caseNumber + "": ""+ result1+ "" ""+ result2);
      if (i < numberOfCases - 1)       scanner.nextLine();
    }
    wr.close();
    out.close();
  }
 catch (  IOException e) {
    System.out.println(""Error: "" + e);
  }
}
"
30000581,"public static void main(String[] args) throws Exception {
  Scanner scanner=new Scanner(new FileReader(""input.txt""));
  int numCases=scanner.nextInt();
  for (int n=0; n < numCases; n++) {
    int N=scanner.nextInt();
    int eaten1=0, eaten2=0, prev=0;
    int[] numbers=new int[N];
    int spr=0;
    for (int i=0; i < N; i++) {
      int k=scanner.nextInt();
      eaten1+=prev - k > 0 ? (prev - k) : 0;
      numbers[i]=k;
      spr=prev - k > spr ? prev - k : spr;
      prev=k;
    }
    for (int i=0; i < N - 1; i++) {
      eaten2+=numbers[i] - spr >= 0 ? spr : numbers[i];
    }
    System.out.printf(""Case #%d: %d %d\n"",n + 1,eaten1,eaten2);
  }
  scanner.close();
}
"
30000582,"public static void main(String[] args) throws Exception {
  Scanner s=new Scanner(new FileReader(""a.in""));
  PrintWriter printer=new PrintWriter(new FileWriter(""a.out""));
  int t=s.nextInt();
  for (int i=0; i < t; i++) {
    int n=s.nextInt();
    int[] arr=new int[n];
    int b=0;
    for (int j=0; j < n; j++)     arr[j]=s.nextInt();
    int a=0;
    for (int j=0; j < n - 1; j++)     if (arr[j] - arr[j + 1] >= 0)     a+=arr[j] - arr[j + 1];
    int k=0;
    for (int j=0; j < n - 1; j++)     if (arr[j] > arr[j + 1])     k=Math.max(k,arr[j] - arr[j + 1]);
    for (int j=0; j < n - 1; j++)     b+=Math.min(arr[j],k);
    System.out.println(a + "" "" + b);
    printer.println(""Case #"" + (i + 1) + "": ""+ a+ "" ""+ b);
  }
  printer.close();
}
"
30000583,"/** 
 * @param args
 */
public static void main(String[] args){
  try {
    FileInputStream fstream=new FileInputStream(""/home/milan/codeJam2015/r1a/A/A-large.in"");
    DataInputStream in=new DataInputStream(fstream);
    BufferedReader br=new BufferedReader(new InputStreamReader(in));
    int T=Integer.valueOf(br.readLine());
    int i=1;
    int plates=0;
    while (i <= T) {
      plates=Integer.valueOf(br.readLine());
      String[] strArray=new String[plates];
      strArray=br.readLine().split("" "");
      int[] mushrooms=new int[plates];
      for (int j=0; j < strArray.length; j++) {
        mushrooms[j]=Integer.parseInt(strArray[j]);
      }
      int s1=0;
      int max=0;
      int diff;
      for (int k=plates - 1; 0 < k; k--) {
        diff=mushrooms[k - 1] - mushrooms[k];
        if (0 < diff) {
          s1+=diff;
          if (max < diff)           max=diff;
        }
      }
      int s2=0;
      for (int j=0; j < plates - 1; j++) {
        if (mushrooms[j] < max)         s2+=mushrooms[j];
 else         s2+=max;
      }
      try {
        BufferedWriter bw=new BufferedWriter(new FileWriter(new File(""/home/milan/codeJam2015/r1a/A/A-large.out""),true));
        bw.write(""Case #"" + i + "": ""+ s1+ "" ""+ s2);
        bw.newLine();
        bw.close();
      }
 catch (      Exception e) {
        System.err.println(""Error: "" + e.getMessage());
      }
      i++;
    }
    br.close();
  }
 catch (  Exception e) {
    System.err.println(""Error: "" + e.getMessage());
  }
}
"
30000584,"public static void main(String[] args){
  String prblm=""A"";
  boolean fl=true;
  String filein=prblm + ""-"" + ((fl) ? ""large"" : ""small"")+ "".in.txt"";
  String fileout=prblm + ""-"" + ((fl) ? ""large"" : ""small"")+ "".out.txt"";
  try {
    BufferedReader fr=new BufferedReader(new FileReader(filein));
    BufferedWriter fw=new BufferedWriter(new FileWriter(fileout));
    String s=fr.readLine();
    int T=Integer.parseInt(s);
    for (int i=1; i <= T; i++) {
      s=fr.readLine();
      int N=Integer.parseInt(s);
      s=fr.readLine();
      String[] tok=s.split("" "");
      int mx=0;
      int tdif=0;
      int[] vs=new int[N];
      for (int j=0; j < N; j++) {
        vs[j]=Integer.parseInt(tok[j]);
        if (j > 0) {
          mx=Math.max(mx,vs[j - 1] - vs[j]);
          tdif+=Math.max(0,vs[j - 1] - vs[j]);
        }
      }
      int me=0;
      for (int j=0; j < N - 1; j++)       me+=Math.min(mx,vs[j]);
      s=tdif + "" "" + me;
      System.out.println(s);
      fw.write(""Case #"" + i + "": ""+ s+ ""\n"");
    }
    fr.close();
    fw.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000585,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""A-large.in""));
  int loopvar=in.nextInt();
  PrintWriter out=new PrintWriter(new File(""mush.out""));
  for (int j=0; j < loopvar; j++) {
    int mush=in.nextInt();
    int[] mushes=new int[mush];
    for (int i=0; i < mush; i++) {
      mushes[i]=in.nextInt();
    }
    int tot=0;
    for (int i=1; i < mush; i++) {
      if (mushes[i - 1] > mushes[i]) {
        tot+=mushes[i - 1] - mushes[i];
      }
    }
    int rate=0;
    for (int i=1; i < mush; i++) {
      if (mushes[i - 1] > mushes[i]) {
        rate=Math.max(rate,mushes[i - 1] - mushes[i]);
      }
    }
    int tr=0;
    for (int i=0; i < mush - 1; i++) {
      tr+=Math.min(rate,mushes[i]);
    }
    out.printf(""Case #%d: %d %d%n"",j + 1,tot,tr);
  }
  out.close();
}
"
30000586,"public static void main(String[] args) throws FileNotFoundException {
  File file=new File(""D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/A-large.in"");
  PrintStream out=new PrintStream(new FileOutputStream(""D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/A-large.out""));
  System.setOut(out);
  Scanner sc=new Scanner(file);
  int T=sc.nextInt();
  int[] result1=new int[T];
  int[] result2=new int[T];
  for (int i=0; i < T; ++i) {
    int N=sc.nextInt();
    result2[1]=0;
    result2[i]=0;
    int eatTempo=0;
    int[] pieces=new int[N];
    pieces[0]=sc.nextInt();
    for (int j=1; j < N; ++j) {
      pieces[j]=sc.nextInt();
      result1[i]+=Math.max(0,pieces[j - 1] - pieces[j]);
      eatTempo=Math.max(eatTempo,pieces[j - 1] - pieces[j]);
    }
    for (int j=0; j < N - 1; ++j)     result2[i]+=Math.min(eatTempo,pieces[j]);
  }
  sc.close();
  for (int i=0; i < T; ++i)   System.out.println(String.format(""Case #%d: %d %d"",i + 1,result1[i],result2[i]));
}
"
30000587,"public static void main(String[] args) throws NumberFormatException, IOException {
  String filename=PATH + PROBLEM + ""-""+ SIZE;
  if (SIZE.equals(""small""))   filename+=""-attempt"" + ATTEMPT;
  Scanner sc=new Scanner(new File(filename + "".in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(PATH + PROBLEM + ""-""+ SIZE+ ""-attempt""+ ATTEMPT+ "".out""));
  int T=sc.nextInt();
  sc.nextLine();
  for (int t=0; t < T; t++) {
    int N=sc.nextInt();
    int[] m=new int[N];
    for (int n=0; n < N; n++) {
      m[n]=sc.nextInt();
    }
    long s1=0;
    for (int n=0; n < N - 1; n++) {
      if (m[n] > m[n + 1])       s1+=m[n] - m[n + 1];
    }
    int maxDiff=0;
    for (int n=0; n < N - 1; n++) {
      if (m[n] - m[n + 1] > maxDiff)       maxDiff=m[n] - m[n + 1];
    }
    long s2=0;
    for (int n=0; n < N - 1; n++) {
      if (m[n] > maxDiff) {
        s2+=maxDiff;
      }
 else {
        s2+=m[n];
      }
    }
    bw.write(""Case #"" + (t + 1) + "": ""+ s1+ "" ""+ s2);
    bw.newLine();
  }
  sc.close();
  bw.close();
}
"
30000588,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(WORK_DIR + INPUT_FILE_NAME));
  PrintWriter pw=new PrintWriter(new FileWriter(WORK_DIR + OUTPUT_FILE_NAME));
  int caseCnt=sc.nextInt();
  CodeJam2015 codeJam2015=new CodeJam2015();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    long start=System.currentTimeMillis();
    int intervals=sc.nextInt();
    int[] mushroomsAtInterval=new int[intervals];
    int y=0;
    int z=0;
    for (int i=0; i < intervals; i++) {
      mushroomsAtInterval[i]=sc.nextInt();
    }
    int maxRate=0;
    for (int i=1; i < intervals; i++) {
      y+=Math.max(mushroomsAtInterval[i - 1] - mushroomsAtInterval[i],0);
      maxRate=Math.max(maxRate,mushroomsAtInterval[i - 1] - mushroomsAtInterval[i]);
    }
    for (int i=0; i < intervals - 1; i++) {
      z+=Math.min(mushroomsAtInterval[i],maxRate);
    }
    pw.println(y + "" "" + z);
    long end=System.currentTimeMillis();
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000589,"public static void main(String[] args) throws FileNotFoundException {
  final Scanner scanner=new Scanner(new File(""C:\\Users\\Samuel\\Downloads\\input.txt""));
  Integer cases=Integer.parseInt(scanner.nextLine());
  for (Integer i=0; i < cases; i++) {
    Integer readings=Integer.parseInt(scanner.nextLine());
    String[] vals=(scanner.nextLine()).split("" "");
    ArrayList<Integer> values=new ArrayList<Integer>();
    for (    String v : vals) {
      values.add(Integer.parseInt(v));
    }
    Integer maxDiff=0;
    Integer totalDiff=0;
    for (Integer j=0; j < values.size() - 1; j++) {
      Integer diff=values.get(j) - values.get(j + 1);
      if (diff > maxDiff) {
        maxDiff=diff;
      }
      if (diff > 0) {
        totalDiff+=diff;
      }
    }
    Integer eaten=0;
    for (Integer j=0; j < values.size() - 1; j++) {
      if (values.get(j) < maxDiff) {
        eaten+=values.get(j);
      }
 else {
        eaten+=maxDiff;
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ totalDiff+ "" ""+ eaten);
  }
}
"
30000590,"public static void main(String args[]) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(""input.txt"")));
  int test_no=Integer.parseInt(br.readLine());
  BufferedWriter out=new BufferedWriter(new FileWriter(""out.txt""));
  for (int i=1; i <= test_no; i++) {
    int stringlength=Integer.parseInt(br.readLine());
    String[] data=br.readLine().split("" "");
    int count_second=0;
    int largest_diff=0;
    for (int j=0; j < stringlength - 1; j++) {
      int left=Integer.parseInt(data[j]);
      int right=Integer.parseInt(data[j + 1]);
      int difference=right - left;
      if (difference <= 0)       count_second-=difference;
      if (-difference >= largest_diff)       largest_diff=-difference;
    }
    int count_second2=0;
    for (int j=0; j < stringlength - 1; j++) {
      int left=Integer.parseInt(data[j]);
      int right=Integer.parseInt(data[j + 1]);
      if (left <= largest_diff)       count_second2+=left;
 else       count_second2+=largest_diff;
    }
    System.out.println(count_second);
    System.out.println(count_second2);
    out.write(""Case #"");
    out.write(String.valueOf(i));
    out.write("": "");
    out.write(String.valueOf(count_second));
    out.write(String.valueOf("" ""));
    out.write(String.valueOf(count_second2));
    out.write(""\n"");
  }
  br.close();
  out.close();
}
"
30000591,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int t=input.nextInt();
  for (int i=0; i < t; i++) {
    int n=input.nextInt();
    int m[]=new int[n];
    for (int j=0; j < n; j++) {
      m[j]=input.nextInt();
    }
    int case1=0;
    for (int j=1; j < n; j++) {
      if (m[j - 1] > m[j]) {
        case1+=m[j - 1] - m[j];
      }
    }
    int case2=0;
    double difference=-1;
    for (int j=0; j < n - 1; j++) {
      if (m[j] >= m[j + 1]) {
        if (m[j] - m[j + 1] > difference) {
          difference=m[j] - m[j + 1];
        }
      }
    }
    double time=difference / 10;
    for (int j=0; j < n - 1; j++) {
      double amountToEat=10 * time;
      if (m[j] != 0) {
        if (amountToEat >= m[j]) {
          case2+=m[j];
        }
 else {
          case2+=amountToEat;
        }
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ case1+ "" ""+ case2);
    case1=0;
    case2=0;
  }
}
"
30000592,"public static void main(String args[]) throws Exception {
  Scanner in=new Scanner(new File(""A.in""));
  int count=1;
  int numcases=in.nextInt();
  while (numcases-- > 0) {
    int numint=in.nextInt();
    int[] vals=new int[numint];
    for (int i=0; i < numint; i++)     vals[i]=in.nextInt();
    int onesum=0;
    for (int i=0; i < vals.length - 1; i++) {
      if (vals[i] > vals[i + 1])       onesum+=vals[i] - vals[i + 1];
    }
    int maxdiff=0;
    for (int i=0; i < vals.length - 1; i++) {
      if (vals[i] > vals[i + 1])       if (maxdiff < vals[i] - vals[i + 1])       maxdiff=vals[i] - vals[i + 1];
    }
    int twosum=0;
    for (int i=0; i < vals.length - 1; i++) {
      if (maxdiff > vals[i])       twosum+=vals[i];
 else       twosum+=maxdiff;
    }
    System.out.println(""Case #"" + count + "": ""+ onesum+ "" ""+ twosum);
    count++;
  }
}
"
30000593,"public static void main(String[] args) throws IOException {
  String root=""A-large"";
  String fileName=""C:\\Users\\Aaron\\Downloads\\"" + root + "".in"";
  BufferedReader reader=new BufferedReader(new FileReader(new File(fileName)));
  int nTestCases=Integer.parseInt(reader.readLine());
  ArrayList<String> out=new ArrayList<String>();
  for (int t=0; t < nTestCases; t++) {
    int numWatches=Integer.parseInt(reader.readLine());
    String[] parts=reader.readLine().split("" "");
    int[] eat=new int[parts.length];
    for (int i=0; i < parts.length; i++)     eat[i]=Integer.parseInt(parts[i]);
    int numEaten1=0;
    for (int i1=1; i1 < eat.length; i1++) {
      numEaten1+=Math.max(0,eat[i1 - 1] - eat[i1]);
    }
    int y=numEaten1;
    int numEaten=0;
    int maxRate=0;
    for (int i=1; i < eat.length; i++) {
      int rate=(eat[i - 1] - eat[i]);
      maxRate=Math.max(maxRate,rate);
    }
    System.out.println(""Max rate: "" + maxRate);
    for (int i=0; i < eat.length; i++) {
      numEaten+=maxRate;
      if (eat[i] < maxRate) {
        numEaten-=maxRate - eat[i];
      }
    }
    numEaten-=Math.min(maxRate,eat[eat.length - 1]);
    numEaten=Math.max(0,numEaten);
    int z=numEaten;
    System.out.println(""Input: "" + Arrays.toString(eat));
    System.out.println(""Answer: "" + y + "" ""+ z);
    System.out.println(""-----------------"");
    out.add(""Case #"" + (t + 1) + "": ""+ y+ "" ""+ z);
  }
  PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(""C:\\Users\\Aaron\\Downloads\\"" + root + ""-SOL.out"")));
  for (  String s : out) {
    writer.write(s + ""\n"");
  }
  writer.close();
  reader.close();
}
"
30000594,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new FileReader(""A-large.in""));
  PrintWriter out=new PrintWriter(new FileWriter(""out.txt""));
  int cases=in.nextInt();
  in.nextLine();
  for (int x=0; x < cases; x++) {
    int intervals=in.nextInt();
    int[] mushrooms=new int[intervals];
    for (int m=0; m < intervals; m++) {
      mushrooms[m]=in.nextInt();
    }
    int minMush1=0;
    for (int m=1; m < intervals; m++) {
      if (mushrooms[m] < mushrooms[m - 1]) {
        minMush1+=(mushrooms[m - 1] - mushrooms[m]);
      }
    }
    int minMush2=0;
    int maxDiff=0;
    for (int m=1; m < intervals; m++) {
      if ((mushrooms[m - 1] - mushrooms[m]) > maxDiff) {
        maxDiff=mushrooms[m - 1] - mushrooms[m];
      }
    }
    for (int m=0; m < intervals - 1; m++) {
      if (mushrooms[m] >= maxDiff)       minMush2+=maxDiff;
 else       minMush2+=mushrooms[m];
    }
    out.println(""Case #"" + (x + 1) + "": ""+ minMush1+ "" ""+ minMush2);
  }
  out.close();
}
"
30000595,"public static void main(String[] args){
  Scanner scanner;
  try {
    scanner=new Scanner(new File(""A-large.in""));
    int noofTests=scanner.nextInt();
    int i=0;
    while (i < noofTests) {
      ArrayList no=new ArrayList();
      int temptwo=0;
      int noOfEaten=scanner.nextInt();
      for (int j=0; j < noOfEaten; j++) {
        no.add(scanner.nextInt());
      }
      int sum=0;
      for (int j=0; j < no.size(); j++) {
        sum+=(int)no.get(j);
      }
      int tmp=(int)no.get(0);
      int sumTmp=0;
      for (int j=1; j < no.size(); j++) {
        if (tmp > (int)no.get(j))         sumTmp+=tmp - (int)no.get(j);
        tmp=(int)no.get(j);
      }
      int rateSum=0;
      int rate=(int)no.get(noOfEaten - 2) - (int)no.get(noOfEaten - 1);
      int tmpdiff=0;
      int diff=0;
      for (int j=0; j < no.size() - 1; j++) {
        if ((int)no.get(j) > (int)no.get(j + 1)) {
          tmpdiff=(int)no.get(j) - (int)no.get(j + 1);
        }
        if (tmpdiff > diff) {
          diff=tmpdiff;
        }
      }
      for (int j=0; j < no.size() - 1; j++) {
        if ((int)no.get(j) > diff) {
          rateSum+=diff;
        }
 else {
          rateSum+=(int)no.get(j);
        }
      }
      temptwo=sum - ((int)no.get(noOfEaten - 1) * 2);
      System.out.println(""Case #"" + (i + 1) + "": ""+ sumTmp+ "" ""+ rateSum);
      i++;
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30000596,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int m1=0;
    int m2=0;
    int max=0;
    int n=in.nextInt();
    int[] interv=new int[n];
    for (int i=0; i < n; i++) {
      interv[i]=in.nextInt();
      if (i > 0 && interv[i] < interv[i - 1]) {
        int diff=(interv[i - 1] - interv[i]);
        m1+=diff;
        max=Math.max(max,diff);
      }
    }
    for (int i=0; i < n - 1; i++) {
      if (interv[i] < max)       m2+=interv[i];
 else       m2+=max;
    }
    System.out.printf(""Case #%d: %d %d\n"",t,m1,m2);
  }
}
"
30000597,"public static void main(String[] args) throws FileNotFoundException {
  in=new Scanner(new BufferedInputStream(new FileInputStream(new File(""input.txt""))));
  out=new PrintWriter(new BufferedOutputStream(new FileOutputStream(new File(""output.txt""))));
  int nCases=in.nextInt();
  in.nextLine();
  for (int CASE=1; CASE <= nCases; CASE++) {
    out.print(""Case #"" + CASE + "": "");
    int m=in.nextInt();
    int[] a=new int[m];
    int maxD=0;
    for (int i=0; i < m; i++)     a[i]=in.nextInt();
    long r1=0, r2=0;
    for (int i=0; i < m - 1; i++) {
      maxD=Math.max(maxD,a[i] - a[i + 1]);
    }
    for (int i=1; i < m; i++) {
      if (a[i] < a[i - 1])       r1+=a[i - 1] - a[i];
    }
    for (int i=0; i < m - 1; i++)     if (a[i] < maxD)     r2+=a[i];
 else     r2+=maxD;
    out.println(r1 + "" "" + r2);
  }
  out.close();
  System.err.println(""Done"");
}
"
30000598,"public static void main(String[] args){
  Scanner S=new Scanner(System.in);
  int numCases=S.nextInt();
  for (int i=1; i <= numCases; i++) {
    case1=0;
    case2=0;
    maxDiff=0;
    int n=S.nextInt();
    int[] arr=new int[n];
    for (int i1=0; i1 < n; i1++) {
      arr[i1]=S.nextInt();
    }
    for (int k=0; k < (n - 1); k++) {
      int current=arr[k];
      int next=arr[k + 1];
      maxDiff=Math.max(maxDiff,current - next);
      if (current > next) {
        case1+=current - next;
      }
    }
    for (int k=0; k < (n - 1); k++) {
      int current=arr[k];
      if (current >= maxDiff) {
        case2+=maxDiff;
      }
 else {
        case2+=current;
      }
    }
    System.out.printf(""Case #%d: %d %d"",i,case1,case2);
    if (i != numCases)     System.out.println();
  }
}
"
30000599,"public static void main(String[] args){
  long beginTime=System.currentTimeMillis();
  try {
    String inputName=INPUT_FILE_NAME;
    String outputName=OUTPUT_FILE_NAME;
    if (args.length > 0)     inputName=args[0];
    if (args.length > 1)     outputName=args[1];
    try (BufferedReader reader=new BufferedReader(new FileReader(new File(inputName)))){
      try (PrintWriter writer=new PrintWriter(outputName)){
        int nCases=Integer.parseInt(reader.readLine());
        for (int nCase=0; nCase < nCases; ++nCase) {
          int n=Integer.parseInt(reader.readLine());
          String[] data=reader.readLine().split("" "");
          int counter1=0;
          int counter2=0;
          int prev=0;
          int pace=0;
          for (int i=0; i < n; ++i) {
            int mushrums=Integer.parseInt(data[i]);
            if (prev > mushrums) {
              counter1+=prev - mushrums;
              if (pace < (prev - mushrums))               pace=prev - mushrums;
            }
            prev=mushrums;
          }
          for (int i=0; i < n - 1; ++i) {
            int mushrums=Integer.parseInt(data[i]);
            if (mushrums > pace)             counter2+=pace;
 else             counter2+=mushrums;
          }
          String out=""Case #"" + (nCase + 1) + "": ""+ counter1+ "" ""+ counter2;
          System.out.println(out);
          writer.println(out);
        }
      }
     }
   }
 catch (  Exception e) {
    e.printStackTrace();
  }
  long endTime=System.currentTimeMillis();
  System.out.println(String.format(""Done. Spend %d ms"",endTime - beginTime));
}
"
30000600,"public static void main(String[] args) throws FileNotFoundException, IOException {
  Scanner input=new Scanner(new File(""in.in""));
  ArrayList<String> answeres=new ArrayList<>();
  int T=0, N=0;
  int y=0;
  int z=0;
  int rate=0;
  int temprate=0;
  T=input.nextInt();
  for (int i=0; i < T; i++) {
    N=input.nextInt();
    int[] data=new int[N];
    for (int j=0; j < N; j++) {
      data[j]=input.nextInt();
    }
    y=0;
    z=0;
    rate=0;
    temprate=0;
    for (int j=0; j < N - 1; j++) {
      if (data[j] > data[j + 1]) {
        y+=data[j] - data[j + 1];
        temprate=(data[j] - data[j + 1]);
        if (temprate > rate) {
          rate=temprate;
        }
      }
    }
    for (int j=0; j < N - 1; j++) {
      if (data[j] - rate < 0) {
        z+=data[j];
      }
 else {
        z+=rate;
      }
    }
    answeres.add(y + "" "" + z);
  }
  String out="""";
  for (int i=0; i < T; i++) {
    out+=""Case #"" + (i + 1) + "": "";
    out+=answeres.get(i);
    out+=""\r\n"";
  }
  System.out.println(out);
  File outF=new File(""out.out"");
  FileWriter fw=new FileWriter(outF);
  fw.write(out);
  fw.flush();
}
"
30000601,"public static void main(String[] args){
  try {
    BufferedReader reader=new BufferedReader(new FileReader(""A-large.in""));
    String line=null;
    List<String> lines1=new ArrayList<String>();
    while ((line=reader.readLine()) != null) {
      lines1.add(line);
    }
    reader.close();
    List<String> lines=lines1;
    List<String> outputLines=new ArrayList<String>();
    int index=0;
    int testCases=Integer.parseInt(lines.get(index++));
    for (int t=0; t < testCases; t++) {
      String[] tokens=lines.get(index++).split("" "");
      int intervals=Integer.parseInt(tokens[0]);
      String[] strs=lines.get(index++).split("" "");
      int[] pieces=new int[intervals];
      for (int i=0; i < strs.length; i++) {
        pieces[i]=Integer.parseInt(strs[i]);
      }
      int method1=0;
      int max=0;
      int[] decays=new int[intervals];
      for (int i=1; i < intervals; i++) {
        if (pieces[i] < pieces[i - 1]) {
          int decay=pieces[i - 1] - pieces[i];
          method1+=decay;
          max=Math.max(max,decay);
          decays[i]=decay;
        }
      }
      int method2=0;
      for (int i=1; i < intervals; i++) {
        int decay=Math.min(pieces[i - 1],max);
        method2+=decay;
      }
      String testCaseOutput=""Case #"" + (t + 1) + "": ""+ method1+ "" ""+ method2;
      System.out.println(testCaseOutput);
      outputLines.add(testCaseOutput);
    }
    StringBuilder strValue=new StringBuilder("""");
    if (outputLines != null) {
      int i=0;
      for (      Object v : outputLines) {
        String value=v.toString();
        if (i == 0) {
          strValue.append(value);
        }
 else {
          strValue.append(""\n"");
          strValue.append(value);
        }
        i++;
      }
    }
    String output=strValue.toString();
    FileWriter writer=new FileWriter(""A-large.in"".replace("".in"","".out""));
    writer.write(output);
    writer.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
"
30000602,"public static void main(String args[]){
  s=new Scanner(System.in);
  int count=s.nextInt();
  s.nextLine();
  for (int i=1; i <= count; i++) {
    int y=0;
    int z=0;
    int n=s.nextInt();
    int[] nums=new int[n];
    s.nextLine();
    for (int i1=0; i1 < nums.length; i1++) {
      nums[i1]=s.nextInt();
    }
    int cur=nums[0];
    int biggestDif=0;
    for (int i3=1; i3 < nums.length; i3++) {
      if (nums[i3] < cur) {
        int dif=cur - nums[i3];
        y+=dif;
        if (biggestDif < dif) {
          biggestDif=dif;
        }
      }
      cur=nums[i3];
    }
    for (int i2=0; i2 < nums.length - 1; i2++) {
      z+=Math.min(biggestDif,nums[i2]);
    }
    System.out.println(""Case #"" + i + "": ""+ y+ "" ""+ z);
    s.nextLine();
  }
}
"
30000603,"public static void main(String[] args) throws IOException {
  br=new BufferedReader(new FileReader(""test.txt""));
  ps=new PrintWriter(""output.txt"");
  int t=Integer.parseInt(next());
  for (int q=1; q <= t; q++) {
    int n=Integer.parseInt(next());
    int[] a=new int[n];
    for (int i=0; i < n; i++)     a[i]=Integer.parseInt(next());
    int min1=0;
    int maxDiff=0;
    for (int i=1; i < n; i++) {
      if (a[i] < a[i - 1]) {
        min1+=a[i - 1] - a[i];
        maxDiff=Math.max(maxDiff,a[i - 1] - a[i]);
      }
    }
    int min2=0;
    for (int i=1; i < n; i++) {
      if (maxDiff >= a[i - 1])       min2+=a[i - 1];
 else       min2+=maxDiff;
    }
    System.out.printf(""Case #%d: %d %d\n"",q,min1,min2);
  }
}
"
30000604,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""mushroom.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""mushroom.out"")));
  int t=Integer.parseInt(br.readLine());
  for (int tc=1; tc <= t; tc++) {
    int n=Integer.parseInt(br.readLine());
    StringTokenizer st=new StringTokenizer(br.readLine());
    int ans1=0;
    int maxDiff=0;
    int prev=Integer.parseInt(st.nextToken());
    int[] ar=new int[n];
    ar[0]=prev;
    for (int i=1; i < n; i++) {
      int next=Integer.parseInt(st.nextToken());
      ar[i]=next;
      if (next < prev) {
        ans1+=prev - next;
        if (prev - next > maxDiff) {
          maxDiff=prev - next;
        }
      }
      prev=next;
    }
    int ans2=0;
    for (int i=0; i < n - 1; i++) {
      if (ar[i] < maxDiff) {
        ans2+=ar[i];
      }
 else {
        ans2+=maxDiff;
      }
    }
    out.printf(""Case #%d: %d %d\n"",tc,ans1,ans2);
  }
  out.flush();
  System.exit(0);
}
"
30000605,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    int N=sc.nextInt();
    int[] arr=new int[N];
    int first=0, second=0;
    int maxDff=0;
    for (int n=0; n < N; n++) {
      arr[n]=sc.nextInt();
      if (n > 0) {
        if (maxDff < (arr[n - 1] - arr[n]))         maxDff=(arr[n - 1] - arr[n]);
        if (arr[n - 1] > arr[n])         first+=(arr[n - 1] - arr[n]);
      }
    }
    for (int n=0; n < N - 1; n++) {
      if (arr[n] < maxDff)       second+=arr[n];
 else       second+=maxDff;
    }
    System.out.println(""Case #"" + t + "": ""+ first+ "" ""+ second);
  }
}
"
30000606,"public static void main(String[] args) throws IOException {
  final BufferedReader reader=new BufferedReader(new FileReader(""files/com/google/code/codejam2015/r1a/A-large.in""));
  final BufferedWriter writer=new BufferedWriter(new FileWriter(""files/com/google/code/codejam2015/r1a/A-large.out""));
  final int T=Integer.parseInt(reader.readLine());
  for (int t=0; t < T; t++) {
    final int N=Integer.parseInt(reader.readLine());
    final String[] line=reader.readLine().split("" "");
    final int[] m=new int[N];
    for (int i=0; i < line.length; i++) {
      m[i]=Integer.parseInt(line[i]);
    }
    int y=0;
    int maxDiff=0;
    for (int i=0; i < m.length - 1; i++) {
      if (m[i] > m[i + 1]) {
        final int diff=m[i] - m[i + 1];
        y+=diff;
        if (diff > maxDiff) {
          maxDiff=diff;
        }
      }
    }
    int z=0;
    if (maxDiff > 0) {
      for (int i=0; i < m.length - 1; i++) {
        if (m[i] > maxDiff) {
          z+=maxDiff;
        }
 else {
          z+=m[i];
        }
      }
    }
    String result=""Case #"" + (t + 1) + "": ""+ y+ "" ""+ z;
    System.out.print(result + ""\n"");
    writer.write(result + ""\n"");
  }
  reader.close();
  writer.close();
}
"
30000607,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int testCases=in.nextInt();
  int testCaseNumber=1;
  while (testCaseNumber <= testCases) {
    int N=in.nextInt();
    int[] array=new int[N];
    for (int i=0; i < N; i++) {
      array[i]=in.nextInt();
    }
    int minDonuts=0;
    for (int i1=1; i1 < N; i1++) {
      if (array[i1] < array[i1 - 1]) {
        minDonuts=minDonuts + array[i1 - 1] - array[i1];
      }
    }
    int donuts1=minDonuts;
    int maxDifference=-1;
    for (int i=1; i < N; i++) {
      if (array[i] <= array[i - 1]) {
        if (array[i - 1] - array[i] > maxDifference) {
          maxDifference=array[i - 1] - array[i];
        }
      }
    }
    int donutRate=maxDifference;
    int minDonutsEaten=0;
    for (int i=0; i < N - 1; i++) {
      if (array[i] < donutRate) {
        minDonutsEaten=minDonutsEaten + array[i];
      }
 else {
        minDonutsEaten=minDonutsEaten + donutRate;
      }
    }
    int donuts2=minDonutsEaten;
    System.out.println(""Case #"" + testCaseNumber + "": ""+ donuts1+ "" ""+ donuts2);
    testCaseNumber++;
  }
  in.close();
}
"
30000608,"public static void main(String[] args){
  if (args.length < 1) {
    System.out.println(""Missing input!"");
  }
 else {
    try (Scanner sc=new Scanner(new File(args[0]))){
      int numCases=sc.nextInt();
      for (int i=1; i <= numCases; i++) {
        int inputLength=sc.nextInt();
        ArrayList<Integer> input=new ArrayList<Integer>();
        for (int j=0; j < inputLength; j++) {
          input.add(sc.nextInt());
        }
        int total1=0;
        int max=0;
        int previous1=input.get(0);
        int diff, current1;
        for (int i2=1; i2 < input.size(); i2++) {
          current1=input.get(i2);
          diff=previous1 - current1;
          if (diff > max) {
            max=diff;
          }
          previous1=current1;
        }
        for (int i1=0; i1 < input.size() - 1; i1++) {
          current1=input.get(i1);
          total1+=current1 < max ? current1 : max;
        }
        int result2=total1;
        int total=0;
        int previous=input.remove(0);
        int current;
        while (!input.isEmpty()) {
          current=input.remove(0);
          if (current < previous) {
            total+=previous - current;
          }
          previous=current;
        }
        int result1=total;
        System.out.printf(""Case #%d: %d %d\n"",i,result1,result2);
      }
    }
 catch (    FileNotFoundException e) {
      System.out.println(e.getMessage());
    }
  }
}
"
30000609,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(System.in);
  PrintWriter wr=new PrintWriter(""output2"");
  int T=Integer.parseInt(sc.nextLine());
  for (int i=0; i < T; i++) {
    StringBuilder ans=new StringBuilder();
    ans.append(""Case #"" + (i + 1) + "": "");
    int N=Integer.parseInt(sc.nextLine());
    String[] ms=sc.nextLine().split("" "");
    int count_1=0;
    int count_2=0;
    int max=0;
    for (int j=1; j < N; j++) {
      int last=Integer.parseInt(ms[j - 1]);
      int curr=Integer.parseInt(ms[j]);
      if (last > curr) {
        count_1=count_1 + (last - curr);
        max=Math.max(max,last - curr);
      }
    }
    for (int j=0; j < N - 1; j++) {
      int curr=Integer.parseInt(ms[j]);
      if (curr < max) {
        count_2=count_2 + curr;
      }
 else {
        count_2=count_2 + max;
      }
    }
    ans.append(count_1 + "" "");
    ans.append(count_2);
    wr.println(ans);
  }
  wr.close();
}
"
30000610,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  final int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    final int N=in.nextInt();
    int[] m=new int[N];
    int prev=m[0]=in.nextInt();
    int accDec=0;
    int maxDec=0;
    for (int j=1; j < N; j++) {
      int cur=m[j]=in.nextInt();
      if (cur < prev) {
        accDec+=(prev - cur);
        maxDec=Math.max(maxDec,prev - cur);
      }
      prev=cur;
    }
    int acc2Dec=0;
    for (int j=0; j < N - 1; j++) {
      acc2Dec+=Math.min(maxDec,m[j]);
    }
    System.out.println(""Case #"" + i + "": ""+ accDec+ "" ""+ acc2Dec);
  }
  in.close();
}
"
30000611,"public static void main(String[] args) throws Exception {
  File input=new File(""/Users/sean/Desktop/GG/a.in"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(input)));
  File output=new File(""/Users/sean/Desktop/GG/ansA.txt"");
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
  int t=Integer.parseInt(reader.readLine());
  String infos[];
  long minNeedPlanA, minNeedPlanB;
  long maxDis;
  int n;
  long vals[];
  for (int i=1; i <= t; ++i) {
    minNeedPlanA=minNeedPlanB=0;
    maxDis=0;
    n=Integer.parseInt(reader.readLine());
    infos=reader.readLine().split("" "");
    vals=new long[n];
    vals[0]=Long.parseLong(infos[0]);
    for (int j=1; j < n; ++j) {
      vals[j]=Long.parseLong(infos[j]);
      if (vals[j] < vals[j - 1]) {
        minNeedPlanA+=(vals[j - 1] - vals[j]);
        maxDis=Math.max(maxDis,vals[j - 1] - vals[j]);
      }
    }
    for (int j=0; j < n - 1; ++j) {
      minNeedPlanB+=Math.min(vals[j],maxDis);
    }
    writer.write(""Case #"" + i + "": ""+ minNeedPlanA+ "" ""+ minNeedPlanB+ ""\r\n"");
  }
  reader.close();
  writer.flush();
}
"
30000612,"public static void main(String[] args){
  int testCases;
  Scanner sc=new Scanner(System.in);
  testCases=sc.nextInt();
  for (int j=1; j <= testCases; j++) {
    int n;
    n=sc.nextInt();
    Integer[] a=new Integer[n];
    for (int i=0; i < n; i++) {
      a[i]=sc.nextInt();
    }
    int q=0, p=0, mx=0;
    for (int i=1; i < n; i++) {
      if (a[i] - a[i - 1] < 0) {
        q+=(a[i - 1] - a[i]);
      }
      mx=Math.max(mx,a[i - 1] - a[i]);
    }
    for (int i=0; i < n - 1; i++) {
      if (a[i] >= mx)       p+=mx;
 else       p+=a[i];
    }
    System.out.println(""Case #"" + j + "": ""+ q+ "" ""+ p);
  }
}
"
30000613,"public static void main(String[] args) throws IOException {
  Scanner s=null;
  Scanner lineScan=null;
  int size;
  int currentSize;
  String line;
  File output=new File(""output.txt"");
  PrintWriter printer=new PrintWriter(output);
  s=new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
  size=s.nextInt();
  s.nextLine();
  for (int i=0; i < size; i++) {
    currentSize=s.nextInt();
    s.nextLine();
    int[] plateValues=new int[currentSize];
    line=s.nextLine();
    lineScan=new Scanner(line);
    int j=0;
    while (lineScan.hasNextInt()) {
      plateValues[j]=lineScan.nextInt();
      j++;
    }
    int firstMethod=0;
    int fastestRate=0;
    for (int m=1; m < currentSize; m++) {
      if (plateValues[m] < plateValues[m - 1]) {
        firstMethod+=plateValues[m - 1] - plateValues[m];
        fastestRate=Math.max(fastestRate,plateValues[m - 1] - plateValues[m]);
      }
    }
    int secondMethod=0;
    for (int m=0; m < currentSize - 1; m++) {
      if (plateValues[m] > fastestRate) {
        secondMethod+=fastestRate;
      }
 else {
        secondMethod+=plateValues[m];
      }
    }
    printer.print(""Case #"" + (i + 1) + "": "");
    printer.println(firstMethod + "" "" + secondMethod);
  }
  printer.close();
}
"
30000614,"public static void main(String[] args) throws IOException {
  BufferedReader instr=new BufferedReader(new InputStreamReader(System.in));
  String oneLine;
  int counter=0;
  while ((oneLine=instr.readLine()) != null) {
    if (counter == 0) {
      counter++;
      continue;
    }
    if (counter % 2 == 1) {
      counter++;
      continue;
    }
    String[] input=oneLine.split(""\\s+"");
    List<Integer> mushroom_list1=new ArrayList<Integer>();
    for (int i1=0; i1 < input.length; i1++) {
      int temp=Integer.parseInt(input[i1]);
      mushroom_list1.add(temp);
    }
    List<Integer> mushroom_list=mushroom_list1;
    int sum=0;
    int len=mushroom_list.size();
    for (int i=1; i < len; i++) {
      int diff=mushroom_list.get(i - 1) - mushroom_list.get(i);
      if (diff > 0) {
        sum=sum + diff;
      }
    }
    int first_sol=sum;
    int largest_diff=0;
    int len1=mushroom_list.size();
    for (int i=1; i < len1; i++) {
      int diff=mushroom_list.get(i - 1) - mushroom_list.get(i);
      if (diff > largest_diff) {
        largest_diff=diff;
      }
    }
    int sum1=0;
    for (int i=0; i < len1 - 1; i++) {
      int num=mushroom_list.get(i);
      if (num > largest_diff) {
        sum1+=largest_diff;
      }
 else {
        sum1+=num;
      }
    }
    int second_sol=sum1;
    System.out.println(""Case #"" + counter / 2 + "": "" + first_sol + "" "" + second_sol);
    counter++;
  }
}
"
30000615,"public static void main(String[] args) throws IOException {
  in=new BufferedReader(new FileReader(new File(""/Users/yfo/Downloads/a2.in"")));
  out=new PrintWriter(new FileWriter(new File(""/Users/yfo/Downloads/a2.out.in"")));
  int T=Integer.parseInt(in.readLine());
  for (int t=0; t < T; t++) {
    int N=Integer.parseInt(in.readLine());
    String[] tok=in.readLine().split("" "");
    int[] res=new int[tok.length];
    for (int i1=0; i1 < tok.length; i1++) {
      res[i1]=Integer.parseInt(tok[i1]);
    }
    int[] m=res;
    long first=0;
    for (int i=1; i < N; i++) {
      if (m[i] < m[i - 1])       first+=m[i - 1] - m[i];
    }
    long max=0;
    for (int i=0; i < N - 1; i++) {
      if (m[i] > m[i + 1]) {
        max=Math.max(max,m[i] - m[i + 1]);
      }
    }
    long second=0;
    for (int i=0; i < N - 1; i++) {
      if (i != N - 1) {
        second+=Math.min(max,m[i]);
      }
    }
    out.println(""Case #"" + (t + 1) + "": ""+ first+ "" ""+ second);
  }
  in.close();
  out.close();
}
"
30000616,"public static void main(String[] args) throws IOException {
  FileReader in=new FileReader(""in.in"");
  File out=new File(""out.out"");
  BufferedReader reader=new BufferedReader(in);
  PrintWriter writer=new PrintWriter(out);
  int test=Integer.parseInt(reader.readLine());
  for (int i=1; i <= test; i++) {
    int n=Integer.parseInt(reader.readLine());
    String[] data=reader.readLine().split(""\\s"");
    int t=Integer.parseInt(data[0]);
    int min1=0;
    int min2=0;
    int maxDif=0;
    int[] numbers=new int[n];
    numbers[0]=t;
    for (int j=1; j < n; j++) {
      int temp=Integer.parseInt(data[j]);
      numbers[j]=temp;
      if (t > temp)       min1+=t - temp;
      if (t - temp > maxDif)       maxDif=t - temp;
      t=temp;
    }
    if (numbers[0] > maxDif)     min2=maxDif;
 else     min2=numbers[0];
    for (int j=1; j < n - 1; j++) {
      if (numbers[j] > maxDif)       min2+=maxDif;
 else       min2+=numbers[j];
    }
    writer.print(""Case #"");
    writer.print(i);
    writer.print("": "");
    writer.print(min1);
    writer.print("" "");
    writer.println(min2);
  }
  reader.close();
  writer.close();
}
"
30000617,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(new FileWriter(new File(""A-large.out"")));
  int t=in.nextInt();
  for (int x=0; x < t; x++) {
    int n=in.nextInt();
    long[] array=new long[n];
    long rate=0;
    for (int y=0; y < n; y++) {
      array[y]=in.nextInt();
      if (y > 0) {
        rate=Math.max(rate,array[y - 1] - array[y]);
      }
    }
    long result1=0;
    long result2=0;
    for (int z=0; z < array.length - 1; z++) {
      result1+=Math.max(0,array[z] - array[z + 1]);
      result2+=Math.min(rate,array[z]);
    }
    out.println(""Case #"" + (x + 1) + "": ""+ result1+ "" ""+ result2);
  }
  out.close();
}
"
30000618,"static public void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""input.in""));
  PrintWriter out=new PrintWriter(""output.txt"");
  int t=Integer.parseInt(br.readLine());
  for (int z=1; z <= t; z++) {
    int n=Integer.parseInt(br.readLine());
    String[] in=br.readLine().split("" "");
    int[] arr=new int[n];
    long max=-1;
    arr[0]=Integer.parseInt(in[0]);
    long y=0, x=0;
    for (int i=1; i < n; i++) {
      arr[i]=Integer.parseInt(in[i]);
      if (arr[i] <= arr[i - 1]) {
        y+=arr[i - 1] - arr[i];
        if (arr[i - 1] - arr[i] > max)         max=arr[i - 1] - arr[i];
      }
    }
    for (int i=0; i < n - 1; i++) {
      x+=Math.min(max,arr[i]);
    }
    out.println(""Case #"" + z + "": ""+ y+ "" ""+ x);
  }
  br.close();
  out.close();
}
"
30000619,"public static void main(String[] args){
  String filePath=new File("""").getAbsolutePath();
  String readFilePath=filePath.concat(""/src/text.in"");
  String writeFilePath=filePath.concat(""/src/text.out"");
  File inFile=new File(readFilePath);
  FileWriter write=null;
  try {
    write=new FileWriter(writeFilePath);
  }
 catch (  IOException ex) {
  }
  PrintWriter print_line=new PrintWriter(write);
  Scanner inLine=null;
  try {
    inLine=new Scanner(inFile);
  }
 catch (  FileNotFoundException ex) {
  }
  int testCases=inLine.nextInt();
  for (int i=0; i < testCases; i++) {
    int ans1=0;
    int ans2=0;
    int numNums=inLine.nextInt();
    int[] numbers=new int[numNums];
    for (int j=0; j < numNums; j++) {
      numbers[j]=inLine.nextInt();
    }
    for (int j=1; j < numNums; j++) {
      if (numbers[j - 1] - numbers[j] > 0) {
        ans1+=numbers[j - 1] - numbers[j];
      }
    }
    int maxDiff=0;
    for (int j=1; j < numNums; j++) {
      if (numbers[j - 1] - numbers[j] > maxDiff)       maxDiff=numbers[j - 1] - numbers[j];
    }
    for (int j=1; j < numNums; j++) {
      if (numbers[j - 1] > maxDiff)       ans2+=maxDiff;
 else       ans2+=numbers[j - 1];
    }
    print_line.printf(""Case #%d: %d %d"",i + 1,ans1,ans2);
    if (i < testCases - 1)     print_line.println();
  }
  print_line.close();
}
"
30000620,"public static void main(String[] args) throws Exception {
  Mushroom r=new Mushroom();
  r.numCases=Integer.parseInt(Mushroom.in.readLine().trim());
  for (int i=1; i <= r.numCases; i++) {
    Mushroom.out.print(""Case #"" + i + "": "");
    String line=Mushroom.in.readLine();
    Scanner scan=new Scanner(line);
    int N=scan.nextInt();
    line=Mushroom.in.readLine();
    scan=new Scanner(line);
    int prev=scan.nextInt();
    int max=0;
    int sum=0;
    int[] m=new int[N];
    m[0]=prev;
    for (int i2=1; i2 < N; i2++) {
      int next=scan.nextInt();
      m[i2]=next;
      int diff=prev - next;
      if (diff > 0)       sum+=diff;
      if (diff > max)       max=diff;
      prev=next;
    }
    int res=0;
    for (int i1=0; i1 < N - 1; i1++) {
      res+=Math.min(max,m[i1]);
    }
    System.out.println(sum + "" "" + res);
  }
}
"
30000621,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter pw=new PrintWriter(System.out);
  int T=Integer.parseInt(br.readLine());
  for (int t=1; t <= T; t++) {
    int n=Integer.parseInt(br.readLine());
    int[] aa=new int[n];
    StringTokenizer st=new StringTokenizer(br.readLine());
    for (int i=0; i < n; i++)     aa[i]=Integer.parseInt(st.nextToken());
    int sum1=0;
    for (int i=1; i < n; i++)     if (aa[i - 1] > aa[i])     sum1+=aa[i - 1] - aa[i];
    int max=0;
    for (int i=1; i < n; i++)     if (aa[i - 1] - aa[i] > max)     max=aa[i - 1] - aa[i];
    int sum2=0;
    for (int i=1; i < n; i++)     sum2+=Math.min(max,aa[i - 1]);
    pw.println(""Case #"" + t + "": ""+ sum1+ "" ""+ sum2);
  }
  pw.close();
}
"
30000622,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int numOfCases=scanner.nextInt();
  for (int i=0; i < numOfCases; i++) {
    int numIntervals=scanner.nextInt();
    int[] numMushrooms=new int[numIntervals];
    for (int j=0; j < numIntervals; j++) {
      numMushrooms[j]=scanner.nextInt();
    }
    int x=0;
    int maxDrop=0;
    for (int j=0; j < numIntervals - 1; j++) {
      if (numMushrooms[j + 1] < numMushrooms[j]) {
        x=x + numMushrooms[j] - numMushrooms[j + 1];
        if ((numMushrooms[j] - numMushrooms[j + 1]) > maxDrop)         maxDrop=numMushrooms[j] - numMushrooms[j + 1];
      }
    }
    int y=0;
    for (int j=0; j < numIntervals - 1; j++) {
      if (numMushrooms[j] < maxDrop)       y=y + numMushrooms[j];
 else       y=y + maxDrop;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ x+ "" ""+ y);
  }
}
"
30000623,"public static void main(String[] args){
  int numInput=input.nextInt();
  for (int e=1; e <= numInput; e++) {
    int numIn=input.nextInt();
    int[] numMashroom=new int[numIn];
    for (int i=0; i < numIn; i++) {
      numMashroom[i]=input.nextInt();
    }
    int case1=0;
    int case2max=0;
    int case2=0;
    for (int i=0; i < numIn - 1; i++) {
      if (numMashroom[i] > numMashroom[i + 1]) {
        case1+=(numMashroom[i] - numMashroom[i + 1]);
      }
    }
    for (int i=0; i < numIn - 1; i++) {
      if (case2max < (numMashroom[i] - numMashroom[i + 1])) {
        case2max=numMashroom[i] - numMashroom[i + 1];
      }
    }
    for (int i=0; i < numIn - 1; i++) {
      if (numMashroom[i] < case2max) {
        case2+=numMashroom[i];
      }
 else {
        case2+=case2max;
      }
    }
    System.out.println(""Case #"" + e + "": ""+ case1+ "" ""+ case2);
  }
}
"
30000624,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(System.in);
  PrintWriter out=new PrintWriter(""mushroom.out"");
  int numCases=Integer.parseInt(scanner.nextLine());
  for (int curCase=1; curCase <= numCases; curCase++) {
    int numIntervals=Integer.parseInt(scanner.nextLine());
    String[] intervalStr=scanner.nextLine().split("" "");
    int[] intervals=new int[numIntervals];
    for (int i=0; i < numIntervals; i++) {
      intervals[i]=Integer.parseInt(intervalStr[i]);
    }
    int minEatFree=0;
    int minEatConstant=0;
    int maxDrop=0;
    for (int i=1; i < numIntervals; i++) {
      int difference=intervals[i - 1] - intervals[i];
      minEatFree+=Math.max(0,difference);
      maxDrop=Math.max(maxDrop,difference);
    }
    for (int i=0; i < numIntervals - 1; i++) {
      if (intervals[i] < maxDrop) {
        minEatConstant+=intervals[i];
      }
 else {
        minEatConstant+=maxDrop;
      }
    }
    out.println(""Case #"" + curCase + "": ""+ minEatFree+ "" ""+ minEatConstant);
  }
  scanner.close();
  out.close();
}
"
30000625,"public static void main(String[] args){
  R1A_A r=new R1A_A();
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int test=1; test <= t; test++) {
    r.n=sc.nextInt();
    r.m=new int[r.n];
    for (int i=0; i < r.n; i++)     r.m[i]=sc.nextInt();
    int ans1=0;
    int difmax=0;
    for (int i=0; i < r.n - 1; i++) {
      int dif=r.m[i] - r.m[i + 1];
      if (dif > 0) {
        ans1+=dif;
        difmax=Math.max(dif,difmax);
      }
    }
    int ans2=0;
    for (int i=0; i < r.n - 1; i++) {
      if (r.m[i] - difmax > 0)       ans2+=difmax;
 else       ans2+=r.m[i];
    }
    System.out.println(""case #"" + test + "": ""+ ans1+ "" ""+ ans2);
  }
  sc.close();
}
"
30000626,"public static void main(String... orange) throws Exception {
  File file=new File(filename + "".in"");
  input=new Scanner(file);
  PrintWriter writer=new PrintWriter(filename + "".out"",""UTF-8"");
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    int N=input.nextInt();
    int room[]=new int[N];
    for (int i=0; i < N; i++) {
      room[i]=input.nextInt();
    }
    int eat1=0;
    for (int i=1; i < room.length; i++) {
      if (room[i] < room[i - 1]) {
        eat1+=room[i - 1] - room[i];
      }
    }
    int eat2=0;
    int fastestEatRate=0;
    for (int i=1; i < room.length; i++) {
      if (room[i - 1] - room[i] > fastestEatRate) {
        fastestEatRate=room[i - 1] - room[i];
      }
    }
    for (int i=0; i < room.length - 1; i++) {
      if (room[i] < fastestEatRate) {
        eat2+=room[i];
      }
 else {
        eat2+=fastestEatRate;
      }
    }
    String solution="""" + eat1 + "" ""+ eat2;
    writer.printf(""Case #%d: %s\n"",n + 1,solution);
    System.out.printf(""Case #%d: %s\n"",n + 1,solution);
  }
  writer.close();
  input.close();
}
"
30000627,"public static void main(String[] args) throws Exception {
  isStandardInput=true;
  output=new File(""test.out"");
  outputWriter=new FileWriter(output);
  out=new BufferedWriter(outputWriter);
  isStandardInput=false;
  input=new File(""A-large"" + "".in"");
  inputReader=new FileReader(input);
  in=new BufferedReader(inputReader);
  output=new File(""A-large"" + "".out"");
  outputWriter=new FileWriter(output);
  out=new BufferedWriter(outputWriter);
  int T=Integer.parseInt(TOKEN());
  for (int i=0; i < T; i++) {
    int N=Integer.parseInt(TOKEN());
    int[] m=new int[N];
    for (int k=0; k < N; k++) {
      m[k]=Integer.parseInt(TOKEN());
    }
    int first=0;
    int second=0;
    int rate=0;
    for (int k=1; k < N; k++) {
      if (m[k - 1] - m[k] > 0) {
        first+=m[k - 1] - m[k];
        rate=Math.max(rate,m[k - 1] - m[k]);
      }
    }
    for (int k=0; k < N - 1; k++) {
      second+=Math.min(rate,m[k]);
    }
    String line=""Case #"" + (i + 1) + "": ""+ first+ "" ""+ second;
    out.write(line);
    out.write(""\n"");
    System.out.println(line);
  }
  if (in != null)   in.close();
  if (inputReader != null)   inputReader.close();
  if (out != null)   out.flush();
  if (out != null)   out.close();
  if (outputWriter != null)   outputWriter.close();
}
"
30000628,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(in.readLine());
  for (int cas=1; cas <= T; cas++) {
    int N=Integer.parseInt(in.readLine());
    long[] a=new long[N];
    String[] spl=in.readLine().split("" "");
    for (int i=0; i < N; i++) {
      a[i]=Integer.parseInt(spl[i]);
    }
    long sum=0;
    long maxD=0;
    for (int i=0; i < N - 1; i++) {
      sum+=Math.max(0,a[i] - a[i + 1]);
      maxD=Math.max(maxD,a[i] - a[i + 1]);
    }
    long s2=0;
    for (int i=0; i < N - 1; i++) {
      s2+=Math.min(maxD,a[i]);
    }
    String ans=sum + "" "" + s2;
    System.out.println(""Case #"" + cas + "": ""+ ans);
  }
}
"
30000629,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(infile));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(outfile,false)));
  int line=Integer.parseInt(in.readLine());
  for (int i=1; i <= line; i++) {
    String nums=in.readLine();
    String[] parts=in.readLine().split("" "");
    int d=Integer.parseInt(nums);
    int n1=0, n2=0, max1=0;
    int[] number=new int[parts.length];
    for (int j=0; j < parts.length; j++) {
      number[j]=Integer.parseInt(parts[j]);
    }
    if (number[0] > number[1]) {
      max1=number[0] - number[1];
    }
    for (int k=1; k < number.length; k++) {
      if ((number[k - 1] - number[k]) > max1) {
        max1=number[k - 1] - number[k];
      }
      if (number[k] < number[k - 1]) {
        n1=n1 + number[k - 1] - number[k];
      }
    }
    for (int k=0; k < number.length - 1; k++) {
      if (number[k] < max1) {
        n2+=number[k];
      }
 else {
        n2+=max1;
      }
    }
    out.printf(""Case #%d: %d %d"",i,n1,n2);
    out.println();
    out.flush();
  }
  in.close();
  out.close();
}
"
30000630,"public static void main(String args[]) throws FileNotFoundException {
  final String defaultFile=A.class.getName() + "".in"";
  final PrintStream out;
  final InputStream in;
  if (args.length == 0) {
    in=new FileInputStream(""test/"" + defaultFile);
    out=System.out;
  }
 else {
    in=new FileInputStream(""resources/"" + args[0]);
    out=new PrintStream(new FileOutputStream(""result/"" + args[0]));
  }
  Scanner scanner=new Scanner(in);
  int nbTest=scanner.nextInt();
  for (int i=0; i < nbTest; i++) {
    scanner.nextLine();
    int nb=scanner.nextInt();
    scanner.nextLine();
    List<Integer> data=new ArrayList<Integer>(nb);
    for (int j=0; j < nb; j++)     data.add(scanner.nextInt());
    int first=0;
    int rate=0;
    int second=0;
    for (int i1=1; i1 < data.size(); i1++) {
      int d=data.get(i1 - 1) - data.get(i1);
      if (d > 0) {
        first+=d;
        rate=Math.max(rate,d);
      }
    }
    for (int i2=0; i2 < data.size() - 1; i2++) {
      second+=Math.min(rate,data.get(i2));
    }
    Object res=first + "" "" + second;
    out.println(""Case #"" + (i + 1) + "": ""+ res);
  }
}
"
30000631,"public static void main(String[] args) throws IOException, FileNotFoundException {
  String file=""A-large"";
  Scanner scan=new Scanner(new BufferedReader(new FileReader(file + "".in"")));
  PrintWriter pw=new PrintWriter(new BufferedWriter(new FileWriter(file + "".out"")));
  int T=Integer.parseInt(scan.nextLine());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(scan.nextLine());
    String[] info=scan.nextLine().split("" "");
    long[] num=new long[N];
    for (int i=0; i < N; i++)     num[i]=Long.parseLong(info[i]);
    long y=0;
    for (int i=1; i < N; i++)     if (num[i] < num[i - 1])     y+=num[i - 1] - num[i];
    long z=0;
    long max=0;
    for (int i=1; i < N; i++)     if (num[i] <= num[i - 1])     max=Math.max(max,num[i - 1] - num[i]);
    for (int i=1; i < N; i++)     z+=Math.min(num[i - 1],max);
    pw.println(""Case #"" + t + "": ""+ y+ "" ""+ z);
  }
  scan.close();
  pw.close();
}
"
30000632,"public static void main(String[] args){
  int T=sc.nextInt();
  for (int i=0; i < T; i++) {
    int N=sc.nextInt();
    int curr=0;
    int next=sc.nextInt();
    int[] a=new int[N];
    a[0]=next;
    int max=0;
    int meth1max=0;
    for (int i1=1; i1 < N; i1++) {
      curr=next;
      next=sc.nextInt();
      a[i1]=next;
      if (curr - next > max)       max=curr - next;
      if (curr - next > 0)       meth1max+=curr - next;
    }
    int sum=0;
    for (int i2=0; i2 < N - 1; i2++) {
      if (a[i2] > max)       sum+=max;
 else       sum+=a[i2];
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ meth1max+ "" ""+ sum);
  }
}
"
30000633,"public static void main(String[] args) throws IOException {
  try (Scanner scanner=new Scanner(new File(""/Users/bbaker/Documents/practice/round1A2015/a/A-large.in""));Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""/Users/bbaker/Documents/practice/round1A2015/a/A-large.out""),""utf-8""))){
    int t=scanner.nextInt();
    for (int i=1; i <= t; ++i) {
      int n=scanner.nextInt();
      ArrayList<Long> mushrooms=new ArrayList<>(n);
      for (int j=0; j < n; ++j) {
        mushrooms.add(scanner.nextLong());
      }
      long y=0;
      long prev=mushrooms.get(0);
      for (int j=1; j < n; ++j) {
        long current=mushrooms.get(j);
        long diff=prev - current;
        if (diff > 0) {
          y+=diff;
        }
        prev=current;
      }
      prev=mushrooms.get(0);
      long maxDiff=0;
      for (int j=1; j < n; ++j) {
        long current=mushrooms.get(j);
        long diff=prev - current;
        if (diff > maxDiff) {
          maxDiff=diff;
        }
        prev=current;
      }
      long z=0;
      for (int j=0; j < n - 1; ++j) {
        long current=mushrooms.get(j);
        long diff=current - maxDiff;
        if (diff >= 0) {
          z+=maxDiff;
        }
 else {
          z+=(maxDiff - Math.abs(diff));
        }
      }
      writer.write(""Case #"" + i + "": ""+ y+ "" ""+ z+ ""\n"");
    }
  }
 }
"
30000634,"public static void main(String args[]) throws IOException {
  Scanner input=new Scanner(new FileInputStream(new File(""p1small.txt"")));
  BufferedWriter bfr=new BufferedWriter(new FileWriter(new File(""p1small.result"")));
  int counter=1;
  input.nextLine();
  while (input.hasNext()) {
    input.nextLine();
    String[] line=input.nextLine().split("" "");
    int[] res1=new int[2];
    List<Integer> mushrooms=new ArrayList<>();
    for (    String s : line) {
      mushrooms.add(Integer.valueOf(s));
    }
    int last=mushrooms.get(0);
    int rate=0;
    for (int i=1; i < mushrooms.size(); i++) {
      int cur=mushrooms.get(i);
      int diff=last - cur;
      if (diff > 0) {
        res1[0]+=diff;
      }
      if (diff > rate) {
        rate=diff;
      }
      last=cur;
    }
    for (int i=0; i < mushrooms.size() - 1; i++) {
      int cur=mushrooms.get(i);
      if (cur < rate) {
        res1[1]+=cur;
      }
 else {
        res1[1]+=rate;
      }
    }
    int[] res=res1;
    System.out.printf(""Case #%d: %d %d\n"",counter++,res[0],res[1]);
  }
  bfr.flush();
}
"
30000635,"public static void main(String[] args){
  BufferedReader br;
  BufferedWriter bw;
  try {
    br=new BufferedReader(new FileReader(""A-large.in""));
    bw=new BufferedWriter(new FileWriter(""A-large.out""));
    int t=Integer.parseInt(br.readLine());
    for (int iii=1; iii <= t; iii++) {
      bw.write(""Case #"" + iii + "": "");
      int n=Integer.parseInt(br.readLine());
      String[] splits=br.readLine().split("" "");
      int[] mushrooms=new int[n];
      for (int jjj=0; jjj < n; jjj++) {
        mushrooms[jjj]=Integer.parseInt(splits[jjj]);
      }
      int previous=mushrooms[0];
      int case1=0;
      int case2=0;
      int max=0;
      for (int jjj=1; jjj < n; jjj++) {
        int current=mushrooms[jjj];
        if (current < previous) {
          int temp=previous - current;
          case1+=temp;
          if (temp > max) {
            max=temp;
          }
        }
        previous=current;
      }
      for (int jjj=0; jjj < n - 1; jjj++) {
        int current=mushrooms[jjj];
        if (current > max) {
          case2+=max;
        }
 else {
          case2+=current;
        }
      }
      bw.write(case1 + "" "" + case2);
      bw.newLine();
    }
    bw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000636,"public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int i=0; i < t; ++i) {
    int n=sc.nextInt();
    int[] m=new int[n];
    for (int j=0; j < n; ++j)     m[j]=sc.nextInt();
    int first=0;
    long second=0;
    long maxEaten=Integer.MIN_VALUE;
    for (int j=1; j < n; ++j) {
      if (m[j - 1] - m[j] > maxEaten)       maxEaten=m[j - 1] - m[j];
      if (m[j] < m[j - 1]) {
        first+=m[j - 1] - m[j];
      }
    }
    for (int j=0; j < n - 1; ++j) {
      if (m[j] > maxEaten)       second+=maxEaten;
 else       second+=m[j];
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ first+ "" ""+ second);
  }
}
"
30000637,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(br.readLine());
  for (int cases=1; cases <= T; cases++) {
    int n=Integer.parseInt(br.readLine());
    StringTokenizer st=new StringTokenizer(br.readLine());
    int[] nums=new int[n];
    for (int i=0; i < n; i++)     nums[i]=Integer.parseInt(st.nextToken());
    int ans1=0, ans2=0;
    for (int i=1; i < nums.length; i++)     if (nums[i] < nums[i - 1])     ans1+=nums[i - 1] - nums[i];
    double rate=0;
    for (int i=nums.length - 1; i > 0; i--)     rate=Math.max(rate,nums[i - 1] - nums[i]);
    for (int i=0; i < nums.length - 1; i++) {
      if (nums[i] > rate)       ans2+=rate;
 else       ans2+=nums[i];
    }
    System.out.println(""Case #"" + cases + "": ""+ ans1+ "" ""+ ans2);
  }
}
"
30000638,"public static void main(String[] args) throws Exception {
  File inputFile=new File(""A-large.in"");
  Scanner in=new Scanner(inputFile);
  File outputFile=new File(""output.txt"");
  PrintWriter out=new PrintWriter(outputFile);
  int T=in.nextInt();
  for (int t=0; t < T; t++) {
    int N=in.nextInt();
    int[] A=new int[N];
    for (int n=0; n < N; n++) {
      A[n]=in.nextInt();
    }
    long y=0;
    long max=0;
    for (int n=1; n < N; n++) {
      long diff=A[n - 1] - A[n];
      if (diff > 0) {
        y+=diff;
        max=Math.max(max,diff);
      }
    }
    long z=0;
    for (int n=0; n < N - 1; n++) {
      z+=Math.min(max,A[n]);
    }
    out.println(""Case #"" + (t + 1) + "": ""+ y+ "" ""+ z);
  }
  out.close();
}
"
30000639,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""input.in""));
  PrintWriter out=new PrintWriter(""output.txt"");
  int t=Integer.parseInt(br.readLine());
  for (int i=0; i < t; i++) {
    String[] in=br.readLine().split("" "");
    int n=Integer.parseInt(in[0]);
    in=br.readLine().split("" "");
    int[] arr=new int[n];
    long max=Long.MIN_VALUE;
    for (int j=0; j < n; j++) {
      arr[j]=Integer.parseInt(in[j]);
    }
    long e1=0;
    double rate=0.0;
    for (int j=0; j < n - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        e1+=(arr[j] - arr[j + 1]);
      }
      if (arr[j] > arr[j + 1]) {
        if ((((arr[j] - arr[j + 1]) * 1.0) / 10.0 > rate)) {
          rate=((arr[j] - arr[j + 1]) * 1.0) / 10.0;
        }
      }
    }
    long eaten=0;
    for (int j=0; j < n - 1; j++) {
      eaten+=Math.min(arr[j],rate * 10);
    }
    out.println(""Case #"" + (i + 1) + "": ""+ e1+ "" ""+ eaten);
  }
  br.close();
  out.close();
}
"
30000640,"public static void main(String[] args) throws Exception {
  final FileReader fileReader=new FileReader(FOLDER_PATH + ""\\"" + FILE_PATH);
  final BufferedReader bufferedReader=new BufferedReader(fileReader);
  final int numberOfTests=Integer.parseInt(bufferedReader.readLine());
  for (int i=0; i < numberOfTests; i++) {
    final int n=Integer.parseInt(bufferedReader.readLine());
    final String[] m=bufferedReader.readLine().split("" "");
    int result_1=0;
    int result_2=0;
    int current=Integer.parseInt(m[0]);
    int pace=0;
    for (int j=0; j < m.length - 1; j++) {
      int newPace=Integer.parseInt(m[j]) - Integer.parseInt(m[j + 1]);
      if (newPace >= 0) {
        if (newPace > pace) {
          pace=newPace;
        }
      }
    }
    for (int j=1; j < m.length; j++) {
      int mInt=Integer.parseInt(m[j]);
      if (current >= mInt) {
        result_1+=current - mInt;
      }
      result_2+=(current < pace) ? current : pace;
      current=mInt;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ result_1+ "" ""+ result_2);
  }
}
"
30000641,"/** 
 * @param args
 * @throws FileNotFoundException 
 */
public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(""out.txt"");
  int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    int N=in.nextInt();
    int[] num=new int[N];
    for (int j=0; j < N; j++) {
      num[j]=in.nextInt();
    }
    int res=0;
    for (int i1=1; i1 < num.length; i1++) {
      if (num[i1] < num[i1 - 1]) {
        res+=num[i1 - 1] - num[i1];
      }
    }
    int res1=res;
    int res3=0;
    int speed=0;
    for (int i2=1; i2 < num.length; i2++) {
      speed=Math.max(speed,num[i2 - 1] - num[i2]);
    }
    for (int i1=1; i1 < num.length; i1++) {
      res3+=Math.min(speed,num[i1 - 1]);
    }
    int res2=res3;
    out.println(""Case #"" + i + "": ""+ res1+ "" ""+ res2);
  }
  out.close();
  in.close();
}
"
30000642,"public static void main(String... args) throws IOException {
  if (!_SAMPLE) {
    if (_SMALL) {
      int i=0;
      while (new File(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".in"").exists())       i++;
      i--;
      boolean test=false;
      if (new File(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".out"").exists()) {
        System.err.println(""overwrite?(y/n)"");
        char c=(char)System.in.read();
        test=c != 'y';
      }
      if (test) {
        System.setIn(new FileInputStream(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".in""));
        System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
        AL r=new AL();
        Scanner sc=new Scanner(System.in);
        int testCase=sc.nextInt();
        for (int k=1; k <= testCase; k++) {
          System.out.printf(""Case #%d: "",k);
          System.err.printf(""Case #%d: "",k);
          int n=sc.nextInt();
          int[] mush=new int[n];
          for (int i1=0; i1 < n; i1++) {
            mush[i1]=sc.nextInt();
          }
          int first=0;
          int second=0;
          for (int i4=0; i4 < n - 1; i4++) {
            int diff=mush[i4] - mush[i4 + 1];
            if (diff > 0) {
              first+=diff;
            }
          }
          int[] diff=new int[n - 1];
          for (int i3=0; i3 < n - 1; i3++) {
            diff[i3]=mush[i3] - mush[i3 + 1];
          }
          int max=0;
          for (int i5=0; i5 < n - 1; i5++) {
            max=Math.max(max,diff[i5]);
          }
          for (int i2=0; i2 < n - 1; i2++) {
            second+=Math.min(max,mush[i2]);
          }
          System.out.printf(""%d %d"",first,second);
          System.err.printf(""%d %d"",first,second);
          System.out.println();
          System.err.println();
        }
        sc.close();
        FileReader f1=new FileReader(_PROBLEM + ""-small-test.out"");
        FileReader f2=new FileReader(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".out"");
        BufferedReader br1=new BufferedReader(f1);
        BufferedReader br2=new BufferedReader(f2);
        for (int j=1; ; j++) {
          String s1=br1.readLine();
          String s2=br2.readLine();
          if (s1 == null && s2 == null) {
            System.err.println(""OK!"");
            break;
          }
          if (s1 == null || s2 == null || !s1.equals(s2)) {
            System.err.println(""failed at line "" + j);
            System.err.println(""expected "" + s2);
            System.err.println(""but "" + s1);
            break;
          }
        }
        br1.close();
        br2.close();
      }
 else {
        System.setIn(new FileInputStream(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".in""));
        System.setOut(new PrintStream(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".out""));
        AL r=new AL();
        Scanner sc=new Scanner(System.in);
        int testCase=sc.nextInt();
        for (int k=1; k <= testCase; k++) {
          System.out.printf(""Case #%d: "",k);
          System.err.printf(""Case #%d: "",k);
          int n=sc.nextInt();
          int[] mush=new int[n];
          for (int i1=0; i1 < n; i1++) {
            mush[i1]=sc.nextInt();
          }
          int first=0;
          int second=0;
          for (int i4=0; i4 < n - 1; i4++) {
            int diff=mush[i4] - mush[i4 + 1];
            if (diff > 0) {
              first+=diff;
            }
          }
          int[] diff=new int[n - 1];
          for (int i3=0; i3 < n - 1; i3++) {
            diff[i3]=mush[i3] - mush[i3 + 1];
          }
          int max=0;
          for (int i5=0; i5 < n - 1; i5++) {
            max=Math.max(max,diff[i5]);
          }
          for (int i2=0; i2 < n - 1; i2++) {
            second+=Math.min(max,mush[i2]);
          }
          System.out.printf(""%d %d"",first,second);
          System.err.printf(""%d %d"",first,second);
          System.out.println();
          System.err.println();
        }
        sc.close();
      }
    }
 else {
      System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """")+ "".in""));
      System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """")+ "".out""));
      AL r=new AL();
      Scanner sc=new Scanner(System.in);
      int testCase=sc.nextInt();
      for (int k=1; k <= testCase; k++) {
        System.out.printf(""Case #%d: "",k);
        System.err.printf(""Case #%d: "",k);
        int n=sc.nextInt();
        int[] mush=new int[n];
        for (int i=0; i < n; i++) {
          mush[i]=sc.nextInt();
        }
        int first=0;
        int second=0;
        for (int i=0; i < n - 1; i++) {
          int diff=mush[i] - mush[i + 1];
          if (diff > 0) {
            first+=diff;
          }
        }
        int[] diff=new int[n - 1];
        for (int i=0; i < n - 1; i++) {
          diff[i]=mush[i] - mush[i + 1];
        }
        int max=0;
        for (int i=0; i < n - 1; i++) {
          max=Math.max(max,diff[i]);
        }
        for (int i=0; i < n - 1; i++) {
          second+=Math.min(max,mush[i]);
        }
        System.out.printf(""%d %d"",first,second);
        System.err.printf(""%d %d"",first,second);
        System.out.println();
        System.err.println();
      }
      sc.close();
    }
  }
 else {
    AL r=new AL();
    Scanner sc=new Scanner(System.in);
    int testCase=sc.nextInt();
    for (int k=1; k <= testCase; k++) {
      System.out.printf(""Case #%d: "",k);
      System.err.printf(""Case #%d: "",k);
      int n=sc.nextInt();
      int[] mush=new int[n];
      for (int i=0; i < n; i++) {
        mush[i]=sc.nextInt();
      }
      int first=0;
      int second=0;
      for (int i=0; i < n - 1; i++) {
        int diff=mush[i] - mush[i + 1];
        if (diff > 0) {
          first+=diff;
        }
      }
      int[] diff=new int[n - 1];
      for (int i=0; i < n - 1; i++) {
        diff[i]=mush[i] - mush[i + 1];
      }
      int max=0;
      for (int i=0; i < n - 1; i++) {
        max=Math.max(max,diff[i]);
      }
      for (int i=0; i < n - 1; i++) {
        second+=Math.min(max,mush[i]);
      }
      System.out.printf(""%d %d"",first,second);
      System.err.printf(""%d %d"",first,second);
      System.out.println();
      System.err.println();
    }
    sc.close();
  }
}
"
30000643,"public static void main(String[] args){
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  BufferedOutputStream bos=new BufferedOutputStream(System.out);
  String eol=System.getProperty(""line.separator"");
  byte[] eolb=eol.getBytes();
  try {
    String str=br.readLine();
    int t=Integer.parseInt(str);
    for (int i=0; i < t; i++) {
      str=br.readLine();
      int n=Integer.parseInt(str);
      str=br.readLine();
      StringTokenizer st=new StringTokenizer(str,"" "");
      int[] ar=new int[n];
      int iter=0;
      while (st.hasMoreTokens()) {
        ar[iter++]=Integer.parseInt(st.nextToken());
      }
      int ansY=0;
      int ansZ=0;
      int dip=0;
      for (int j=0; j < n - 1; j++) {
        dip=Math.max(dip,ar[j] - ar[j + 1]);
        if (ar[j + 1] < ar[j]) {
          ansY+=ar[j] - ar[j + 1];
        }
      }
      for (int j=0; j < n - 1; j++) {
        int x=Math.min(ar[j],dip);
        ansZ+=x;
      }
      bos.write(""Case #"".getBytes());
      bos.write(new Integer(i + 1).toString().getBytes());
      bos.write("": "".getBytes());
      bos.write(new Integer(ansY).toString().getBytes());
      bos.write("" "".getBytes());
      bos.write(new Integer(ansZ).toString().getBytes());
      bos.write(eolb);
    }
    bos.flush();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}
"
30000644,"public static void main(String[] args){
  try {
    Mushroom sc=new Mushroom();
    sc.reader=new BufferedReader(new FileReader(new File(sc.folderName,sc.inputFileName)));
    sc.nCases=new Integer(sc.reader.readLine());
    System.out.println(""nCases="" + sc.nCases);
    sc.writer=new BufferedWriter(new FileWriter(new File(sc.folderName,sc.outputFileName)));
    for (int i=1; i <= sc.nCases; i++) {
      sc.caseNumber=i;
      sc.n=new Integer(sc.reader.readLine());
      sc.q=new int[sc.n];
      StringTokenizer st=new StringTokenizer(sc.reader.readLine(),"" "",false);
      for (int i1=0; i1 < sc.n; i1++) {
        sc.q[i1]=new Integer(st.nextToken());
      }
      int ans=0;
      for (int i1=1; i1 < sc.n; i1++) {
        int diff=sc.q[i1 - 1] - sc.q[i1];
        if (diff > 0)         ans+=diff;
      }
      int method1=ans;
      int ans1=0;
      int max=0;
      for (int i1=1; i1 < sc.q.length; i1++) {
        int diff=sc.q[i1 - 1] - sc.q[i1];
        if (diff > max)         max=diff;
      }
      for (int i2=0; i2 < (sc.q.length - 1); i2++) {
        if (sc.q[i2] > max) {
          ans1+=max;
        }
 else {
          ans1+=sc.q[i2];
        }
      }
      int method2=ans1;
      String output=""Case #"" + sc.caseNumber + "": ""+ method1+ "" ""+ method2;
      sc.writer.write(output + ""\n"");
    }
    sc.reader.close();
    sc.writer.flush();
    sc.writer.close();
  }
 catch (  Exception exp) {
    exp.printStackTrace();
  }
}
"
30000645,"public static void main(String... args){
  @SuppressWarnings(""resource"") Scanner in=new Scanner(System.in);
  int caseCount=in.nextInt();
  int[] m=new int[1001];
  for (int caseValue=1; caseValue <= caseCount; caseValue++) {
    int N=in.nextInt();
    for (int i=0; i < N; i++) {
      m[i]=in.nextInt();
    }
    int result1=0;
{
      int prev=m[0];
      for (int i=1; i < N; i++) {
        int curr=m[i];
        result1+=Math.max(0,prev - curr);
        prev=curr;
      }
    }
    int result2=0;
{
      int minEatenMax=0;
      int prev=m[0];
      for (int i=1; i < N; i++) {
        int curr=m[i];
        int minEaten=Math.max(0,prev - curr);
{
          if (minEatenMax < minEaten) {
            minEatenMax=minEaten;
          }
        }
        prev=curr;
      }
      prev=m[0];
      for (int i=1; i < N; i++) {
        int curr=m[i];
{
          if (prev < minEatenMax) {
            result2+=prev;
          }
 else {
            result2+=minEatenMax;
          }
        }
        prev=curr;
      }
    }
    System.out.println(""Case #"" + caseValue + "": ""+ result1+ "" ""+ result2);
  }
}
"
30000646,"public static void main(String[] args) throws IOException {
  Scanner s=new Scanner(new File(""A-large (1).in""));
  PrintWriter out=new PrintWriter(new FileWriter(""out.txt""));
  int cases=s.nextInt();
  for (int n=0; n < cases; n++) {
    int min1=0;
    int min2=0;
    int dif=0;
    int k=s.nextInt();
    int[] plate=new int[k];
    for (int x=0; x < k; x++) {
      plate[x]=s.nextInt();
    }
    for (int x=1; x < k; x++) {
      if (plate[x - 1] > plate[x]) {
        int temp=plate[x - 1] - plate[x];
        min1+=temp;
        if (temp > dif)         dif=temp;
      }
    }
    for (int x=0; x < k - 1; x++) {
      min2+=Math.min(dif,plate[x]);
    }
    out.println(""Case #"" + (n + 1) + "": ""+ min1+ "" ""+ min2);
  }
  out.close();
}
"
30000647,"public static void main(String[] args){
  Scanner in=null;
  try {
    in=new Scanner(new File(""A-large.in""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    System.exit(-1);
  }
  PrintWriter out=null;
  try {
    out=new PrintWriter(""out.txt"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    System.exit(-1);
  }
  int nTests=in.nextInt();
  for (int testsCount=0; testsCount < nTests; ++testsCount) {
    int n=in.nextInt();
    int m1=0, m2=0;
    int[] v=new int[1024];
    int maxd=-1;
    for (int i=0; i < n; i++) {
      v[i]=in.nextInt();
      if (i > 0) {
        int d=v[i - 1] - v[i];
        if (v[i - 1] > v[i]) {
          m1+=d;
        }
        if (d > maxd) {
          maxd=d;
        }
      }
    }
    for (int i=0; i < n - 1; i++) {
      if (v[i] < maxd) {
        m2+=v[i];
      }
 else {
        m2+=maxd;
      }
    }
    out.println(""Case #"" + (testsCount + 1) + "": ""+ m1+ "" ""+ m2);
  }
  out.close();
}
"
30000648,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""A.in""));
  FileWriter out=new FileWriter(""aout.txt"");
  int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    int N=in.nextInt();
    int[] m=new int[N];
    int min1=0;
    for (int j=0; j < N; j++) {
      m[j]=in.nextInt();
    }
    for (int j=1; j < N; j++) {
      min1+=(m[j] < m[j - 1]) ? m[j - 1] - m[j] : 0;
    }
    int minRate=0;
    for (int j=1; j < N; j++) {
      minRate=Math.max(minRate,m[j - 1] - m[j]);
    }
    int min2=0;
    for (int j=0; j < N - 1; j++) {
      min2+=Math.min(m[j],minRate);
    }
    out.write(""Case #"" + i + "": ""+ min1+ "" ""+ min2+ ""\n"");
    System.out.print(""Case #"" + i + "": ""+ min1+ "" ""+ minRate+ ""\n"");
    System.out.print(""Case #"" + i + "": ""+ min1+ "" ""+ min2+ ""\n"");
  }
  in.close();
  out.close();
}
"
30000649,"public static void main(String[] args){
  try {
    System.setOut(new PrintStream(""src/output.out""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  Scanner in=null;
  try {
    in=new Scanner(new File(""src/A-large (2).in""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  int t=in.nextInt();
  for (int i=0; i < t; i++) {
    int n=in.nextInt();
    int[] tab=new int[n];
    int s=0;
    int max=Integer.MIN_VALUE;
    for (int j=0; j < tab.length; j++) {
      tab[j]=in.nextInt();
      if (j != 0) {
        if ((tab[j] - tab[j - 1]) < 0) {
          s+=-(tab[j] - tab[j - 1]);
          if ((tab[j - 1] - tab[j]) > max) {
            max=-(tab[j] - tab[j - 1]);
          }
        }
      }
    }
    int k=0;
    int r=tab[0];
    if (max < 0)     max=0;
    for (int j=0; j < tab.length; j++) {
      if (j != tab.length - 1) {
        if (tab[j] >= max) {
          k+=max;
        }
 else {
          k+=tab[j];
        }
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ s+ "" ""+ k);
  }
}
"
30000650,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in.txt""));
  File out=new File(""large.out.txt"");
  PrintWriter pw=new PrintWriter(out);
  int cases=Integer.parseInt(br.readLine());
  for (int tt=0; tt < cases; tt++) {
    int n=Integer.parseInt(br.readLine());
    String[] s=br.readLine().split("" "");
    int[] q=new int[n];
    for (int i=0; i < n; i++) {
      q[i]=Integer.parseInt(s[i]);
    }
    int m1=0;
    for (int i=0; i < n - 1; i++) {
      int k=q[i + 1] - q[i];
      if (k < 0)       m1+=-k;
    }
    int m2=Integer.MAX_VALUE;
    for (int rate=0; rate < 10001; rate++) {
      int count=0;
      boolean good=true;
      int cons=rate;
      for (int i=0; i < n - 1; i++) {
        if (q[i] - cons > q[i + 1]) {
          good=false;
          break;
        }
 else {
          count+=q[i] - cons >= 0 ? cons : q[i];
        }
      }
      if (good) {
        m2=count;
        break;
      }
    }
    pw.println(""Case #"" + (tt + 1) + "": ""+ m1+ "" ""+ m2);
  }
  br.close();
  pw.close();
}
"
30000651,"public static void main(String[] args){
  Scanner inp=new Scanner(System.in);
  int t=inp.nextInt();
  for (int i=0; i < t; i++) {
    int n=inp.nextInt();
    int[] arr=new int[n];
    for (int j=0; j < n; j++) {
      arr[j]=inp.nextInt();
    }
    int sum1=0;
    int sum2=0;
    for (int k=0; k < n - 1; k++) {
      int y=(arr[k] - arr[k + 1] > 0) ? arr[k] - arr[k + 1] : 0;
      sum1+=y;
    }
    int v=0;
    for (int h=0; h < n - 1; h++) {
      v=Math.max(v,arr[h] - arr[h + 1]);
    }
    for (int d=0; d < n - 1; d++) {
      int x=(arr[d] <= v) ? arr[d] : v;
      sum2+=x;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ sum1+ "" ""+ sum2);
  }
}
"
30000652,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  PrintWriter print;
  try {
    print=new PrintWriter(""outputPrA"");
    StringBuilder outputString=new StringBuilder();
    int testCases=Integer.parseInt(in.nextLine());
    for (int i=0; i < testCases; i++) {
      String numberOfInputs=in.nextLine();
      String numberOfMushroomsString=in.nextLine();
      String[] mushroomInputs=numberOfMushroomsString.split(""\\s"");
      Integer minNoEaten=0;
      for (int i3=0; i3 < Integer.parseInt(numberOfInputs) - 1; i3++) {
        if (Integer.parseInt(mushroomInputs[i3 + 1]) < Integer.parseInt(mushroomInputs[i3])) {
          minNoEaten+=(Integer.parseInt(mushroomInputs[i3]) - Integer.parseInt(mushroomInputs[i3 + 1]));
        }
      }
      String firstMethod="""" + minNoEaten;
      Integer numberOfInputs1=Integer.parseInt(numberOfInputs);
      int rate=0;
      for (int i2=0; i2 < numberOfInputs1 - 1; i2++) {
        if (Integer.parseInt(mushroomInputs[i2 + 1]) < Integer.parseInt(mushroomInputs[i2]) && rate < (Integer.parseInt(mushroomInputs[i2]) - Integer.parseInt(mushroomInputs[i2 + 1]))) {
          rate=(Integer.parseInt(mushroomInputs[i2]) - Integer.parseInt(mushroomInputs[i2 + 1]));
        }
      }
      Integer numberMinEaten=0, numberOfPancakesLeft=0;
      for (int i1=0; i1 < numberOfInputs1 - 1; i1++) {
        if (Integer.parseInt(mushroomInputs[i1 + 1]) < Integer.parseInt(mushroomInputs[i1])) {
          numberMinEaten+=Math.min(Integer.parseInt(mushroomInputs[i1]),rate);
        }
 else {
          numberMinEaten+=Math.min(Integer.parseInt(mushroomInputs[i1]),rate);
          numberOfPancakesLeft+=Math.abs(Integer.parseInt(mushroomInputs[i1]) - rate);
        }
      }
      String secondMethod="""" + numberMinEaten;
      String outputLine=firstMethod + "" "" + secondMethod;
      outputString.append(""Case #"" + (i + 1) + "": ""+ outputLine+ ""\n"");
    }
    System.out.println(outputString);
    print.write(new String(outputString));
    print.close();
  }
 catch (  FileNotFoundException e) {
    System.out.println(""Error Reading the file"");
    e.printStackTrace();
  }
}
"
30000653,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""A-large (1).in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""submission.out"")));
  int T=Integer.parseInt(in.readLine());
  for (int i=0; i < T; i++) {
    int ans1=0, ans2=0, N=Integer.parseInt(in.readLine());
    int[] nums=new int[N], diff=new int[N - 1];
    StringTokenizer s=new StringTokenizer(in.readLine());
    for (int j=0; j < N; j++) {
      nums[j]=Integer.parseInt(s.nextToken());
    }
    for (int j=0; j < N - 1; j++)     if (nums[j + 1] < nums[j])     ans1+=nums[j] - nums[j + 1];
    for (int j=0; j < N - 1; j++)     diff[j]=nums[j] - nums[j + 1];
    int max=0;
    for (int j=0; j < N - 1; j++)     if (diff[j] > max)     max=diff[j];
    for (int j=0; j < N - 1; j++) {
      if (nums[j] < max) {
        ans2+=nums[j];
      }
 else {
        ans2+=max;
      }
    }
    out.println(""Case #"" + (i + 1) + "": ""+ ans1+ "" ""+ ans2);
  }
  out.close();
  System.exit(0);
}
"
30000654,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new FileReader(args[0]));
  PrintWriter out=new PrintWriter(args[1]);
  int numberOfCases=Integer.parseInt(in.readLine());
  for (int caseNumber=1; caseNumber <= numberOfCases; caseNumber++) {
    int numIntervals=Integer.parseInt(in.readLine());
    String[] intervals=in.readLine().split("" "");
    int firstComp=0;
    int secondComp=0;
    int minRate=0;
    int lastInterval=Integer.parseInt(intervals[0]);
    for (int i=1; i < numIntervals; i++) {
      int thisInterval=Integer.parseInt(intervals[i]);
      int drop=lastInterval - thisInterval;
      if (drop > 0)       firstComp+=drop;
      minRate=Math.max(minRate,drop);
      lastInterval=thisInterval;
    }
    System.out.println(""Min: "" + minRate);
    for (int i=0; i < numIntervals - 1; i++) {
      int interval=Integer.parseInt(intervals[i]);
      int eaten=interval - Math.max(0,interval - minRate);
      System.out.println(eaten);
      secondComp+=eaten;
    }
    out.println(String.format(""Case #%d: %d %d"",caseNumber,firstComp,secondComp));
  }
  in.close();
  out.close();
}
"
30000655,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(""mushroom.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""mushroom.out"")));
  int T=Integer.parseInt(f.readLine());
  for (int test=1; test <= T; test++) {
    int N=Integer.parseInt(f.readLine());
    StringTokenizer st=new StringTokenizer(f.readLine());
    int[] mushroomPieces=new int[N];
    for (int i=0; i < N; i++) {
      mushroomPieces[i]=Integer.parseInt(st.nextToken());
    }
    int numEaten=0;
    for (int i=0; i < N - 1; i++) {
      int numPieces1=mushroomPieces[i];
      int numPieces2=mushroomPieces[i + 1];
      if (numPieces2 < numPieces1) {
        numEaten+=numPieces1 - numPieces2;
      }
    }
    int numEaten1=numEaten;
    int largestDiff=0;
    for (int i=0; i < N - 1; i++) {
      int numPieces1=mushroomPieces[i];
      int numPieces2=mushroomPieces[i + 1];
      largestDiff=Math.max(largestDiff,numPieces1 - numPieces2);
    }
    int numEaten3=0;
    for (int i=0; i < N - 1; i++) {
      int numPieces=mushroomPieces[i];
      numEaten3+=Math.min(largestDiff,numPieces);
    }
    int numEaten2=numEaten3;
    out.println(String.format(""Case #%d: %d %d"",test,numEaten1,numEaten2));
  }
  f.close();
  out.close();
}
"
30000656,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=1; i <= T; i++) {
    int[] N=new int[sc.nextInt()];
    for (int j=0; j < N.length; j++) {
      N[j]=sc.nextInt();
    }
    int count=0, max=0, sum=0;
    for (int j=1; j < N.length; j++) {
      count+=Math.max(0,N[j - 1] - N[j]);
      max=Math.max(max,N[j - 1] - N[j]);
    }
    for (int j=0; j < N.length - 1; j++) {
      sum+=Math.min(max,N[j]);
    }
    System.out.println(""Case #"" + i + "": ""+ count+ "" ""+ sum);
  }
  sc.close();
}
"
30000657,"public static void main(String[] args){
}
"
30000658,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(new FileWriter(""out.txt""));
  int n=in.nextInt();
  for (int t=0; t < n; t++) {
    int num=in.nextInt();
    int[] intervals=new int[num];
    for (int x=0; x < num; x++)     intervals[x]=in.nextInt();
    int last=intervals[0];
    int ans1=0;
    for (int x=1; x < num; x++) {
      if (intervals[x] < last)       ans1+=(last - intervals[x]);
      last=intervals[x];
    }
    int largest=0;
    last=intervals[0];
    for (int x=1; x < num; x++) {
      if (intervals[x] < last)       largest=Math.max(last - intervals[x],largest);
      last=intervals[x];
    }
    System.out.println(largest);
    last=intervals[0];
    int ans2=0;
    for (int x=1; x < num; x++) {
      if (intervals[x] >= 0)       ans2+=Math.min(largest,last);
      last=intervals[x];
    }
    String ans="""" + ans1 + "" ""+ ans2;
    out.println(""Case #"" + (t + 1) + "": ""+ ans);
    System.out.println(""Case #"" + (t + 1) + "": ""+ ans);
  }
  in.close();
  out.close();
}
"
30000659,"public static void main(String[] args){
  Main r=new Main();
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int i=0; i < t; i++) {
    int n=sc.nextInt();
    r.mash=new int[n];
    for (int j=0; j < n; j++)     r.mash[j]=sc.nextInt();
    int res=0;
    for (int i1=1; i1 < r.mash.length; i1++) {
      if (r.mash[i1 - 1] > r.mash[i1])       res+=r.mash[i1 - 1] - r.mash[i1];
    }
    int ans1=res;
    int rate=0;
    for (int i1=1; i1 < r.mash.length; i1++) {
      rate=Math.max(rate,r.mash[i1 - 1] - r.mash[i1]);
    }
    int first=0;
    int res1=0;
    for (int i2=0; i2 < r.mash.length - 1; i2++) {
      res1+=Math.min(rate,r.mash[i2]);
    }
    int ans2=res1;
    System.out.printf(""Case #%d: %d %d\n"",i + 1,ans1,ans2);
  }
}
"
30000660,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int nCases=scanner.nextInt();
  for (int z=0; z < nCases; z++) {
    int nPeeks=scanner.nextInt();
    int total=0;
    double maxRate=0;
    int[] counts=new int[nPeeks];
    int prev=scanner.nextInt();
    counts[0]=prev;
    for (int i=1; i < nPeeks; i++) {
      int cur=scanner.nextInt();
      if (prev > cur) {
        int diff=prev - cur;
        total+=diff;
        maxRate=Math.max(maxRate,diff / 10d);
      }
      counts[i]=cur;
      prev=cur;
    }
    int total1=0;
    for (int i=1; i < nPeeks; i++) {
      total1+=Math.min(Math.ceil(maxRate * 10),counts[i - 1]);
    }
    System.out.println(""Case #"" + (z + 1) + "": ""+ total+ "" ""+ total1);
  }
  scanner.close();
}
"
30000661,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new File(""Mushroom.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""Mushroom.out"")));
  n=sc.nextInt();
  for (int i=0; i < n; i++) {
    int size=sc.nextInt();
    ArrayList<Integer> plate=new ArrayList<Integer>();
    for (int j=0; j < size; j++) {
      plate.add(sc.nextInt());
    }
    int num1=0;
    int max=0;
    for (int i2=0; i2 < plate.size() - 1; i2++) {
      int med=plate.get(i2) - plate.get(i2 + 1);
      if (med > 0)       num1+=med;
      if (med > max)       max=med;
    }
    int num2=0;
    for (int i1=0; i1 < plate.size() - 1; i1++) {
      num2+=Math.min(plate.get(i1),max);
    }
    String ans="""" + num1 + "" ""+ num2;
    out.println(""Case #"" + (i + 1) + "": ""+ ans);
  }
  out.close();
  System.exit(0);
}
"
30000662,"public static void main(String[] argv) throws IOException {
  Scanner in=new Scanner(new FileReader(""/Users/ankurgupta/Desktop/codeJam/A-large.in""));
  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""/Users/ankurgupta/Desktop/codeJam/A-large.out""),""utf-8""));
  int T=in.nextInt();
  int cases=0;
  while (T-- > 0) {
    int N=in.nextInt();
    int arr[]=new int[N];
    for (int i=0; i < N; i++) {
      arr[i]=in.nextInt();
    }
    long ans1=0;
    long maxDiff=Long.MIN_VALUE;
    for (int i=0; i < N - 1; i++) {
      long temp=Math.max(0,arr[i] - arr[i + 1]);
      ans1+=temp;
      maxDiff=Math.max(maxDiff,temp);
    }
    long ans2=0;
    long cur=0;
    for (int i=0; i < N - 1; i++) {
      cur=Math.max(0,arr[i] - maxDiff);
      ans2+=Math.max(0,arr[i] - cur);
    }
    writer.write(""Case #"" + ++cases + "": ""+ ans1+ "" ""+ ans2+ ""\n"");
  }
  writer.close();
}
"
30000663,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(args[0]));
  BufferedWriter bw=new BufferedWriter(new FileWriter(args[1]));
  String line=br.readLine();
  int testCase=1;
  while ((line=br.readLine()) != null) {
    if (line.length() == 0 || (line=br.readLine()) == null) {
      break;
    }
    String[] mushroomStrings=line.split("" "");
    int method1=0, method2=0;
    int lastNumber=Integer.parseInt(mushroomStrings[0]);
    int maxDiff=0;
    for (int i=1; i < mushroomStrings.length; i++) {
      int mushroomNumber=Integer.parseInt(mushroomStrings[i]);
      if (mushroomNumber < lastNumber) {
        method1+=lastNumber - mushroomNumber;
        maxDiff=Math.max(maxDiff,lastNumber - mushroomNumber);
      }
      lastNumber=mushroomNumber;
    }
    for (int i=1; i < mushroomStrings.length; i++) {
      int mushroomNumber=Integer.parseInt(mushroomStrings[i - 1]);
      method2+=Math.min(mushroomNumber,maxDiff);
    }
    bw.write(""Case #"" + testCase++ + "": ""+ method1+ "" ""+ method2+ ""\n"");
  }
  br.close();
  bw.close();
}
"
30000664,"public static void main(String[] args){
  try {
    String input=""pbA-small"";
    BufferedReader inputStream=new BufferedReader(new FileReader(input + "".in""));
    FileWriter f=new FileWriter(input + "".out"");
    String l=inputStream.readLine();
    int nbCases=Integer.parseInt(l);
    for (int caseNb=1; caseNb <= nbCases; caseNb++) {
      System.out.println(""case "" + caseNb);
      l=inputStream.readLine();
      int N=Integer.parseInt(l);
      l=inputStream.readLine();
      String[] pos=l.split("" "");
      int[] m=new int[N];
      int pb1=0;
      m[0]=Integer.parseInt(pos[0]);
      int speed=0;
      int pb2=0;
      for (int i=1; i < N; ++i) {
        m[i]=Integer.parseInt(pos[i]);
        if (m[i] < m[i - 1]) {
          pb1+=m[i - 1] - m[i];
        }
        if ((m[i - 1] - m[i]) > speed) {
          speed=m[i - 1] - m[i];
        }
      }
      for (int i=0; i < N - 1; ++i) {
        if (m[i] > speed) {
          pb2+=speed;
        }
 else {
          pb2+=m[i];
        }
      }
      f.write(""Case #"" + caseNb + "": ""+ pb1+ "" ""+ pb2+ ""\n"");
    }
    f.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000665,"public static void main(String[] args){
  Scanner in=null;
  try {
    in=new Scanner(new File(""input.txt""));
  }
 catch (  FileNotFoundException e1) {
  }
  try {
    System.setOut(new PrintStream(new File(""output.txt"")));
  }
 catch (  FileNotFoundException e) {
  }
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int n=in.nextInt();
    int ar[]=new int[n];
    int ma=0;
    int f=0;
    for (int i=0; i < n; i++) {
      ar[i]=in.nextInt();
      if (i > 0) {
        ma=Math.max(ma,ar[i - 1] - ar[i]);
        if (ar[i] < ar[i - 1]) {
          f+=ar[i - 1] - ar[i];
        }
      }
    }
    int s=0;
    for (int i=1; i < n; i++) {
      if (ar[i - 1] >= ma) {
        s+=ma;
      }
 else {
        s+=ar[i - 1];
      }
    }
    System.out.println(""Case #"" + t + "": ""+ f+ "" ""+ s);
  }
}
"
30000666,"/** 
 * @param args
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  FileReader fileReader=new FileReader(""C:/Users/Lakjeewa/Desktop/A-large.in"");
  BufferedReader br=new BufferedReader(fileReader);
  String line=br.readLine();
  int cases=Integer.parseInt(line);
  PrintWriter writer=new PrintWriter(""C:/Users/Lakjeewa/Desktop/A.out"",""UTF-8"");
  for (int i=0; i < cases; i++) {
    int N=Integer.parseInt(br.readLine());
    String[] array=br.readLine().split("" "");
    int[] nums=new int[N];
    for (int j=0; j < N; j++) {
      nums[j]=Integer.parseInt(array[j]);
    }
    int min=0;
    int maxDif=0;
    for (int j=0; j < N - 1; j++) {
      int diff=nums[j] - nums[j + 1];
      if (diff > 0) {
        min=min + diff;
      }
      if (maxDif < diff) {
        maxDif=diff;
      }
    }
    int total=0;
    int eaten=0;
    for (int j=0; j < N - 1; j++) {
      int v=nums[j] - maxDif;
      if (v > 0) {
        eaten=eaten + maxDif;
      }
 else {
        eaten=eaten + nums[j];
      }
    }
    writer.println(""Case #"" + (i + 1) + "": ""+ min+ "" ""+ eaten);
  }
  br.close();
  writer.close();
}
"
30000667,"public static void main(String[] args){
  MushroomMonster algorithm=new MushroomMonster();
  Scanner scanner=new Scanner(System.in);
  String testCaseNumber=scanner.nextLine();
  int TEST_CASE_NUMBER=Integer.parseInt(testCaseNumber);
  for (int testNumber=1; testNumber <= TEST_CASE_NUMBER; testNumber++) {
    String maxLine=scanner.nextLine();
    Integer max=Integer.parseInt(maxLine);
    String mushroomsLine=scanner.nextLine();
    String[] mushroomsString=mushroomsLine.split("" "");
    int[] mushrooms=new int[max];
    for (int i=0; i < max; i++) {
      mushrooms[i]=Integer.parseInt(mushroomsString[i]);
    }
    int firstMethod=0;
    for (int i=0; i < max - 1; i++) {
      int temp=mushrooms[i] - mushrooms[i + 1];
      if (temp > 0) {
        firstMethod+=temp;
      }
    }
    int eatenPerSecond=0;
    for (int i=0; i < max - 1; i++) {
      int temp=mushrooms[i] - mushrooms[i + 1];
      if (temp > eatenPerSecond) {
        eatenPerSecond=temp;
      }
    }
    int secondMethod=0;
    for (int i=0; i < max - 1; i++) {
      if (mushrooms[i] - eatenPerSecond >= 0) {
        secondMethod+=eatenPerSecond;
      }
 else {
        secondMethod+=mushrooms[i];
      }
    }
    String answer=String.valueOf(firstMethod + "" "" + secondMethod);
    System.out.println(""Case #"" + testNumber + "": ""+ answer);
  }
  scanner.close();
}
"
30000668,"public static void main(String[] args) throws Exception {
  if (args.length == 0) {
    throw new IllegalArgumentException(""Require input file name"");
  }
  Scanner sc=new Scanner(new FileReader(args[0]));
  String outFilename=args[0].replaceFirst(""[.][^.]+$"","""").concat("".out"");
  PrintWriter pw=new PrintWriter(new FileWriter(outFilename));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    MushroomMonster r=new MushroomMonster();
    int N=sc.nextInt();
    int[] m=new int[N];
    int counter1=0;
    int counter2=0;
    double max_rate=0.0;
    for (int i=0; i < N; i++) {
      m[i]=sc.nextInt();
      if (i > 0) {
        if (m[i] < m[i - 1]) {
          int delta=m[i - 1] - m[i];
          counter1+=delta;
          double rate=delta / 10.0;
          if (rate > max_rate) {
            max_rate=rate;
          }
        }
      }
    }
    for (int i=1; i < N; i++) {
      counter2+=Math.min(m[i - 1],(int)(10 * max_rate));
    }
    pw.printf(""%d %d\n"",counter1,counter2);
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000669,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new File(""A-large.in""));
  BufferedWriter w=new BufferedWriter(new FileWriter(""out.txt""));
  if (sc.hasNextInt()) {
    int testNumber=sc.nextInt();
    for (int i=1; i <= testNumber; i++) {
      int input=sc.nextInt();
      int one=0;
      int two=0;
      int max=0;
      int[] array=new int[input];
      for (int j=0; j < input; j++) {
        array[j]=sc.nextInt();
        if (j != 0 && (array[j - 1] - array[j]) > max) {
          max=array[j - 1] - array[j];
        }
      }
      for (int j=0; j < input - 1; j++) {
        if (array[j] > array[j + 1]) {
          one+=array[j] - array[j + 1];
        }
        if (max >= array[j]) {
          two+=array[j];
        }
        if (max < array[j]) {
          two+=max;
        }
      }
      w.write(""Case #"" + i + "": ""+ one+ "" ""+ two+ ""\n"");
    }
  }
  sc.close();
  w.close();
}
"
30000670,"public static void main(String[] args) throws FileNotFoundException {
  out=new PrintStream(""out.txt"");
  in=new Scanner(new File(args[0]));
  int N=in.nextInt();
  in.nextLine();
  for (int i=0; i < N; i++) {
    int N1=in.nextInt();
    int[] mushrooms=new int[N1];
    for (int i1=0; i1 < N1; i1++) {
      int number=in.nextInt();
      mushrooms[i1]=number;
    }
    A r=new A(mushrooms);
    int firstSolution=0;
    int secondSolution=0;
    int bestRate=0;
    for (int i2=1; i2 < r.input.length; i2++) {
      if (r.input[i2] < r.input[i2 - 1]) {
        firstSolution+=r.input[i2 - 1] - r.input[i2];
        bestRate=Math.max(r.input[i2 - 1] - r.input[i2],bestRate);
      }
    }
    for (int i1=0; i1 < r.input.length - 1; i1++) {
      secondSolution+=Math.min(bestRate,r.input[i1]);
    }
    int[] solution=new int[]{firstSolution,secondSolution};
    out.printf(""Case #%d: %d %d\n"",i + 1,solution[0],solution[1]);
  }
}
"
30000671,"public static void main(String[] args) throws IOException {
  String inFile=""//Users//user//Documents//workspace//Runnables//src//codejam//y2014//qualification//copy//A-large (1).in"";
  Scanner in=new Scanner(new FileReader(inFile));
  int totalRounds=in.nextInt();
  for (int round=1; round <= totalRounds; round++) {
    int len=in.nextInt();
    int[] arr=new int[len];
    for (int i=0; i < len; i++) {
      arr[i]=in.nextInt();
    }
    System.out.format(""Case #%d: "",round);
    int y=0;
    int z=0;
    int speed=0;
    int len1=arr.length;
    for (int i=0; i < len1 - 1; i++) {
      if (arr[i + 1] < arr[i]) {
        int diff=arr[i] - arr[i + 1];
        y+=diff;
        if (diff > speed)         speed=diff;
      }
    }
    for (int i=0; i < len1 - 1; i++) {
      int ate=Math.min(speed,arr[i]);
      z+=ate;
    }
    System.out.println(y + "" "" + z);
  }
  in.close();
}
"
30000672,"public static void main(String[] args){
  try {
    bw=new BufferedWriter(new FileWriter(""C:/Users/Alberto/Desktop/GoogleContent2015/Mushroom/A-large.txt""));
    br=new BufferedReader(new FileReader(path));
    String line=br.readLine();
    int T=Integer.parseInt(line);
    for (int i=1; i <= T; i++)     try {
      int size=Integer.parseInt(br.readLine());
      String line1=br.readLine();
      Integer[] vect=new Integer[size];
      long llevo1=0;
      long llevo2=0;
      int maxDif=0;
      for (int i1=0; i1 < size; i1++) {
        vect[i1]=Integer.parseInt(line1.split("" "")[i1]);
      }
      for (int i3=0; i3 < size - 1; i3++) {
        if (vect[i3] > vect[i3 + 1] && vect[i3] - vect[i3 + 1] > maxDif)         maxDif=vect[i3] - vect[i3 + 1];
      }
      for (int i2=1; i2 < size; i2++) {
        if (vect[i2] < vect[i2 - 1]) {
          llevo1+=vect[i2 - 1] - vect[i2];
        }
        if (vect[i2 - 1] <= maxDif)         llevo2+=vect[i2 - 1];
 else         llevo2+=maxDif;
      }
      bw.write(""Case #"" + i + "": ""+ llevo1+ "" ""+ llevo2+ System.lineSeparator());
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
    bw.close();
  }
 catch (  FileNotFoundException ex) {
    ex.printStackTrace();
  }
catch (  IOException ex) {
    ex.printStackTrace();
  }
}
"
30000673,"public static void main(String[] args) throws Exception {
  reader=new Scanner(new FileInputStream(inputFile));
  writer=new PrintStream(new FileOutputStream(outputFile));
  int ntest=reader.nextInt();
  int i;
  for (int test=1; test <= ntest; test++) {
    n=reader.nextInt();
    m=new long[n];
    for (i=0; i < n; i++)     m[i]=reader.nextLong();
    long maxrate=0;
    res1=0;
    for (i=1; i < n; i++) {
      if (m[i - 1] > m[i])       res1+=(m[i - 1] - m[i]);
      maxrate=Math.max(maxrate,m[i - 1] - m[i]);
    }
    a=new long[n + 2];
    res2=maxrate * n * n;
    long rs, l=0, r=maxrate * n * n, rate;
    while (l <= r) {
      rate=(l + r) / 2;
      rs=0;
      for (i=1; i < n; i++) {
        if (m[i - 1] >= rate)         rs+=rate;
 else         rs+=m[i - 1];
        if (m[i - 1] - rate > m[i])         break;
      }
      if (i == n) {
        res2=Math.min(rs,res2);
        r=rate - 1;
      }
 else {
        l=rate + 1;
      }
    }
    writer.println(""Case #"" + test + "": ""+ res1+ "" ""+ res2);
  }
}
"
30000674,"public static void main(String[] args) throws java.lang.Exception {
  InputStream inputStream=new FileInputStream(""D:\\test2.in"");
  BufferedReader r=new BufferedReader(new InputStreamReader(inputStream));
  int numtestcase=0;
  numtestcase=Integer.parseInt(r.readLine());
  for (int i=1; i <= numtestcase; i++) {
    String s=r.readLine();
    int n=Integer.parseInt(s);
    String[] s1=r.readLine().split("" "");
    int c1=0, c2=0, maxdiff=0;
    for (int j=0; j < n - 1; j++) {
      int a=Integer.parseInt(s1[j]);
      int b=Integer.parseInt(s1[j + 1]);
      if (b < a)       c1+=a - b;
      if (a - b > maxdiff)       maxdiff=a - b;
    }
    for (int j=0; j < n - 1; j++) {
      int a=Integer.parseInt(s1[j]);
      int b=Integer.parseInt(s1[j + 1]);
      if (a <= maxdiff) {
        c2+=a;
      }
 else {
        c2+=maxdiff;
      }
    }
    System.out.println(""Case #"" + Integer.toString(i) + "": ""+ Integer.toString(c1)+ "" ""+ Integer.toString(c2));
  }
}
"
30000675,"public static void main(String[] args){
  try {
    String input=""C:\\Users\\Qin\\Desktop\\A-large.in"";
    String output=""C:\\Users\\Qin\\Desktop\\A-large.out"";
    FileInputStream fis=new FileInputStream(input);
    FileWriter fw=new FileWriter(output);
    Scanner sc=new Scanner(fis);
    int num=sc.nextInt();
    System.out.println(num);
    for (int i=0; i < num; i++) {
      int N=sc.nextInt();
      int[] M=new int[N];
      int m=0, y=0, z=0;
      int max=0;
      for (int j=0; j < N; j++)       M[j]=sc.nextInt();
      for (int j=1; j < N; j++) {
        if (M[j - 1] > M[j]) {
          if ((M[j - 1] - M[j]) > max)           max=M[j - 1] - M[j];
          y=y + (M[j - 1] - M[j]);
        }
      }
      for (int j=0; j < N - 1; j++) {
        if (M[j] <= max) {
          z=z + M[j];
        }
 else {
          z=z + max;
        }
      }
      fw.write(""Case #"" + (i + 1) + "": ""+ y+ "" ""+ z+ ""\r\n"");
    }
    fis.close();
    fw.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000676,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(System.out));
  Scanner in=new Scanner(System.in);
  int cases=in.nextInt();
  int contador=1;
  while (cases > 0) {
    int hongos=in.nextInt();
    int anterior=0;
    int actual=0;
    int metodo1=0;
    int metodo2=0;
    int c=0;
    int[] anteriores=new int[hongos];
    while (hongos > 0) {
      actual=in.nextInt();
      if (actual < anterior) {
        metodo1+=anterior - actual;
      }
      anteriores[c]=actual;
      anterior=actual;
      c++;
      hongos--;
    }
    int diferencia=0;
    for (int i=0; i < anteriores.length - 1; i++) {
      int comp=anteriores[i] - anteriores[i + 1];
      if (diferencia < comp) {
        diferencia=comp;
      }
    }
    for (int i=0; i < anteriores.length - 1; i++) {
      if (anteriores[i] >= diferencia) {
        metodo2+=diferencia;
      }
 else {
        metodo2+=anteriores[i];
      }
    }
    out.write(""Case #"" + contador + "": ""+ metodo1+ "" ""+ metodo2+ ""\n"");
    contador++;
    cases--;
  }
  out.flush();
}
"
30000677,"public static void main(String[] args) throws IOException {
  A r=new A();
  r.scanner=new Scanner(new File(A.INPUT));
  r.writer=new BufferedWriter(new FileWriter(A.OUTPUT));
  int n=r.scanner.nextInt();
  for (int i=0; i < n; i++) {
    int n1=r.scanner.nextInt();
    int[] m=new int[n1];
    for (int i1=0; i1 < n1; i1++) {
      m[i1]=r.scanner.nextInt();
    }
    long sum=0;
    for (int i1=1; i1 < m.length; i1++) {
      if (m[i1] < m[i1 - 1]) {
        sum+=m[i1 - 1] - m[i1];
      }
    }
    long first=sum;
    long sum1=0;
    int maxDif=Integer.MIN_VALUE;
    for (int i1=1; i1 < m.length; i1++) {
      maxDif=Math.max(maxDif,m[i1 - 1] - m[i1]);
    }
    for (int i2=0; i2 < m.length - 1; i2++) {
      sum1+=Math.min(m[i2],maxDif);
    }
    long second=sum1;
    String line=""Case #"" + (i + 1) + "": ""+ first+ "" ""+ second;
    r.writer.write(line + ""\n"");
    System.out.println(line);
  }
  r.scanner.close();
  r.writer.close();
}
"
30000678,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int numCases=in.nextInt();
  for (int Case=0; Case < numCases; Case++) {
    int times=in.nextInt();
    int[] mushs=new int[times];
    long consumptionOne=0;
    long consumptionTwo=0;
    long maxRate=0;
    for (int i=0; i < times; i++) {
      mushs[i]=in.nextInt();
      if (i > 0 && mushs[i] < mushs[i - 1]) {
        consumptionOne+=mushs[i - 1] - mushs[i];
      }
      if (i > 0 && (mushs[i - 1] - mushs[i] > maxRate)) {
        maxRate=mushs[i - 1] - mushs[i];
      }
    }
    consumptionTwo=maxRate * (times - 1);
    for (int i=0; i < times - 1; i++) {
      if (mushs[i] < maxRate) {
        consumptionTwo=consumptionTwo + mushs[i] - maxRate;
      }
    }
    System.out.println(""Case #"" + (Case + 1) + "": ""+ consumptionOne+ "" ""+ consumptionTwo);
  }
}
"
30000679,"public static void main(String[] args) throws Exception {
  Scanner scan=new Scanner(new File(""in.txt""));
  PrintWriter w=new PrintWriter(""out.txt"");
  int cases=Integer.parseInt(scan.nextLine());
  for (int i=0; i < cases; i++) {
    int ans1=0;
    int ans2=0;
    int n=scan.nextInt();
    int[] nums=new int[n];
    int largestDrop=0;
    int last=nums[0]=scan.nextInt();
    for (int j=1; j < n; j++) {
      nums[j]=scan.nextInt();
      if (nums[j] < last) {
        int drop=last - nums[j];
        largestDrop=Math.max(drop,largestDrop);
        ans1+=drop;
      }
      last=nums[j];
    }
    if (largestDrop > 0) {
      for (int j=0; j < n - 1; j++) {
        ans2+=Math.min(largestDrop,nums[j]);
      }
    }
    w.print(""Case #"");
    w.print(i + 1);
    w.print("": "");
    w.print(ans1);
    w.print("" "");
    w.print(ans2);
    w.println();
  }
  scan.close();
  w.close();
}
"
30000680,"public static void main(String[] args) throws FileNotFoundException {
  PrintWriter pr=new PrintWriter(""neki.txt"");
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=0; i < T; i++) {
    pr.print(""Case #"" + (i + 1) + "": "");
    int st=sc.nextInt();
    tabela=new int[st];
    for (int j=0; j < st; j++) {
      tabela[j]=sc.nextInt();
    }
    int hrana=0;
    int trenutni=tabela[0];
    for (int i1=1; i1 < tabela.length; i1++) {
      if (trenutni > tabela[i1]) {
        hrana+=trenutni - tabela[i1];
      }
      trenutni=tabela[i1];
    }
    int a=hrana;
    int max=0;
    for (int i1=0; i1 < tabela.length - 1; i1++) {
      int c=tabela[i1] - tabela[i1 + 1];
      if (c > max) {
        max=c;
      }
    }
    int hrana1=0;
    for (int i2=1; i2 < tabela.length; i2++) {
      if (tabela[i2 - 1] <= max) {
        hrana1+=tabela[i2 - 1];
      }
 else       hrana1+=max;
    }
    int b=hrana1;
    pr.println(a + "" "" + b);
  }
  sc.close();
  pr.close();
}
"
30000681,"public static void main(String[] arg){
  Scanner sc=new Scanner(System.in);
  int tcc=sc.nextInt();
  for (int tc=1; tc <= tcc; ++tc) {
    int n=sc.nextInt();
    int[] arr=new int[n];
    for (int i=0; i < n; ++i)     arr[i]=sc.nextInt();
    int a=0;
    for (int i=1; i < n; ++i)     a+=Math.max(0,arr[i - 1] - arr[i]);
    int br=0;
    for (int i=1; i < n; ++i)     br=Math.max(br,arr[i - 1] - arr[i]);
    int b=0;
    for (int i=0; i < n - 1; ++i)     b+=Math.min(br,arr[i]);
    System.out.printf(""Case #%d: %d %d%n"",tc,a,b);
  }
}
"
30000682,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int tc=Integer.parseInt(in.readLine());
  for (int i=1; i <= tc; ++i) {
    int size=Integer.parseInt(in.readLine());
    String[] ar=in.readLine().split("" "");
    int[] arr=new int[size];
    for (int j=0; j < size; ++j) {
      arr[j]=Integer.parseInt(ar[j]);
    }
    int met1=0, maxdiff=0, temp=0, met2=0;
    for (int j=1; j < size; ++j) {
      temp=arr[j - 1] - arr[j];
      if (temp > maxdiff)       maxdiff=temp;
      if (temp > 0)       met1+=temp;
    }
    for (int j=0; j < size - 1; ++j) {
      met2+=Math.min(arr[j],maxdiff);
    }
    System.out.println(met1 + "" "" + met2);
  }
  in.close();
}
"
30000683,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int t=0; t < T; t++) {
    int N=sc.nextInt();
    int[] m=new int[N];
    for (int i=0; i < m.length; i++) {
      m[i]=sc.nextInt();
    }
    int first=0;
    for (int i=1; i < m.length; i++) {
      if (m[i] <= m[i - 1]) {
        first+=m[i - 1] - m[i];
      }
    }
    int max=0;
    for (int i=1; i < m.length; i++) {
      max=Math.max(max,m[i - 1] - m[i]);
    }
    int second=0;
    for (int i=0; i < m.length - 1; i++) {
      second+=Math.min(max,m[i]);
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ first+ "" ""+ second);
  }
}
"
30000684,"public static void main(String argv[]){
  Scanner scanner=new Scanner(System.in);
  int T=scanner.nextInt();
  for (int t=0; t < T; t++) {
    int n=scanner.nextInt();
    int[] m=new int[n];
    for (int i=0; i < n; i++) {
      m[i]=scanner.nextInt();
    }
    int res1=0;
    int res2=0;
    int maxd=0;
    for (int i=0; i < n - 1; i++) {
      int d=m[i] - m[i + 1];
      if (d > 0) {
        res1+=d;
      }
      maxd=Math.max(maxd,d);
    }
    for (int i=0; i < n - 1; i++) {
      res2+=Math.min(m[i],maxd);
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ res1+ "" ""+ res2);
  }
}
"
30000685,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int cases=sc.nextInt();
  for (int t=1; t <= cases; t++) {
    int intervals=sc.nextInt();
    int minEaten=0;
    int minConstant=0;
    int prevAmount=0;
    int[] measurements=new int[intervals];
    for (int x=0; x < intervals; x++) {
      measurements[x]=sc.nextInt();
    }
    for (    int amount : measurements) {
      if (amount < prevAmount) {
        minEaten+=prevAmount - amount;
        minConstant=Math.max(minConstant,prevAmount - amount);
      }
      prevAmount=amount;
    }
    int secondEaten=0;
    for (int x=0; x < measurements.length - 1; x++) {
      secondEaten+=Math.min(measurements[x],minConstant);
    }
    System.out.printf(""Case #%d: %d %d%n"",t,minEaten,secondEaten);
  }
  sc.close();
}
"
30000686,"public static void main(String[] args){
  long time=System.currentTimeMillis();
  Scanner sc=new Scanner(new BufferedInputStream(System.in));
  int t=sc.nextInt();
  for (int i=0; i < t; i++) {
    int n=sc.nextInt();
    int[] result=new int[n];
    for (int i1=0; i1 < n; i1++) {
      result[i1]=sc.nextInt();
    }
    int[] m=result;
    int answer1=0;
    for (int j=1; j < n; j++) {
      if (m[j] < m[j - 1]) {
        answer1+=(m[j - 1] - m[j]);
      }
    }
    int answer2=0;
    int maxSpeed=0;
    for (int j=1; j < n; j++) {
      if (m[j] < m[j - 1] && m[j - 1] - m[j] > maxSpeed) {
        maxSpeed=m[j - 1] - m[j];
      }
    }
    for (int j=1; j < n; j++) {
      if (m[j - 1] > maxSpeed) {
        answer2+=maxSpeed;
      }
 else {
        answer2+=m[j - 1];
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ answer1+ "" ""+ answer2);
  }
  sc.close();
  System.err.println(System.currentTimeMillis() - time);
}
"
30000687,"public static void main(String[] args) throws IOException {
  Scanner scan=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""A-large.out"")));
  int t=scan.nextInt();
  for (int i=1; i <= t; i++) {
    int n=scan.nextInt();
    int ans1=0, rate=0, ans2=0;
    int[] m=new int[n];
    for (int j=0; j < n; j++)     m[j]=scan.nextInt();
    for (int j=1; j < n; j++) {
      if (m[j] < m[j - 1]) {
        ans1+=(m[j - 1] - m[j]);
        rate=Math.max(rate,m[j - 1] - m[j]);
      }
    }
    for (int j=0; j < n - 1; j++)     ans2+=Math.min(rate,m[j]);
    out.println(""Case #"" + i + "": ""+ ans1+ "" ""+ ans2);
  }
  out.close();
  System.exit(0);
}
"
30000688,"public static void main(String[] args){
  Scanner reader=new Scanner(System.in);
  int testCases=reader.nextInt();
  for (int t=0; t < testCases; t++) {
    int size=reader.nextInt();
    int last=0;
    int first=0;
    int maxdif=0;
    int[] stuff=new int[size];
    for (int i=0; i < size; i++) {
      int buff=reader.nextInt();
      stuff[i]=buff;
      if (i == 0) {
        last=buff;
      }
 else {
        int add=last - buff;
        if (add > 0) {
          first+=add;
          if (add > maxdif) {
            maxdif=add;
          }
        }
        last=buff;
      }
    }
    int second=0;
    for (int i=0; i < size - 1; i++) {
      if (stuff[i] > maxdif) {
        second+=maxdif;
      }
 else {
        second+=stuff[i];
      }
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ first+ "" ""+ second);
  }
  reader.close();
}
"
30000689,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""A-large.in""));
  FileWriter out=new FileWriter(new File(""aOut.txt""));
  int numcases=in.nextInt();
  for (int casenum=1; casenum <= numcases; casenum++) {
    int numtimes=in.nextInt();
    int[] map=new int[numtimes];
    for (int i=0; i < numtimes; i++) {
      map[i]=in.nextInt();
    }
    int smallestRate=0;
    int method1=0;
    for (int i=1; i < map.length; i++) {
      if (map[i] < map[i - 1]) {
        method1+=map[i - 1] - map[i];
        smallestRate=Math.max(smallestRate,map[i - 1] - map[i]);
      }
    }
    System.out.println(""method1: "" + method1);
    int method2=0;
    double rate=smallestRate;
    for (int i=0; i < map.length - 1; i++) {
      method2+=Math.min(map[i],rate);
    }
    System.out.println(""method2: "" + method2);
    out.write(""Case #"" + casenum + "": ""+ method1+ "" ""+ method2+ ""\n"");
  }
  out.close();
}
"
30000690,"public static void main(String[] args){
  A a=new A(args[0]);
  int numberOfTests=0;
  try {
    numberOfTests=Integer.parseInt(a.reader.readLine());
  }
 catch (  NumberFormatException|IOException e) {
    System.err.println(""Failed to read line"");
    e.printStackTrace();
    System.exit(-1);
  }
  for (int testCase=1; testCase <= numberOfTests; testCase++) {
    try {
      a.reader.readLine();
      List<Integer> mushrooms=new ArrayList<>();
      int maxRate=0;
      int lastMush=0;
      for (      String mushroom : a.reader.readLine().split(""\\s"")) {
        int mush=Integer.parseInt(mushroom);
        mushrooms.add(mush);
        if (lastMush - mush > maxRate) {
          maxRate=lastMush - mush;
        }
        lastMush=mush;
      }
      int methodA=0;
      int methodB=0;
      for (int i=1; i < mushrooms.size(); i++) {
        if (mushrooms.get(i) < mushrooms.get(i - 1)) {
          methodA+=mushrooms.get(i - 1) - mushrooms.get(i);
        }
        methodB+=Math.min(maxRate,mushrooms.get(i - 1));
      }
      String response=methodA + "" "" + methodB;
      a.writer.write(""Case #"" + testCase + "": ""+ response+ ""\n"");
    }
 catch (    IOException e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
  try {
    a.reader.close();
    a.writer.flush();
    a.writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000691,"public static void main(String[] args){
  String filename=""A-large.in"";
  String output=""output.txt"";
  Scanner scanner=null;
  PrintWriter printer=null;
  try {
    scanner=new Scanner(new FileReader(filename));
    printer=new PrintWriter(new FileWriter(output));
    int tests=scanner.nextInt();
    for (int test=1; test <= tests; test++) {
      int N=scanner.nextInt();
      int ini=scanner.nextInt();
      int[] obs=new int[N - 1];
      for (int i=0; i < N - 1; i++) {
        obs[i]=scanner.nextInt();
      }
      int a=0;
      int b=0;
      int running=ini;
      for (      int ob : obs) {
        if (ob < running)         a+=(running - ob);
        running=ob;
      }
      int max=0;
      int runningb=ini;
      for (      int ob : obs) {
        max=Math.max(max,runningb - ob);
        runningb=ob;
      }
      runningb=ini;
      for (int i=0; i < obs.length; i++) {
        int ob=obs[i];
        b+=Math.min(max,runningb);
        runningb=ob;
      }
      printer.println(String.format(""Case #%d: %d %d"",test,a,b));
    }
  }
 catch (  FileNotFoundException e) {
    System.out.println(filename + "" not found."");
  }
catch (  IOException e) {
    System.out.println(e.getMessage());
  }
 finally {
    if (scanner != null) {
      scanner.close();
    }
    if (printer != null) {
      printer.flush();
      printer.close();
    }
  }
}
"
30000692,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(""ProblemA.txt"",""UTF-8"");
  int T=Integer.parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    int L=Integer.parseInt(br.readLine());
    String[] tab=br.readLine().split("" "");
    int[] arr=new int[tab.length];
    for (int j=0; j < tab.length; j++) {
      arr[j]=Integer.parseInt(tab[j]);
    }
    int x=0;
    int y=0;
    int previous=0;
    int max=0;
    for (    int m : arr) {
      if (m < previous)       x+=previous - m;
      if (max < previous - m)       max=previous - m;
      previous=m;
    }
    System.out.println(max);
    for (int j=0; j < arr.length - 1; j++) {
      int m=arr[j];
      if (max < m)       y+=max;
 else       y+=m;
    }
    System.out.print(""Case #"" + (i + 1) + "": ""+ x+ "" ""+ y+ ""\n"");
    pw.write(""Case #"" + (i + 1) + "": ""+ x+ "" ""+ y+ ""\n"");
  }
  pw.close();
}
"
30000693,"public static void main(String[] args) throws IOException {
  br=new BufferedReader(new FileReader(""A-large.in""));
  pw=new PrintWriter(new FileOutputStream(""output_A.in""));
  int t=Integer.parseInt(br.readLine());
  for (int j=1; j <= t; j++) {
    int n=Integer.parseInt(br.readLine());
    st=new StringTokenizer(br.readLine());
    int[] arr=new int[n];
    int ans=0, ans1=0, diff=Integer.MIN_VALUE;
    for (int i=0; i < n; i++) {
      arr[i]=Integer.parseInt(st.nextToken());
    }
    for (int i=0; i < n - 1; i++) {
      diff=arr[i] - arr[i + 1] > diff ? arr[i] - arr[i + 1] : diff;
    }
    for (int i=0; i < n - 1; i++) {
      if (arr[i] < diff)       ans1+=arr[i];
 else       ans1+=diff;
      if (arr[i + 1] < arr[i])       ans+=arr[i] - arr[i + 1];
    }
    pw.println(""Case #"" + j + "": ""+ ans+ "" ""+ ans1);
  }
  pw.flush();
}
"
30000694,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""Round1A2015/A-l.in""));
  System.setOut(new PrintStream(""src/Round1A2015/A-l.out""));
  int T=Integer.parseInt(br.readLine());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(br.readLine());
    String tmp[]=br.readLine().trim().split(""\\s+"");
    int m[]=new int[N];
    for (int i=0; i < N; i++) {
      m[i]=Integer.parseInt(tmp[i]);
    }
    long sum=0;
    int max=0;
    for (int i=1; i < N; i++) {
      int d=m[i - 1] - m[i];
      if (d > 0) {
        sum+=d;
        if (d > max)         max=d;
      }
    }
    long sum2=0;
    for (int i=0; i < N - 1; i++) {
      if (m[i] > max) {
        sum2+=max;
      }
 else       sum2+=m[i];
    }
    System.out.print(String.format(""Case #%d: %d %d\n"",t,sum,sum2));
  }
}
"
30000695,"public static void main(String... args) throws Exception {
  Scanner sinput=new Scanner(new File(""A-large.in""));
  int numCases=sinput.nextInt();
  System.setOut(new PrintStream(""alarge.out""));
  for (int n=0; n < numCases; n++) {
    int N=sinput.nextInt();
    int[] ps=new int[N];
    for (int i=0; i < N; i++) {
      ps[i]=sinput.nextInt();
    }
    int a=0;
    int b=0;
    int dif=0;
    for (int i=1; i < N; i++) {
      if (dif < ps[i - 1] - ps[i])       dif=ps[i - 1] - ps[i];
    }
    for (int i=1; i < N; i++) {
      if (ps[i] < ps[i - 1])       a+=ps[i - 1] - ps[i];
      if (ps[i - 1] < dif)       b+=ps[i - 1];
 else       b+=dif;
    }
    System.out.printf(""Case #%d: %d %d\n"",n + 1,a,b);
  }
}
"
30000696,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  StringTokenizer st;
  int T=Integer.parseInt(in.readLine());
  int N, j, r1, r2, d, max;
  int[] A=new int[MAX];
  for (int i=1; i <= T; i++) {
    N=Integer.parseInt(in.readLine());
    st=new StringTokenizer(in.readLine());
    for (j=0; j < N; j++) {
      A[j]=Integer.parseInt(st.nextToken());
    }
    max=Integer.MIN_VALUE;
    r1=0;
    for (j=1; j < N; j++) {
      d=A[j] - A[j - 1];
      if (d < 0) {
        r1+=Math.abs(d);
      }
      if (Math.abs(d) > max && d < 0) {
        max=-d;
      }
    }
    max=Math.max(0,max);
    r2=0;
    for (j=0; j < N - 1; j++) {
      r2+=Math.min(A[j],max);
    }
    System.out.println(""Case #"" + i + "": ""+ r1+ "" ""+ r2);
  }
}
"
30000697,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numTestCases=sc.nextInt();
  int N, m, a, b, c, d, temp;
  int[] arr;
  for (int i=0; i < numTestCases; i++) {
    N=sc.nextInt();
    arr=new int[N];
    for (int j=0; j < N; j++) {
      arr[j]=sc.nextInt();
    }
    a=0;
    for (int j=0; j < N - 1; j++) {
      d=arr[j] - arr[j + 1];
      if (d > 0) {
        a+=d;
      }
    }
    b=0;
    temp=0;
    for (int j=0; j < N - 1; j++) {
      c=arr[j] - arr[j + 1];
      if (c > 0 && c > temp) {
        temp=c;
      }
    }
    for (int j=0; j < N - 1; j++) {
      c=arr[j];
      if (c >= temp) {
        b+=temp;
      }
 else {
        b+=c;
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ a+ "" ""+ b);
  }
}
"
30000698,"public static void main(String[] args) throws IOException {
  File f=new File(""test.txt"");
  Scanner in=new Scanner(f);
  PrintWriter out=new PrintWriter(new FileWriter(""testout.txt""));
  int numCases=in.nextInt();
  in.nextLine();
  int times;
  for (int i=0; i < numCases; i++) {
    times=in.nextInt();
    int[] checks=new int[times];
    for (int j=0; j < times; j++) {
      checks[j]=in.nextInt();
    }
    long first=0, second=0;
    long secondMax=0;
    long dif;
    for (int j=1; j < times; j++) {
      dif=checks[j - 1] - checks[j];
      if (dif > 0) {
        first+=dif;
        secondMax=Math.max(secondMax,dif);
      }
    }
    for (int j=0; j < times - 1; j++) {
      second+=Math.min(secondMax,checks[j]);
    }
    out.format(""Case #%d: %s\n"",i + 1,first + "" "" + second);
  }
  out.close();
}
"
30000699,"public static void main() throws Exception {
  String inFile=""mush0.in"";
  String outFile=""mush.out"";
  Scanner sc=new Scanner(new File(inFile));
  PrintWriter writer=new PrintWriter(outFile);
  int num_test=sc.nextInt();
  for (int i=1; i <= num_test; i++) {
    int term=sc.nextInt();
    sc.nextLine();
    String s=sc.nextLine();
    Scanner scan=new Scanner(s);
    Vector<Integer> v=new Vector<Integer>(0);
    while (scan.hasNext())     v.add(scan.nextInt());
    int one=0;
    int two=0;
    for (int j=0; j <= (v.size() - 2); j++)     if (v.get(j) > v.get(j + 1))     one+=-(v.get(j + 1) - v.get(j));
 else     one+=0;
    Integer arr[]=new Integer[v.size()];
    v.toArray(arr);
    int index=v.size() - 1;
    int max=0;
    for (int u=0; u < (v.size() - 1); u++) {
      if ((arr[u] - arr[u + 1]) > max)       max=arr[u] - arr[u + 1];
    }
    int rate=max;
    for (int y=0; y <= (v.size() - 2); y++)     if (v.get(y) <= rate)     two+=v.get(y);
 else     two+=(rate);
    writer.println(""Case #"" + i + "": ""+ one+ "" ""+ two);
  }
  writer.close();
}
"
30000700,"public static void main(String[] args) throws Exception {
  String filePrefix=args.length > 0 ? args[0] : ""A-large (1)"";
  try {
    A r=new A();
    r.sc=new Scanner(new FileReader(filePrefix + "".in""));
    r.pw=new PrintWriter(new FileWriter(filePrefix + "".out""));
    int ntest=r.sc.nextInt();
    for (int test=1; test <= ntest; test++) {
      Scanner sc=r.sc;
      r.N=sc.nextInt();
      r.m=new int[r.N];
      for (int i=0; i < r.N; i++)       r.m[i]=sc.nextInt();
      r.pw.print(""Case #"" + test + "": "");
      System.out.print(""Case #"" + test + "": "");
      int ans1=0, ans2=0;
      int maxrate=0;
      for (int i=1; i < r.N; i++) {
        ans1+=Math.max(r.m[i - 1] - r.m[i],0);
        maxrate=Math.max(r.m[i - 1] - r.m[i],maxrate);
      }
      for (int i=1; i < r.N; i++) {
        ans2+=Math.min(r.m[i - 1],maxrate);
      }
      Object s=ans1 + "" "" + ans2;
      r.pw.println(s);
      System.out.println(s);
    }
    System.out.println(""Finished."");
    r.sc.close();
    r.pw.close();
  }
 catch (  Exception e) {
    System.err.println(e);
  }
}
"
30000701,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""input.in""));
  out=new StringBuilder();
  Long start=System.currentTimeMillis();
  int T=Integer.parseInt(in.readLine());
  for (int t=0; t < T; t++) {
    int N=Integer.parseInt(in.readLine());
    String[] line=in.readLine().split("" "");
    int[] nums=new int[N];
    for (int n=0; n < N; n++) {
      nums[n]=Integer.parseInt(line[n]);
    }
    int sumA=0;
    int sumB=0;
    int maxGap=0;
    int[] gaps=new int[N];
    for (int n=1; n < N; n++) {
      gaps[n]=nums[n - 1] - nums[n];
      if (nums[n] < nums[n - 1]) {
        sumA+=gaps[n];
      }
      if (gaps[n] > maxGap) {
        maxGap=gaps[n];
      }
    }
    for (int n=0; n < N - 1; n++) {
      sumB+=Math.min(maxGap,nums[n]);
    }
    out.append(""Case #"");
    out.append((t + 1));
    out.append("": "");
    out.append(sumA);
    out.append("" "");
    out.append(sumB);
    out.append(""\r\n"");
  }
  BufferedWriter fOut=new BufferedWriter(new FileWriter(""output.txt""));
  fOut.write(out.toString());
  fOut.close();
  Long end=System.currentTimeMillis();
  System.out.println(""Time: "" + (end - start));
}
"
30000702,"public A(Scanner in){
  this.in=in;
}
"
30000703,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numTests=sc.nextInt();
  for (int test=1; test <= numTests; test++) {
    int n=sc.nextInt();
    int[] arr=new int[n];
    for (int i=0; i < n; i++) {
      arr[i]=sc.nextInt();
    }
    int aSum=0;
    int maxDrop=0;
    for (int i=1; i < n; i++) {
      if (arr[i] < arr[i - 1]) {
        aSum+=arr[i - 1] - arr[i];
        maxDrop=Math.max(maxDrop,arr[i - 1] - arr[i]);
      }
    }
    double rate=maxDrop / 10.0;
    double curr=arr[0];
    double bSum=0;
    for (int i=0; i < (n - 1) * 10; i++) {
      if (i % 10 == 0) {
        curr=arr[i / 10];
      }
      double newVal=Math.max(0,curr - rate);
      double delta=curr - newVal;
      curr-=delta;
      bSum+=delta;
    }
    long l=Math.round(bSum);
    int intBSum=(int)l;
    System.out.printf(""Case #%d: %d %d\n"",test,aSum,intBSum);
  }
}
"
30000704,"public static void main(String[] args) throws Exception {
  Mushrooms r=new Mushrooms();
  Scanner sc=new Scanner(new BufferedReader(new FileReader(""A-small-attempt0.in"")));
  PrintWriter pw=new PrintWriter(new FileWriter(""A-small-attempt0.out""));
  int nc=sc.nextInt();
  for (int tc=1; tc <= nc; tc++) {
    int n=sc.nextInt();
    int[] a=new int[n];
    int ans0=0;
    int ans1=0;
    for (int i=0; i < n; i++) {
      a[i]=sc.nextInt();
      if (i > 0 && a[i - 1] > a[i])       ans0+=a[i - 1] - a[i];
    }
    if (ans0 > 0) {
      int lo=1;
      int hi=10000;
      while (lo < hi) {
        int rate=(lo + hi) / 2;
        boolean ok=true;
        for (int i=1; i < n; i++) {
          if (a[i - 1] - rate > a[i]) {
            ok=false;
            break;
          }
        }
        if (ok)         hi=rate;
 else         lo=rate + 1;
      }
      for (int i=1; i < n; i++) {
        if (lo <= a[i - 1]) {
          ans1+=lo;
        }
 else {
          ans1+=a[i - 1];
        }
      }
    }
    pw.printf(""Case #%d: %d %d\n"",tc,ans0,ans1);
  }
  sc.close();
  pw.close();
}
"
30000705,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(WORK_DIR + ""A-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(WORK_DIR + ""output.txt""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    prblmA r=new prblmA();
    int N=sc.nextInt();
    int m[]=new int[N];
    for (int i=0; i < N; i++)     m[i]=sc.nextInt();
    int c1=0, c2=0;
    int d=0;
    for (int i=1; i < N; i++) {
      if (m[i] < m[i - 1]) {
        c1+=m[i - 1] - m[i];
        if ((m[i - 1] - m[i]) > d) {
          d=m[i - 1] - m[i];
        }
      }
    }
    for (int i=0; i < N - 1; i++) {
      c2+=Math.min(m[i],d);
    }
    pw.println(c1 + "" "" + c2);
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000706,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""A-large.in""));
  BufferedWriter writer=new BufferedWriter(new FileWriter(""A-large.out""));
  String line=in.readLine();
  int n=Integer.parseInt(line);
  for (int i=0; i < n; i++) {
    line=in.readLine();
    line=in.readLine();
    String[] arr=line.split("" "");
    int[] m=new int[arr.length];
    m[0]=Integer.parseInt(arr[0]);
    long min=0;
    long minDiff=0;
    for (int y=1; y < m.length; y++) {
      m[y]=Integer.parseInt(arr[y]);
      if (m[y] < m[y - 1]) {
        min=min + (m[y - 1] - m[y]);
      }
      if (m[y - 1] - m[y] > minDiff) {
        minDiff=m[y - 1] - m[y];
      }
    }
    long min2=0;
    for (int y=0; y < m.length - 1; y++) {
      if (m[y] < minDiff) {
        min2=min2 + m[y];
      }
 else {
        min2=min2 + minDiff;
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ min+ "" ""+ min2+ ""\n"");
    writer.write(""Case #"" + (i + 1) + "": ""+ min+ "" ""+ min2+ ""\n"");
  }
  in.close();
  writer.close();
}
"
30000707,"public static void main(String[] args){
  GCJQualA g=new GCJQualA();
  Scanner br=null;
  BufferedWriter bw;
  try {
    br=new Scanner(new File(""src/gcj20151a/A-small-practice.in""));
    bw=new BufferedWriter(new FileWriter(""src/gcj20151a/A-small-output.txt""));
    int numTests=br.nextInt();
    for (int i=0; i < numTests; i++) {
      int N=br.nextInt();
      int[] m=new int[N];
      for (int j=0; j < N; j++) {
        m[j]=br.nextInt();
      }
      int total=0;
      int prev=0;
      for (int i1=0; i1 < N; i1++) {
        int n=m[i1];
        if (n < prev) {
          total+=(prev - n);
        }
        prev=n;
      }
      int a=total;
      int total1=0;
      int rate=0;
      int prev1=0;
      for (int i1=0; i1 < N; i1++) {
        int n=m[i1];
        int periodRate=prev1 - n;
        if (periodRate < 0) {
          periodRate=0;
        }
        if (periodRate > rate) {
          rate=periodRate;
        }
        prev1=n;
      }
      for (int i2=0; i2 < N - 1; i2++) {
        int n=m[i2];
        total1+=(n > rate) ? rate : n;
      }
      int b=total1;
      String answer=a + "" "" + b;
      bw.write(""Case #"" + (i + 1) + "": "");
      System.out.println(""Case #"" + (i + 1) + "": "");
      bw.write(answer);
      System.out.println(answer);
      bw.newLine();
    }
    bw.close();
  }
 catch (  IOException ex) {
    Logger.getLogger(g.getClass().getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    try {
      if (br != null) {
        br.close();
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(g.getClass().getName()).log(Level.SEVERE,null,ex);
    }
  }
}
"
30000708,"public static void main(String[] args) throws IOException {
  String inputFile=""A-large (1).in"";
  String outputFile=""output.txt"";
  FileInputStream fstream=new FileInputStream(inputFile);
  BufferedReader br=new BufferedReader(new InputStreamReader(fstream));
  PrintWriter writer=new PrintWriter(outputFile,""UTF-8"");
  String strLine;
  strLine=br.readLine();
  int T=Integer.parseInt(strLine);
  System.out.println(""T="" + T);
  for (int i=0; i < T; i++) {
    int N;
    strLine=br.readLine();
    N=Integer.parseInt(strLine);
    int[] c=new int[N];
    strLine=br.readLine();
    String[] strArray=strLine.split("" "");
    for (int j=0; j < N; j++) {
      c[j]=Integer.parseInt(strArray[j]);
    }
    int n=c.length;
    int r=0;
    for (int i1=0; i1 < n - 1; i1++) {
      r=r + Math.max(0,c[i1] - c[i1 + 1]);
    }
    int y=r;
    int n1=c.length;
    int minCount=-1;
    int e=0;
    for (int i2=0; i2 < n1 - 1; i2++) {
      e=Math.max(0,c[i2] - c[i2 + 1]);
      if (e > minCount) {
        minCount=e;
      }
    }
    int r1=0;
    for (int i1=0; i1 < n1 - 1; i1++) {
      if (c[i1] <= minCount) {
        r1=r1 + c[i1];
      }
 else {
        r1=r1 + minCount;
      }
    }
    int z=r1;
    String result_str;
    result_str=""Case #"" + (i + 1) + "": ""+ y+ "" ""+ z;
    writer.println(result_str);
    System.out.println(result_str);
  }
  br.close();
  writer.close();
}
"
30000709,"public static void main(String[] args) throws IOException {
  String inputFile=""src/A-large-0.in"";
  Scanner in=new Scanner(new File(inputFile));
  PrintStream out=new PrintStream(inputFile.substring(0,inputFile.length() - 2) + ""out"");
  int cases=in.nextInt();
  for (int cs=1; cs <= cases; cs++) {
    int n=in.nextInt();
    int[] m=new int[n];
    for (int i=0; i < n; i++) {
      m[i]=in.nextInt();
    }
    long y=0, z=0, maxDiff=0;
    for (int i=1; i < n; i++) {
      int diff=Math.max(m[i - 1] - m[i],0);
      y+=diff;
      maxDiff=Math.max(maxDiff,diff);
    }
    for (int i=0; i < n - 1; i++) {
      z+=Math.min(maxDiff,m[i]);
    }
    String ans=""Case #"" + cs + "": ""+ y+ "" ""+ z;
    out.println(ans);
    System.out.println(ans);
  }
  out.close();
  in.close();
}
"
30000710,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  PrintWriter out=new PrintWriter(System.out);
  int t=in.nextInt();
  for (int cs=1; cs <= t; cs++) {
    int n=in.nextInt();
    int[] m=new int[n];
    for (int i=0; i < n; i++) {
      m[i]=in.nextInt();
    }
    int[] ways=new int[2];
    int n1=m.length;
    for (int i=0; i < n1 - 1; i++) {
      if (m[i] > m[i + 1]) {
        ways[0]+=m[i] - m[i + 1];
      }
    }
    int maxrate=0;
    for (int i=0; i < n1 - 1; i++) {
      if (m[i] > m[i + 1]) {
        maxrate=Math.max(maxrate,m[i] - m[i + 1]);
      }
    }
    for (int i=0; i < n1 - 1; i++) {
      ways[1]+=Math.min(maxrate,m[i]);
    }
    int[] ret=ways;
    out.println(String.format(""Case #%d: %d %d"",cs,ret[0],ret[1]));
  }
  out.flush();
}
"
30000711,"public static void main(String[] args){
  String fileAddress=""C:\\Users\\di\\Documents\\googleCodeJam\\A-large.in"";
  try {
    FileInputStream fstream=new FileInputStream(fileAddress);
    BufferedReader br=new BufferedReader(new InputStreamReader(fstream));
    PrintWriter writer=new PrintWriter(""C:\\Users\\di\\Documents\\googleCodeJam\\A-output-2.txt"",""UTF-8"");
    String strLine;
    int i=0;
    while ((strLine=br.readLine()) != null) {
      String[] strs=strLine.split("" "");
      if (strs.length < 2)       continue;
      i++;
      int res_m1=0;
      int res_m2=0;
      int max_diff=0;
      for (int j=0; j < strs.length - 1; j++) {
        int pre=Integer.parseInt(strs[j]);
        int nex=Integer.parseInt(strs[j + 1]);
        if (nex < pre) {
          int diff=pre - nex;
          res_m1+=diff;
          if (diff > max_diff)           max_diff=diff;
        }
      }
      for (int j=0; j < strs.length - 1; j++) {
        int cur=Integer.parseInt(strs[j]);
        if (cur > max_diff)         res_m2+=max_diff;
 else         res_m2+=cur;
      }
      writer.println(""Case #"" + i + "": ""+ res_m1+ "" ""+ res_m2);
    }
    writer.close();
    br.close();
    fstream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000712,"public static void main(String[] args) throws IOException {
  if (useStandardInput) {
    reader=new BufferedReader(new InputStreamReader(System.in));
    writer=new BufferedWriter(new StringWriter());
  }
 else {
    reader=new BufferedReader(new FileReader(filename + "".in""));
    writer=new BufferedWriter(new FileWriter(filename + "".out""));
  }
  final int T=Integer.parseInt(reader.readLine());
  for (int i=1; i <= T; i++) {
    int N=Integer.parseInt(reader.readLine());
    String[] strings=reader.readLine().split(""\\s"");
    int L=strings.length;
    int[] ints=new int[L];
    for (int i3=0; i3 < L; i3++) {
      ints[i3]=Integer.parseInt(strings[i3]);
    }
    int[] mushrooms=ints;
    int N1=mushrooms.length;
    int total=0;
    for (int i1=1; i1 < N1; i1++) {
      if (mushrooms[i1] < mushrooms[i1 - 1]) {
        int diff=mushrooms[i1 - 1] - mushrooms[i1];
        total+=diff;
      }
    }
    int result1=total;
    int N2=mushrooms.length;
    int max=0;
    for (int i2=1; i2 < N2; i2++) {
      if (mushrooms[i2] < mushrooms[i2 - 1]) {
        int diff=mushrooms[i2 - 1] - mushrooms[i2];
        if (diff > max)         max=diff;
      }
    }
    if (log)     System.out.println(""max = "" + max);
    int total1=0;
    for (int i1=1; i1 < N2; i1++) {
      int x=Math.min(mushrooms[i1 - 1],max);
      total1+=x;
    }
    int result2=total1;
    String output=""Case #"" + i + "": ""+ String.valueOf(result1)+ "" ""+ String.valueOf(result2)+ ""\n"";
    System.out.print(""OUT: "" + output);
    if (!useStandardInput) {
      writer.write(output);
    }
  }
  reader.close();
  writer.close();
  if (!useStandardInput)   System.out.println(""FINISHED for file "" + filename);
  System.exit(0);
}
"
30000713,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(NAME));
  PrintWriter pw=new PrintWriter(OUT);
  int testCount=sc.nextInt();
  sc.nextLine();
  for (int i=0; i < testCount; i++) {
    sc.nextLine();
    String[] temp=sc.nextLine().split("" "");
    List<Integer> x=new ArrayList<>();
    for (    String s : temp) {
      x.add(Integer.parseInt(s));
    }
    long total0=0;
    long total1=0;
    int maxMin=0;
    int prev=x.get(0);
    for (int i1=1; i1 < x.size(); i1++) {
      Integer current=x.get(i1);
      if (current < prev) {
        total0+=prev - current;
        maxMin=Math.max(maxMin,prev - current);
      }
      prev=current;
    }
    for (int i2=0; i2 < x.size() - 1; i2++) {
      total1+=Math.min(maxMin,x.get(i2));
    }
    String sol="""" + total0 + "" ""+ total1;
    System.out.println(String.format(PATTERN,i + 1,sol));
    pw.println(String.format(PATTERN,i + 1,sol));
  }
  pw.flush();
  pw.close();
}
"
30000714,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(new BufferedWriter(new FileWriter(""mush.out"")));
  int t=Integer.parseInt(br.readLine());
  for (int i=0; i < t; i++) {
    int n=Integer.parseInt(br.readLine());
    int anum[]=new int[n];
    StringTokenizer st=new StringTokenizer(br.readLine(),"" "");
    for (int j=0; j < n; j++)     anum[j]=Integer.parseInt(st.nextToken());
    int eat1=0;
    for (int j=0; j < n - 1; j++) {
      if (anum[j] > anum[j + 1])       eat1+=anum[j] - anum[j + 1];
    }
    int max=0;
    for (int j=0; j < n - 1; j++) {
      if (anum[j] - anum[j + 1] > max)       max=anum[j] - anum[j + 1];
    }
    int eat2=0;
    for (int j=0; j < n - 1; j++) {
      if (anum[j] < max)       eat2+=anum[j];
 else       eat2+=max;
    }
    pw.println(""Case #"" + (i + 1) + "": ""+ eat1+ "" ""+ eat2);
  }
  br.close();
  pw.close();
}
"
30000715,"public static void main(String[] args){
  BufferedReader cin=new BufferedReader(new InputStreamReader(System.in));
  String file=null;
  try {
    System.out.print(""Filename: "");
    file=cin.readLine();
    BufferedReader reader=new BufferedReader(new InputStreamReader(mainClass.class.getResourceAsStream(file)));
    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""output.txt"")));
    String line=reader.readLine();
    int testCases=Integer.parseInt(line);
    for (int i=0; i < testCases; i++) {
      reader.readLine();
      line=reader.readLine();
      Solution obj_Solution=new Solution();
      String result=obj_Solution.solve(line) + """";
      writer.append(""Case #"" + (i + 1)).append("": "").append(result);
      writer.newLine();
      System.out.println(""Case #"" + (i + 1) + "": ""+ line);
      System.out.println(result);
    }
    writer.close();
  }
 catch (  IOException x) {
    System.err.format(""IOException: %s%n"",x);
  }
}
"
30000716,"public static void main(String[] args){
  Scanner s=new Scanner(new InputStreamReader(System.in));
  int T=s.nextInt();
  s.nextLine();
  for (int i=0; i < T; i++) {
    int m=s.nextInt();
    s.nextLine();
    int[] ints=new int[m];
    int max=0;
    int smax=0;
    for (int j=0; j < m; j++) {
      ints[j]=s.nextInt();
    }
    int rate=0;
    for (int k=0; k < m - 1; k++) {
      if (ints[k + 1] < ints[k]) {
        max=ints[k];
        smax=ints[k + 1];
        if (rate < (max - smax)) {
          rate=max - smax;
        }
      }
    }
    if (rate < 0)     rate=0;
    int count2=0;
    for (int k=0; k < m - 1; k++) {
      int b=0;
      if (ints[k] >= 0) {
        if (ints[k] > rate)         b+=rate;
 else         b+=ints[k];
      }
      count2+=b;
    }
    s.nextLine();
    int count=0;
    for (int k=m - 1; k > 0; k--) {
      int a=0;
      if ((ints[k - 1] - ints[k]) > 0)       a=(ints[k - 1] - ints[k]);
      count+=a;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ count+ "" ""+ count2);
  }
}
"
30000717,"public static void main(String[] args) throws IOException {
  A2015 trans=new A2015();
  Path path=Paths.get(""inputs/"" + A2015.NAME + "".in"");
  List<String> lines=Files.readAllLines(path);
  BufferedWriter out=new BufferedWriter(new FileWriter(""output/"" + A2015.NAME + "".out""));
  try {
    try {
      int count=parseInt(lines.remove(0));
      for (int i=0; i < count; i++) {
        String s[]=lines.get(2 * i + 1).split("" "");
        int C=Integer.parseInt(lines.get(2 * i).trim());
        int is[]=new int[C];
        for (int i2=0; i2 < C; i2++) {
          is[i2]=Integer.parseInt(s[i2]);
        }
        int prev=is[0];
        int maxv1=0;
        int mI=0;
        for (int i1=1; i1 < C; i1++) {
          if (is[i1] < prev) {
            maxv1+=prev - is[i1];
            mI=Math.max(mI,prev - is[i1]);
          }
          prev=is[i1];
        }
        int maxv2=0;
        for (int i3=0; i3 < C - 1; i3++) {
          maxv2+=Math.min(is[i3],mI);
        }
        String str=maxv1 + "" "" + maxv2;
        out.write(""Case #"" + (i + 1) + "": ""+ str);
        if (i < count - 1)         out.write(System.getProperty(""line.separator""));
        System.out.println(lines.get(i));
        System.out.println(str);
      }
    }
  finally {
      out.flush();
      out.close();
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
"
30000718,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int tc=1; tc <= T; tc++) {
    int n=in.nextInt();
    int[] a=new int[n];
    for (int i=0; i < n; i++)     a[i]=in.nextInt();
    int r1=0, r2=0, maxd=0;
    for (int i=0; i + 1 < n; i++)     r1+=Math.max(0,a[i] - a[i + 1]);
    for (int i=0; i + 1 < n; i++)     maxd=Math.max(maxd,a[i] - a[i + 1]);
    for (int i=0; i + 1 < n; i++)     r2+=Math.min(a[i],maxd);
    System.out.printf(""Case #%d: %d %d\n"",tc,r1,r2);
  }
}
"
30000719,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int cases=Integer.parseInt(in.readLine());
  for (int i=0; i < cases; i++) {
    in.readLine();
    String[] nums=in.readLine().split("" "");
    int[] ints=new int[nums.length];
    int sum1=0;
    int sum2=0;
    int maxdiff=0;
    for (int j=0; j < nums.length; j++) {
      ints[j]=Integer.parseInt(nums[j]);
      if (j > 0) {
        if (ints[j - 1] > ints[j]) {
          sum1+=ints[j - 1] - ints[j];
        }
        maxdiff=Math.max(maxdiff,ints[j - 1] - ints[j]);
      }
    }
    for (int j=0; j < nums.length - 1; j++) {
      if (ints[j] > maxdiff) {
        sum2+=maxdiff;
      }
 else {
        sum2+=ints[j];
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ sum1+ "" ""+ sum2);
  }
}
"
30000720,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    int N=sc.nextInt();
    int[] mushrooms=new int[N];
    int[] diff=new int[N - 1];
    long total1=0;
    long total2=0;
    int max=0;
    mushrooms[0]=sc.nextInt();
    for (int n=1; n < N; n++) {
      mushrooms[n]=sc.nextInt();
      diff[n - 1]=mushrooms[n - 1] - mushrooms[n];
      total1+=Math.max(diff[n - 1],0);
      if (diff[n - 1] > max) {
        max=diff[n - 1];
      }
    }
    double c=(double)max / 10;
    boolean check=true;
    total2=0;
    check=true;
    for (int i=1; i < N; i++) {
      if (mushrooms[i] == 0) {
        if (mushrooms[i - 1] > c * 10) {
          check=false;
          break;
        }
 else {
          total2=total2 + mushrooms[i - 1];
        }
      }
 else {
        if (mushrooms[i - 1] - mushrooms[i] > 10 * c) {
          check=false;
          break;
        }
 else {
          if (10 * c >= mushrooms[i - 1]) {
            total2=total2 + mushrooms[i - 1];
          }
 else {
            total2=(long)(total2 + (int)10 * c);
          }
        }
      }
    }
    System.out.println(""Case #"" + t + "": ""+ total1+ "" ""+ (total2));
  }
}
"
30000721,"public static void main(String[] args) throws java.io.IOException {
  java.io.BufferedReader br=new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
  int t=Integer.parseInt(br.readLine());
  for (int i=0; i < t; i++) {
    int n=Integer.parseInt(br.readLine());
    int arr[]=new int[n];
    int diff=0;
    String s[]=br.readLine().split("" "");
    for (int j=0; j < n; j++) {
      arr[j]=Integer.parseInt(s[j]);
    }
    int max=0;
    for (int j=1; j < n; j++) {
      if (arr[j] < arr[j - 1]) {
        diff+=arr[j - 1] - arr[j];
        if ((arr[j - 1] - arr[j]) > max) {
          max=arr[j - 1] - arr[j];
        }
      }
    }
    int diff2=0;
    for (int j=0; j < n - 1; j++) {
      if (arr[j] <= max) {
        diff2=diff2 + arr[j];
      }
 else {
        diff2=diff2 + max;
      }
    }
    System.out.println(""Case #"" + (i + 1) + "":""+ "" ""+ diff+ "" ""+ diff2);
  }
}
"
30000722,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int caze=1; caze <= T; caze++) {
    int ans1=0;
    int ans2=Integer.MAX_VALUE;
    int N=sc.nextInt();
    int[] mush=new int[N];
    for (int i=0; i < N; i++) {
      mush[i]=sc.nextInt();
    }
    for (int i=0; i < N - 1; i++) {
      int best=100000000;
      if (mush[i] > mush[i + 1]) {
        best=Math.abs(mush[i] - mush[i + 1]);
        best=Math.min(best,mush[i]);
      }
 else {
        best=0;
      }
      ans1+=best;
    }
    M:     for (int c=0; c < 10000; c++) {
      int mushPer10=c;
      int cnt=0;
      for (int i=0; i < N - 1; i++) {
        int amt=0;
        cnt+=Math.min(mushPer10,mush[i]);
        int mushi=mush[i] - mushPer10;
        if (mushi > mush[i + 1])         continue M;
      }
      ans2=Math.min(ans2,cnt);
    }
    System.out.printf(""Case #%d: %d %d\n"",caze,ans1,ans2);
  }
}
"
30000723,"public static void main(String... hi){
  Scanner in=new Scanner(System.in);
  int cases=in.nextInt();
  for (int n=1; n <= cases; n++) {
    int count=in.nextInt();
    int[] m=new int[count];
    for (int i=0; i < count; i++)     m[i]=in.nextInt();
    int method1=0;
    for (int i=1; i < count; i++) {
      int d=m[i] - m[i - 1];
      if (d < 0) {
        method1+=Math.abs(d);
      }
    }
    int dif=0;
    for (int i=1; i < count; i++) {
      int d=m[i] - m[i - 1];
      if (d < 0 && Math.abs(d) > dif) {
        dif=Math.abs(d);
      }
    }
    int method2=0;
    for (int i=0; i < count - 1; i++) {
      if (dif > m[i]) {
        method2+=m[i];
      }
 else {
        method2+=dif;
      }
    }
    System.out.printf(""Case #%d: %s %s\n"",n,method1,method2);
  }
  in.close();
}
"
30000724,"public static void main(String[] args) throws IOException {
  BufferedReader inputStream=new BufferedReader(new FileReader(""in.txt""));
  BufferedWriter outputStream=new BufferedWriter(new FileWriter(""out.txt""));
  in=inputStream.readLine();
  int testCaseNum=Integer.parseInt(in);
  for (int i=0; i < testCaseNum; i++) {
    in=inputStream.readLine();
    int size=Integer.parseInt(in);
    int[] array=new int[size];
    in=inputStream.readLine();
    String[] split=in.split("" "");
    int last=0;
    int count1=0;
    double rate=0;
    for (int j=0; j < (size - 1); j++) {
      if (Integer.parseInt(split[j]) - Integer.parseInt(split[j + 1]) > 0) {
        count1+=Integer.parseInt(split[j]) - Integer.parseInt(split[j + 1]);
      }
      if ((Integer.parseInt(split[j]) - Integer.parseInt(split[j + 1]) > rate)) {
        rate=Integer.parseInt(split[j]) - Integer.parseInt(split[j + 1]);
      }
    }
    int count2=0;
    for (int j=0; j < (size - 1); j++) {
      if (Integer.parseInt(split[j]) < rate)       count2+=Integer.parseInt(split[j]);
 else       count2+=rate;
    }
    outputStream.write(""Case #"" + (i + 1) + "": ""+ count1+ "" ""+ (int)count2);
    outputStream.newLine();
  }
  inputStream.close();
  outputStream.close();
}
"
30000725,"public static void main(String[] args) throws IOException {
  File file=new File(""A-large.in"");
  Scanner in=new Scanner(new BufferedReader(new FileReader(file)));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""A-large.out.txt"")));
  int t=Integer.valueOf(in.nextLine());
  for (int round=1; round <= t; round++) {
    int N=Integer.valueOf(in.nextLine());
    String delim=""[ ]"";
    String[] tokens=in.nextLine().split(delim);
    int[] input=new int[N];
    for (int i=0; i < N; i++) {
      input[i]=Integer.valueOf(tokens[i]);
    }
    for (    int i : input)     System.out.println(i);
    int[] result1=new int[2];
    int total=0;
    for (int i1=0; i1 < N - 1; i1++) {
      total+=Math.max(0,input[i1] - input[i1 + 1]);
    }
    result1[0]=total;
    total=0;
    int maxGap=0;
    for (int i2=0; i2 < N - 1; i2++) {
      maxGap=Math.max(maxGap,input[i2] - input[i2 + 1]);
    }
    if (maxGap == 0)     result1[1]=0;
 else {
      double rate=maxGap / 10.0;
      for (int i3=1; i3 < N; i3++) {
        total+=Math.min(maxGap,input[i3 - 1]);
      }
      result1[1]=total;
    }
    int[] result=result1;
    out.println(""Case #"" + round + "": ""+ result[0]+ "" ""+ result[1]);
  }
  out.flush();
  out.close();
  in.close();
}
"
30000726,"String nextToken() throws IOException {
  while ((st == null) || (!st.hasMoreTokens()))   st=new StringTokenizer(br.readLine());
  return st.nextToken();
}
"
30000727,"public static void main(String[] args) throws IOException {
  A a=new A();
  a.scanner=new Scanner(new FileInputStream(""src/cj/y2015/r1a/A-large.in""));
  a.writer=new FileWriter(""src/cj/y2015/r1a/A-large.out"",false);
  int t=a.scanner.nextInt();
  for (int i=0; i < t; i++) {
    int n=a.scanner.nextInt();
    int[] mn=new int[n];
    long eat1=0;
    long eat2=0;
    int max_d=0;
    for (int j=0; j < n; j++) {
      mn[j]=a.scanner.nextInt();
      if (j > 0) {
        if (mn[j] < mn[j - 1]) {
          eat1+=(mn[j - 1] - mn[j]);
          int tmp=mn[j - 1] - mn[j];
          if (tmp > max_d)           max_d=tmp;
        }
      }
    }
    System.out.println(""max_d="" + max_d);
    double r=((double)max_d) / 10;
    for (int j=0; j < n; j++) {
      if (j > 0) {
        int prev=mn[j - 1];
        int cur=mn[j];
        if (prev > (r * 10)) {
          eat2+=r * 10;
        }
 else {
          eat2+=prev;
        }
      }
    }
    a.writer.write(""Case #"" + (i + 1) + "": ""+ eat1+ "" ""+ eat2+ ""\n"");
    System.out.println(""Case #"" + (i + 1) + "": ""+ eat1+ "" ""+ eat2);
  }
  a.scanner.close();
  a.writer.close();
}
"
30000728,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""input.in""));
  PrintWriter out=new PrintWriter(""output.txt"");
  int T=in.nextInt();
  int[] se=new int[2];
  for (int i=0; i < T; i++) {
    Mushroom r=new Mushroom();
    int N=in.nextInt();
    int[] plate=new int[N];
    for (int i1=0; i1 < N; i1++) {
      plate[i1]=in.nextInt();
    }
    int[] eat=new int[N - 1];
    int max=0;
    int sum1=0;
    for (int i2=0; i2 < N - 1; i2++) {
      eat[i2]=plate[i2] - plate[i2 + 1];
      if (eat[i2] > max)       max=eat[i2];
      if (eat[i2] > 0)       sum1=sum1 + eat[i2];
    }
    int sum2=0;
    for (int i3=0; i3 < N - 1; i3++) {
      if (plate[i3] > max)       sum2=sum2 + max;
 else       sum2=sum2 + plate[i3];
    }
    int[] result=new int[2];
    result[0]=sum1;
    result[1]=sum2;
    se=result;
    String s=""Case #"" + (i + 1) + "": ""+ se[0]+ "" ""+ se[1];
    out.println(s);
    System.out.println(s);
  }
  out.close();
}
"
30000729,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""in""));
  PrintWriter out=new PrintWriter(""out"");
  int T=in.nextInt();
  for (int r=1; r <= T; r++) {
    int n=in.nextInt();
    int prev=0;
    int curr=0;
    int f=0;
    int s=0;
    int[] arr=new int[n];
    int maxDiff=0;
    for (int i=0; i < n; i++) {
      prev=curr;
      curr=in.nextInt();
      int diff=prev - curr;
      if (maxDiff < diff)       maxDiff=diff;
      if (prev > curr) {
        f+=diff;
      }
      arr[i]=curr;
      prev=curr;
    }
    for (int i=0; i < arr.length - 1; i++) {
      s+=maxDiff > arr[i] ? arr[i] : maxDiff;
    }
    System.out.println(""Case #"" + r + "": ""+ f+ "" ""+ s);
    out.println(""Case #"" + r + "": ""+ f+ "" ""+ s);
  }
  out.close();
  in.close();
}
"
30000730,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""A2.in""));
  PrintWriter out=new PrintWriter(""A2.out"");
  int tc=in.nextInt();
  for (int cc=1; cc <= tc; cc++) {
    int n=in.nextInt();
    int[] a=new int[n];
    for (int i=0; i < n; i++)     a[i]=in.nextInt();
    int r0=0;
    int r1=0;
    int max=0;
    for (int i=0; i < n - 1; i++) {
      if (a[i] > a[i + 1]) {
        r0+=a[i] - a[i + 1];
        max=Math.max(max,a[i] - a[i + 1]);
      }
    }
    for (int i=0; i < n - 1; i++)     r1+=Math.min(max,a[i]);
    System.out.printf(""Case #%d: %d %d\n"",cc,r0,r1);
    out.printf(""Case #%d: %d %d\n"",cc,r0,r1);
  }
  out.close();
}
"
30000731,"public static void main(String[] args){
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    int N=sc.nextInt();
    int[] m=new int[N];
    for (int i=0; i < N; i++) {
      m[i]=sc.nextInt();
    }
    int rate=0;
    for (int i=1; i < N; i++) {
      int diff=m[i - 1] - m[i];
      if (diff > rate) {
        rate=diff;
      }
    }
    int c1=0, c2=(m[0] < rate) ? m[0] : rate;
    for (int i=1; i < N; i++) {
      if (m[i] < m[i - 1]) {
        c1+=m[i - 1] - m[i];
      }
      if (i < N - 1)       c2+=(m[i] < rate) ? m[i] : rate;
    }
    System.out.printf(""Case #%d: %d %d\n"",t,c1,c2);
  }
}
"
30000732,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""in.txt""));
  PrintWriter pw=new PrintWriter(new FileWriter(""out.txt""));
  int N=Integer.parseInt(br.readLine());
  for (int p=0; p < N; p++) {
    int n=Integer.parseInt(br.readLine());
    String[] s=br.readLine().split("" "");
    int[] v=new int[n];
    for (int i=0; i < n; i++)     v[i]=Integer.parseInt(s[i]);
    int ret1=0;
    int maxslope=0;
    for (int i=1; i < n; i++) {
      int d=v[i - 1] - v[i];
      if (d > 0) {
        maxslope=Math.max(maxslope,d);
        ret1+=d;
      }
    }
    int ret2=0;
    for (int i=0; i < n - 1; i++) {
      ret2+=Math.min(maxslope,v[i]);
    }
    pw.println(""Case #"" + (p + 1) + "": ""+ ret1+ "" ""+ ret2);
  }
  pw.flush();
  pw.close();
}
"
30000733,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter file=new PrintWriter(""output.txt"");
  int t=Integer.parseInt(in.readLine());
  for (int i=0; i < t; ++i) {
    int n=Integer.parseInt(in.readLine());
    String line[]=in.readLine().split("" "");
    int[] mush=new int[n];
    int wayOne=0;
    int old=Integer.parseInt(line[0]);
    double gap=0;
    for (int j=0; j < n; ++j) {
      if (j != 0) {
        old=mush[j - 1];
      }
      mush[j]=Integer.parseInt(line[j]);
      if (old - mush[j] > 0) {
        wayOne+=old - mush[j];
        if (old - mush[j] > gap)         gap=old - mush[j];
      }
    }
    int wayTwo=0;
    double rate=gap;
    double leftover=0;
    for (int j=0; j < n - 1; ++j) {
      int amount=(int)(rate + leftover);
      leftover=rate + leftover - amount;
      if (rate > mush[j])       wayTwo+=mush[j];
 else       wayTwo+=amount;
    }
    file.println(""Case #"" + (i + 1) + "": ""+ wayOne+ "" ""+ wayTwo);
  }
  file.close();
  in.close();
}
"
30000734,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  try {
    s=new Scanner(new FileReader(""input.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    s.close();
    return;
  }
  Writer out=null;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""output.txt""),""utf-8""));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int t=s.nextInt();
  int n, res1, res2;
  for (int i=0; i < t; i++) {
    System.out.println(""Case #"" + (i + 1));
    n=s.nextInt();
    int[] a=new int[n];
    for (int j=0; j < n; j++)     a[j]=s.nextInt();
    int n1=a.length, res=0;
    for (int i1=0; i1 < n1 - 1; i1++)     if (a[i1] > a[i1 + 1])     res+=a[i1] - a[i1 + 1];
    res1=res;
    int rate=0;
    int n2=a.length, res3=0;
    for (int i1=0; i1 < n2 - 1; i1++)     if (rate < (a[i1] - a[i1 + 1]))     rate=a[i1] - a[i1 + 1];
    for (int i2=0; i2 < n2 - 1; i2++)     res3+=Math.min(a[i2],rate);
    res2=res3;
    try {
      out.write(""Case #"" + (i + 1) + "": ""+ res1+ "" ""+ res2+ ""\n"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  try {
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  s.close();
}
"
30000735,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int t=0; t < T; t++) {
    int n=sc.nextInt();
    int[] data=new int[n];
    for (int i=0; i < n; i++) {
      data[i]=sc.nextInt();
    }
    int n1=data.length;
    int sum1=0;
    int sum2=0;
    int rate=0;
    for (int i=1; i < n1; i++) {
      int dm=data[i - 1] - data[i];
      if (dm > 0) {
        sum1+=dm;
        rate=(rate < dm) ? dm : rate;
      }
    }
    for (int i=0; i < n1 - 1; i++) {
      int dm=(data[i] < rate) ? data[i] : rate;
      sum2+=dm;
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ sum1+ "" ""+ sum2);
  }
}
"
30000736,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""A-large.in""));
  int T=sc.nextInt();
  for (int testC=1; testC <= T; ++testC) {
    int N=sc.nextInt();
    int[] data=new int[N];
    for (int i=0; i < N; ++i)     data[i]=sc.nextInt();
    int max_dif=0, total_dif=0;
    for (int i=0; i < N - 1; ++i) {
      if (data[i] - data[i + 1] > max_dif)       max_dif=data[i] - data[i + 1];
      if (data[i] - data[i + 1] > 0)       total_dif+=data[i] - data[i + 1];
    }
    int total=0;
    for (int i=0; i < N - 1; ++i) {
      if (data[i] < max_dif)       total+=data[i];
 else       total+=max_dif;
    }
    System.out.printf(""Case #%d: %d %d\n"",testC,total_dif,total);
  }
}
"
30000737,"/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  File file=new File(""A-large.in"");
  if (file.exists()) {
    System.setIn(new BufferedInputStream(new FileInputStream(file)));
  }
 else {
    throw new Exception(""can't find a input file : "" + file.getAbsolutePath());
  }
  br=new BufferedReader(new InputStreamReader(System.in));
  FileWriter fw=new FileWriter(new File(""output.txt""));
  out=new PrintWriter(fw);
  A b=new A();
  int T=0;
  if (sc != null) {
    T=sc.nextInt();
  }
 else {
    T=parseInt(br.readLine());
  }
  int t=1;
  while (t <= T) {
    out.print(""Case #"" + t + "": "");
    System.out.print(""Case #"" + t + "": "");
    String s=A.br.readLine();
    int N=Integer.parseInt(s);
    int[] d=new int[N];
    s=A.br.readLine();
    String[] sp=s.split("" "");
    for (int i=0; i < N; i++) {
      d[i]=Integer.parseInt(sp[i]);
    }
    int A1=0;
    int A2=0;
    for (int i=0; i < N - 1; i++) {
      if (d[i] > d[i + 1]) {
        A1+=d[i] - d[i + 1];
        A2=Math.max(d[i] - d[i + 1],A2);
      }
    }
    long ans=0;
    for (int i=0; i < N - 1; i++) {
      if (d[i] < A2) {
        ans+=d[i];
      }
 else {
        ans+=A2;
      }
    }
    String s1=A1 + "" "" + ans;
    A.out.println(s1);
    System.out.println(s1);
    t++;
  }
  out.close();
  fw.close();
}
"
30000738,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(a.class.getResourceAsStream(""a-l.in""));
  System.setOut(new PrintStream(""a-l.txt""));
  int testcases, testcase=1;
  testcases=in.nextInt();
  while (testcase <= testcases) {
    int ans1=0, ans2=0;
    double rate=0.0;
    int n=in.nextInt();
    int[] m=new int[n];
    for (int i=0; i < n; i++) {
      m[i]=in.nextInt();
    }
    for (int i=1; i < n; i++) {
      if (m[i - 1] > m[i]) {
        ans1+=(m[i - 1] - m[i]);
        rate=Math.max(rate,(m[i - 1] - m[i]) / 10.0);
      }
    }
    if (rate != 0) {
      int eat=(int)(rate * 10);
      for (int i=0; i < n - 1; i++) {
        if (eat >= m[i]) {
          ans2+=m[i];
        }
 else {
          ans2+=eat;
        }
      }
    }
    System.out.println(""Case #"" + testcase + "": ""+ ans1+ "" ""+ ans2);
    testcase++;
  }
}
"
30000739,"public static void main(String[] args) throws Exception {
  Scanner s=new Scanner(new File(""A-large.in""));
  int input_size=s.nextInt();
  for (int n=0; n < input_size; n++) {
    int test_size=s.nextInt();
    int[] a=new int[test_size];
    for (int x=0; x < test_size; x++) {
      a[x]=s.nextInt();
    }
    int result1=0;
    for (int i=0; i < a.length - 1; i++) {
      if (a[i] > a[i + 1]) {
        result1+=a[i] - a[i + 1];
      }
    }
    int result=result1;
    int result3=0;
    int speed=0;
    for (int i=0; i < a.length - 1; i++) {
      speed=Math.max(speed,a[i] - a[i + 1]);
    }
    for (int i=0; i < a.length - 1; i++) {
      result3+=Math.min(a[i],speed);
    }
    int result2=result3;
    System.out.println(""Case #"" + (n + 1) + "": ""+ result+ "" ""+ result2);
  }
}
"
30000740,"public static void main(String[] args) throws IOException {
  String pb=""MM"";
  Scanner sc=new Scanner(new FileReader(new File(pb + "".in"")));
  PrintWriter out=new PrintWriter(new File(pb + "".out""));
  StringBuilder resultat=new StringBuilder("""");
  long time=System.currentTimeMillis();
  int TC=sc.nextInt();
  for (int tc=1; tc <= TC; tc++) {
    if (tc != 1)     resultat.append(""\n"");
    resultat.append(""Case #"" + tc + "": "");
    int N=sc.nextInt();
    long[] v=new long[N];
    long R=0;
    long S1=0;
    v[0]=sc.nextLong();
    for (int i=1; i < N; i++) {
      v[i]=sc.nextLong();
      if (v[i] < v[i - 1])       S1+=v[i - 1] - v[i];
      if (v[i - 1] - v[i] > R)       R=v[i - 1] - v[i];
    }
    long res=0;
    long S2=0;
    for (int i=0; i < N - 1; i++) {
      S2+=min(v[i],R);
    }
    System.out.println(S1 + "" "" + S2);
    resultat.append(S1 + "" "" + S2);
    System.out.println(""Finished testcase "" + tc + "", time = ""+ (System.currentTimeMillis() - time));
  }
  out.print(resultat);
  out.close();
  sc.close();
}
"
30000741,"public static void main(String[] args) throws IOException {
  Path fFilePath=Paths.get(args[0]);
  try (Scanner scanner=new Scanner(fFilePath,StandardCharsets.UTF_8.name())){
    int count=0;
    int platesCount;
    while (scanner.hasNextLine()) {
      if (count == 0) {
        scanner.nextLine();
      }
 else {
        platesCount=Integer.valueOf(scanner.nextLine());
        String plateLine=scanner.nextLine();
        int[] cakes=new int[platesCount];
        Scanner scanner1=new Scanner(plateLine);
        scanner1.useDelimiter("" "");
        int index=0;
        while (scanner1.hasNext()) {
          String count3=scanner1.next();
          cakes[index]=Integer.valueOf(count3);
          index++;
        }
        int[] mashrooms=cakes;
        int count1=0;
        for (int i=0; i < mashrooms.length - 1; i++) {
          if (mashrooms[i] > mashrooms[i + 1]) {
            count1+=mashrooms[i] - mashrooms[i + 1];
          }
        }
        int any=count1;
        int count2=0;
        int max=0;
        for (int i=0; i < mashrooms.length - 1; i++) {
          max=Math.max(max,mashrooms[i] - mashrooms[i + 1]);
        }
        for (int i=0; i < mashrooms.length - 1; i++) {
          if (max < mashrooms[i]) {
            count2+=max;
          }
 else {
            count2+=mashrooms[i];
          }
        }
        int constant=count2;
        System.out.println(""Case #"" + count + "": ""+ any+ "" ""+ constant);
      }
      count++;
    }
  }
 }
"
30000742,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int casei=1; casei <= t; casei++) {
    int n=sc.nextInt();
    int[] m=new int[n];
    m[0]=sc.nextInt();
    int sum=0;
    int max=0;
    for (int i=1; i < n; i++) {
      m[i]=sc.nextInt();
      int diff=Math.max(0,m[i - 1] - m[i]);
      max=Math.max(max,diff);
      sum+=diff;
    }
    int ret=0;
    for (int i=1; i < n; i++) {
      ret+=Math.min(m[i - 1],max);
    }
    System.out.printf(""Case #%d: %d %d\n"",casei,sum,ret);
  }
  sc.close();
}
"
30000743,"public static void main(String[] args){
  Scanner k=new Scanner(System.in);
  int T=k.nextInt();
  System.out.println();
  for (int i=0; i < T; i++) {
    int N=k.nextInt();
    k.nextLine();
    String input=k.nextLine();
    Scanner sc=new Scanner(input);
    int m1=sc.nextInt();
    int answer1=0;
    int answer2=0;
    int max=0;
    for (int j=1; j < N; j++) {
      int m0=m1;
      m1=sc.nextInt();
      if (m0 - m1 > 0) {
        answer1+=m0 - m1;
        if (m0 - m1 > max)         max=m0 - m1;
      }
    }
    sc=new Scanner(input);
    for (int j=0; j < N - 1; j++) {
      int m=sc.nextInt();
      answer2+=Math.min(m,max);
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ answer1+ "" ""+ answer2);
  }
}
"
30000744,"public static void main(String[] args) throws IOException {
  Mushroom x=new Mushroom();
  Scanner f=new Scanner(new File(""A-large.in""));
  int[] samples;
  int numCases=f.nextInt();
  for (int i=0; i < numCases; i++) {
    int ans1=0;
    int ans2=0;
    int numSamples=f.nextInt();
    samples=new int[numSamples];
    for (int j=0; j < numSamples; j++) {
      samples[j]=f.nextInt();
    }
    for (int a1=0; a1 < numSamples - 1; a1++) {
      int temp=samples[a1] - samples[a1 + 1];
      ans1+=(temp < 0 ? 0 : temp);
    }
    int max=0;
    for (int a2=0; a2 < numSamples - 1; a2++) {
      int temp=samples[a2] - samples[a2 + 1];
      max=Integer.max(temp,max);
    }
    for (int a2=0; a2 < numSamples - 1; a2++) {
      int amtThisTime=Integer.min(samples[a2],max);
      ans2+=amtThisTime;
    }
    System.out.printf(""Case #%d: %d %d\n"",i + 1,ans1,ans2);
  }
}
"
30000745,"public static void main(String[] args) throws IOException {
  Scanner scan=new Scanner(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(new OutputStreamWriter(System.out));
  int t=scan.nextInt();
  for (int q=1; q <= t; q++) {
    int n=scan.nextInt();
    int[] arr=new int[n];
    int ans1=0;
    int max=0;
    for (int i=0; i < n; i++) {
      arr[i]=scan.nextInt();
      if (i != 0 && (arr[i - 1] > arr[i])) {
        ans1=ans1 + arr[i - 1] - arr[i];
        max=Math.max(max,arr[i - 1] - arr[i]);
      }
    }
    int ans2=0;
    for (int i=0; i < n - 1; i++) {
      if (arr[i] > max) {
        ans2=ans2 + max;
      }
 else {
        ans2=ans2 + arr[i];
      }
    }
    pw.write(""Case #"" + q + "": ""+ ans1+ "" ""+ ans2+ ""\n"");
  }
  pw.close();
}
"
30000746,"public static void main(String[] args) throws IOException {
  String encoding=""UTF-8"";
  BufferedReader reader=null;
  String filename=""/Users/dhsingh/Downloads/inputA.txt"";
  String objectFile=""/Users/dhsingh/Downloads/output_A.txt"";
  String contentss="""";
  BufferedWriter bw;
  bw=new BufferedWriter(new FileWriter(objectFile));
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(filename),encoding));
    String line=reader.readLine();
    int T=Integer.parseInt(line);
    String[] parsed;
    int sum=0;
    int first, second;
    int diff;
    for (int ii=1; ii <= T; ii++) {
      sum=0;
      line=reader.readLine();
      line=reader.readLine();
      parsed=line.split("" "");
      first=0;
      diff=Integer.parseInt(parsed[0]) - Integer.parseInt(parsed[1]);
      for (int i=0; i < parsed.length - 1; i++) {
        first+=Integer.parseInt(parsed[i]) - Integer.parseInt(parsed[i + 1]) > 0 ? Integer.parseInt(parsed[i]) - Integer.parseInt(parsed[i + 1]) : 0;
      }
      for (int i=0; i < parsed.length - 1; i++) {
        diff=Integer.parseInt(parsed[i]) - Integer.parseInt(parsed[i + 1]) > diff ? Integer.parseInt(parsed[i]) - Integer.parseInt(parsed[i + 1]) : diff;
      }
      second=0;
      for (int i=0; i < parsed.length - 1; i++) {
        second+=Integer.parseInt(parsed[i]) - Integer.parseInt(parsed[i + 1]) < diff ? (Integer.parseInt(parsed[i]) > diff ? diff : Integer.parseInt(parsed[i])) : diff;
      }
      contentss+=""Case #"" + ii + "": ""+ first+ "" ""+ second+ ""\n"";
    }
    bw.write(contentss);
  }
  finally {
    reader.close();
    bw.close();
  }
}
"
30000747,"public static void main(String[] args) throws Exception {
  Scanner scanz=new Scanner(new FileReader(""A-large.in""));
  PrintWriter printz=new PrintWriter(new FileWriter(""out.txt""));
  int total=scanz.nextInt();
  int[] shrooms;
  int first;
  int second;
  for (int x=0; x < total; x++) {
    shrooms=new int[scanz.nextInt()];
    for (int z=0; z < shrooms.length; z++) {
      shrooms[z]=scanz.nextInt();
    }
    int eaten=0;
    for (int z=1; z < shrooms.length; z++) {
      if (shrooms[z] < shrooms[z - 1])       eaten+=shrooms[z - 1] - shrooms[z];
    }
    first=eaten;
    int eaten1=0;
    int rate=0;
    for (int z=1; z < shrooms.length; z++) {
      if ((shrooms[z - 1] - shrooms[z]) > rate)       rate=(shrooms[z - 1] - shrooms[z]);
    }
    for (int z=0; z < shrooms.length - 1; z++) {
      if (rate >= shrooms[z])       eaten1+=shrooms[z];
 else       eaten1+=rate;
    }
    second=eaten1;
    printz.println(""Case #"" + (x + 1) + "": ""+ first+ "" ""+ second);
  }
  printz.close();
}
"
30000748,"public static void main(String[] parms){
  int numProbs;
  numProbs=sc.nextInt();
  for (int i=1; i <= numProbs; i++) {
    System.out.format(""Case #%d: "",i);
    int numTrials=sc.nextInt();
    int[] t=new int[numTrials];
    for (int i3=0; i3 < numTrials; i3++) {
      t[i3]=sc.nextInt();
    }
    int total=0;
    for (int i4=0; i4 < (numTrials - 1); i4++) {
      if (t[i4] > t[i4 + 1])       total+=t[i4] - t[i4 + 1];
    }
    System.out.print(total + "" "");
    int diff=0;
    int nextDiff=0;
    for (int i2=0; i2 < (numTrials - 1); i2++) {
      nextDiff=t[i2] - t[i2 + 1];
      if (nextDiff > diff)       diff=nextDiff;
    }
    total=0;
    for (int i1=0; i1 < (numTrials - 1); i1++) {
      if (t[i1] < diff)       total+=t[i1];
 else       total+=diff;
    }
    System.out.print(total);
    System.out.println();
  }
}
"
30000749,"public static void main(String[] args) throws IOException {
  Scanner input=new Scanner(new File(""A-large.in""));
  PrintWriter write=new PrintWriter(""A-large.out"");
  int cases=input.nextInt();
  for (int i=1; i <= cases; i++) {
    int steps=input.nextInt();
    int[] values=new int[steps];
    for (int j=0; j < values.length; j++)     values[j]=input.nextInt();
    int maxDist=0;
    int decrTotal=0;
    for (int j=1; j < values.length; j++) {
      int increase=values[j] - values[j - 1];
      if (increase < 0) {
        if (maxDist < -increase)         maxDist=-increase;
        decrTotal-=increase;
      }
    }
    int secCount=0;
    for (int j=0; j < values.length - 1; j++) {
      secCount+=Math.min(values[j],maxDist);
    }
    write.printf(""Case #%d: %d %d%n"",i,decrTotal,secCount);
  }
  write.close();
}
"
30000750,"public static void main(String[] args) throws IOException {
  FileWriter fw=new FileWriter(OUT);
  Scanner scanner=new Scanner(new File(IN));
  int T=scanner.nextInt();
  for (int i=0; i < T; i++) {
    int N=scanner.nextInt();
    int[] mushroomsLeft=new int[N];
    for (int j=0; j < N; j++) {
      mushroomsLeft[j]=scanner.nextInt();
    }
    int accum=0;
    for (int i1=0; i1 < mushroomsLeft.length - 1; i1++) {
      int diff=mushroomsLeft[i1] - mushroomsLeft[i1 + 1];
      if (diff > 0)       accum+=diff;
    }
    int eaten1=accum;
    int accum1=0;
    int maxInterval=0;
    for (int i1=0; i1 < mushroomsLeft.length - 1; i1++) {
      int diff=mushroomsLeft[i1] - mushroomsLeft[i1 + 1];
      if (diff > maxInterval)       maxInterval=diff;
    }
    for (int i2=0; i2 < mushroomsLeft.length - 1; i2++) {
      accum1+=Math.min(mushroomsLeft[i2],maxInterval);
    }
    int eaten2=accum1;
    fw.write(format(""Case #%d: %d %d"",i + 1,eaten1,eaten2) + ""\n"");
  }
  scanner.close();
  fw.close();
}
"
30000751,"public static void main(String[] args) throws IOException {
  File file=new File(""A-large.in.txt"");
  File outputFile=new File(""Mushroom.out"");
  BufferedWriter bw=new BufferedWriter(new FileWriter(outputFile));
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(file)));
  int numberOfTestCases=Integer.valueOf(br.readLine());
  int count=0;
  while (count++ < numberOfTestCases) {
    int n=Integer.valueOf(br.readLine());
    String[] params=br.readLine().split("" "");
    long a=0;
    long rate=0;
    int[] mushrooms=new int[n];
    for (int i=0; i < n; i++) {
      mushrooms[i]=Integer.valueOf(params[i]);
      if (i > 0) {
        int minus=mushrooms[i - 1] - mushrooms[i];
        if (minus > 0) {
          a+=minus;
        }
        if (rate < minus) {
          rate=minus;
        }
      }
    }
    long b=0;
    for (int i=0; i < n - 1; i++) {
      if (mushrooms[i] > 0) {
        if (mushrooms[i] > rate) {
          b+=rate;
        }
 else {
          b+=mushrooms[i];
        }
      }
    }
    bw.write(""Case #"" + String.valueOf(count) + "": ""+ String.valueOf(a)+ "" ""+ String.valueOf(b));
    bw.newLine();
  }
  bw.close();
  br.close();
}
"
30000752,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new File(""src/in.txt""));
  PrintWriter out=new PrintWriter(""out.txt"");
  int t=in.nextInt();
  for (int tc=1; tc <= t; tc++) {
    int n=in.nextInt();
    int[] m=new int[n];
    for (int i=0; i < n; i++) {
      m[i]=in.nextInt();
    }
    int y=0;
    int dif=0;
    for (int i=1; i < n; i++) {
      if (m[i] < m[i - 1]) {
        y+=Math.abs(m[i] - m[i - 1]);
        if (Math.abs(m[i] - m[i - 1]) > dif) {
          dif=Math.abs(m[i] - m[i - 1]);
        }
      }
    }
    double rate=(double)dif / (double)10;
    int z=0;
    for (int i=0; i < n - 1; i++) {
      z+=Math.min(m[i],rate * 10);
    }
    out.println(""Case #"" + tc + "": ""+ y+ "" ""+ z);
  }
  in.close();
  out.close();
}
"
30000753,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int kase=sc.nextInt();
  for (int k=1; k <= kase; k++) {
    int N=sc.nextInt();
    int[] mush=new int[N];
    int max=0;
    int p1=0;
    for (int i=0; i < N; i++) {
      mush[i]=sc.nextInt();
      if (i > 0 && max < mush[i - 1] - mush[i])       max=mush[i - 1] - mush[i];
      if (i > 0 && (mush[i - 1] - mush[i]) > 0)       p1+=mush[i - 1] - mush[i];
    }
    int p2=0;
    for (int i=0; i < N - 1; i++) {
      if (mush[i] < max)       p2+=mush[i];
 else       p2+=max;
    }
    System.out.println(""Case #"" + k + "": ""+ p1+ "" ""+ p2);
  }
}
"
30000754,"/** 
 * @param args
 */
public static void main(String[] args){
  ArrayList<String> TestCases;
  TestCases=new ArrayList<String>();
  String fileName=""C:\\dev\\projects\\R1_Mushroom\\src\\gcj\\Example.txt"";
  try {
    InputStream in=new FileInputStream(new File(fileName));
    Scanner reader=new Scanner(in);
    int cntTests=reader.nextInt();
    for (int i=0; i < cntTests; i++) {
      int n=reader.nextInt();
      ArrayList<Integer> moments=new ArrayList<Integer>();
      int max=-1;
      for (int j=0; j < n; j++) {
        moments.add(reader.nextInt());
      }
      long total_eaten1=0;
      int max_max=moments.get(0);
      for (int j=0; j < n - 1; j++) {
        int eaten_at_moment=moments.get(j) - moments.get(j + 1);
        if (eaten_at_moment > 0) {
          total_eaten1=total_eaten1 + eaten_at_moment;
        }
        if (eaten_at_moment > max) {
          max=eaten_at_moment;
        }
      }
      long total_eaten2=0;
      for (int j=0; j < n - 1; j++) {
        if (moments.get(j) < max) {
          total_eaten2=total_eaten2 + moments.get(j);
        }
 else {
          total_eaten2=total_eaten2 + max;
        }
      }
      TestCases.add(total_eaten1 + "" "" + total_eaten2);
    }
    reader.close();
  }
 catch (  Exception ex) {
    System.out.print(ex.getMessage());
  }
  String outFileName=""C:\\dev\\projects\\R1_Mushroom\\src\\gcj\\output.txt"";
  try {
    File file=new File(outFileName);
    BufferedWriter output=new BufferedWriter(new FileWriter(file));
    for (int i=0; i < TestCases.size(); i++) {
      output.write(""Case #"" + (i + 1) + "": ""+ TestCases.get(i)+ ""\r\n"");
    }
    output.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000755,"public static void main(String[] args){
  try {
    Scanner input=new Scanner(new File(args[0]));
    PrintWriter output=new PrintWriter(args[1]);
    int casenumber=input.nextInt();
    for (int i=0; i < casenumber; i++) {
      int len=input.nextInt(), method1=0, method2=0, maxrate=0;
      int[] mushrooms=new int[len];
      mushrooms[0]=input.nextInt();
      for (int j=1; j < len; j++) {
        mushrooms[j]=input.nextInt();
        if (mushrooms[j] < mushrooms[j - 1]) {
          method1+=mushrooms[j - 1] - mushrooms[j];
          maxrate=Math.max(maxrate,mushrooms[j - 1] - mushrooms[j]);
        }
      }
      for (int j=1; j < len; j++) {
        method2+=Math.min(maxrate,mushrooms[j - 1]);
      }
      output.println(""Case #"" + (i + 1) + "": ""+ method1+ "" ""+ method2);
    }
    output.flush();
  }
 catch (  FileNotFoundException e) {
  }
}
"
30000756,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int numberOfTestCases=Integer.parseInt(s.nextLine());
  ArrayList<ArrayList<Integer>> trials=new ArrayList<>();
  for (int i=0; i < numberOfTestCases; i++) {
    ArrayList<Integer> myCase=new ArrayList<>();
    int num=Integer.parseInt(s.nextLine());
    String str=s.nextLine();
    for (int j=1; j < num; j++) {
      myCase.add(Integer.parseInt(str.substring(0,str.indexOf("" ""))));
      str=str.substring(str.indexOf("" "") + 1);
    }
    myCase.add(Integer.parseInt(str));
    trials.add(myCase);
  }
  s.close();
  int counter=1;
  for (  ArrayList<Integer> c : trials) {
    int m1Sum=0;
    for (int i=0; i < c.size() - 1; i++) {
      int prev=c.get(i);
      int now=c.get(i + 1);
      if (prev > now) {
        m1Sum+=prev - now;
      }
    }
    int m2Sum=0;
    int greatestDiff=0;
    for (int i=0; i < c.size() - 1; i++) {
      int prev=c.get(i);
      int now=c.get(i + 1);
      if (prev - now > greatestDiff) {
        greatestDiff=prev - now;
      }
    }
    for (int i=0; i < c.size() - 1; i++) {
      if (c.get(i) < greatestDiff) {
        m2Sum+=c.get(i);
      }
 else {
        m2Sum+=greatestDiff;
      }
    }
    System.out.println(""Case #"" + counter + "":""+ "" ""+ m1Sum+ "" ""+ m2Sum);
    counter++;
  }
}
"
30000757,"public static void main(String[] args){
  Monstor r=new Monstor();
  File inputFile=new File(""/Users/aganavin/Desktop/A-large.in"");
  BufferedReader br=null;
  StringBuilder output=new StringBuilder();
  try {
    br=new BufferedReader(new FileReader(inputFile));
    int numTests=Integer.parseInt(br.readLine());
    int test;
    String[] testSplit;
    int[] mush;
    for (int testCounter=0; testCounter < numTests; ++testCounter) {
      test=Integer.parseInt(br.readLine());
      testSplit=(br.readLine()).split("" "");
      mush=new int[test];
      for (int s=0; s < test; s++) {
        mush[s]=Integer.parseInt(testSplit[s]);
      }
      int out1=0, out2=0;
      int currentDiff=0, maxDiff=0;
      out1=0;
      for (int s=test - 1; s > 0; s--) {
        if (mush[s] < mush[s - 1]) {
          currentDiff=mush[s - 1] - mush[s];
          out1+=currentDiff;
          maxDiff=(maxDiff < currentDiff) ? currentDiff : maxDiff;
        }
      }
      for (int s=test - 1; s > 0; s--) {
        if (mush[s - 1] < maxDiff) {
          out2+=mush[s - 1];
        }
 else {
          out2+=maxDiff;
        }
      }
      System.out.println(""Case #"" + (testCounter + 1) + "": ""+ out1+ "" ""+ out2);
      output.append(""Case #"").append((testCounter + 1)).append("": "").append(out1 + "" "" + out2);
      output.append(""\n"");
    }
  }
 catch (  Exception e) {
  }
  File outputFile=new File(""/Users/aganavin/Desktop/output1.out"");
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(outputFile));
    writer.write(output.toString());
  }
 catch (  IOException e) {
  }
 finally {
    try {
      if (writer != null)       writer.close();
    }
 catch (    IOException e) {
    }
  }
}
"
30000758,"public static void main(String args[]) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""input2.in""));
  PrintWriter w=new PrintWriter(new BufferedWriter(new FileWriter(""output2.out"")));
  int T=Integer.parseInt(br.readLine());
  for (int t=1; t <= T; t++) {
    StringTokenizer st1=new StringTokenizer(br.readLine());
    int n=Integer.parseInt(st1.nextToken());
    StringTokenizer st2=new StringTokenizer(br.readLine());
    int m[]=new int[n];
    for (int i=0; i < n; i++)     m[i]=Integer.parseInt(st2.nextToken());
    int y=0;
    for (int i=1; i < n; i++)     y+=Math.max(0,m[i - 1] - m[i]);
    int z=0;
    int rateMax=0;
    for (int i=1; i < n; i++) {
      if (m[i] < m[i - 1])       rateMax=Math.max(rateMax,m[i - 1] - m[i]);
    }
    for (int i=0; i < n - 1; i++)     z+=Math.min(rateMax,m[i]);
    w.println(""Case #"" + t + "": ""+ y+ "" ""+ z);
  }
  w.close();
}
"
30000759,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int numCases=s.nextInt();
  for (int numC=0; numC < numCases; ++numC) {
    int n=s.nextInt();
    int[] numbers=new int[n];
    for (int i=0; i < n; ++i) {
      numbers[i]=s.nextInt();
    }
    int firstMethod=0;
    for (int i=1; i < n; ++i) {
      int diff=numbers[i - 1] - numbers[i];
      if (diff > 0) {
        firstMethod+=diff;
      }
    }
    int curr=0;
    int eaten=0;
    while (true) {
      boolean valid=true;
      eaten=0;
      for (int i=1; i < n && valid; ++i) {
        int after=numbers[i - 1] - curr;
        eaten+=curr;
        if (after < 0) {
          eaten+=after;
          after=0;
        }
        if (after > numbers[i]) {
          valid=false;
        }
        int added=numbers[i] - after;
      }
      if (valid) {
        break;
      }
      curr++;
    }
    int secondMethod=eaten;
    System.out.print(""Case #"");
    System.out.print(numC + 1);
    System.out.print("": "");
    System.out.print(firstMethod);
    System.out.print(' ');
    System.out.println(secondMethod);
  }
}
"
30000760,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int ncase=in.nextInt();
  for (int icase=0; icase < ncase; icase++) {
    int icase1=icase + 1;
    int N=in.nextInt();
    int[] mush=new int[N];
    for (int i=0; i < N; i++)     mush[i]=in.nextInt();
    int imeth1=0;
    int imeth2=0;
    for (int i=0; i < N - 1; i++) {
      if (mush[i] > mush[i + 1]) {
        int dif=mush[i] - mush[i + 1];
        imeth1+=dif;
      }
      imeth2+=mush[i];
    }
    if (imeth2 >= mush[N - 1]) {
      imeth2=imeth2 - mush[N - 1];
    }
    int rate=0;
    for (int i=1; i < N; i++) {
      if (mush[i - 1] > mush[i]) {
        int eaten=mush[i - 1] - mush[i];
        int r=eaten;
        if (r > rate)         rate=r;
      }
    }
    imeth2=0;
    if (rate != 0) {
      for (int i=0; i < N - 1; i++) {
        if (mush[i] >= rate) {
          imeth2+=rate;
        }
 else {
          imeth2+=mush[i];
        }
      }
    }
    System.out.println(""Case #"" + icase1 + "":""+ "" ""+ imeth1+ "" ""+ imeth2);
  }
}
"
30000761,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    int N=in.nextInt();
    int[] intervals=new int[N];
    for (int j=0; j < N; j++) {
      intervals[j]=in.nextInt();
    }
    int eat1=0;
    for (int j=0; j < intervals.length - 1; j++) {
      if (intervals[j] > intervals[j + 1]) {
        eat1+=intervals[j] - intervals[j + 1];
      }
    }
    int eat2=0, maxEaten=0;
    for (int j=0; j < intervals.length - 1; j++) {
      if (intervals[j] - intervals[j + 1] > maxEaten) {
        maxEaten=intervals[j] - intervals[j + 1];
      }
    }
    for (int j=0; j < intervals.length - 1; j++) {
      if (intervals[j] <= maxEaten) {
        eat2+=intervals[j];
      }
 else {
        eat2+=maxEaten;
      }
    }
    System.out.println(""Case #"" + (i) + "": ""+ eat1+ "" ""+ eat2);
  }
}
"
30000762,"public static void main(String[] args) throws IOException {
  String name=""gcj2015/r1/A-large"";
  Scanner s=new Scanner(new File(name + "".in""));
  int count=s.nextInt();
  out=new PrintWriter(new BufferedWriter(new FileWriter(name + "".out"")));
  for (int cc=1; cc <= count; cc++) {
    out.print(""Case #"" + cc + "": "");
    int n=s.nextInt();
    int[] a=new int[n];
    for (int i=0; i < n; i++) {
      a[i]=s.nextInt();
    }
    int res=0;
    for (int i=0; i < n - 1; i++) {
      res+=Math.max(a[i] - a[i + 1],0);
    }
    int res1=res;
    int res3=0;
    int max=0;
    for (int i=0; i < n - 1; i++) {
      max=Math.max(a[i] - a[i + 1],max);
    }
    for (int i=0; i < n - 1; i++) {
      res3+=Math.min(a[i],max);
    }
    int res2=res3;
    out.print(res1);
    out.print(' ');
    out.print(res2);
    out.println();
  }
  out.close();
}
"
30000763,"public static void main(String[] args) throws Exception {
  FileReader fr=new FileReader(""a.txt"");
  BufferedReader br=new BufferedReader(fr);
  int cases=Integer.parseInt(br.readLine());
  for (int c=1; c <= cases; c++) {
    int n=Integer.parseInt(br.readLine());
    int[] m=new int[n];
    int counter=0;
    for (    String s : br.readLine().split("" "")) {
      m[counter++]=Integer.parseInt(s);
    }
    int method1=0;
    int maxInterval=0;
    for (int i=0; i < m.length - 1; i++) {
      if (m[i] > m[i + 1]) {
        int interval=m[i] - m[i + 1];
        method1+=interval;
        if (interval > maxInterval)         maxInterval=interval;
      }
    }
    int method2=0;
    for (int i=0; i < m.length - 1; i++) {
      method2+=Math.min(m[i],maxInterval);
    }
    System.out.printf(""Case #%d: %d %d\n"",c,method1,method2);
  }
  fr.close();
}
"
30000764,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int zz=1; zz <= T; zz++) {
    int N=in.nextInt();
    int[] marr=new int[N];
    for (int i=0; i < N; i++) {
      marr[i]=in.nextInt();
    }
    int m1=0;
    int m2=0;
    int prev=0;
    int minRate=0;
    for (int i=0; i < N; i++) {
      if (prev > marr[i]) {
        m1+=(prev - marr[i]);
        if ((prev - marr[i]) > minRate) {
          minRate=prev - marr[i];
        }
      }
      prev=marr[i];
    }
    for (int i=0; i < N - 1; i++) {
      m2+=(marr[i] > minRate) ? minRate : marr[i];
    }
    System.out.format(""Case #%d: %d %d\n"",zz,m1,m2);
  }
}
"
30000765,"public static void main(String[] args) throws IOException {
  BufferedReader reader=new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
  BufferedWriter writer=new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
  int testCases=Integer.parseInt(reader.readLine());
  for (int index=1; index <= testCases; index++) {
    String result="""";
    reader.readLine();
    String str[]=reader.readLine().split("" "");
    int max=Integer.MIN_VALUE;
    int result1=0;
    int result2=0;
    for (int i=0; i < str.length - 1; i++) {
      int i2=Integer.parseInt(str[i + 1]);
      int i1=Integer.parseInt(str[i]);
      if ((i2 - i1) < 0)       result1+=-(i2 - i1);
      if (-(i2 - i1) > max)       max=-(i2 - i1);
    }
    for (int i=0; i < str.length - 1; i++) {
      int i1=Integer.parseInt(str[i]);
      if (i1 >= max)       result2=result2 + max;
 else       if (i1 < max)       result2=result2 + i1;
    }
    writer.write(""Case #"" + index + "": ""+ result1+ "" ""+ result2+ ""\n"");
  }
  reader.close();
  writer.close();
}
"
30000766,"public static void main(String args[]){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  for (int k=0; k < t; k++) {
    int n=s.nextInt(), ans1=0, ans2=0, max=0;
    int a[]=new int[n];
    for (int i=0; i < n; i++) {
      a[i]=s.nextInt();
    }
    for (int i=0; i < n; i++) {
      if (i < n - 1 && (a[i] - a[i + 1]) > max)       max=a[i] - a[i + 1];
    }
    for (int i=0; i < n - 1; i++) {
      if (a[i + 1] < a[i]) {
        ans1+=a[i] - a[i + 1];
      }
      ans2+=Math.min(a[i],max);
    }
    System.out.println(""Case #"" + (k + 1) + "": ""+ ans1+ "" ""+ ans2);
  }
}
"
30000767,"public static void main(String[] args){
  Mushroom so=new Mushroom();
  Scanner scanner;
  try {
    scanner=new Scanner(new File(""A-large.in""));
    int testCases=scanner.nextInt();
    scanner.nextLine();
    for (int i=0; i < testCases; ++i) {
      so.cases.add(new ArrayList<Integer>());
      int plateNum=scanner.nextInt();
      for (int j=0; j < plateNum; ++j) {
        so.cases.get(i).add(scanner.nextInt());
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  for (  ArrayList<Integer> testCase : so.cases) {
    int size=testCase.size();
    int method1=0;
    int method2=0;
    int method2Rate=0;
    for (int i2=1; i2 < size; ++i2) {
      if (testCase.get(i2 - 1) - testCase.get(i2) > method2Rate)       method2Rate=testCase.get(i2 - 1) - testCase.get(i2);
    }
    for (int i1=1; i1 < size; ++i1) {
      if (testCase.get(i1 - 1) > testCase.get(i1)) {
        method1+=testCase.get(i1 - 1) - testCase.get(i1);
      }
      method2+=Math.abs(method2Rate > testCase.get(i1 - 1) ? testCase.get(i1 - 1) : method2Rate);
    }
    so.method1List.add(method1);
    so.method2List.add(method2);
  }
  PrintWriter writer;
  try {
    writer=new PrintWriter(""A-large.out"");
    int counter=0;
    for (int i=0; i < so.method1List.size(); ++i) {
      writer.print(""Case #"" + (++counter) + "": ""+ so.method1List.get(i)+ "" ""+ so.method2List.get(i));
      if (counter < so.method1List.size()) {
        writer.println();
      }
    }
    writer.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30000768,"public static void main(String[] args) throws IOException {
  BufferedReader buf=new BufferedReader(new FileReader(""mushroom.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""mushroom.out"")));
  Long n=Long.parseLong(buf.readLine());
  for (int i=1; i <= n; i++) {
    Long m=Long.parseLong(buf.readLine());
    String[] s=buf.readLine().split("" "");
    long fsum=0;
    long largest=0;
    for (int j=1; j < m; j++) {
      if (Long.parseLong(s[j]) - Long.parseLong(s[j - 1]) < 0) {
        fsum=fsum + Long.parseLong(s[j - 1]) - Long.parseLong(s[j]);
        if (Long.parseLong(s[j - 1]) - Long.parseLong(s[j]) > largest)         largest=Long.parseLong(s[j - 1]) - Long.parseLong(s[j]);
      }
    }
    long nsum=0;
    for (int j=0; j < m - 1; j++) {
      nsum=nsum + Math.min(Long.parseLong(s[j]),largest);
    }
    out.println(""Case #"" + i + "": ""+ fsum+ "" ""+ nsum);
  }
  buf.close();
  out.close();
}
"
30000769,"public static void main(String[] args) throws java.lang.Exception {
  int T=Integer.parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    int N=Integer.parseInt(br.readLine());
    int[] ms=new int[1000];
    StringTokenizer data=new StringTokenizer(br.readLine(),"" "");
    for (int i3=0; i3 < N; i3++) {
      ms[i3]=Integer.parseInt(data.nextToken());
    }
    int ansY=0;
    int angle=0;
    for (int i1=1; i1 < N; i1++) {
      ansY+=Math.max(0,ms[i1 - 1] - ms[i1]);
      angle=Math.max(angle,ms[i1 - 1] - ms[i1]);
    }
    int ansZ=0;
    for (int i2=1; i2 < N; i2++) {
      ansZ+=Math.min(ms[i2 - 1],angle);
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ ansY+ "" ""+ ansZ);
  }
}
"
30000770,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileInputStream(args[0]));
  PrintWriter writer=new PrintWriter(new FileOutputStream(args[1]));
  int numberOftestCases=sc.nextInt();
  for (int i=0; i < numberOftestCases; i++) {
    Round1AA round1aa=new Round1AA();
    int count=sc.nextInt();
    round1aa.stages=new int[count];
    for (int i2=0; i2 < count; i2++) {
      round1aa.stages[i2]=sc.nextInt();
    }
    int strategy1=0;
    int maxSpeed=0;
    int intOldData=-1;
    for (    int d : round1aa.stages) {
      if (intOldData != -1) {
        if (intOldData > d) {
          int speed=intOldData - d;
          strategy1+=speed;
          if (maxSpeed < speed) {
            maxSpeed=speed;
          }
        }
      }
      intOldData=d;
    }
    int strategy2=0;
    for (int i1=0; i1 < (round1aa.stages.length - 1); i1++) {
      int d=round1aa.stages[i1];
      if (d < maxSpeed) {
        strategy2+=d;
      }
 else {
        strategy2+=maxSpeed;
      }
    }
    round1aa.result="""" + strategy1 + "" ""+ strategy2;
    writer.println(""Case #"" + (i + 1) + "": ""+ round1aa.result);
    writer.flush();
  }
  sc.close();
  writer.close();
}
"
30000771,"public static void main(String[] args){
  FileReader fr=null;
  try {
    fr=new FileReader(""test"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  BufferedReader br=new BufferedReader(fr);
  Scanner in=new Scanner(br);
  try {
    out=new PrintWriter(""output.txt"",""UTF-8"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  int t=Integer.parseInt(in.nextLine());
  for (int i=0; i < t; i++) {
    int intervals=Integer.parseInt(in.nextLine());
    String[] dataR=in.nextLine().split("" "");
    int[] data=new int[dataR.length];
    for (int j=0; j < dataR.length; j++) {
      data[j]=Integer.parseInt(dataR[j]);
    }
    out.print(""Case #"" + (i + 1) + "": "");
    int count1=0;
    for (int i3=1; i3 < data.length; i3++) {
      if (data[i3 - 1] > data[i3]) {
        count1+=data[i3 - 1] - data[i3];
      }
    }
    out.print(count1 + "" "");
    int max=0;
    int count=0;
    for (int i1=1; i1 < data.length; i1++) {
      if (data[i1 - 1] - data[i1] > max) {
        max=data[i1 - 1] - data[i1];
      }
    }
    count=max * (data.length - 1);
    for (int i2=0; i2 < data.length - 1; i2++) {
      if (data[i2] < max) {
        count-=max - data[i2];
      }
    }
    out.println(count);
  }
  out.close();
}
"
30000772,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int numTests=in.nextInt();
  for (int test=1; test <= numTests; ++test) {
    int n=in.nextInt();
    int[] cnts=new int[n];
    for (int i=0; i < n; ++i)     cnts[i]=in.nextInt();
    long ans1=0;
    for (int i=1; i < n; ++i)     ans1+=Math.max(0,cnts[i - 1] - cnts[i]);
    int diff=0;
    for (int i=1; i < n; ++i)     diff=Math.max(diff,cnts[i - 1] - cnts[i]);
    long ans2=0;
    for (int i=0; i + 1 < n; ++i)     ans2+=Math.min(diff,cnts[i]);
    out.println(""Case #"" + test + "": ""+ ans1+ "" ""+ ans2);
  }
}
"
30000773,"public static void main(String args[]){
  try {
    System.setIn(new FileInputStream(""C:\\Users\\Karthik\\Desktop\\"" + ""file1.in""));
    System.setOut(new PrintStream(""C:\\Users\\Karthik\\Desktop\\out1.txt""));
  }
 catch (  Exception e) {
    System.out.println(""ERROR READING FILE"");
  }
  s=new Scanner(System.in);
  int test_cases;
  test_cases=s.nextInt();
  int[] ar;
  for (int looper=1; looper <= test_cases; looper++) {
    int n;
    n=s.nextInt();
    ar=new int[n];
    for (int j=0; j < n; j++)     ar[j]=s.nextInt();
    int n1=ar.length;
    int diff=0;
    for (int i1=0; i1 < n1 - 1; i1++) {
      if (ar[i1] > ar[i1 + 1])       diff=diff + (ar[i1] - ar[i1 + 1]);
    }
    int value1=diff;
    int n3=ar.length;
    int max1=ar[0];
    for (int i3=1; i3 < n3; i3++)     if (ar[i3] > max1)     max1=ar[i3];
    int max=max1;
    int n2=ar.length;
    int minval=n2 * max;
    int maxdiff=0;
    for (int i2=0; i2 < n2 - 1; i2++) {
      if (ar[i2] - ar[i2 + 1] > maxdiff)       maxdiff=ar[i2] - ar[i2 + 1];
    }
    int curval=0;
    for (int i1=0; i1 < n2 - 1; i1++) {
      if (ar[i1] > maxdiff)       curval=curval + maxdiff;
 else       curval=curval + ar[i1];
    }
    int value2=curval;
    int output=0;
    int i=10000 * 1000;
    System.out.println(""Case #"" + looper + "": ""+ value1+ "" ""+ value2);
  }
}
"
30000774,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(new File(""A.in"")));
  PrintWriter pw=new PrintWriter(new BufferedWriter(new FileWriter(new File(""A.out""))));
  int T=Integer.parseInt(br.readLine());
  for (int t=0; t < T; t++) {
    int N=Integer.parseInt(br.readLine());
    int[] M=new int[N];
    String[] str=br.readLine().split("" "");
    for (int i=0; i < N; i++)     M[i]=Integer.parseInt(str[i]);
    int first=0, maxdiff=0;
    for (int i=1; i < N; i++) {
      int diff=M[i - 1] - M[i];
      if (diff > 0) {
        first+=diff;
        maxdiff=Math.max(maxdiff,diff);
      }
    }
    int second=0;
    for (int i=0; i < N - 1; i++)     second+=Math.min(M[i],maxdiff);
    pw.println(""Case #"" + (t + 1) + "": ""+ first+ "" ""+ second);
    pw.flush();
  }
  pw.close();
  br.close();
}
"
30000775,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new File(""in.in""));
  PrintWriter writer=new PrintWriter(new File(""out.out""));
  int t=in.nextInt();
  for (int i=1; i <= t; i++) {
    int n=in.nextInt();
    int[] m=new int[n];
    int first=0;
    int second=0;
    for (int j=0; j < n; j++)     m[j]=in.nextInt();
    first=0;
    int left;
    for (int j=1; j < n; j++) {
      if (m[j] > m[j - 1])       continue;
      first+=Math.abs(m[j] - m[j - 1]);
    }
    second=0;
    left=m[0];
    double rate=0;
    for (int j=1; j < n; j++)     if (m[j] < m[j - 1])     rate=Math.max(rate,(double)(m[j - 1] - m[j]) / 10);
    for (int j=1; j < n; j++) {
      second+=Math.min(rate * 10,left);
      left-=Math.min(rate * 10,left);
      left+=m[j] - left;
    }
    writer.println(""Case #"" + i + "": ""+ first+ "" ""+ second);
  }
  in.close();
  writer.close();
}
"
30000776,"public static void main(String[] args){
  String inFile=""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound1//inin.txt"";
  String outFile=""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound1//result.txt"";
  int n=0;
  String line;
  try {
    FileReader fileReader=new FileReader(inFile);
    BufferedReader br=new BufferedReader(fileReader);
    FileWriter fileWriter=new FileWriter(outFile);
    BufferedWriter bw=new BufferedWriter(fileWriter);
    line=br.readLine();
    n=Integer.parseInt(line);
    for (int i=0; i < n; i++) {
      line=br.readLine();
      int N=Integer.parseInt(line);
      int[] M=new int[N];
      line=br.readLine();
      String[] parts=line.split("" "");
      for (int j=0; j < N; j++) {
        M[j]=Integer.parseInt(parts[j]);
      }
      int result=0;
      for (int i1=0; i1 < N - 1; i1++) {
        if (M[i1] > M[i1 + 1]) {
          result+=M[i1] - M[i1 + 1];
        }
      }
      int result1=result;
      int max=0;
      int result3=0;
      for (int i2=0; i2 < N - 1; i2++) {
        if (M[i2] > M[i2 + 1]) {
          int dif=M[i2] - M[i2 + 1];
          if (max < dif)           max=dif;
        }
      }
      for (int i1=0; i1 < N - 1; i1++) {
        if (M[i1] >= max)         result3+=max;
 else         result3+=M[i1];
      }
      int result2=result3;
      bw.write(""Case #"" + (i + 1) + "": ""+ result1+ "" ""+ result2+ ""\n"");
    }
    br.close();
    bw.close();
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
"
30000777,"public static void main(String args[]){
  if (args.length != 1) {
    System.out.println(""Please specify the input file"");
    return;
  }
  String filename=args[0];
  File f=new File(filename);
  BufferedReader br;
  if (!f.exists()) {
    System.out.println(""Couldn't find file "" + filename);
    return;
  }
 else   if (f.isDirectory()) {
    System.out.println(filename + "" is a directory"");
    return;
  }
  try {
    br=new BufferedReader(new FileReader(f));
    input=new Scanner(br);
  }
 catch (  IOException iox) {
    System.out.println(""Problem reading "" + filename);
  }
  try {
    output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filename + "".out""),""utf-8""));
    int T=input.nextInt();
    for (int caseNum=0; caseNum < T; caseNum++) {
      int N=input.nextInt();
      long[] m=new long[N];
      for (int i=0; i < N; i++) {
        m[i]=input.nextInt();
      }
      long prev=m[0];
      long maxDelta=0;
      long sumDelta=0;
      for (int i=1; i < N; i++) {
        long delta=m[i] - prev;
        prev=m[i];
        if (delta < 0) {
          maxDelta=Math.max(maxDelta,Math.abs(delta));
          sumDelta+=Math.abs(delta);
        }
      }
      long sumTwo=0;
      for (int i=0; i < N - 1; i++) {
        sumTwo+=Math.min(m[i],maxDelta);
      }
      output.write(""Case #"" + (caseNum + 1) + "": "");
      output.write("""" + sumDelta);
      output.write("" "");
      output.write("""" + sumTwo);
      output.write(""\n"");
    }
  }
 catch (  IOException ex) {
    System.out.println(""Couldn't open an output file"");
    return;
  }
  try {
    output.close();
    input.close();
  }
 catch (  IOException ex) {
  }
}
"
30000778,"public static void main(String[] args) throws FileNotFoundException {
  System.setIn(new FileInputStream(new File(""A_large.in"")));
  System.setOut(new PrintStream(new FileOutputStream(new File(""A_large.out""))));
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int N=in.nextInt();
    int[] m=new int[N];
    for (int i=0; i < N; i++) {
      m[i]=in.nextInt();
    }
    int ans1=0;
    int largestDecrease=0;
    for (int i=0; i < N - 1; i++) {
      int dec=Math.max(0,m[i] - m[i + 1]);
      ans1+=dec;
      largestDecrease=Math.max(largestDecrease,dec);
    }
    int ans2=0;
    for (int i=0; i < N - 1; i++) {
      ans2+=Math.min(m[i],largestDecrease);
    }
    System.out.printf(""Case #%d: %d %d"",t,ans1,ans2);
    System.out.println();
  }
}
"
30000779,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int T=input.nextInt();
  for (int i=1; i <= T; i++) {
    int N=input.nextInt();
    int[] m=new int[N];
    for (int j=0; j < N; j++) {
      m[j]=input.nextInt();
    }
    long Meth1=0;
    for (int k=0; k < N - 1; k++) {
      if (m[k] - m[k + 1] > 0) {
        Meth1+=m[k] - m[k + 1];
      }
    }
    long Meth2=0;
    long constRate=m[N - 2] - m[N - 1];
    for (int l=0; l < N - 1; l++) {
      if (m[l] <= constRate) {
        Meth2+=m[l];
      }
 else {
        Meth2+=constRate;
      }
    }
    System.out.printf(""Case #%d: %d %d\n"",i,Meth1,Meth2);
  }
  input.close();
}
"
30000780,"public static void main(final String[] args){
  final String base=""/home/jean/gcj2015/1a/ExoA/"";
  final String input=base + ""b1.in"";
  final String output=base + ""b1.out"";
  try {
    final Scanner sc=new Scanner(new FileReader(input));
    final PrintWriter pw=new PrintWriter(output);
    final int n=sc.nextInt();
    sc.nextLine();
    for (int c=0; c < n; c++) {
      System.out.println(""Test case "" + (c + 1) + ""..."");
      pw.print(""Case #"" + (c + 1) + "": "");
      final int N=sc.nextInt();
      int ns[]=new int[N];
      int t=0;
      int m=0;
      int t2=0;
      for (int i=0; i < ns.length; i++) {
        ns[i]=sc.nextInt();
        if (i > 0 && ns[i - 1] > ns[i]) {
          t-=ns[i] - ns[i - 1];
        }
        if (i > 0 && ns[i - 1] - ns[i] > m) {
          m=ns[i - 1] - ns[i];
        }
      }
      for (int i=1; i < ns.length; i++) {
        if (ns[i] == 0) {
          t2+=ns[i - 1];
        }
 else {
          t2+=Math.min(ns[i - 1],m);
        }
      }
      pw.print(t);
      pw.print("" "");
      pw.print(t2);
      pw.println();
    }
    pw.println();
    pw.flush();
    pw.close();
    sc.close();
  }
 catch (  final FileNotFoundException ex) {
    Logger.getLogger(ExoA.class.getName()).log(Level.SEVERE,null,ex);
  }
}
"
30000781,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int cases=Integer.parseInt(br.readLine());
  for (int c=1; c <= cases; c++) {
    int tam=Integer.parseInt(br.readLine());
    String line=br.readLine();
    int intervals[]=new int[tam];
    StringTokenizer st=new StringTokenizer(line);
    for (int i=0; i < tam; i++) {
      intervals[i]=Integer.parseInt(st.nextToken());
    }
    int any, ratio;
    int maxDif;
    any=0;
    maxDif=0;
    ratio=0;
    for (int i=1; i < tam; i++) {
      if (intervals[i] < intervals[i - 1]) {
        int diff=intervals[i - 1] - intervals[i];
        any+=diff;
        if (diff > maxDif)         maxDif=diff;
      }
    }
    for (int i=0; i < tam - 1; i++) {
      ratio+=intervals[i] < maxDif ? intervals[i] : maxDif;
    }
    System.out.println(""Case #"" + c + "": ""+ any+ "" ""+ ratio);
  }
}
"
30000782,"public static void main(String[] args){
  try {
    Scanner sc=new Scanner(new File(filename + "".in""));
    PrintWriter pw=new PrintWriter(new FileOutputStream(filename + "".out""));
    int gcase=sc.nextInt();
    for (int n=1; n <= gcase; n++) {
      int c=sc.nextInt();
      int[] m=new int[c];
      int max=0;
      int m1=0;
      int current=0;
      for (int i=0; i < c; i++) {
        m[i]=sc.nextInt();
        if (current > m[i]) {
          int di=current - m[i];
          m1+=di;
          if (max < di) {
            max=di;
          }
        }
        current=m[i];
      }
      int m2=0;
      for (int i=0; i < c - 1; i++) {
        if (m[i] < max)         m2+=m[i];
 else         m2+=max;
      }
      System.out.println(""Case #"" + n + "": ""+ m1+ "" ""+ m2);
      pw.println(""Case #"" + n + "": ""+ m1+ "" ""+ m2);
    }
    pw.close();
  }
 catch (  FileNotFoundException f) {
    f.printStackTrace();
  }
}
"
30000783,"public static void main(String args[]){
  FileInputStream instream=null;
  PrintStream outstream=null;
  try {
    instream=new FileInputStream(INPUT);
    outstream=new PrintStream(new FileOutputStream(OUTPUT));
    System.setIn(instream);
    System.setOut(outstream);
  }
 catch (  Exception e) {
    System.err.println(""Error Occurred."");
    e.printStackTrace();
    return;
  }
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; ++t) {
    int N=in.nextInt();
    int arr[]=new int[N];
    List<Integer> arr_dif=new ArrayList<Integer>();
    int m1, m2;
    int max;
    int sum1=0, sum2=0;
    arr[0]=in.nextInt();
    for (int i=1; i < N; i++) {
      arr[i]=in.nextInt();
      arr_dif.add(arr[i - 1] - arr[i]);
    }
    max=Collections.max(arr_dif);
    for (int i=0; i < N - 1; i++) {
      m1=arr[i];
      m2=arr[i + 1];
      if (m1 > m2)       sum1+=m1 - m2;
      if (m1 <= max)       sum2+=m1;
 else       sum2+=max;
    }
    System.out.println(""Case #"" + t + "": ""+ sum1+ "" ""+ sum2);
  }
  in.close();
  return;
}
"
30000784,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int caseNum=1; caseNum <= t; caseNum++) {
    int n=sc.nextInt();
    int[] nums=new int[n];
    for (int i=0; i < n; i++) {
      nums[i]=sc.nextInt();
    }
    int sum1=0;
    int sum2=0;
    int maxDiff=0;
    for (int i=0; i < n - 1; i++) {
      if (nums[i] > nums[i + 1]) {
        int diff=nums[i] - nums[i + 1];
        if (diff > maxDiff) {
          maxDiff=diff;
        }
        sum1+=diff;
      }
    }
    for (int i=0; i < n - 1; i++) {
      if (nums[i] < maxDiff) {
        sum2+=nums[i];
      }
 else {
        sum2+=maxDiff;
      }
    }
    System.out.printf(""Case #%d: %d %d\n"",caseNum,sum1,sum2);
  }
}
"
30000785,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""A-small.in""));
  int cases=sc.nextInt();
  for (int i=1; i <= cases; i++) {
    int N=sc.nextInt();
    int m[]=new int[N];
    String temp=sc.nextLine().trim();
    for (int j=0; j < N; j++) {
      m[j]=sc.nextInt();
    }
    int prev=0;
    long first=0;
    for (    int m0 : m) {
      first+=Math.max(prev - m0,0);
      prev=m0;
    }
    long second=0;
    int min_eat_per_turn=0;
    prev=0;
    for (    int m0 : m) {
      min_eat_per_turn=Math.max(min_eat_per_turn,prev - m0);
      prev=m0;
    }
    for (    int m0 : Arrays.copyOf(m,N - 1)) {
      second+=Math.min(m0,min_eat_per_turn);
    }
    System.out.println(""Case #"" + i + "": ""+ first+ "" ""+ second);
  }
}
"
30000786,"public static void main(String[] args) throws IOException {
  aMushroom r=new aMushroom();
  aMushroom.in=new BufferedReader(new FileReader(""in.txt""));
  aMushroom.out=new PrintWriter(new FileWriter(""out.txt""));
  Scanner sc=new Scanner(aMushroom.in);
  StringBuilder sb=new StringBuilder();
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    int n=sc.nextInt();
    int[] m=new int[n];
    for (int i=0; i < n; i++)     m[i]=sc.nextInt();
    int sum1=0;
    int max=0;
    for (int i=1; i < n; i++)     if (m[i] < m[i - 1]) {
      sum1+=m[i - 1] - m[i];
      max=Math.max(max,m[i - 1] - m[i]);
    }
    int sum2=0;
    for (int i=0; i < n - 1; i++)     if (m[i] < max) {
      sum2+=m[i];
    }
 else     sum2+=max;
    sb.append(""Case #"" + t + "": "");
    sb.append(sum1 + "" "" + sum2);
    sb.append(""\n"");
  }
  aMushroom.out.print(sb);
  sc.close();
  aMushroom.out.close();
}
"
30000787,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""A-large (1).in""));
  int t=in.nextInt();
  for (int caseNum=1; caseNum <= t; caseNum++) {
    int intervals=in.nextInt();
    int method1=0, method2=0;
    int[] mushrooms=new int[intervals];
    for (int i=0; i < intervals; i++) {
      mushrooms[i]=in.nextInt();
    }
    int rate=Integer.MIN_VALUE;
    for (int i1=1; i1 < mushrooms.length; i1++) {
      rate=Math.max(rate,mushrooms[i1 - 1] - mushrooms[i1]);
    }
    int maxRate=rate;
    for (int i=1; i < intervals; i++) {
      method1+=Math.max(0,mushrooms[i - 1] - mushrooms[i]);
      method2+=Math.min(maxRate,mushrooms[i - 1]);
    }
    System.out.println(""Case #"" + caseNum + "": ""+ method1+ "" ""+ method2);
  }
}
"
30000788,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(""mushroomoutput"");
  int T=in.nextInt();
  for (int test=1; test <= T; test++) {
    int N=in.nextInt();
    int[] m=new int[N];
    for (int i=0; i < N; i++) {
      m[i]=in.nextInt();
    }
    long x=0;
    for (int i=0; i <= N - 2; i++) {
      if (m[i] > m[i + 1])       x+=m[i] - m[i + 1];
    }
    int maxIndex=0;
    for (int i=1; i <= N - 2; i++) {
      if (m[i] - m[i + 1] > m[maxIndex] - m[maxIndex + 1])       maxIndex=i;
    }
    int value=m[maxIndex] - m[maxIndex + 1];
    long y=0;
    if (value <= 0)     y=0;
 else {
      for (int i=0; i <= N - 2; i++) {
        if (m[i] >= value)         y+=value;
 else         y+=m[i];
      }
    }
    out.println(""Case #"" + test + "": ""+ x+ "" ""+ y);
  }
  out.close();
  in.close();
}
"
30000789,"public static void main(String[] args) throws IOException {
}
"
30000790,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""E:\\input.txt""));
  PrintWriter pw=new PrintWriter(new FileWriter(""E:\\output.txt""));
  int T=Integer.parseInt(br.readLine());
  for (int i=1; i <= T; i++) {
    pw.print(""Case #"" + i + "": "");
    N=Integer.parseInt(br.readLine());
    StringTokenizer st=new StringTokenizer(br.readLine());
    for (int j=0; j < N; j++)     a[j]=Integer.parseInt(st.nextToken());
    int ans=0;
    int i1=0, j=1;
    while (j <= N - 1) {
      if (a[j] < a[i1]) {
        ans+=a[i1] - a[j];
        maxDif=Math.max(maxDif,a[i1] - a[j]);
      }
      i1++;
      j++;
    }
    int x=ans;
    int ans1=0;
    for (int i2=0; i2 < N - 1; i2++) {
      ans1+=Math.min(a[i2],maxDif);
    }
    int y=ans1;
    pw.println(x + "" "" + y);
    maxDif=0;
  }
  pw.close();
}
"
30000791,"public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
  try (PrintWriter writer=new PrintWriter(""/home/dare/Downloads/"" + file + "".out"",""UTF-8"")){
    Scanner s=new Scanner(new File(""/home/dare/Downloads/"" + file + "".in""));
    int T=s.nextInt();
    for (int i=0; i < T; i++) {
      int N=s.nextInt();
      int m[]=new int[N];
      int rate=0;
      for (int j=0; j < N; ++j) {
        m[j]=s.nextInt();
        if (j > 0) {
          rate=Math.max(rate,m[j - 1] - m[j]);
        }
      }
      int y=0;
      int z=0;
      for (int j=1; j < m.length; ++j) {
        if (m[j - 1] == rate) {
          z+=rate;
        }
 else         if (m[j - 1] > rate) {
          z+=rate;
        }
 else {
          z+=m[j - 1];
        }
        if (m[j] < m[j - 1]) {
          y+=m[j - 1] - m[j];
        }
      }
      writer.println(""Case #"" + (i + 1) + "": ""+ y+ "" ""+ z);
    }
    writer.close();
  }
 }
"
30000792,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(new File(""A-large.in"")));
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(""A-large.out"")));
  int testCases=Integer.parseInt(br.readLine());
  for (int i=0; i < testCases; i++) {
    int size=Integer.parseInt(br.readLine());
    int[] input=new int[size];
    StringTokenizer st=new StringTokenizer(br.readLine());
    for (int j=0; j < size; j++) {
      input[j]=Integer.parseInt(st.nextToken());
    }
    long result1=0;
    long result2=0;
    int difference, maxDifference=0;
    for (int i1=1; i1 < input.length; i1++) {
      difference=input[i1 - 1] - input[i1];
      maxDifference=Math.max(maxDifference,difference);
      if (difference > 0) {
        result1+=difference;
      }
    }
    for (int i2=0; i2 < input.length - 1; i2++) {
      result2+=Math.min(input[i2],maxDifference);
    }
    String outString=String.valueOf(result1) + "" "" + String.valueOf(result2);
    bw.write(""Case #"" + String.valueOf(i + 1) + "": ""+ outString+ ""\n"");
  }
  br.close();
  bw.close();
}
"
30000793,"public static void main(String[] args) throws Exception {
  First first=new First();
  Scanner sc=new Scanner(new FileReader(WORK_DIR + ""input.txt""));
  PrintWriter pw=new PrintWriter(new FileWriter(WORK_DIR + ""output.txt""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    System.out.println(""Processing test case "" + (caseNum + 1));
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    int n=sc.nextInt();
    int[] input=new int[n];
    long min=0;
    long constant=0;
    int constantSpeed=Integer.MIN_VALUE;
    input[0]=sc.nextInt();
    for (int i=1; i < n; i++) {
      input[i]=sc.nextInt();
      if (input[i] < input[i - 1]) {
        int diff=input[i - 1] - input[i];
        min+=diff;
        if (diff > constantSpeed) {
          constantSpeed=diff;
        }
      }
    }
    int validConstantSpeed=input[n - 2] - input[n - 1];
    if (constantSpeed == Integer.MIN_VALUE) {
      constantSpeed=input[n - 2] - input[n - 1];
    }
 else {
      if (validConstantSpeed > 0 && validConstantSpeed > constantSpeed) {
        constantSpeed=validConstantSpeed;
      }
    }
    if (constantSpeed > 0) {
      for (int i=0; i < n - 1; i++) {
        if (input[i] > constantSpeed) {
          constant+=constantSpeed;
        }
 else {
          constant+=input[i];
        }
      }
    }
    pw.printf(""%d %d\n"",min,constant);
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000794,"public static void main(String[] args) throws IOException {
  String folder=""round1a/"";
  String fileInPath=folder + ""A-large.in"";
  String fileOutPath=folder + ""mushrooms.txt"";
  Scanner sc=new Scanner(new FileReader(fileInPath));
  FileWriter fOut=new FileWriter(fileOutPath);
  int numCases=sc.nextInt();
  for (int caseNo=1; caseNo <= numCases; caseNo++) {
    int numTimes=sc.nextInt();
    int eaten1=0;
    int eaten2=0;
    int[] mushrooms=new int[numTimes];
    for (int i=0; i < numTimes; i++) {
      mushrooms[i]=sc.nextInt();
    }
    int diff=0;
    int eatRate=0;
    for (int i=1; i < numTimes; i++) {
      diff=mushrooms[i - 1] - mushrooms[i];
      if (diff > 0) {
        eaten1+=diff;
      }
      if (diff > eatRate) {
        eatRate=diff;
      }
    }
    for (int i=0; i < numTimes - 1; i++) {
      int leftover=mushrooms[i] - eatRate;
      if (leftover > 0) {
        eaten2+=eatRate;
      }
 else {
        eaten2+=mushrooms[i];
      }
    }
    fOut.write(""Case #"" + caseNo + "": ""+ eaten1+ "" ""+ eaten2+ '\r'+ '\n');
    if (caseNo % 10 == 0) {
      System.out.println(""Case "" + caseNo + "" done"");
    }
  }
  sc.close();
  fOut.close();
  System.out.println(""Done!"");
}
"
30000795,"public static void main(String[] args) throws Exception {
  BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
  int ntests=Integer.parseInt(bf.readLine());
  for (int tc=1; tc <= ntests; tc++) {
    int n=Integer.parseInt(bf.readLine());
    int[] arr=new int[n];
    StringTokenizer st=new StringTokenizer(bf.readLine());
    for (int i=0; i < n; i++) {
      arr[i]=Integer.parseInt(st.nextToken());
    }
    int firstMin=0;
    int maxDiff=0;
    for (int i=1; i < n; i++) {
      int diff=-arr[i] + arr[i - 1];
      if (diff > 0) {
        firstMin+=diff;
      }
      maxDiff=Math.max(maxDiff,diff);
    }
    int secondMin=0;
    for (int i=1; i < n; i++) {
      secondMin+=Math.min(maxDiff,arr[i - 1]);
    }
    System.out.println(""Case #"" + tc + "": ""+ firstMin+ "" ""+ secondMin);
  }
}
"
30000796,"public static void main(String... orange) throws Exception {
  Scanner input=new Scanner(System.in);
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    int N=input.nextInt();
    int[] ps=new int[N];
    for (int i=0; i < N; i++)     ps[i]=input.nextInt();
    int maxDiff=-1;
    int sum1=0, sum2=0;
    for (int i=0; i < (N - 1); i++) {
      int diff=ps[i] - ps[i + 1];
      if (diff > 0)       sum1+=diff;
      if (diff > maxDiff)       maxDiff=diff;
    }
    for (int i=0; i < (N - 1); i++) {
      if (ps[i] < maxDiff)       sum2+=ps[i];
 else       sum2+=maxDiff;
    }
    System.out.printf(""Case #%d: %d %d\n"",n + 1,sum1,sum2);
  }
}
"
30000797,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int i=0; i < t; i++) {
    int n=sc.nextInt();
    int[] ar=new int[n];
    for (int j=0; j < n; j++) {
      ar[j]=sc.nextInt();
    }
    long sum=0;
    for (int i1=0; i1 < ar.length - 1; i1++) {
      if (ar[i1] > ar[i1 + 1]) {
        sum+=ar[i1] - ar[i1 + 1];
      }
    }
    long c1=sum;
    int rate=0;
    for (int i2=0; i2 < ar.length - 1; i2++) {
      if (ar[i2] > ar[i2 + 1]) {
        if (ar[i2] - ar[i2 + 1] > rate) {
          rate=ar[i2] - ar[i2 + 1];
        }
      }
    }
    long sum1=0;
    for (int i1=0; i1 < ar.length - 1; i1++) {
      if (ar[i1] >= rate) {
        sum1+=rate;
      }
 else {
        sum1+=ar[i1];
      }
    }
    long c2=sum1;
    System.out.println(""Case #"" + (i + 1) + "": ""+ c1+ "" ""+ c2);
  }
}
"
30000798,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new BufferedReader(new FileReader(inname)));
    BufferedWriter out=new BufferedWriter(new FileWriter(outname));
    int t=in.nextInt();
    in.nextLine();
    for (int cas=1; cas <= t; cas++) {
      int kurang=0;
      int temp[]=new int[10000];
      int satu=0;
      int dua=0;
      int best=0;
      int rep=in.nextInt();
      kurang=in.nextInt();
      int first=kurang;
      for (int i=0; i < rep - 1; i++) {
        temp[i]=in.nextInt();
        int tempor=kurang - temp[i];
        if (tempor > best)         best=tempor;
        kurang=temp[i];
        if (tempor >= 0)         satu+=tempor;
      }
      if (first < best)       dua+=first;
 else       dua+=best;
      for (int i=0; i < rep - 2; i++) {
        if (temp[i] < best)         dua+=temp[i];
 else         dua+=best;
      }
      out.write(""Case #"" + cas + "": ""+ satu+ "" ""+ dua+ ""\n"");
    }
    in.close();
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000799,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(System.in);
  int nData=in.nextInt();
  in.nextLine();
  for (int asdf=0; asdf < nData; asdf++) {
    int size=in.nextInt();
    int[] items=new int[size];
    for (int i=0; i < size; i++) {
      int num=in.nextInt();
      items[i]=num;
    }
    int prev=-1;
    int total1=0;
    for (int i=0; i < size; i++) {
      int num=items[i];
      int minEaten=prev - num;
      if ((prev != -1) && (minEaten > 0)) {
        total1+=minEaten;
      }
      prev=num;
    }
    int rate=-1;
    int total2=0;
    for (int i=1; i < size; i++) {
      int minEaten=items[i - 1] - items[i];
      if ((rate == -1) || (minEaten > rate)) {
        rate=minEaten;
      }
    }
    for (int i=1; i < size; i++) {
      if (items[i - 1] < rate) {
        total2+=items[i - 1];
      }
 else {
        total2+=rate;
      }
    }
    System.out.println(""Case #"" + (asdf + 1) + "": ""+ total1+ "" ""+ total2);
  }
}
"
30000800,"/** 
 * @param args
 */
public static void main(String[] args){
  int numberOfCase;
  Scanner scanner=null;
  FileWriter fw;
  BufferedWriter bw;
  try {
    File file=new File(args[1]);
    if (!file.exists()) {
      file.createNewFile();
    }
    fw=new FileWriter(file.getAbsoluteFile());
    bw=new BufferedWriter(fw);
    scanner=new Scanner(new File(args[0]));
    numberOfCase=scanner.nextInt();
    for (int i=0; i < numberOfCase; i++) {
      int n=scanner.nextInt();
      int methodA=0;
      int previousNumOfPieces=scanner.nextInt();
      int maxDiff=0;
      int[] pieces=new int[n];
      pieces[0]=previousNumOfPieces;
      for (int j=1; j < n; j++) {
        int numOfPieces=scanner.nextInt();
        pieces[j]=numOfPieces;
        if (numOfPieces < previousNumOfPieces) {
          int diff=previousNumOfPieces - numOfPieces;
          methodA=methodA + diff;
          if (diff > maxDiff)           maxDiff=diff;
        }
        previousNumOfPieces=numOfPieces;
      }
      float rate=((float)maxDiff / 10);
      float methodB=0;
      for (int k=0; k < n - 1; k++) {
        if (pieces[k] > (rate * 10)) {
          methodB=methodB + (rate * 10);
        }
 else {
          methodB=methodB + pieces[k];
        }
      }
      StringBuilder sb=new StringBuilder();
      sb.append(""Case #"" + (i + 1) + "": ""+ methodA+ "" ""+ Math.round(methodB));
      String msg=sb.toString().trim() + ""\n"";
      System.out.print(msg);
      bw.write(msg);
    }
    bw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    scanner.close();
  }
}
"
30000801,"public static void main(String[] args) throws IOException {
  String FILE=""files/A-large"";
  BufferedReader in=new BufferedReader(new FileReader(FILE + "".in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(FILE + "".out"")));
  StringTokenizer st;
  int testCases=Integer.parseInt(in.readLine());
  for (int test=1; test <= testCases; test++) {
    int N=Integer.parseInt(in.readLine());
    int[] m=new int[N];
    st=new StringTokenizer(in.readLine());
    m[0]=Integer.parseInt(st.nextToken());
    long x=0, y=0;
    int jump=0;
    int current=m[0];
    for (int i=1; i < N; i++) {
      m[i]=Integer.parseInt(st.nextToken());
      if (m[i] < current) {
        y+=current - m[i];
        int diff=current - m[i];
        if (diff > jump)         jump=diff;
      }
      current=m[i];
    }
    for (int i=0; i < N - 1; i++)     if (m[i] < jump)     x+=m[i];
 else     x+=jump;
    out.printf(""Case #%d: %d %d%n"",test,y,x);
  }
  in.close();
  out.close();
}
"
30000802,"public static void main(String args[]) throws IOException {
  sc=new Scanner(new File(""input/A-large.in""));
  pw=new PrintWriter(new File(""output/A-large.out""));
  int T=sc.nextInt();
  for (int x=1; x <= T; x++) {
    int N=sc.nextInt();
    int pc[]=new int[N];
    int y=0, z=0, rate=0;
    for (int i=0; i < N; i++) {
      pc[i]=sc.nextInt();
      if (i != 0) {
        if (pc[i] < pc[i - 1])         y+=pc[i - 1] - pc[i];
        if ((pc[i - 1] - pc[i]) > rate)         rate=pc[i - 1] - pc[i];
      }
    }
    for (int i=0; i < (N - 1); i++) {
      if (pc[i] < rate)       z+=pc[i];
 else       z+=rate;
    }
    pw.println(""Case #"" + x + "": ""+ y+ "" ""+ z);
  }
  sc.close();
  pw.close();
}
"
30000803,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(System.in);
  int T, t, N, i, cur, maxdif, s1, s2, r10;
  double rate;
  int m[];
  T=sc.nextInt();
  for (t=1; t <= T; t++) {
    N=sc.nextInt();
    m=new int[N];
    cur=0;
    maxdif=0;
    s1=0;
    s2=0;
    for (i=0; i < N; i++) {
      m[i]=sc.nextInt();
      maxdif=Math.max(cur - m[i],maxdif);
      s1+=Math.max(cur - m[i],0);
      cur=m[i];
    }
    rate=(double)maxdif / 10;
    r10=(int)(rate * 10);
    cur=0;
    for (i=0; i < N; i++) {
      s2+=Math.min(r10,cur);
      cur=m[i];
    }
    System.out.println(""Case #"" + t + "": ""+ s1+ "" ""+ s2);
  }
  sc.close();
}
"
30000804,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numcase=sc.nextInt();
  for (int i=0; i < numcase; i++) {
    int numti=sc.nextInt();
    Queue<Integer> mushin1=new LinkedList<Integer>();
    Queue<Integer> mushin2=new LinkedList<Integer>();
    for (int j=0; j < numti; j++) {
      int mushtime=sc.nextInt();
      mushin1.offer(mushtime);
      mushin2.offer(mushtime);
    }
    int t1=0;
    int t2=0;
    int musha=mushin1.poll();
    ArrayList<Integer> timediff=new ArrayList<Integer>();
    while (mushin1.peek() != null) {
      int mushb=mushin1.poll();
      if (musha - mushb >= 0) {
        t1=t1 + musha - mushb;
      }
      timediff.add(musha - mushb);
      musha=mushb;
    }
    boolean lastflag;
    int maxtd=Collections.max(timediff);
    lastflag=maxtd == timediff.get(timediff.size() - 1);
    while (mushin2.peek() != null) {
      int mushc=mushin2.poll();
      if (mushin2.peek() == null) {
        break;
      }
      if (mushc <= maxtd) {
        t2=t2 + mushc;
      }
 else {
        t2=t2 + maxtd;
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ t1+ "" ""+ t2);
  }
}
"
30000805,"public static void main(String[] args) throws Exception {
  String file=""Round1A/A-large.in"";
  BufferedReader br=new BufferedReader(new FileReader(file));
  PrintWriter writer=new PrintWriter(""outAlarge.txt"",""UTF-8"");
  String line;
  int T=Integer.parseInt(br.readLine());
  for (int test=0; test < T; test++) {
    int N=Integer.parseInt(br.readLine());
    String[] lines=br.readLine().split("" "");
    int[] m=new int[N];
    for (int i=0; i < lines.length; i++) {
      m[i]=Integer.parseInt(lines[i]);
    }
    int num=0;
    for (int i=1; i < N; i++) {
      if (m[i] < m[i - 1]) {
        num+=m[i - 1] - m[i];
      }
    }
    int num1=num;
    int rate=0;
    for (int i=1; i < N; i++) {
      if (m[i] < m[i - 1]) {
        rate=Math.max(rate,m[i - 1] - m[i]);
      }
    }
    int num3=0;
    for (int i=0; i < N - 1; i++) {
      num3+=Math.min(rate,m[i]);
    }
    int num2=num3;
    writer.println(""Case #"" + (test + 1) + "": ""+ num1+ "" ""+ num2);
  }
  writer.close();
}
"
30000806,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(new File(""outputAlarge.txt""));
  int t=in.nextInt();
  for (int tnumber=1; tnumber <= t; tnumber++) {
    int n=in.nextInt();
    int[] a=new int[n];
    int max=0;
    for (int i=0; i < n; i++)     a[i]=in.nextInt();
    int ans=0;
    for (int i=1; i < n; i++) {
      if (a[i - 1] - a[i] > 0) {
        ans+=a[i - 1] - a[i];
        if (a[i - 1] - a[i] > max)         max=a[i - 1] - a[i];
      }
    }
    int ans1=0;
    for (int i=1; i < n; i++)     if (a[i - 1] < max)     ans1+=a[i - 1];
 else     ans1+=max;
    out.println(""Case #"" + tnumber + "": ""+ ans+ "" ""+ ans1);
  }
  in.close();
  out.close();
}
"
30000807,"public static void main(String[] args){
  FileInputStream file;
  int T;
  ArrayList<TestMushrooms> tests;
  try {
    file=new FileInputStream(""A-large.in"");
    BufferedReader in=new BufferedReader(new InputStreamReader(file));
    String buff=in.readLine();
    T=Integer.parseInt(buff);
    tests=new ArrayList<TestMushrooms>();
    for (int i=0; i < T; i++) {
      int N;
      buff=in.readLine();
      N=Integer.parseInt(buff);
      int[] s=new int[N];
      buff=in.readLine();
      String[] data=buff.split("" "");
      for (int j=0; j < N; j++) {
        s[j]=Integer.parseInt(data[j]);
      }
      tests.add(new TestMushrooms(N,s));
    }
    in.close();
    BufferedWriter bw=new BufferedWriter(new FileWriter(""output_Mushrooms""));
    for (int i=0; i < T; i++) {
      int ind=i + 1;
      TestMushrooms res=tests.get(i);
      System.out.println(""Result "" + i + "" : ""+ res.getRes1()+ "" ""+ res.getRes2());
      bw.write(""Case #"" + ind + "": ""+ res.getRes1()+ "" ""+ res.getRes2()+ ""\n"");
    }
    bw.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000808,"public static void main(String[] args){
  final String inputFile=""A-large"";
  Scanner sc=null;
  PrintWriter pw=null;
  try {
    int n=0;
    int plates=0;
    String[] vals;
    sc=new Scanner(new FileReader(inputFile + "".in""));
    pw=new PrintWriter(new FileWriter(inputFile + "".out""));
    n=Integer.parseInt(sc.nextLine());
    for (int id=1; id <= n; id++) {
      plates=Integer.parseInt(sc.nextLine());
      vals=sc.nextLine().split("" "");
      int a, b=0;
      int minA=0;
      int minDiff=0;
      int diff=0;
      for (      String s : vals) {
        a=b;
        b=Integer.parseInt(s);
        if (b < a) {
          diff=a - b;
          minA+=diff;
          if (diff > minDiff) {
            minDiff=diff;
          }
        }
      }
      b=0;
      int minB=0;
      for (      String s : vals) {
        b=Integer.parseInt(s);
        if (b < minDiff) {
          minB+=b;
        }
 else {
          minB+=minDiff;
        }
      }
      if (b < minDiff)       minB-=b;
 else       minB-=minDiff;
      pw.print(""Case #"" + id + "": ""+ minA+ "" ""+ minB);
      pw.print("""");
      pw.println();
    }
  }
 catch (  Exception e) {
    System.out.println(""Invalid Arguments!"");
  }
 finally {
    if (pw != null) {
      pw.flush();
      pw.close();
    }
    if (sc != null) {
      sc.close();
    }
  }
}
"
30000809,"public static void main(String[] args) throws Exception {
  PrintWriter o=new PrintWriter(new File(""mushroomsout2.txt""));
  Scanner scan=new Scanner(new File(""A-large (2).in""));
  int n=Integer.parseInt(scan.nextLine());
  for (int i=1; i <= n; i++) {
    int size=Integer.parseInt(scan.nextLine());
    mushrooms=new int[size];
    String[] sa=scan.nextLine().split("" "");
    for (int j=0; j < size; j++)     mushrooms[j]=Integer.parseInt(sa[j]);
    ArrayList<Integer> diffs=new ArrayList<Integer>();
    for (int j=0; j < size - 1; j++)     diffs.add(mushrooms[j] - mushrooms[j + 1]);
    Collections.sort(diffs,Collections.reverseOrder());
    int count=0;
    for (    int j : diffs)     if (j > 0)     count+=j;
    int count2=0;
    for (int j=0; j < size - 1; j++) {
      if (mushrooms[j] - diffs.get(0) >= 0)       count2+=diffs.get(0);
 else       count2+=mushrooms[j];
    }
    o.println(""Case #"" + i + "": ""+ count+ "" ""+ count2);
  }
  o.close();
}
"
30000810,"public static void main(String[] args) throws FileNotFoundException {
  try (Scanner in=new Scanner(System.in)){
    int cases=in.nextInt();
    for (int i=0; i < cases; i++) {
      int nSeconds=in.nextInt();
      List<Integer> seconds=new ArrayList<>(nSeconds);
      for (int j=0; j < nSeconds; j++) {
        int second=in.nextInt();
        seconds.add(second);
      }
      int res=0;
      for (int i1=1; i1 < seconds.size(); i1++) {
        if (seconds.get(i1 - 1) > seconds.get(i1)) {
          res+=seconds.get(i1 - 1) - seconds.get(i1);
        }
      }
      int res1=res;
      int maxD=0;
      for (int i1=1; i1 < seconds.size(); i1++) {
        if (seconds.get(i1 - 1) - seconds.get(i1) > maxD) {
          maxD=seconds.get(i1 - 1) - seconds.get(i1);
        }
      }
      int res3=0;
      for (int i2=0; i2 < seconds.size() - 1; i2++) {
        if (seconds.get(i2) > maxD) {
          res3+=maxD;
        }
 else {
          res3+=seconds.get(i2);
        }
      }
      int res2=res3;
      System.out.println(""Case #"" + (i + 1) + "": ""+ res1+ "" ""+ res2);
    }
  }
 }
"
30000811,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  StringBuilder sb=new StringBuilder();
  int T=Integer.parseInt(br.readLine().trim());
  for (int i=1; i <= T; i++) {
    int N=Integer.parseInt(br.readLine().trim());
    StringTokenizer st=new StringTokenizer(br.readLine());
    int maxDiff=0;
    int methodA=0;
    for (int j=0; j < N; j++) {
      arr[j]=Integer.parseInt(st.nextToken());
      if (j != 0 && arr[j] < arr[j - 1]) {
        methodA+=(arr[j - 1] - arr[j]);
        if (arr[j - 1] - arr[j] > maxDiff)         maxDiff=arr[j - 1] - arr[j];
      }
    }
    int methodB=0;
    if (maxDiff != 0) {
      for (int j=0; j < N - 1; j++)       methodB+=Math.min(arr[j],maxDiff);
    }
    sb.append(String.format(""Case #%d: %d %d\n"",i,methodA,methodB));
  }
  System.out.print(sb);
  br.close();
}
"
30000812,"public static void main(String[] args){
  try {
    Mushroom myMushroom=new Mushroom();
    int i, j, testcase;
    Integer myInt;
    try {
      Scanner fin=new Scanner(new File(""A-large.in""));
      BufferedWriter fout=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""out.txt"")));
      myMushroom.testNum=fin.nextInt();
      for (testcase=1; testcase <= myMushroom.testNum; testcase++) {
        myMushroom.n=fin.nextInt();
        myMushroom.myList=new int[myMushroom.n];
        myMushroom.activate=false;
        myMushroom.maxGap=0;
        for (i=0; i < myMushroom.n; i++) {
          myMushroom.myList[i]=fin.nextInt();
          if (i > 0 && myMushroom.myList[i] < myMushroom.myList[i - 1]) {
            myMushroom.activate=true;
            if (myMushroom.myList[i - 1] - myMushroom.myList[i] > myMushroom.maxGap)             myMushroom.maxGap=myMushroom.myList[i - 1] - myMushroom.myList[i];
          }
        }
        myMushroom.answer1=myMushroom.answer2=0;
        if (!myMushroom.activate) {
          myMushroom.answer1=myMushroom.answer2=0;
        }
 else {
          for (i=1; i < myMushroom.n; i++) {
            if (myMushroom.myList[i - 1] > myMushroom.myList[i]) {
              myMushroom.answer1+=(myMushroom.myList[i - 1] - myMushroom.myList[i]);
            }
            if (myMushroom.myList[i - 1] < myMushroom.maxGap) {
              myMushroom.answer2+=myMushroom.myList[i - 1];
            }
 else {
              myMushroom.answer2+=myMushroom.maxGap;
            }
          }
        }
        myInt=testcase;
        fout.write(""Case #"" + myInt.toString() + "": "");
        myInt=myMushroom.answer1;
        fout.write(myInt.toString() + "" "");
        myInt=myMushroom.answer2;
        fout.write(myInt.toString());
        fout.newLine();
      }
      fin.close();
      fout.close();
    }
 catch (    Exception e) {
    }
  }
 catch (  Exception e) {
  }
}
"
30000813,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream(""in.large"")));
  int T=scanner.nextInt();
  for (int t=0; t < T; t++) {
    int N=scanner.nextInt();
    int[] n=new int[N];
    int C=0;
    int eat=0;
    int Bdelta=0;
    for (int i=0; i < N; i++) {
      int C1=scanner.nextInt();
      n[i]=C1;
      if (C1 < C) {
        int delta=(C - C1);
        eat+=(C - C1);
        if (delta > Bdelta) {
          Bdelta=delta;
        }
      }
      C=C1;
    }
    int eat2=0;
    int plate=0;
    for (int i=0; i < N - 1; i++) {
      plate=n[i];
      if (plate >= Bdelta) {
        plate-=Bdelta;
        eat2+=Bdelta;
      }
 else {
        eat2+=plate;
        plate=0;
      }
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ (eat)+ "" ""+ eat2);
  }
}
"
30000814,"public static void main(String[] args){
  int cases=stdin.nextInt();
  for (int i=0; i < cases; i++) {
    Main mt=new Main();
    mt.n=Main.stdin.nextInt();
    mt.m=new Integer[mt.n];
    for (int i1=0; i1 < mt.n; i1++) {
      mt.m[i1]=Main.stdin.nextInt();
    }
    Integer eaten=0;
    for (int i1=1; i1 < mt.n; i1++) {
      if (mt.m[i1] < mt.m[i1 - 1]) {
        eaten+=mt.m[i1 - 1] - mt.m[i1];
      }
    }
    mt.solution=eaten.toString();
    Integer eaten1=0;
    Integer max=0;
    for (int i1=1; i1 < mt.n; i1++) {
      if (mt.m[i1 - 1] - mt.m[i1] > max) {
        max=mt.m[i1 - 1] - mt.m[i1];
      }
    }
    for (int i2=1; i2 < mt.n; i2++) {
      if (mt.m[i2 - 1] > max) {
        eaten1=eaten1 + max;
      }
 else {
        eaten1=eaten1 + mt.m[i2 - 1];
      }
    }
    mt.solution=mt.solution + "" "" + eaten1.toString();
    System.out.println(""Case #"" + (1 + i) + "": ""+ mt.solution);
  }
}
"
30000815,"public static void main(String[] args) throws IOException {
  String fileName=""A-large"";
  Scanner in=new Scanner(new File(fileName + "".in""));
  PrintWriter out=new PrintWriter(new FileWriter(fileName + "".out""));
  int noOfCases=in.nextInt();
  for (int caseNo=1; caseNo <= noOfCases; caseNo++) {
    N=in.nextInt();
    int[] mushrooms=new int[N];
    for (int i=0; i < N; i++)     mushrooms[i]=in.nextInt();
    int first=0;
    int second=0;
    int rate=0;
    for (int i=1; i < N; i++) {
      int diff=mushrooms[i - 1] - mushrooms[i];
      if (diff > 0) {
        rate=Math.max(rate,diff);
        first+=diff;
      }
    }
    for (int i=0; i < N - 1; i++) {
      second+=Math.min(rate,mushrooms[i]);
    }
    System.out.printf(""Case #%d: %d %d%n"",caseNo,first,second);
    out.printf(""Case #%d: %d %d%n"",caseNo,first,second);
  }
  in.close();
  out.close();
}
"
30000816,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int t=scan.nextInt();
  for (int i=1; i <= t; i++) {
    int N=scan.nextInt();
    int[] m=new int[N];
    for (int j=0; j < N; j++) {
      m[j]=scan.nextInt();
    }
    int strategyA=0;
    int strategyB=0;
    int rate1=0;
    for (int i2=1; i2 < m.length; i2++) {
      rate1=Math.max(rate1,m[i2 - 1] > m[i2] ? m[i2 - 1] - m[i2] : 0);
    }
    int rate=rate1;
    for (int i1=1; i1 < m.length; i1++) {
      strategyA+=m[i1 - 1] > m[i1] ? m[i1 - 1] - m[i1] : 0;
      int prev=m[i1 - 1];
      strategyB+=prev - rate > 0 ? rate : prev;
    }
    System.out.println(""Case #"" + i + "": ""+ strategyA+ "" ""+ strategyB);
  }
}
"
30000817,"public static void main(String[] args) throws Exception {
  String filename=""A-large"";
  Scanner scan=new Scanner(new FileReader(filename + "".in""));
  PrintWriter out=new PrintWriter(filename + "".out"");
  int problems=scan.nextInt();
  for (int count=0; count < problems; count++) {
    System.out.print(""Case #"" + (count + 1) + "": "");
    out.print(""Case #"" + (count + 1) + "": "");
    A r=new A();
    int resultA=0;
    int resultB=0;
    int n=scan.nextInt();
    int[] array=new int[n];
    for (int i=0; i < n; i++) {
      array[i]=scan.nextInt();
    }
    int maxDiff=0;
    for (int i=1; i < n; i++) {
      int diff=array[i - 1] - array[i];
      maxDiff=Math.max(maxDiff,diff);
      if (array[i] < array[i - 1]) {
        resultA+=diff;
      }
    }
    for (int i=0; i < n - 1; i++) {
      resultB+=Math.min(array[i],maxDiff);
    }
    System.out.println(resultA + "" "" + resultB);
    out.println(resultA + "" "" + resultB);
    resultA=0;
  }
  out.flush();
  out.close();
  scan.close();
}
"
30000818,"Gcj(){
  buff=new BufferedReader(new InputStreamReader(System.in));
  try {
    T=Integer.parseInt(buff.readLine());
  }
 catch (  Exception e) {
    System.err.println(e);
  }
}
"
30000819,"public static void main(String args[]){
  String inputFileName=""A-large.in"";
  String outputFileName=""A-large.out"";
  try {
    Scanner scan=new Scanner(new FileInputStream(inputFileName));
    PrintWriter printer=new PrintWriter(new FileOutputStream(outputFileName));
    int T=scan.nextInt();
    scan.nextLine();
    for (int t=0; t < T; t++) {
      int N=scan.nextInt();
      int[] counts=new int[N];
      for (int i=0; i < N; i++) {
        counts[i]=scan.nextInt();
      }
      int count1=0;
      int maxDiff=0;
      for (int i=0; i < N - 1; i++) {
        int diff=Math.max(0,counts[i] - counts[i + 1]);
        count1+=diff;
        if (maxDiff < diff)         maxDiff=diff;
      }
      int count2=0;
      for (int i=0; i < N - 1; i++) {
        count2+=Math.min(counts[i],maxDiff);
      }
      printer.println(""Case #"" + (t + 1) + "": ""+ count1+ "" ""+ count2);
    }
    printer.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000820,"public static void main(String[] args){
  A a=new A();
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int t=0; t < T; t++) {
    int N=sc.nextInt();
    int[] mushrooms=new int[N];
    for (int i=0; i < N; i++) {
      mushrooms[i]=sc.nextInt();
    }
    int ret=0;
    for (int i=1; i < N; i++) {
      int diff=Math.max(0,mushrooms[i - 1] - mushrooms[i]);
      ret+=diff;
    }
    String y=Integer.toString(ret);
    int rate=0;
    for (int i=1; i < N; i++) {
      rate=Math.max(rate,mushrooms[i - 1] - mushrooms[i]);
    }
    int ret1=0;
    for (int i=0; i < N - 1; i++) {
      int diff=Math.min(rate,mushrooms[i]);
      ret1+=diff;
    }
    String z=Integer.toString(ret1);
    System.out.format(""Case #%d: %s %s"",t + 1,y,z);
    System.out.println();
  }
  sc.close();
}
"
30000821,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  StringBuilder out=new StringBuilder();
  int t=Integer.parseInt(br.readLine());
  for (int i=1; i <= t; i++) {
    int n=Integer.parseInt(br.readLine());
    int[] m=new int[n];
    StringTokenizer st=new StringTokenizer(br.readLine());
    int f=0;
    int r=0;
    for (int j=0; j < n; j++) {
      m[j]=Integer.parseInt(st.nextToken());
      if (j != 0 && m[j] < m[j - 1]) {
        f+=m[j - 1] - m[j];
        r=Math.max(r,m[j - 1] - m[j]);
      }
    }
    int s=0;
    for (int j=0; j < n - 1; j++) {
      s+=Math.min(r,m[j]);
    }
    out.append(String.format(""Case #%d: %d %d\n"",i,f,s));
  }
  System.out.print(out);
}
"
30000822,"public static void main(String args[]) throws Exception {
  String inFile=""A-large.in"";
  String outFile=""outputA.txt"";
  LineNumberReader lin=new LineNumberReader(new InputStreamReader(new FileInputStream(inFile)));
  PrintWriter out=new PrintWriter(new File(outFile));
  int NCASE=Integer.parseInt(lin.readLine());
  for (int CASE=1; CASE <= NCASE; CASE++) {
    out.print(""Case #"" + CASE + "": "");
    String l=lin.readLine();
    int N=Integer.parseInt(l);
    String l2=lin.readLine();
    String[] parts=l2.split("" "");
    int[] m=new int[N];
    for (int i=0; i < N; i++) {
      m[i]=Integer.parseInt(parts[i]);
    }
    int y=0;
    int z=0;
    int max=0;
    for (int i=0; i < N - 1; i++) {
      if (m[i] - m[i + 1] >= 0) {
        y=y + m[i] - m[i + 1];
      }
    }
    for (int i=0; i < N - 1; i++) {
      if (m[i] - m[i + 1] >= max) {
        max=m[i] - m[i + 1];
      }
    }
    for (int i=0; i < N - 1; i++) {
      if (m[i] >= max) {
        z=z + max;
      }
 else {
        z=z + m[i];
      }
    }
    out.println(y + "" "" + z);
  }
  lin.close();
  out.close();
}
"
30000823,"public static void main(String[] args) throws FileNotFoundException {
  File file=new File(""C:/Users/puneet/Desktop/test.txt"");
  Scanner in=new Scanner(file);
  int total=in.nextInt();
  for (int i=1; i <= total; i++) {
    int mCount=in.nextInt();
    int arr[]=new int[mCount];
    for (int j=0; j < mCount; j++) {
      arr[j]=in.nextInt();
    }
    int min1=0;
    int min2=0;
    int curr=0;
    int maxDiff=0;
    for (int a=1; a < mCount; a++) {
      if (arr[a] < arr[a - 1]) {
        min1+=(arr[a - 1] - arr[a]);
      }
      if ((arr[a - 1] - arr[a]) > maxDiff)       maxDiff=arr[a - 1] - arr[a];
    }
    for (int b=0; b < (mCount - 1); b++) {
      if (arr[b] > maxDiff)       min2=min2 + maxDiff;
 else       min2=min2 + arr[b];
    }
    System.out.println(""Case #"" + i + "": ""+ min1+ "" ""+ min2);
  }
}
"
30000824,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new FileReader(""input""));
  PrintWriter out=new PrintWriter(new FileWriter(""output""));
  int cases=in.nextInt();
  for (int a=0; a < cases; a++) {
    int number=in.nextInt();
    int mushrooms[]=new int[number];
    int num1=0;
    int maxRate=0;
    for (int b=0; b < number; b++) {
      mushrooms[b]=in.nextInt();
      if (b > 0) {
        if (mushrooms[b] < mushrooms[b - 1]) {
          num1=num1 + (mushrooms[b - 1] - mushrooms[b]);
        }
        if ((mushrooms[b - 1] - mushrooms[b]) > maxRate) {
          maxRate=(mushrooms[b - 1] - mushrooms[b]);
        }
      }
    }
    int num2=0;
    for (int b=0; b < number - 1; b++) {
      if (mushrooms[b] > maxRate) {
        num2=num2 + maxRate;
      }
 else {
        num2=num2 + mushrooms[b];
      }
    }
    out.print(""Case #"" + (a + 1) + "": ""+ num1+ "" ""+ num2+ ""\n"");
  }
  out.close();
}
"
30000825,"public static void main(String[] args) throws NumberFormatException, IOException {
  String prefix=""Case #%d: %d %d"";
  String num=""A"";
  String file=num + ""-large"";
  BufferedReader br=new BufferedReader(new FileReader(file + "".in""));
  PrintWriter pw=new PrintWriter(file + "".out"");
  int t=Integer.parseInt(br.readLine());
  for (int i=1; i <= t; i++) {
    int ans1=0;
    int ans2=0;
    int n=Integer.parseInt(br.readLine());
    int[] datas=new int[n];
    String[] raw=br.readLine().split("" "");
    for (int j=0; j < datas.length; j++)     datas[j]=Integer.parseInt(raw[j]);
    for (int j=0; j < datas.length - 1; j++) {
      int f=datas[j];
      int s=datas[j + 1];
      if (s < f)       ans1+=(f - s);
    }
    int max=Integer.MIN_VALUE;
    for (int j=0; j < datas.length - 1; j++) {
      int f=datas[j];
      int s=datas[j + 1];
      int c=f - s;
      if (c > max)       max=c;
    }
    for (int j=0; j < datas.length - 1; j++) {
      if (datas[j] < max)       ans2+=datas[j];
 else       ans2+=max;
    }
    pw.println(String.format(prefix,i,ans1,ans2));
  }
  br.close();
  pw.close();
}
"
30000826,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(FILE_NAME + "".in""));
  PrintStream out=new PrintStream(new File(FILE_NAME + "".out""));
  int loopNum=in.nextInt();
  for (int caseNum=1; caseNum <= loopNum; caseNum++) {
    out.print(""Case #"" + caseNum + "": "");
    int n=in.nextInt();
    int method1=0, method2=0;
    int max=0;
    int[] arr=new int[n];
    arr[0]=in.nextInt();
    for (int i=1; i < n; ++i) {
      arr[i]=in.nextInt();
      int diff=Math.max(0,arr[i - 1] - arr[i]);
      method1+=diff;
      max=Math.max(max,diff);
    }
    for (int i=0; i < n - 1; ++i) {
      method2+=Math.min(arr[i],max);
    }
    out.print(method1 + "" "" + method2);
    out.println();
  }
  in.close();
  out.close();
}
"
30000827,"public static void main(String[] args){
  try {
    Scanner sc=new Scanner(Paths.get(INPUT));
    StringBuilder sb=new StringBuilder();
    int cases=sc.nextInt();
    for (int c=1; c < cases + 1; c++) {
      int n=sc.nextInt();
      int[] m=new int[n];
      for (int i=0; i < n; i++) {
        m[i]=sc.nextInt();
      }
      long answer1=0;
      long answer2=0;
      long speed=0;
      for (int i=1; i < n; i++) {
        if (m[i] < m[i - 1]) {
          answer1+=m[i - 1] - m[i];
          speed=Math.max(speed,m[i - 1] - m[i]);
        }
      }
      for (int i=1; i < n; i++) {
        answer2+=Math.min(m[i - 1],speed);
      }
      String line=""Case #"" + c + "": ""+ answer1+ "" ""+ answer2;
      System.out.println(line);
      sb.append(line).append('\n');
    }
    Files.write(Paths.get(OUTPUT),sb.toString().getBytes());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000828,"public static void main(String[] args) throws IOException {
}
"
30000829,"public static void main(String[] args){
  try {
    File input=new File(System.getProperty(""inputFile""));
    FileReader fr=new FileReader(input);
    BufferedReader br=new BufferedReader(fr);
    StringBuilder output1=new StringBuilder();
    Integer cases=Integer.valueOf(br.readLine());
    for (int i=1; i <= cases; i++) {
      int n=Integer.parseInt(br.readLine());
      String caseInput=br.readLine();
      String[] split=caseInput.split("" "");
      int[] mushrooms=new int[split.length];
      for (int j=0; j < mushrooms.length; j++) {
        mushrooms[j]=Integer.parseInt(split[j]);
      }
      int method1=0;
      int maxDiff=0;
      for (int j=1; j < mushrooms.length; j++) {
        if (mushrooms[j] < mushrooms[j - 1]) {
          int diff=mushrooms[j - 1] - mushrooms[j];
          method1+=diff;
          if (diff > maxDiff) {
            maxDiff=diff;
          }
        }
      }
      int method2=0;
      for (int j=1; j < mushrooms.length; j++) {
        if (mushrooms[j - 1] < maxDiff) {
          method2+=mushrooms[j - 1];
        }
 else {
          method2+=maxDiff;
        }
      }
      output1.append(String.format(""Case #%d: %d %d"",i,method1,method2));
      if (i != cases) {
        output1.append(""\n"");
      }
    }
    String result=output1.toString();
    File output=new File(System.getProperty(""outputFile""));
    FileWriter fw=new FileWriter(output);
    BufferedWriter bw=new BufferedWriter(fw);
    bw.write(result);
    bw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000830,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  int cases=Integer.parseInt(br.readLine());
  for (int i=0; i < cases; i++) {
    int numTimes=Integer.parseInt(br.readLine());
    String[] nums=br.readLine().split("" "");
    int[] shrooms=new int[numTimes];
    for (int j=0; j < numTimes; j++) {
      shrooms[j]=Integer.parseInt(nums[j]);
    }
    int maxDecrease=0;
    int case1shrooms=0;
    int case2shrooms=0;
    for (int j=1; j < numTimes; j++) {
      int diff=shrooms[j - 1] - shrooms[j];
      if (diff > 0) {
        case1shrooms+=diff;
      }
      if (diff > maxDecrease) {
        maxDecrease=diff;
      }
    }
    for (int j=0; j < numTimes - 1; j++) {
      if (shrooms[j] < maxDecrease) {
        case2shrooms+=shrooms[j];
      }
 else {
        case2shrooms+=maxDecrease;
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ case1shrooms+ "" ""+ case2shrooms);
  }
}
"
30000831,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(System.out);
  int T=Integer.parseInt(in.readLine());
  for (int t=1; t <= T; t++) {
    int n=Integer.parseInt(in.readLine());
    int arr[]=new int[n];
    int i=0;
    for (    String s : in.readLine().split("" "")) {
      arr[i++]=Integer.parseInt(s);
    }
    int maxDiff=0;
    for (i=1; i < n; i++) {
      maxDiff=Math.max(maxDiff,arr[i - 1] - arr[i]);
    }
    long first=0;
    long second=0;
    for (i=1; i < n; i++) {
      first+=Math.max(0,arr[i - 1] - arr[i]);
    }
    for (i=0; i < n - 1; i++) {
      second+=Math.min(maxDiff,arr[i]);
    }
    pw.format(""Case #%d: %d %d\n"",t,first,second);
    pw.flush();
  }
  pw.close();
  in.close();
}
"
30000832,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter pw=new PrintWriter(System.out);
  int cases=Integer.parseInt(br.readLine());
  for (int t=1; t <= cases; t++) {
    pw.print(""Case #"" + t + "": "");
    int n=Integer.parseInt(br.readLine());
    StringTokenizer st=new StringTokenizer(br.readLine(),"" "");
    int[] m=new int[n];
    for (int i=0; i < n; i++) {
      m[i]=Integer.parseInt(st.nextToken());
    }
    long a=0;
    long b=0;
    for (int i=1; i < n; i++) {
      a+=Math.max(0,m[i - 1] - m[i]);
      b=Math.max(b,m[i - 1] - m[i]);
    }
    long c=0;
    for (int i=0; i < n - 1; i++) {
      c+=Math.min(b,m[i]);
    }
    pw.println(a + "" "" + c);
  }
  br.close();
  pw.close();
}
"
30000833,"public static void main(String[] args) throws FileNotFoundException {
  File f=new File(""input1.txt"");
  Scanner s=new Scanner(f);
  int numTests=s.nextInt();
  for (int i=0; i < numTests; i++) {
    int steps=s.nextInt();
    int[] hist=new int[steps];
    int firstMethod=0;
    int maxEaten=0;
    int secondMethod=0;
    for (int j=0; j < steps; j++) {
      hist[j]=s.nextInt();
      if (j > 0) {
        if (hist[j] < hist[j - 1]) {
          firstMethod+=hist[j - 1] - hist[j];
          if (hist[j - 1] - hist[j] > maxEaten) {
            maxEaten=hist[j - 1] - hist[j];
          }
        }
      }
    }
    for (int j=0; j < steps - 1; j++) {
      if (hist[j] < maxEaten) {
        secondMethod+=hist[j];
      }
 else {
        secondMethod+=maxEaten;
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ firstMethod+ "" ""+ secondMethod);
  }
}
"
30000834,"public static void main(String[] args){
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    int cases=Integer.parseInt(br.readLine().trim());
    int inputs;
    String[] data;
    int[] mushrooms;
    int max1, max2, previous, current, tempdiff;
    int rate;
    for (int i=1; i <= cases; i++) {
      inputs=Integer.parseInt(br.readLine().trim());
      data=br.readLine().trim().split("" "");
      max1=0;
      max2=0;
      previous=Integer.parseInt(data[0]);
      current=-1;
      mushrooms=new int[inputs];
      for (int j=1; j < inputs; j++) {
        current=Integer.parseInt(data[j]);
        tempdiff=0;
        if (current < previous) {
          tempdiff=previous - current;
        }
        max1+=tempdiff;
        if (tempdiff > max2) {
          max2=tempdiff;
        }
        mushrooms[j - 1]=previous;
        previous=current;
      }
      mushrooms[inputs - 1]=previous;
      rate=max2;
      max2=0;
      for (int j=0; j < inputs - 1; j++) {
        if (mushrooms[j] < rate) {
          max2+=mushrooms[j];
        }
 else {
          max2+=rate;
        }
      }
      System.out.println(""Case #"" + i + "": ""+ max1+ "" ""+ max2);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000835,"public static void main(String[] args){
  int t, c;
  Scanner sc=new Scanner(System.in);
  t=sc.nextInt();
  for (c=1; c <= t; c++) {
    int n=sc.nextInt();
    int[] s=new int[n];
    for (int i=0; i < n; i++) {
      s[i]=sc.nextInt();
    }
    int total=0, total1=0, maxDiff=0;
    for (int i=1; i < n; i++) {
      if (s[i - 1] > s[i]) {
        int diff=s[i - 1] - s[i];
        total+=diff;
        maxDiff=Math.max(diff,maxDiff);
      }
    }
    for (int i=0; i < n - 1; i++) {
      total1+=Math.min(maxDiff,s[i]);
    }
    System.out.printf(""Case #%d: %d %d\n"",c,total,total1);
  }
}
"
30000836,"public static void main(String[] args) throws Exception {
  File inputFile=new File(""inputfiles/round1a/P1/input.txt"");
  FileReader fr=new FileReader(inputFile);
  BufferedReader br=new BufferedReader(fr);
  int numOfTestCases=Integer.parseInt(br.readLine());
  File outputFile=new File(""inputfiles/round1a/P1/output.txt"");
  outputFile.delete();
  outputFile.createNewFile();
  FileWriter fw=new FileWriter(outputFile);
  BufferedWriter bw=new BufferedWriter(fw);
  for (int i=0; i < numOfTestCases; i++) {
    int N=Integer.parseInt(br.readLine());
    int[] m=new int[N];
    String[] data=br.readLine().split("" "");
    for (int j=0; j < N; j++)     m[j]=Integer.parseInt(data[j]);
    int minEat1=0;
    int minEat2=0;
    int maxEat=0;
    for (int i2=1; i2 < N; i2++)     if (m[i2 - 1] > m[i2]) {
      int eat=m[i2 - 1] - m[i2];
      minEat1+=eat;
      maxEat=Math.max(maxEat,eat);
    }
    for (int i1=0; i1 < N - 1; i1++)     minEat2+=Math.min(maxEat,m[i1]);
    bw.append(""Case #"" + (i + 1) + "": ""+ minEat1+ "" ""+ minEat2+ ""\n"");
    bw.flush();
  }
  bw.flush();
  fw.flush();
  bw.close();
  fw.close();
}
"
30000837,"public static void main(String args[]) throws Exception {
  A r=new A();
  r.sc=new Scanner(new File(A.IN));
  r.out=new BufferedWriter(new FileWriter(A.OUT));
  int t=Integer.parseInt(r.sc.nextLine());
  for (int i=1; i <= t; i++) {
    r.out.write(""Case #"" + i + "": "");
    int a=0;
    int b=0;
    r.absVal=0;
    int d=Integer.parseInt(r.sc.nextLine());
    String[] tmp=r.sc.nextLine().split("" "");
    int[] tmpInt=new int[tmp.length];
    for (int i1=0; i1 < d; i1++) {
      tmpInt[i1]=Integer.parseInt(tmp[i1]);
    }
    int x=tmpInt[0];
    int a1=0;
    for (int i1=1; i1 < tmpInt.length; i1++) {
      if (tmpInt[i1] < x) {
        a1=a1 + x - tmpInt[i1];
        r.absVal=Math.max(r.absVal,Math.abs(x - tmpInt[i1]));
      }
      x=tmpInt[i1];
    }
    a=a1;
    int ans=0;
    for (int i1=0; i1 < tmpInt.length - 1; i1++) {
      if (tmpInt[i1] <= r.absVal) {
        ans=ans + tmpInt[i1];
      }
 else       if (tmpInt[i1] > r.absVal) {
        ans=ans + r.absVal;
      }
    }
    b=ans;
    r.out.write(Integer.toString(a) + "" "" + Integer.toString(b));
    r.out.newLine();
    r.out.flush();
  }
  r.sc.close();
  r.out.close();
}
"
30000838,"public static void main(String args[]) throws IOException {
  String outFileName=""C:\\1A\\mushroom_large_out.out"";
  File file=new File(outFileName);
  if (!file.exists()) {
    file.createNewFile();
  }
  FileWriter fw=new FileWriter(file.getAbsoluteFile());
  BufferedWriter bw=new BufferedWriter(fw);
  BufferedReader br=new BufferedReader(new FileReader(""C:\\1A\\A-large.in""));
  String testCasesNumber;
  try {
    testCasesNumber=br.readLine();
    int testCases=Integer.parseInt(testCasesNumber);
    int caseNumber=1;
    while (caseNumber <= testCases) {
      int n=Integer.parseInt(br.readLine());
      String tokens[]=br.readLine().split("" "");
      int size=tokens.length;
      if (size != n) {
        throw new IOException();
      }
      int mushrooms1[]=new int[size];
      int i1=0;
      for (      String token : tokens) {
        mushrooms1[i1++]=Integer.parseInt(token);
      }
      int mushrooms[]=mushrooms1;
      int maxDiff=0;
      int y=0;
      for (int i=1; i < n; i++) {
        int diff=mushrooms[i - 1] - mushrooms[i];
        if ((diff > 0)) {
          y=y + diff;
        }
        if (diff > maxDiff) {
          maxDiff=diff;
        }
      }
      int z=0;
      for (int i=0; i < n - 1; i++) {
        int toAdd=(mushrooms[i] < maxDiff) ? mushrooms[i] : maxDiff;
        z=z + toAdd;
      }
      bw.write(""Case #"" + caseNumber + "": ""+ y+ "" ""+ z);
      bw.write(""\n"");
      caseNumber++;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  bw.close();
  System.exit(0);
}
"
30000839,"public static void main(String args[]){
  try {
    System.setIn(new FileInputStream(""C:\\Users\\Kumar BN\\Desktop\\A-large.in""));
    System.setOut(new PrintStream(""C:\\Users\\Kumar BN\\Desktop\\outputmushrromlarge.txt""));
  }
 catch (  Exception e) {
    System.out.print(""asdasd"");
  }
  int t;
  Scanner in=new Scanner(System.in);
  t=in.nextInt();
  for (int i=0; i < t; i++) {
    int n, max=0;
    n=in.nextInt();
    int a[]=new int[n];
    for (int j=0; j < n; j++) {
      a[j]=in.nextInt();
      if (max < a[j])       max=a[j];
    }
    int sum=0;
    for (int j=0; j < n - 1; j++) {
      if (a[j] > a[j + 1]) {
        sum=sum + (a[j] - a[j + 1]);
      }
    }
    int minimum=0;
    int sum1=0, mushrooms=0, runningsum=0;
    int maxdifference=0;
    int difference;
    for (int k=0; k < n - 1; k++) {
      if (a[k] > a[k + 1]) {
        difference=a[k] - a[k + 1];
        if (Math.abs(difference) > maxdifference)         maxdifference=difference;
      }
    }
    int rate=Math.abs(maxdifference);
    for (int k=0; k < n - 1; k++) {
      if ((rate) >= a[k])       runningsum=runningsum + a[k];
 else {
        runningsum=runningsum + (rate);
      }
    }
    minimum=runningsum;
    runningsum=0;
    System.out.println(""Case #"" + (i + 1) + "": ""+ sum+ "" ""+ minimum);
  }
}
"
30000840,"public static void main(String[] args) throws IOException {
  ArrayList<Integer> arraylist=new ArrayList<Integer>();
  int[] array;
  Scanner sc=new Scanner(new File(""MushroomMonster.in""));
  PrintWriter pw=new PrintWriter(new File(""MushroomMonster.out""));
  int trials=sc.nextInt();
  for (int i=0; i < trials; i++) {
    int size=sc.nextInt();
    array=new int[size];
    for (int j=0; j < size; j++) {
      array[j]=sc.nextInt();
    }
    int answer1=0;
    int difference=0;
    int answer2=0;
    for (int k=0; k < size - 1; k++) {
      if (array[k] > array[k + 1]) {
        answer1+=array[k] - array[k + 1];
        if (array[k] - array[k + 1] > difference)         difference=array[k] - array[k + 1];
      }
    }
    for (int x=0; x < size - 1; x++) {
      if (array[x] >= difference)       answer2+=difference;
 else       answer2+=array[x];
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ answer1+ "" ""+ answer2);
    pw.println(""Case #"" + (i + 1) + "": ""+ answer1+ "" ""+ answer2);
  }
  pw.close();
  sc.close();
}
"
30000841,"public static void main(String[] args){
  Mushroom t=new Mushroom();
  Scanner scan;
  try {
    scan=new Scanner(new File(""input.txt""));
    PrintStream p=new PrintStream(""output.txt"");
    int num=scan.nextInt();
    for (int i=1; i <= num; i++) {
      scan.nextLine();
      int intervals=scan.nextInt();
      int[] mushrooms=new int[intervals];
      for (int j=0; j < intervals; j++) {
        mushrooms[j]=scan.nextInt();
      }
      int current=mushrooms[0];
      int total1=0;
      for (int j=1; j < intervals; j++) {
        if (mushrooms[j] < current) {
          total1+=(current - mushrooms[j]);
        }
        current=mushrooms[j];
      }
      int[] drop=new int[intervals - 1];
      for (int j=1; j < intervals; j++) {
        drop[j - 1]=mushrooms[j - 1] - mushrooms[j];
        if (drop[j - 1] < 0) {
          drop[j - 1]=0;
        }
      }
      Arrays.sort(drop);
      int total2=0;
      current=mushrooms[0];
      int eatingRate=drop[drop.length - 1];
      for (int j=1; j < intervals; j++) {
        total2+=Math.min(current,eatingRate);
        current=mushrooms[j];
      }
      p.println(""Case #"" + i + "": ""+ total1+ "" ""+ total2);
    }
    p.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30000842,"public static void main(String[] args) throws FileNotFoundException, IOException {
  PrintWriter writer=new PrintWriter(fileOut,""UTF-8"");
  try (BufferedReader br=new BufferedReader(new FileReader(fileIn))){
    int numIn=Integer.parseInt(br.readLine());
    for (int i=0; i < numIn; i++) {
      int time=Integer.parseInt(br.readLine());
      String[] numListString=br.readLine().split("" "");
      int[] intList=new int[time];
      int curr=Integer.parseInt(numListString[0]);
      intList[0]=curr;
      int case1Sum=0;
      int case2NegMax=0;
      for (int j=1; j < time; j++) {
        int next=Integer.parseInt(numListString[j]);
        intList[j]=next;
        int diff=next - curr;
        if (diff < 0) {
          case1Sum+=-diff;
          if (-diff > case2NegMax) {
            case2NegMax=-diff;
          }
        }
        curr=next;
      }
      int case1=case1Sum;
      int case2Sum=0;
      for (int j=0; j < time - 1; j++) {
        curr=intList[j];
        int next=intList[j + 1];
        int diff=next - curr;
        if (curr < case2NegMax) {
          case2Sum+=curr;
        }
 else {
          case2Sum+=case2NegMax;
        }
      }
      writer.println(""Case #"" + (i + 1) + "": ""+ case1+ "" ""+ case2Sum);
    }
  }
   writer.close();
}
"
30000843,"public static void main(String[] args) throws FileNotFoundException {
  FileReader f=new FileReader(""C:\\Users\\Ismael\\Desktop\\inputA.txt"");
  PrintWriter out=new PrintWriter(""C:\\Users\\Ismael\\Desktop\\outputA.txt"");
  Scanner in=new Scanner(f);
  int cant=in.nextInt();
  in.nextLine();
  for (int i=0; i < cant; i++) {
    int mus=in.nextInt();
    int m[]=new int[mus];
    for (int j=0; j < mus; j++) {
      m[j]=in.nextInt();
    }
    int acum=0;
    for (int j=0; j < mus - 1; j++) {
      acum=acum + Math.min(0,m[j + 1] - m[j]);
    }
    acum=-acum;
    int rate=0;
    for (int j=0; j < mus - 1; j++) {
      if (rate < -(m[j + 1] - m[j])) {
        rate=-(m[j + 1] - m[j]);
      }
    }
    int acum2=0;
    for (int j=0; j < mus - 1; j++) {
      if (m[j] >= rate) {
        acum2=acum2 + rate;
      }
 else {
        acum2=acum2 + m[j];
      }
    }
    String res=acum + "" "" + acum2;
    out.println(""Case #"" + (i + 1) + "": ""+ res);
  }
  in.close();
  out.close();
}
"
30000844,"public static void main(String[] args) throws Exception {
  writer=new PrintWriter(""out.txt"",""UTF-8"");
  Scanner sc=new Scanner(new File(""in.txt""));
  int T=sc.nextInt();
  for (int t=0; t < T; t++) {
    int N=sc.nextInt();
    int[] m=new int[N];
    for (int n=0; n < N; n++) {
      m[n]=sc.nextInt();
    }
    int max=Integer.MIN_VALUE;
    int method1=0;
    for (int i=0; i < N; i++) {
      if (m[i] > max) {
        max=m[i];
      }
 else {
        method1+=max - m[i];
        max=m[i];
      }
    }
    max=Integer.MIN_VALUE;
    for (int i=0; i < N - 1; i++) {
      int diff=m[i] - m[i + 1];
      if (diff > max)       max=diff;
    }
    int rate10=max;
    int mushrooms=0;
    int cnt=0;
    for (int i=0; i < N - 1; i++) {
      mushrooms=m[i];
      if (rate10 >= mushrooms) {
        cnt+=mushrooms;
        mushrooms=0;
      }
 else {
        cnt+=rate10;
        mushrooms-=rate10;
      }
    }
    String s=""Case #"" + (t + 1) + "": ""+ method1+ "" ""+ cnt;
    System.out.println(s);
    writer.println(s);
  }
  writer.flush();
  writer.close();
}
"
30000845,"public static void main(String[] args){
  Scanner scanInput=new Scanner(System.in);
  int T=scanInput.nextInt();
  if (T < 1 || T > 100) {
    return;
  }
  Integer[] method1=new Integer[T];
  Integer[] method2=new Integer[T];
  for (int t=1; t <= T; t++) {
    int totalIntervals=scanInput.nextInt();
    Integer[] mushes=new Integer[totalIntervals];
    mushes[0]=scanInput.nextInt();
    method1[t - 1]=0;
    method2[t - 1]=0;
    int maxDiff=-1;
    for (int i=1; i < totalIntervals; i++) {
      mushes[i]=scanInput.nextInt();
      if (mushes[i - 1] > mushes[i]) {
        int currDiff=mushes[i - 1] - mushes[i];
        method1[t - 1]+=currDiff;
        if (maxDiff < currDiff) {
          maxDiff=currDiff;
        }
      }
    }
    for (int i=0; i < totalIntervals - 1; i++) {
      if (mushes[i] <= maxDiff) {
        method2[t - 1]+=mushes[i];
      }
 else {
        method2[t - 1]+=maxDiff;
      }
    }
    if (method1[t - 1] < 0)     method1[t - 1]=0;
    if (method2[t - 1] < 0)     method2[t - 1]=0;
  }
  for (int c=1; c <= T; c++) {
    String result=""Case #"" + c + "": ""+ method1[c - 1]+ "" ""+ method2[c - 1];
    System.out.println(result);
  }
}
"
30000846,"public static void main(String args[]) throws Exception {
  A r=new A();
  r.sc=new Scanner(new File(A.IN));
  r.out=new BufferedWriter(new FileWriter(A.OUT));
  int t=Integer.parseInt(r.sc.nextLine());
  for (int i=1; i <= t; i++) {
    r.out.write(""Case #"" + i + "": "");
    int n=r.sc.nextInt();
    int[] m=new int[n];
    for (int i1=0; i1 < n; i1++) {
      m[i1]=r.sc.nextInt();
    }
    int sum1=0;
    int cur=m[0];
    for (int i4=1; i4 < n; i4++) {
      if (m[i4] < cur) {
        sum1+=cur - m[i4];
      }
      cur=m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    int max=0;
    for (int i2=1; i2 < n; i2++) {
      if (max < m[i2 - 1] - m[i2]) {
        max=m[i2 - 1] - m[i2];
      }
    }
    int sum2=0;
    for (int i3=0; i3 < n - 1; i3++) {
      sum2+=Math.min(max,m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
  }
  r.sc.close();
  r.out.close();
}
"
30000847,"public static void main(String[] args) throws IOException {
  int[] array={100,100};
  int min;
  try (Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""/home/danza/Downloads/output1L.txt""),""utf-8""))){
    int j=1;
    BufferedReader br=new BufferedReader(new FileReader(""/home/danza/Downloads/A-large (1).in""));
    try {
      StringBuilder sb=new StringBuilder();
      String line=br.readLine();
      while (line != null) {
        sb.append(line);
        sb.append(System.lineSeparator());
        int len=Integer.parseInt(br.readLine());
        line=br.readLine();
        int[] arr=new int[len];
        String[] sarray=line.split("" "");
        for (int i=0; i < len; i++) {
          arr[i]=Integer.parseInt(sarray[i]);
        }
        int min4=0;
        for (int i1=1; i1 < arr.length; i1++) {
          if (arr[i1] < arr[i1 - 1]) {
            int temp1=Math.abs(arr[i1] - arr[i1 - 1]);
            min4+=temp1;
          }
        }
        int min1=min4;
        System.out.println(min1);
        int maxDiff=0;
        for (int i=1; i < arr.length; i++) {
          if (arr[i] < arr[i - 1]) {
            int temp=Math.abs(arr[i] - arr[i - 1]);
            if (temp > maxDiff)             maxDiff=temp;
          }
        }
        int min3=0;
        for (int i=0; i < arr.length - 1; i++) {
          if (arr[i] >= maxDiff) {
            min3+=maxDiff;
          }
 else           min3+=arr[i];
        }
        int min2=min3;
        System.out.println(min2);
        writer.write(""Case #"" + (j++) + "": ""+ min1+ "" ""+ min2+ ""\n"");
      }
      String everything=sb.toString();
    }
 catch (    Exception e) {
    }
 finally {
      br.close();
    }
  }
 }
"
30000848,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int T=s.nextInt();
  int N, max, inc;
  long min1, min2;
  int[] m;
  for (int t=1; t <= T; t++) {
    N=s.nextInt();
    m=new int[N];
    max=0;
    min1=0;
    min2=0;
    for (int i=0; i < N; i++) {
      m[i]=s.nextInt();
      if (i > 0) {
        if (m[i - 1] > m[i]) {
          min1=min1 + m[i - 1] - m[i];
          if ((m[i - 1] - m[i]) > max)           max=m[i - 1] - m[i];
        }
      }
    }
    if (max == 0)     System.out.println(""Case #"" + t + "": ""+ min1+ "" 0"");
 else {
      if ((max % 10) == 0)       inc=max / 10;
 else       inc=max / 10 + 1;
      for (int i=1; i < N; i++) {
        if (max > m[i - 1])         min2+=m[i - 1];
 else         min2+=max;
      }
      System.out.println(""Case #"" + t + "": ""+ min1+ "" ""+ min2);
    }
  }
}
"
30000849,"public static void main(String[] args){
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(args[0]));
    int n=Integer.parseInt(reader.readLine());
    for (int i=1; i <= n; ++i) {
      reader.readLine();
      Mushroom r=new Mushroom();
      List<Integer> intArray=new ArrayList<Integer>();
      for (      String s : reader.readLine().split("" "")) {
        intArray.add(Integer.parseInt(s));
      }
      int x=0;
      int max=0;
      for (int i1=1; i1 < intArray.size(); ++i1) {
        if (intArray.get(i1) < intArray.get(i1 - 1)) {
          int d=intArray.get(i1 - 1) - intArray.get(i1);
          x+=d;
          max=Math.max(max,d);
        }
      }
      int y=0;
      for (int i2=1; i2 < intArray.size(); ++i2) {
        y+=Math.min(max,intArray.get(i2 - 1));
      }
      System.out.println(""Case #"" + i + "": ""+ x+ "" ""+ y);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}
"
30000850,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int cases=in.nextInt();
  int cn=0;
  while (cn++ < cases) {
    int times=in.nextInt();
    int[] input=new int[times];
    for (int i=0; i < input.length; i++) {
      input[i]=in.nextInt();
    }
    int last=input[0];
    int wayOne=0;
    for (int i=1; i < times; i++) {
      int next=input[i];
      wayOne+=Math.max(0,last - next);
      last=next;
    }
    int wayTwo=0;
    last=input[0];
    int worst=0;
    for (int i=1; i < input.length; i++) {
      int next=input[i];
      int minEaten=Math.max(0,last - next);
      worst=Math.max(worst,minEaten);
      last=next;
    }
    for (int i=0; i < input.length - 1; i++) {
      wayTwo+=Math.min(input[i],worst);
    }
    System.out.printf(""Case #%d: %d %d\n"",cn,wayOne,wayTwo);
  }
}
"
30000851,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""OUT.txt"")));
  int noCases=Integer.parseInt(in.readLine());
  for (int caseNo=1; caseNo <= noCases; caseNo++) {
    int n=Integer.parseInt(in.readLine());
    String[] data=in.readLine().split("" "");
    int[] m=new int[n];
    for (int i=0; i < n; i++)     m[i]=Integer.parseInt(data[i]);
    int min1=0;
    for (int i=1; i < n; i++)     if (m[i] - m[i - 1] < 0)     min1+=m[i - 1] - m[i];
    int maxDifference=0;
    for (int i=1; i < n; i++)     maxDifference=Math.max(maxDifference,m[i - 1] - m[i]);
    int min2=0;
    for (int i=0; i < n - 1; i++) {
      if (m[i] < maxDifference)       min2+=m[i];
 else       min2+=maxDifference;
    }
    String answer=String.format(""%d %d"",min1,min2);
    out.println(String.format(""Case #%d: %s"",caseNo,answer));
    out.flush();
  }
  in.close();
  out.close();
  System.exit(0);
}
"
30000852,"public static void main(String args[]){
  Scanner s=null;
  PrintWriter out=null;
  try {
    String inputFilename;
    if (args.length > 0) {
      inputFilename=args[0];
    }
 else {
      System.out.print(""Input file name: "");
      BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
      inputFilename=in.readLine();
    }
    File f=new File(""data/"" + inputFilename);
    String outputFilename=inputFilename.replaceFirst(""(\\.in)?$"","".out"");
    s=new Scanner(new FileReader(f));
    out=new PrintWriter(new FileWriter(""data/"" + outputFilename));
    int testCases=s.nextInt();
    for (int t=1; t <= testCases; ++t) {
      int sampleCount=s.nextInt();
      Vector<Integer> samples=new Vector<Integer>(sampleCount);
      for (int i=0; i < sampleCount; ++i) {
        samples.add(s.nextInt());
      }
      int result=0;
      for (int i=1; i < samples.size(); ++i) {
        int diff=samples.elementAt(i - 1) - samples.elementAt(i);
        if (diff > 0) {
          result+=diff;
        }
      }
      int method1=result;
      int maxDown=0;
      for (int i=1; i < samples.size(); ++i) {
        int diff=samples.elementAt(i - 1) - samples.elementAt(i);
        if (diff > maxDown) {
          maxDown=diff;
        }
      }
      int result1=0;
      for (int i=1; i < samples.size(); ++i) {
        if (samples.elementAt(i) == 0) {
          result1+=samples.elementAt(i - 1);
        }
 else         if (samples.elementAt(i - 1) < maxDown) {
          result1+=samples.elementAt(i - 1);
        }
 else {
          result1+=maxDown;
        }
      }
      int method2=result1;
      out.println(""Case #"" + t + "": ""+ method1+ "" ""+ method2);
    }
    out.close();
    s.close();
  }
 catch (  Exception e) {
    System.err.println(e);
  }
 finally {
    if (null != out)     out.close();
    if (null != s)     s.close();
  }
}
"
30000853,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scanner=new Scanner(new FileInputStream(args[0]));
  scanner.nextLine();
  int c=1;
  while (scanner.hasNext()) {
    int answer1=0;
    int answer2=0;
    scanner.nextLine();
    StringTokenizer tokens=new StringTokenizer(scanner.nextLine());
    ArrayList<Integer> listMushroom=new ArrayList<Integer>();
    while (tokens.hasMoreElements()) {
      listMushroom.add(Integer.parseInt(tokens.nextToken()));
    }
    for (int i=1; i < listMushroom.size(); i++) {
      if (listMushroom.get(i - 1) > listMushroom.get(i)) {
        answer1+=listMushroom.get(i - 1) - listMushroom.get(i);
      }
    }
    int d=listMushroom.get(0) - listMushroom.get(1);
    int least=(d > 0) ? d : 0;
    int most=10000;
    boolean finish=false;
    for (int e=least; e <= most && !finish; e++) {
      answer2=0;
      for (int i=1; i < listMushroom.size() && !finish; i++) {
        int a=(e > listMushroom.get(i - 1)) ? listMushroom.get(i - 1) : e;
        if (i == listMushroom.size() - 1 && (listMushroom.get(i - 1) - e) <= listMushroom.get(i)) {
          finish=true;
        }
        if (listMushroom.get(i - 1) - a > listMushroom.get(i)) {
          break;
        }
        answer2+=a;
      }
    }
    System.out.println(""Case #"" + c + "": ""+ answer1+ "" ""+ answer2);
    ++c;
  }
  scanner.close();
}
"
30000854,"public static void main(String[] args) throws IOException {
  BufferedReader br=Files.newBufferedReader(Paths.get(""A-large.in"",args),Charset.defaultCharset());
  System.setOut(new PrintStream(Files.newOutputStream(Paths.get(""output.out""))));
  final int CASES=Integer.parseInt(br.readLine());
  String line;
  for (int cs=0; cs < CASES; cs++) {
    line=br.readLine();
    final int N=Integer.parseInt(line);
    int[] arr=new int[N];
    int j=0;
    int accumulator=-1;
    boolean sign=true;
    for (    char ch : br.readLine().toCharArray())     if (ch == '-') {
      accumulator=0;
      sign=false;
    }
 else     if (ch < '0' || ch > '9') {
      if (accumulator != -1) {
        arr[j]=sign ? accumulator : -accumulator;
        accumulator=-1;
        sign=true;
        j++;
      }
    }
 else     accumulator=accumulator == -1 ? (ch - '0') : accumulator * 10 + (ch - '0');
    if (accumulator != -1)     arr[j++]=sign ? accumulator : -accumulator;
    int case1=0;
    int max=0;
    for (int i=1; i < arr.length; i++) {
      int diff=arr[i - 1] - arr[i];
      if (diff > 0)       case1+=diff;
      if (diff > max)       max=diff;
    }
    int case2=0;
    for (int i=0; i < arr.length - 1; i++)     if (arr[i] < max)     case2+=arr[i];
 else     case2+=max;
    String msg=Integer.toString(case1) + ' ' + Integer.toString(case2);
    System.out.println(""Case #"" + (cs + 1) + "": ""+ msg);
  }
}
"
30000855,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new BufferedReader(new FileReader(inname)));
    BufferedWriter out=new BufferedWriter(new FileWriter(outname));
    int t=in.nextInt();
    in.nextLine();
    for (int cas=1; cas <= t; cas++) {
      String ans="""";
      int n=in.nextInt();
      int[] m=new int[n];
      for (int i=0; i < n; i++)       m[i]=in.nextInt();
      int min1=0;
      int min2=0;
      for (int i=0; i < n - 1; i++)       if (m[i] - m[i + 1] > 0)       min1+=m[i] - m[i + 1];
      int minrate=m[0] - m[1];
      for (int i=0; i < n - 1; i++)       if (m[i] - m[i + 1] > minrate)       minrate=m[i] - m[i + 1];
      for (int i=0; i < n - 1; i++)       min2+=Math.min(minrate,m[i]);
      ans=min1 + "" "" + min2;
      System.out.print(""Case #"" + cas + "": ""+ ans+ ""\n"");
      out.write(""Case #"" + cas + "": ""+ ans+ ""\n"");
    }
    in.close();
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000856,"public static void main(String[] args) throws IOException {
  BufferedReader input=new BufferedReader(new FileReader(""C:\\Users\\William Li\\Desktop\\input.txt""));
  PrintWriter output=new PrintWriter(new FileWriter(""C:\\Users\\William Li\\Desktop\\output.txt""));
  int T=Integer.parseInt(input.readLine());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(input.readLine());
    int method1=0;
    String[] nextLine=input.readLine().split("" "");
    int[] mushrooms=new int[N];
    for (int i=0; i < nextLine.length; i++) {
      mushrooms[i]=Integer.parseInt(nextLine[i]);
    }
    for (int i=1; i < mushrooms.length; i++) {
      method1+=Math.max(mushrooms[i - 1] - mushrooms[i],0);
    }
    int method2=0;
    int maxdiff=0;
    for (int i=1; i < mushrooms.length; i++) {
      maxdiff=Math.max(mushrooms[i - 1] - mushrooms[i],maxdiff);
    }
    for (int i=0; i < mushrooms.length - 1; i++) {
      if (mushrooms[i] - maxdiff < 0) {
        method2+=mushrooms[i];
      }
 else {
        method2+=maxdiff;
      }
    }
    output.println(""Case #"" + t + "": ""+ method1+ "" ""+ method2);
  }
  input.close();
  output.close();
  System.exit(0);
}
"
30000857,"public static void main(String[] args) throws IOException {
  File f=new File(""input.txt"");
  FileInputStream fis=new FileInputStream(f);
  BufferedReader br=new BufferedReader(new InputStreamReader(fis));
  ArrayList<String> stringRows=new ArrayList<>();
  String line;
  while ((line=br.readLine()) != null) {
    stringRows.add(line);
  }
  br.close();
  rows=stringRows;
  int totProblems=Integer.parseInt(rows.get(curRow++));
  for (int curProblem=1; curProblem <= totProblems; curProblem++) {
    int numTimes=Integer.parseInt(rows.get(curRow++));
    String[] mushroomCountsStrs=rows.get(curRow++).split("" "");
    List<Integer> mushCounts=new ArrayList<>();
    for (    String count : mushroomCountsStrs) {
      mushCounts.add(Integer.parseInt(count));
    }
    int totEaten=0;
    Integer lastCount=null;
    for (    Integer mushCount : mushCounts) {
      if (lastCount != null) {
        if (lastCount > mushCount) {
          totEaten+=lastCount - mushCount;
        }
      }
      lastCount=mushCount;
    }
    int anyRateSol=totEaten;
    int minRate=0;
    Integer lastCount1=null;
    for (    Integer mushCount2 : mushCounts) {
      if (lastCount1 != null) {
        if (lastCount1 > mushCount2) {
          minRate=Math.max(minRate,lastCount1 - mushCount2);
        }
      }
      lastCount1=mushCount2;
    }
    int totEaten1=0;
    lastCount1=null;
    for (    Integer mushCount1 : mushCounts) {
      if (lastCount1 != null) {
        totEaten1+=Math.min(lastCount1,minRate);
      }
      lastCount1=mushCount1;
    }
    int constRateSol=totEaten1;
    System.out.println(""Case #"" + curProblem + "": ""+ anyRateSol+ "" ""+ constRateSol);
  }
}
"
30000858,"public static void main(String[] args) throws FileNotFoundException {
  String root=""data/CJ2015/r1A"";
  inputFile=""A-large"" + "".in"";
  outputFile=""A-large"" + "".out"";
  keyFile=""A-large"" + "".key"";
  Scanner in=new Scanner(new File(root,inputFile));
  PrintWriter out=new PrintWriter(new File(root,outputFile));
  int T=in.nextInt();
  for (int i=0; i < T; i++) {
    int N=in.nextInt();
    int[] m=new int[N];
    for (int j=0; j < N; j++) {
      m[j]=in.nextInt();
    }
    int res1=0;
    int rate=0;
    for (int j=1; j < N; j++) {
      if (m[j] < m[j - 1]) {
        int sub=m[j - 1] - m[j];
        res1+=sub;
        if (sub > rate) {
          rate=sub;
        }
      }
    }
    int res2=0;
    System.out.println(i + 1 + "": ""+ rate);
    int sum=0;
    for (int j=0; j < N - 1; j++) {
      if (m[j] > rate) {
        res2+=rate;
      }
 else {
        res2+=m[j];
      }
    }
    out.println(""Case #"" + (i + 1) + "": ""+ res1+ "" ""+ res2);
  }
  in.close();
  out.close();
}
"
30000859,"public static void main(String[] args) throws NumberFormatException, IOException {
  FileWriter writer=new FileWriter(""C:/Users/Max/Documents/Java Workspaces/Google Code Jam/Round 1A 2015/src/output.txt"");
  try {
    BufferedReader br=new BufferedReader(new FileReader(""C:/Users/Max/Documents/Java Workspaces/Google Code Jam/Round 1A 2015/src/input.txt""));
    int numCases=Integer.parseInt(br.readLine());
    for (int caseNum=1; caseNum <= numCases; caseNum++) {
      String line=br.readLine();
      int n=Integer.parseInt(line);
      line=br.readLine();
      Scanner sc=new Scanner(line);
      long y=0;
      long maxDifference=0;
      int last=Integer.parseInt(sc.next());
      ArrayList<Integer> sizes=new ArrayList<Integer>();
      sizes.add(last);
      while (sc.hasNext()) {
        int next=Integer.parseInt(sc.next());
        sizes.add(next);
        if (next < last) {
          y+=(last - next);
          if (last - next > maxDifference) {
            maxDifference=last - next;
          }
        }
        last=next;
      }
      long z=0;
      for (int i=0; i < sizes.size() - 1; i++) {
        if (sizes.get(i) < maxDifference) {
          z+=sizes.get(i);
        }
 else {
          z+=maxDifference;
        }
      }
      writer.write(""Case #"" + caseNum + "": ""+ y+ "" ""+ z+ ""\n"");
    }
    br.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  writer.close();
}
"
30000860,"public static void main(String[] args){
  try {
    PrintWriter out=new PrintWriter(new File(""G://codejam//A-large.out""));
    Scanner sc=new Scanner(new File(""G://codejam//A-large.in""));
    int t=sc.nextInt();
    for (int k=1; k <= t; k++) {
      int n=sc.nextInt();
      int[] m=new int[n];
      long sumx=0, sumy=0;
      int factor=0;
      for (int i=0; i < n; i++) {
        m[i]=sc.nextInt();
        if (i >= 1) {
          if (m[i] < m[i - 1]) {
            int newfactor=m[i - 1] - m[i];
            if (newfactor > factor) {
              factor=newfactor;
            }
          }
        }
      }
      for (int i=0; i < n; i++) {
        if (i <= n - 2 && m[i] > m[i + 1]) {
          sumx=sumx + m[i] - m[i + 1];
        }
        if (i < n - 1) {
          if (m[i] <= factor) {
            sumy=sumy + m[i];
          }
 else {
            sumy=sumy + factor;
          }
        }
      }
      out.println(""Case #"" + k + "": ""+ sumx+ "" ""+ sumy);
    }
    out.close();
  }
 catch (  Exception e) {
    System.out.println(e);
  }
}
"
30000861,"public static void main(String[] args) throws FileNotFoundException {
  sc=new Scanner(new File(""/Users/mac/Desktop/A-large.in""));
  PrintStream out=new PrintStream(new FileOutputStream(""/Users/mac/Desktop/output.txt""));
  System.setOut(out);
  int cases=Integer.parseInt(sc.nextLine());
  for (int i=1; i <= cases; i++) {
    int N=sc.nextInt();
    int[] arr=new int[N];
    for (int j=0; j < N; j++) {
      arr[j]=sc.nextInt();
    }
    int ans=0;
    for (int i1=1; i1 < arr.length; i1++) {
      if (arr[i1] < arr[i1 - 1]) {
        ans=ans + (arr[i1 - 1] - arr[i1]);
      }
    }
    int mineater=ans;
    int n=arr.length;
    int rate=0;
    for (int i2=n - 1; i2 > 0; i2--) {
      int temp=arr[i2 - 1] - arr[i2];
      if (temp >= 0 && temp > rate)       rate=temp;
    }
    int ans1=0;
    for (int i1=0; i1 < n - 1; i1++) {
      if (arr[i1] < rate)       ans1=ans1 + arr[i1];
 else       ans1=ans1 + rate;
    }
    int constant=ans1;
    System.out.println(""Case #"" + i + "": ""+ mineater+ "" ""+ constant);
  }
}
"
30000862,"public static void main(String[] args) throws FileNotFoundException {
  Scanner input=new Scanner(new File(""in.txt""));
  PrintWriter output=new PrintWriter(new File(""out.txt""));
  int count=input.nextInt();
  int round;
  int[] mushrooms;
  int minMethodOne;
  int minMethodTwo;
  for (int i=0; i < count; i++) {
    round=input.nextInt();
    mushrooms=new int[round];
    for (int x=0; x < round; x++)     mushrooms[x]=input.nextInt();
    int min1=0;
    for (int a1=0; a1 < mushrooms.length - 1; a1++) {
      if (mushrooms[a1] > mushrooms[a1 + 1])       min1+=mushrooms[a1] - mushrooms[a1 + 1];
    }
    minMethodOne=min1;
    int max=0;
    int min=0;
    for (int a=0; a < mushrooms.length - 1; a++) {
      if (mushrooms[a] - mushrooms[a + 1] > max)       max=mushrooms[a] - mushrooms[a + 1];
    }
    for (int b=0; b < mushrooms.length - 1; b++) {
      if (mushrooms[b] < max)       min+=mushrooms[b];
 else       min+=max;
    }
    minMethodTwo=min;
    output.write(""Case #"" + (i + 1) + "": ""+ minMethodOne+ "" ""+ minMethodTwo+ ""\n"");
  }
  output.close();
}
"
30000863,"/** 
 * Declare any static variable over here
 */
public static void main(String[] args){
  String root_path=""C:/Vijay/Workspaces/GoogleCodeJam/"";
  String fileName=root_path + ""inputFiles/2015/MushroomMonster/A-large"";
  try (Scanner reader=new Scanner(new BufferedReader(new FileReader(fileName + "".in"")));BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName + ""_out.txt""),""utf-8""))){
    int T=reader.nextInt();
    for (int caseNumber=1; caseNumber <= T; caseNumber++) {
      int N=reader.nextInt();
      int[] mush=new int[N];
      for (int i=0; i < N; i++) {
        mush[i]=reader.nextInt();
      }
      int result=0;
      int a=mush[0];
      for (int i=1; i < mush.length; i++) {
        int b=mush[i];
        if (b < a) {
          result+=a - b;
        }
        a=b;
      }
      int result1=result;
      int result3=0;
      int rate=0;
      int a1=mush[0];
      for (int i=1; i < mush.length; i++) {
        int b=mush[i];
        if (b < a1) {
          int temp=a1 - b;
          if (rate < temp)           rate=temp;
        }
        a1=b;
      }
      System.out.println(""Rate-->"" + rate);
      for (int i=0; i < mush.length - 1; i++) {
        a1=mush[i];
        int tem=a1 - rate;
        if (tem >= 0)         result3+=rate;
 else {
          result3+=rate + tem;
          tem=0;
        }
      }
      int result2=result3;
      writer.write(CASE_PREFIX + caseNumber + COLON_SPACE+ result1+ BLANK_SPACE+ result2);
      writer.newLine();
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(MushroomMonster.class.getName()).log(Level.SEVERE,null,ex);
  }
  System.out.println(""Done executing"");
}
"
30000864,"public static void main(String[] args) throws IOException {
  String inputFile=""src/MushroomMonster.in"";
  String outputFile=""src/MushroomMonster.out"";
  BufferedReader br=new BufferedReader(new FileReader(new File(inputFile)));
  PrintWriter pw=new PrintWriter(new FileWriter(new File(outputFile)));
  String line=br.readLine();
  int N=Integer.parseInt(line);
  int id=1;
  for (int i=0; i < N; ++i) {
    int D=Integer.parseInt(br.readLine());
    String[] lineSplit=br.readLine().split("" "");
    int[] arr=new int[D];
    for (int j=0; j < D; ++j) {
      arr[j]=(Integer.parseInt(lineSplit[j]));
    }
    int sum=0;
    for (int i1=1; i1 < arr.length; i1++)     if (arr[i1] < arr[i1 - 1])     sum+=(arr[i1 - 1] - arr[i1]);
    int sum1=sum;
    int diff=0;
    for (int i1=1; i1 < arr.length; ++i1)     if (arr[i1 - 1] - arr[i1] > diff)     diff=(arr[i1 - 1] - arr[i1]);
    System.out.println(diff);
    int sum3=0;
    for (int i2=1; i2 < arr.length; ++i2) {
      int eat=(arr[i2 - 1] < diff ? arr[i2 - 1] : diff);
      sum3+=eat;
    }
    int sum2=sum3;
    pw.println(""Case #"" + id + "": ""+ sum1+ "" ""+ sum2);
    id++;
  }
  br.close();
  pw.close();
}
"
30000865,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new File(""src/in.txt""));
  int T=sc.nextInt();
  for (t=1; t <= T; t++) {
    int N=sc.nextInt();
    int[] m=new int[N];
    for (int i=0; i < N; i++) {
      m[i]=sc.nextInt();
    }
    long ans1=0;
    long ans2=0;
    int[] d=new int[N - 1];
    for (int i=0; i < N - 1; i++) {
      d[i]=m[i + 1] - m[i];
    }
    int min=0;
    for (int i=0; i < N - 1; i++) {
      if (d[i] < 0) {
        ans1-=d[i];
      }
      if (d[i] < min) {
        min=d[i];
      }
    }
    min=-min;
    for (int i=0; i < N - 1; i++) {
      if (m[i] >= min) {
        ans2+=min;
      }
 else {
        ans2+=m[i];
      }
    }
    System.out.println(""Case #"" + t + "": ""+ (Object)ans1+ "" ""+ (Object)ans2);
  }
}
"
30000866,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""A-large.out"")));
  StringTokenizer st=new StringTokenizer(f.readLine());
  int num=Integer.parseInt(st.nextToken());
  for (int i=0; i < num; i++) {
    st=new StringTokenizer(f.readLine());
    int n=Integer.parseInt(st.nextToken());
    st=new StringTokenizer(f.readLine());
    int[] a=new int[n];
    for (int j=0; j < n; j++)     a[j]=Integer.parseInt(st.nextToken());
    long cnt1=0, cnt2=0, max=0;
    for (int j=0; j < n - 1; j++) {
      max=(max < a[j] - a[j + 1]) ? a[j] - a[j + 1] : max;
      cnt1+=(a[j] - a[j + 1] > 0) ? a[j] - a[j + 1] : 0;
    }
    for (int j=0; j < n - 1; j++) {
      cnt2+=(a[j] >= max) ? max : a[j];
    }
    out.format(""Case #%d: %d %d\n"",i + 1,cnt1,cnt2);
  }
  out.close();
  System.exit(0);
}
"
30000867,"public static void main(String args[]) throws Exception {
  A r=new A();
  int t=r.sc.nextInt();
  for (int i=1; i <= t; i++) {
    r.out.print(""Case #"" + i + "": "");
    int ans1=0, ans2=0;
    int n=r.sc.nextInt();
    int[] arr=new int[n];
    int maxDistance=0;
    for (int i1=0; i1 < arr.length; i1++) {
      arr[i1]=r.sc.nextInt();
    }
    for (int i2=1; i2 < arr.length; i2++) {
      if (arr[i2 - 1] > arr[i2]) {
        int distance=arr[i2 - 1] - arr[i2];
        ans1+=distance;
        if (distance > maxDistance)         maxDistance=distance;
      }
    }
    for (int i3=0; i3 < arr.length - 1; i3++) {
      ans2+=arr[i3] < maxDistance ? arr[i3] : maxDistance;
    }
    r.out.println(ans1 + "" "" + ans2);
  }
  r.sc.close();
  r.out.close();
}
"
30000868,"public static void main(String args[]) throws Exception {
  A r=new A();
  r.sc=new Scanner(new File(A.IN));
  r.out=new BufferedWriter(new FileWriter(A.OUT));
  int t=Integer.parseInt(r.sc.nextLine());
  for (int i=1; i <= t; i++) {
    r.out.write(""Case #"" + i + "": "");
    int a=0;
    int b=0;
    r.absVal=0;
    int d=Integer.parseInt(r.sc.nextLine());
    String[] tmp=r.sc.nextLine().split("" "");
    int[] tmpInt=new int[tmp.length];
    for (int i1=0; i1 < d; i1++) {
      tmpInt[i1]=Integer.parseInt(tmp[i1]);
    }
    int x=tmpInt[0];
    int a1=0;
    for (int i1=1; i1 < tmpInt.length; i1++) {
      if (tmpInt[i1] < x) {
        a1=a1 + x - tmpInt[i1];
        r.absVal=Math.max(r.absVal,Math.abs(x - tmpInt[i1]));
      }
      x=tmpInt[i1];
    }
    a=a1;
    int ans=0;
    for (int i1=0; i1 < tmpInt.length - 1; i1++) {
      if (tmpInt[i1] <= r.absVal) {
        ans=ans + tmpInt[i1];
      }
 else       if (tmpInt[i1] > r.absVal) {
        ans=ans + r.absVal;
      }
    }
    b=ans;
    r.out.write(Integer.toString(a) + "" "" + Integer.toString(b));
    r.out.newLine();
    r.out.flush();
  }
  r.sc.close();
  r.out.close();
}
"
30000869,"public static void main(String[] args) throws IOException {
  Path input=Paths.get(""input.txt"");
  Path output=Paths.get(""output.txt"");
  scanner=new Scanner(input);
  writer=Files.newBufferedWriter(output);
  int testCases=scanner.nextInt();
  for (int i=0; i < testCases; i++) {
    n=scanner.nextInt();
    m=new int[n];
    for (int i3=0; i3 < n; i3++) {
      m[i3]=scanner.nextInt();
    }
    a=0;
    for (int i1=1; i1 < m.length; i1++) {
      if (m[i1] < m[i1 - 1]) {
        a+=(-m[i1] + m[i1 - 1]);
      }
    }
    b=0;
    int minIn10Secs=0;
    for (int i1=0; i1 < m.length - 1; i1++) {
      int diff=m[i1 + 1] - m[i1];
      if (diff < 0)       minIn10Secs=Math.max(minIn10Secs,-diff);
    }
    for (int i2=0; i2 < m.length - 1; i2++) {
      b+=Math.min(minIn10Secs,m[i2]);
    }
    String out=String.format(""Case #%d: %d %d"",i + 1,a,b);
    System.err.println(out);
    writer.write(out);
    writer.newLine();
  }
  writer.close();
}
"
30000870,"public static void main(String[] args){
  try {
    in=new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    ins=new Scanner(System.in);
    out=new PrintWriter(System.out);
    try {
      if (System.getProperty(""xDx"") != null) {
        in=new StreamTokenizer(new BufferedReader(new FileReader(""input.txt"")));
        ins=new Scanner(new FileReader(""input.txt""));
        out=new PrintWriter(new FileWriter(""output.txt""));
      }
    }
 catch (    Exception e) {
      in=new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
      ins=new Scanner(System.in);
      out=new PrintWriter(System.out);
    }
    Main r=new Main();
    Main.in.nextToken();
    int t=(int)Main.in.nval;
    for (int k=0; k < t; k++) {
      Main.in.nextToken();
      int n=(int)Main.in.nval;
      int y=0;
      int z=0;
      int speed=0;
      int[] a=new int[n];
      for (int i=0; i < n; i++) {
        Main.in.nextToken();
        a[i]=(int)Main.in.nval;
        if (i > 0) {
          y+=Math.max(a[i - 1] - a[i],0);
          speed=Math.max(speed,a[i - 1] - a[i]);
        }
      }
      for (int i=0; i < n - 1; i++) {
        z+=Math.min(a[i],speed);
      }
      Main.out.printf(""Case #%d: %d %d\n"",k + 1,y,z);
    }
    out.close();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}
"
30000871,"public static void main(String args[]) throws IOException {
  BufferedReader stdin=new BufferedReader(new InputStreamReader(System.in));
  String line=stdin.readLine();
  int T=Integer.parseInt(line);
  for (int t=1; t <= T; t++) {
    line=stdin.readLine();
    int n=Integer.parseInt(line);
    line=stdin.readLine();
    String[] prms=line.split("" "");
    int ans1=0;
    int mx=0;
    int[] m=new int[n];
    m[0]=Integer.parseInt(prms[0]);
    for (int i=1; i < n; i++) {
      m[i]=Integer.parseInt(prms[i]);
      int d=m[i - 1] - m[i];
      mx=Math.max(mx,d);
      if (d > 0)       ans1+=d;
    }
    int ans2=0;
    for (int i=0; i < n - 1; i++) {
      ans2+=Math.min(mx,m[i]);
    }
    System.out.printf(""Case #%d: %d %d\n"",t,ans1,ans2);
  }
}
"
30000872,"public static void main(String[] args){
  BufferedReader in;
  PrintWriter out;
  try {
    in=new BufferedReader(new FileReader(""/home/devesh/Downloads/A-large (1).in""));
    out=new PrintWriter(new FileWriter(""/home/devesh/Code_jam/output.txt""));
    int T=Integer.parseInt(in.readLine());
    ArrayList<Integer> list;
    int count=0, cnt=0, s;
    String str;
    String arr[];
    for (int i=1; i <= T; i++) {
      int N=Integer.parseInt(in.readLine());
      String S=in.readLine();
      String inpt[]=S.split("" "");
      int[] inp=new int[N];
      int sum1=0, sum2=0, maxdiff=0;
      for (int n=0; n < N; n++) {
        inp[n]=Integer.parseInt(inpt[n]);
        if (n > 0 && inp[n - 1] > inp[n]) {
          sum1=sum1 + inp[n - 1] - inp[n];
        }
      }
      for (int n=1; n < N; n++) {
        if (inp[n - 1] > inp[n] && maxdiff < inp[n - 1] - inp[n])         maxdiff=inp[n - 1] - inp[n];
      }
      for (int n=0; n < N - 1; n++) {
        if (maxdiff > inp[n])         sum2=sum2 + inp[n];
 else         sum2=sum2 + maxdiff;
      }
      out.println(""Case #"" + i + "": ""+ sum1+ "" ""+ sum2);
      System.out.println(sum1);
      System.out.println(sum2);
    }
    out.close();
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000873,"public static void main(String[] args) throws Exception {
  Scanner reader=new Scanner(System.in);
  out=new PrintWriter(new File(""a.out""));
  int times=reader.nextInt();
  for (int t=1; t <= times; t++) {
    int n=reader.nextInt();
    int[] v=new int[n];
    int a=0, b=0;
    int rate=0;
    for (int i=0; i < n; i++) {
      v[i]=reader.nextInt();
      if (i > 0)       a+=Math.max(0,v[i - 1] - v[i]);
      if (i > 0)       rate=Math.max(rate,v[i - 1] - v[i]);
    }
    for (int i=0; i < n - 1; i++)     b+=Math.min(rate,v[i]);
    String msg=""Case #"" + t + "": ""+ a+ "" ""+ b;
    out.println(msg);
    System.out.println(msg);
  }
  out.close();
}
"
30000874,"public static void main(String[] args){
  MushroomMonster myClass=new MushroomMonster();
  try {
    myClass.in=new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
    myClass.writer=new FileWriter(""the-file-name.txt"");
    int T=myClass.in.nextInt();
    for (int i=1; i <= T; i++) {
      int N=myClass.in.nextInt();
      long[] allMs=new long[N];
      long maxRate=0;
      long diffTotal=0;
      long diff=0;
      allMs[0]=myClass.in.nextInt();
      for (int j=1; j < N; j++) {
        allMs[j]=myClass.in.nextInt();
        diff=allMs[j - 1] - allMs[j];
        if (diff > maxRate) {
          maxRate=diff;
        }
        if (diff > 0) {
          diffTotal+=diff;
        }
      }
      long method2=0;
      for (int j=1; j < allMs.length; j++) {
        diff=allMs[j - 1] - allMs[j];
        if (allMs[j - 1] < maxRate) {
          method2+=allMs[j - 1];
        }
 else {
          method2+=maxRate;
        }
      }
      StringBuilder s=new StringBuilder();
      s.append(""Case #"");
      s.append(i);
      s.append("": "");
      s.append(diffTotal);
      s.append("" "");
      s.append(method2);
      s.append(""\n"");
      myClass.writer.write(s.toString());
    }
    myClass.writer.close();
  }
 catch (  IOException e) {
  }
}
"
30000875,"public static void main(String[] args) throws Exception {
  String output="""";
  Scanner input=new Scanner(new FileReader(""./A-large.in""));
  int numCases=input.nextInt();
  for (int caseNum=1; caseNum <= numCases; caseNum++) {
    int N=input.nextInt();
    long[] Ms=new long[N];
    long[] diffs=new long[N - 1];
    for (int i=0; i < N; i++) {
      Ms[i]=input.nextInt();
    }
    for (int i=0; i < N - 1; i++) {
      diffs[i]=Ms[i] - Ms[i + 1];
    }
    long y=0, maxZ=0, z=0;
    for (    long diff : diffs) {
      if (diff > 0) {
        y+=diff;
      }
      if (maxZ < diff) {
        maxZ=diff;
      }
    }
    for (int i=0; i < N - 1; i++) {
      if (Ms[i] <= maxZ)       z+=Ms[i];
 else       z+=maxZ;
    }
    output+=String.format(""Case #%d: %d %d\n"",caseNum,y,z);
  }
  input.close();
  try (BufferedWriter bw=new BufferedWriter(new FileWriter(""./A-large.out""))){
    bw.write(output);
  }
 }
"
30000876,"public static void main(String[] args){
  String results="""";
  Scanner input=null;
  try {
    input=new Scanner(new File(""/home/lasantha/Downloads/A-large.in""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  int T=0, N=0;
  int y=0;
  int z=0;
  int rate=0;
  int temprate=0;
  T=input.nextInt();
  for (int i=0; i < T; i++) {
    N=input.nextInt();
    int[] data=new int[N];
    for (int j=0; j < N; j++) {
      data[j]=input.nextInt();
    }
    y=0;
    z=0;
    rate=0;
    temprate=0;
    for (int j=0; j < N - 1; j++) {
      if (data[j] > data[j + 1]) {
        y+=data[j] - data[j + 1];
        temprate=(data[j] - data[j + 1]);
        if (temprate > rate) {
          rate=temprate;
        }
      }
    }
    for (int j=0; j < N - 1; j++) {
      if (data[j] - rate < 0) {
        z+=data[j];
      }
 else {
        z+=rate;
      }
    }
    results+=""Case #"" + (i + 1) + "": ""+ y+ "" ""+ z+ ""\n"";
  }
  System.out.println(results);
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(""output.txt""));
    writer.write(results);
    writer.close();
    System.out.println(""Done"");
  }
 catch (  IOException e) {
  }
}
"
30000877,"public static void main(String[] args){
  Scanner sc;
  try {
    sc=new Scanner(new File(""D://Java WS//GoogleCodeJam//src//A-large.in""));
    File outputA1Large=new File(""D://Java WS//GoogleCodeJam//src//A1Large.txt"");
    PrintWriter pw=new PrintWriter(outputA1Large);
    int testCases=sc.nextInt();
    for (int cases=0; cases < testCases; cases++) {
      int arrSize=sc.nextInt();
      int arr[]=new int[arrSize];
      for (int i=0; i < arrSize; i++) {
        arr[i]=sc.nextInt();
      }
      int sum=0;
      int sum2=0;
      int maxDiff=0;
      for (int i=1; i < arrSize; i++) {
        if (arr[i - 1] > arr[i]) {
          int diff=arr[i - 1] - arr[i];
          sum+=diff;
          if (diff > maxDiff) {
            maxDiff=diff;
          }
        }
      }
      for (int i=0; i < arrSize - 1; i++) {
        if (arr[i] <= maxDiff)         sum2+=arr[i];
 else         sum2+=maxDiff;
      }
      System.out.printf(""Case #%d: %d %d\n"",cases + 1,sum,sum2);
      pw.println(""Case #"" + (cases + 1) + "": ""+ sum+ "" ""+ sum2);
    }
    pw.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30000878,"public static void main(String[] args){
  Main r=new Main();
  final int cn=r.sc.nextInt();
  r.sc.nextLine();
  for (int ci=1; ci <= cn; ci++) {
    r.n=r.sc.nextInt();
    r.sc.nextLine();
    r.a=new int[r.n];
    for (int i=0; i < r.n; i++) {
      r.a[i]=r.sc.nextInt();
    }
    r.sc.nextLine();
    System.out.printf(""Case #%d: "",ci);
    int sumrd=0;
    int maxrd=0;
    for (int i=1; i < r.n; i++) {
      if (r.a[i] < r.a[i - 1]) {
        int rd=r.a[i - 1] - r.a[i];
        sumrd+=rd;
        if (maxrd < rd) {
          maxrd=rd;
        }
      }
    }
    int sum2=0;
    for (int i=0; i < r.n - 1; i++) {
      int p=r.a[i];
      if (p < maxrd) {
        sum2+=p;
      }
 else {
        sum2+=maxrd;
      }
    }
    System.out.println(sumrd + "" "" + sum2);
  }
}
"
30000879,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(System.in);
  int test=sc.nextInt();
  for (int t=1; t <= test; t++) {
    int n=sc.nextInt();
    int[] a=new int[n];
    for (int i=0; i < n; i++) {
      a[i]=sc.nextInt();
    }
    int check1=0;
    int maxDiff=0;
    for (int i=1; i < n; i++) {
      if (a[i] < a[i - 1])       check1+=a[i - 1] - a[i];
      if ((a[i - 1] - a[i]) > maxDiff) {
        maxDiff=a[i - 1] - a[i];
      }
    }
    int check2=0;
    for (int i=0; i < (n - 1); i++) {
      if (a[i] <= maxDiff) {
        check2+=a[i];
      }
 else       check2+=maxDiff;
    }
    System.out.println(""case #"" + t + "": ""+ check1+ "" ""+ check2);
  }
}
"
30000880,"public static void main(String[] args){
  MashroomMonster mM=new MashroomMonster();
  try {
    BufferedReader br=new BufferedReader(new FileReader(""A-small-attempt0.in""));
    BufferedWriter out=new BufferedWriter(new FileWriter(""output.txt""));
    String s;
    if ((s=br.readLine()) != null) {
      int noLines=Integer.parseInt(s);
      if (noLines != 0) {
        for (int index=0; index < noLines; index++) {
          if ((s=br.readLine()) != null) {
            String outputString=""Case #"" + (index + 1) + "": "";
            String[] tokenizer=s.trim().split("" "");
            if (tokenizer.length == 1) {
              if ((s=br.readLine()) != null) {
                tokenizer=s.trim().split("" "");
                int[] inputArr=new int[tokenizer.length];
                for (int j=0; j < tokenizer.length; j++) {
                  inputArr[j]=Integer.parseInt(tokenizer[j]);
                }
                int retrnNumber=0;
                for (int i=1; i < inputArr.length; i++) {
                  if (inputArr[i - 1] > inputArr[i]) {
                    retrnNumber+=inputArr[i - 1] - inputArr[i];
                  }
                }
                int output1=retrnNumber;
                int maxDifference=0;
                for (int i=1; i < inputArr.length; i++) {
                  if (inputArr[i - 1] > inputArr[i] && inputArr[i - 1] - inputArr[i] > maxDifference) {
                    maxDifference=inputArr[i - 1] - inputArr[i];
                  }
                }
                int eatCount=0;
                for (int i=0; i < inputArr.length - 1; i++) {
                  if (inputArr[i] < maxDifference)                   eatCount+=inputArr[i];
 else                   eatCount+=maxDifference;
                }
                int output2=eatCount;
                outputString+=output1 + "" "" + output2;
                System.out.println(outputString);
                out.write(outputString);
                out.newLine();
              }
            }
          }
        }
      }
    }
    out.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000881,"public static void main(String[] args){
  try {
    Scanner scanner=new Scanner(new File(""src/MushroomMonster/A-large.in""));
    PrintWriter writer=new PrintWriter(new File(""src/MushroomMonster/result.txt""));
    int caseCnt=scanner.nextInt();
    for (int i=0; i < caseCnt; i++) {
      int mushRoomCnt=scanner.nextInt();
      int firstCnt=0;
      int secondCnt=0;
      int firstNum=scanner.nextInt();
      int[] nums=new int[mushRoomCnt];
      nums[0]=firstNum;
      int rate=0;
      for (int j=1; j < mushRoomCnt; j++) {
        int secondNum=scanner.nextInt();
        nums[j]=secondNum;
        if (firstNum >= secondNum) {
          firstCnt+=firstNum - secondNum;
          rate=Math.max(firstNum - secondNum,rate);
        }
        firstNum=secondNum;
      }
      for (int j=0; j < mushRoomCnt - 1; j++) {
        secondCnt+=Math.min(rate,nums[j]);
      }
      writer.println(""Case #"" + (i + 1) + "": ""+ firstCnt+ "" ""+ secondCnt);
    }
    writer.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30000882,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws FileNotFoundException {
  Scanner input=new Scanner(new File(""input.in""));
  PrintWriter out=new PrintWriter(new File(""out""));
  int tc;
  tc=input.nextInt();
  for (int b=1; b <= tc; b++) {
    int e, d=0, x=0, y=0, z=0;
    e=input.nextInt();
    int m[]=new int[e];
    for (int c=0; c < e; c++) {
      m[c]=input.nextInt();
    }
    for (int c=1; c < e; c++) {
      d=m[c - 1] - m[c];
      if (d >= y) {
        y=d;
      }
      if (d >= 0) {
        x+=d;
      }
    }
    for (int c=0; c < e - 1; c++) {
      if (m[c] <= y) {
        z+=m[c];
      }
      if (m[c] > y) {
        z+=y;
      }
    }
    out.printf(""Case #%d: %d %d\n"",b,x,z);
  }
  out.close();
}
"
30000883,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new File(""ProblemA.txt.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(""ProblemA.txt.out"")));
  int T=sc.nextInt();
  sc.nextLine();
  for (int i=0; i < T; i++) {
    int n=sc.nextInt();
    int m[]=new int[n];
    int minMethodA=0;
    int minMethodB=0;
    int maxDiff=0;
    for (int idx=0; idx < n; idx++) {
      m[idx]=sc.nextInt();
      if (idx != 0) {
        if (m[idx] < m[idx - 1]) {
          minMethodA+=(m[idx - 1] - m[idx]);
        }
        if ((m[idx - 1] - m[idx]) > maxDiff) {
          maxDiff=(m[idx - 1] - m[idx]);
        }
      }
    }
    for (int idx=0; idx < n - 1; idx++) {
      if (m[idx] <= maxDiff) {
        minMethodB+=m[idx];
      }
 else {
        minMethodB+=maxDiff;
      }
    }
    bw.write(""Case #"" + (i + 1) + "": ""+ minMethodA+ "" ""+ minMethodB+ ""\n"");
  }
  bw.close();
  sc.close();
}
"
30000884,"public static void main(String args[]) throws Exception {
  MushroomMonster r=new MushroomMonster();
  r.out=new PrintStream(new FileOutputStream(MushroomMonster.OUT));
  int t=r.sc.nextInt();
  for (int tc=1; tc <= t; tc++) {
    System.out.println(""Test Case "" + tc + ""..."");
    int N=r.sc.nextInt();
    int[] mi=new int[N];
    for (int i=0; i < N; i++) {
      mi[i]=r.sc.nextInt();
    }
    r.out.print(""Case #"" + tc + "": "");
    long eat1=0, eat2=0;
    long maxDiff=0;
    for (int i=1; i < mi.length; i++) {
      int diff=mi[i - 1] - mi[i];
      eat1+=Math.max(diff,0);
      maxDiff=Math.max(diff,maxDiff);
    }
    for (int i=1; i < mi.length; i++) {
      eat2+=Math.min(maxDiff,mi[i - 1]);
    }
    r.out.print(eat1 + "" "");
    r.out.println(eat2);
  }
  r.sc.close();
  r.out.close();
}
"
30000885,"public static void main(String[] args) throws IOException {
  playground r=new playground();
  File file=new File(""A-large.in"");
  File outFile=new File(""A-large.out"");
  BufferedReader br=new BufferedReader(new FileReader(file));
  BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
  int testCases=Integer.parseInt(br.readLine());
  for (int t=1; t <= testCases; t++) {
    br.readLine();
    String[] s=br.readLine().split("" "");
    int[] igr=new int[s.length];
    for (int i=0; i < s.length; i++) {
      igr[i]=Integer.parseInt(s[i]);
    }
    int[] pieces=igr;
    int sum=0;
    for (int i=1; i < pieces.length; i++) {
      if (pieces[i] >= pieces[i - 1]) {
        continue;
      }
 else {
        sum+=pieces[i - 1] - pieces[i];
      }
    }
    int solution1=sum;
    int sum1=0;
    int max=0;
    for (int i=0; i < pieces.length - 1; i++) {
      max=(int)Math.max(pieces[i] - pieces[i + 1],max);
    }
    for (int i=0; i < pieces.length - 1; i++) {
      sum1+=(int)Math.min(max,pieces[i]);
    }
    int solution2=sum1;
    bw.write(""Case #"" + t + "": ""+ solution1+ "" ""+ solution2+ ""\r"");
  }
  br.close();
  bw.close();
}
"
30000886,"public static void main(String[] args){
  Scanner scanIn=new Scanner(System.in);
  int T=scanIn.nextInt();
  for (int i=0; i < T; ++i) {
    Jam2015_1AC inst=new Jam2015_1AC();
    int n=scanIn.nextInt();
    int[] pList=new int[n];
    for (int j=0; j < n; ++j)     pList[j]=scanIn.nextInt();
    int[] ret=new int[n - 1];
    for (int i1=0; i1 < n - 1; ++i1)     ret[i1]=pList[i1 + 1] - pList[i1];
    int[] tmp=ret;
    int ret1=0;
    for (    int item : tmp) {
      ret1+=(item < 0) ? -item : 0;
    }
    inst.ret1=ret1;
    int speed=0;
    for (    int item2 : tmp) {
      speed=(speed > item2) ? item2 : speed;
    }
    speed=-speed;
    int ret2=0;
    for (int i1=0; i1 < n - 1; ++i1) {
      int item1=pList[i1];
      int tmp1=speed;
      ret2+=(item1 < tmp1) ? item1 : tmp1;
    }
    inst.ret2=ret2;
    System.out.println(""Case #"" + (i + 1) + "": ""+ inst.ret1+ "" ""+ inst.ret2);
  }
  scanIn.close();
}
"
30000887,"public static void main(String[] args){
  final long startTime=System.currentTimeMillis();
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=new BufferedReader(new FileReader(""./input/A-large-mushroom.in""));
    writer=new BufferedWriter(new FileWriter(""./output/mushroom-large.out"",false));
    final int caseCount=Integer.parseInt(reader.readLine().toString());
    System.out.println(""Case count: "" + caseCount);
    for (int k=0; k < caseCount; k++) {
      final int size=Integer.parseInt(reader.readLine());
      final int[] shrooms=new int[size];
      final String[] shroomsStr=reader.readLine().split("" "");
      int rate=0;
      for (int i=0; i < size - 1; i++) {
        shrooms[i]=Integer.parseInt(shroomsStr[i]);
        shrooms[i + 1]=Integer.parseInt(shroomsStr[i + 1]);
        final int r=shrooms[i] - shrooms[i + 1];
        if (r > rate) {
          rate=r;
        }
      }
      int y=0, z=0;
      for (int i=0; i < size - 1; i++) {
        final int curr=shrooms[i];
        final int next=shrooms[i + 1];
        final int diff=curr - next;
        if (diff > 0) {
          y+=diff;
        }
        if (rate > 0) {
          z+=Math.min(curr,rate);
        }
      }
      System.out.println(Arrays.toString(shrooms) + "": "" + y+ "" ""+ z);
      writer.write(""Case #"" + (k + 1) + "": ""+ y+ "" ""+ z+ ""\n"");
    }
    reader.close();
    writer.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  final IOException e) {
    e.printStackTrace();
  }
  System.out.println(""Finished in: "" + (int)(System.currentTimeMillis() - startTime) / 1000 + ""s"");
}
"
30000888,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int numTestCases=scanner.nextInt();
  int numTimes;
  int[] mushrooms;
  int maxMushroomsForCase2;
  long mushroomsCase1;
  long mushroomsCase2;
  for (int casesIterator=0; casesIterator < numTestCases; casesIterator++) {
    numTimes=scanner.nextInt();
    mushrooms=new int[numTimes];
    maxMushroomsForCase2=0;
    mushroomsCase1=0;
    mushroomsCase2=0;
    mushrooms[0]=scanner.nextInt();
    for (int timesIterator=1; timesIterator < numTimes; timesIterator++) {
      mushrooms[timesIterator]=scanner.nextInt();
      if (mushrooms[timesIterator] < mushrooms[timesIterator - 1]) {
        mushroomsCase1+=mushrooms[timesIterator - 1] - mushrooms[timesIterator];
        maxMushroomsForCase2=Math.max(maxMushroomsForCase2,mushrooms[timesIterator - 1] - mushrooms[timesIterator]);
      }
    }
    for (int timesIterator=0; timesIterator < numTimes - 1; timesIterator++) {
      mushroomsCase2+=Math.min(mushrooms[timesIterator],maxMushroomsForCase2);
    }
    System.out.println(""Case #"" + (casesIterator + 1) + "": ""+ mushroomsCase1+ "" ""+ mushroomsCase2);
  }
}
"
30000889,"public static void main(String[] args) throws IOException {
  BufferedReader b=new BufferedReader(new FileReader(""in.txt""));
  PrintWriter out=new PrintWriter(""System.out"");
  long test=Long.parseLong(b.readLine());
  for (long i=0; i < test; i++) {
    int size=Integer.parseInt(b.readLine());
    String s=b.readLine();
    String st[]=s.split(""\\s+"");
    Long array[]=new Long[size];
    for (int k=0; k < size; k++) {
      array[(int)k]=Long.parseLong(st[k]);
    }
    long ans=0;
    for (int k=0; k < size - 1; k++) {
      if (array[k] - array[k + 1] > 0) {
        ans=ans + (array[k] - array[k + 1]);
      }
    }
    long constant=0;
    long max=0;
    for (int k=0; k < size - 1; k++) {
      if (array[k] - array[k + 1] > 0) {
        if ((array[k] - array[k + 1]) > max) {
          max=(array[k] - array[k + 1]);
        }
      }
    }
    long ans2=0;
    for (int k=0; k < size - 1; k++) {
      if (array[k] > max) {
        ans2=ans2 + max;
      }
 else {
        ans2=ans2 + (array[k]);
      }
    }
    out.println(""Case #"" + (i + 1) + "": ""+ ans+ "" ""+ ans2);
  }
  out.flush();
}
"
30000890,"public static void main(String[] args) throws IOException {
  Scanner scan=new Scanner(new File(""input.txt""));
  FileWriter fw=new FileWriter(""output.txt"");
  ArrayList<String> output=new ArrayList<String>();
  int test_cases=scan.nextInt();
  for (int i=0; i < test_cases; i++) {
    int n=scan.nextInt();
    int[] middle=new int[n];
    int eaten_any_time=0;
    int eaten_constant=0;
    int eating_rate=0;
    int eaten=0;
    int max_diff=0;
    middle[0]=scan.nextInt();
    eating_rate=middle[0];
    eaten_constant=0;
    if (n == 2) {
      middle[1]=scan.nextInt();
      if (middle[1] <= middle[0]) {
        eaten_constant=middle[0] - middle[1];
        eaten_any_time=middle[0] - middle[1];
      }
    }
 else {
      for (int j=1; j < n; j++) {
        middle[j]=scan.nextInt();
        if (middle[j] >= middle[j - 1])         eaten=0;
 else         eaten=middle[j - 1] - middle[j];
        if (middle[j] < middle[j - 1])         eaten_any_time+=eaten;
        int diff=difference(middle[j - 1],middle[j]);
        if (max_diff < diff)         max_diff=diff;
      }
      for (int j=0; j < n - 1; j++) {
        if (middle[j] <= max_diff)         eaten_constant+=middle[j];
 else         eaten_constant+=max_diff;
      }
    }
    output.add(""Case #"" + (i + 1) + "": ""+ eaten_any_time+ "" ""+ eaten_constant);
  }
  for (  String s : output) {
    fw.write(s + ""\n"");
  }
  fw.close();
}
"
30000891,"public static void main(String[] args) throws Exception {
  BufferedReader in=null;
  BufferedWriter out=null;
  try {
    in=new BufferedReader(new InputStreamReader(new FileInputStream(""A-large.in"")));
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""A-large.out"")));
    int testCount=Integer.parseInt(in.readLine());
    for (int t=1; t <= testCount; t++) {
      in.readLine();
      String[] v=in.readLine().split("" "");
      long[] mushrooms=new long[v.length];
      for (int i=0; i < v.length; i++) {
        mushrooms[i]=Long.parseLong(v[i]);
      }
      long first=0;
      for (int i=0; i < mushrooms.length - 1; i++) {
        if (mushrooms[i] > mushrooms[i + 1]) {
          first+=mushrooms[i] - mushrooms[i + 1];
        }
      }
      long speed=0;
      for (int i=0; i < mushrooms.length - 1; i++) {
        if (mushrooms[i + 1] < mushrooms[i]) {
          speed=Math.max(speed,(mushrooms[i] - mushrooms[i + 1]));
        }
      }
      long second=0;
      if (speed != 0) {
        for (int i=1; i < mushrooms.length; i++) {
          second+=Math.min(mushrooms[i - 1],speed);
        }
      }
      out.write(""Case #"" + t + "": ""+ first+ "" ""+ second);
      out.newLine();
    }
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ignored) {
      }
    }
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException ignored) {
      }
    }
  }
}
"
30000892,"public static void main(String args[]){
  File f=new File(args[0]);
  try {
    Scanner s=new Scanner(f);
    int time=Integer.parseInt(s.next());
    PrintWriter writer=new PrintWriter(""output.txt"",""UTF-8"");
    for (int in=1; in <= time; in++) {
      int timeslots=Integer.parseInt(s.next());
      int[] mushrooms=new int[timeslots];
      for (int m=0; m < timeslots; m++) {
        mushrooms[m]=Integer.parseInt(s.next());
      }
      int eat=0;
      int prev=mushrooms[0];
      for (      int i : mushrooms) {
        if (i >= prev) {
          prev=i;
        }
 else {
          eat+=(prev - i);
          prev=i;
        }
      }
      int m1=eat;
      int interval=0;
      int eat1=0;
      int prev1=mushrooms[0];
      for (int i2=1; i2 < mushrooms.length; i2++) {
        if (mushrooms[i2] < prev1) {
          if (prev1 - mushrooms[i2] > interval) {
            interval=prev1 - mushrooms[i2];
          }
        }
        prev1=mushrooms[i2];
      }
      for (int i1=0; i1 < mushrooms.length - 1; i1++) {
        if (mushrooms[i1] <= interval) {
          eat1+=mushrooms[i1];
        }
 else {
          eat1+=interval;
        }
      }
      int m2=eat1;
      System.out.println(""Finished: "" + in);
      writer.println(""Case #"" + in + "": ""+ m1+ "" ""+ m2);
    }
    writer.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000893,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""resources/googleCodeJam2015/round1a/mushroomMonster/A-large.in""));
  PrintWriter writer=new PrintWriter(""resources/googleCodeJam2015/round1a/mushroomMonster/A-large.out"",""UTF-8"");
  int numofTestCases=Integer.valueOf(br.readLine());
  int[] answer1=new int[numofTestCases];
  for (int i=0; i < numofTestCases; i++) {
    String testCase=br.readLine();
    StringTokenizer st=new StringTokenizer(br.readLine());
    int totalA=0;
    int currentNumMushroom=Integer.parseInt(st.nextToken());
    while (st.hasMoreTokens()) {
      int nextMushroom=Integer.parseInt(st.nextToken());
      if (nextMushroom < currentNumMushroom) {
        totalA+=currentNumMushroom - nextMushroom;
      }
      currentNumMushroom=nextMushroom;
    }
    answer1[i]=totalA;
  }
  br=new BufferedReader(new FileReader(""resources/googleCodeJam2015/round1a/mushroomMonster/A-large.in""));
  numofTestCases=Integer.valueOf(br.readLine());
  for (int i=0; i < numofTestCases; i++) {
    String testCase=br.readLine();
    String[] array=br.readLine().split(""\\s+"");
    int maxDiff=0;
    for (int j=0; j < array.length - 1; j++) {
      if ((Integer.parseInt(array[j]) - Integer.parseInt(array[j + 1])) > maxDiff) {
        maxDiff=Integer.parseInt(array[j]) - Integer.parseInt(array[j + 1]);
      }
    }
    int rate=maxDiff;
    int answer2=0;
    for (int j=0; j < array.length - 1; j++) {
      answer2+=Math.min(rate,Integer.parseInt(array[j]));
    }
    int testCaseNumber=i + 1;
    writer.println(""Case #"" + testCaseNumber + "": ""+ answer1[testCaseNumber - 1]+ "" ""+ answer2);
  }
  writer.close();
  br.close();
}
"
30000894,"public static void main(String[] args) throws Exception {
  Locale.setDefault(Locale.US);
  String file=""a"";
  System.setOut(new PrintStream(file + "".out""));
  String inFile=file + "".in"";
  scan=new Scanner(new File(inFile));
  int cases=scan.nextInt();
  for (caseNumber=1; caseNumber <= cases; ++caseNumber) {
    System.out.printf(""Case #%s: "",caseNumber);
    A r=new A();
    int n=A.scan.nextInt();
    int[] m=new int[n];
    for (int i=0; i < n; ++i) {
      m[i]=A.scan.nextInt();
    }
    int res1=0;
    for (int i=1; i < n; ++i) {
      res1+=Math.max(m[i - 1] - m[i],0);
    }
    int res2=0;
    int max=0;
    for (int i=1; i < n; ++i) {
      int diff=Math.max(m[i - 1] - m[i],0);
      max=Math.max(max,diff);
    }
    for (int i=0; i < n - 1; ++i) {
      res2+=Math.min(m[i],max);
    }
    System.out.printf(""%d %d\n"",res1,res2);
    System.out.flush();
  }
  scan.close();
}
"
30000895,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int T=scanner.nextInt();
  for (int tt=1; tt <= T; tt++) {
    int N=scanner.nextInt();
    int[] a=new int[N];
    for (int i=0; i < N; i++)     a[i]=scanner.nextInt();
    int f=0;
    int s=0;
    int max=0;
    for (int i=1; i < N; i++) {
      int v=a[i - 1] - a[i];
      if (v > 0)       f+=v;
      max=Math.max(max,v);
    }
    for (int i=0; i < N - 1; i++) {
      int min=Math.min(a[i],max);
      s+=min;
    }
    System.out.println(""Case #"" + tt + "": ""+ f+ "" ""+ s);
  }
}
"
30000896,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new File(""MushroomMonster.in""));
  BufferedWriter fw=new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
  int T=sc.nextInt();
  sc.nextLine();
  for (int caseNum=1; caseNum <= T; caseNum++) {
    int x=sc.nextInt();
    ArrayList<Integer> timeIntervals=new ArrayList<Integer>();
    for (int i=0; i < x; i++)     timeIntervals.add(sc.nextInt());
    int finalCase1Amount=0;
    int previous=timeIntervals.get(0);
    int next=0;
    int maximumDifference=0;
    int difference=0;
    for (int i=1; i < timeIntervals.size(); i++) {
      next=timeIntervals.get(i);
      difference=previous - next;
      if (difference > 0) {
        finalCase1Amount+=difference;
        if (difference > maximumDifference)         maximumDifference=difference;
      }
      previous=timeIntervals.get(i);
    }
    int finalCase2Amount=0;
    int total=0;
    for (int i=0; i < timeIntervals.size() - 1; i++) {
      total=timeIntervals.get(i);
      if (total - maximumDifference <= 0) {
        finalCase2Amount+=total;
        total=0;
      }
 else {
        finalCase2Amount+=maximumDifference;
        total-=maximumDifference;
      }
    }
    fw.write(""Case #"" + caseNum + "": ""+ finalCase1Amount+ "" ""+ finalCase2Amount+ ""\n"");
  }
  fw.flush();
  fw.close();
  sc.close();
}
"
30000897,"public MushroomMaster(Scanner sr){
  n=sr.nextInt();
  m=new long[n];
  for (int i=0; i < n; ++i) {
    m[i]=sr.nextInt();
  }
}
"
30000898,"public static void main(String[] args) throws IOException {
  BufferedReader r=new BufferedReader(new FileReader(args[0]));
  int T=Integer.parseInt(r.readLine());
  for (int i=0; i < T; i++) {
    r.readLine();
    String[] split=r.readLine().split("" "");
    int[] input=new int[split.length];
    for (int j=0; j < split.length; j++)     input[j]=Integer.parseInt(split[j]);
    int total=0;
    for (int i1=0; i1 < input.length - 1; i1++)     if (input[i1 + 1] < input[i1])     total+=input[i1] - input[i1 + 1];
    int res1=total;
    int minRate=0;
    for (int i2=0; i2 < input.length - 1; i2++)     if (input[i2 + 1] < input[i2])     minRate=Math.max(minRate,input[i2] - input[i2 + 1]);
    int minEaten=0;
    for (int i1=0; i1 < input.length - 1; i1++)     if (input[i1] < minRate)     minEaten+=input[i1];
 else     minEaten+=minRate;
    int res2=minEaten;
    System.out.println(""Case #"" + (i + 1) + "": ""+ res1+ "" ""+ res2);
  }
}
"
30000899,"public static void main(String[] args) throws IOException {
  FileInputStream in=new FileInputStream(""D:/works/java/G1A/bin/A-large (1).in"");
  Scanner s=new Scanner(in);
  PrintWriter out=new PrintWriter(new FileWriter(""D:/works/java/G1A/bin/3large.out""));
  int n=Integer.parseInt(s.next());
  for (int i=1; i <= n; i++) {
    int t=s.nextInt();
    int a[]=new int[t];
    int sum=0, sum2=0, fsum=0, r=0;
    for (int j=0; j < a.length; j++) {
      a[j]=s.nextInt();
      if (j > 0 && a[j] < a[j - 1])       sum+=a[j - 1] - a[j];
      if (j > 0 && r < a[j - 1] - a[j] && a[j] < a[j - 1])       r=a[j - 1] - a[j];
    }
    for (int j=0; j < a.length - 1; j++) {
      sum2+=a[j];
      if (a[j] >= r) {
        fsum+=r;
        sum2-=r;
      }
 else {
        fsum+=a[j];
        sum2=0;
      }
    }
    out.println(""Case #"" + i + "": ""+ sum+ "" ""+ fsum);
    System.out.println(""Case #"" + i + "": ""+ sum+ "" ""+ fsum);
  }
  out.close();
}
"
30000900,"public static void main(String[] args){
  try {
    File f=new File(""output_exo1_large"");
    FileWriter fw=new FileWriter(f);
    Scanner scan=new Scanner(System.in);
    try {
      scan=new Scanner(new FileReader(""A-large.in""));
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
      scan.close();
      return;
    }
    int T=scan.nextInt();
    System.out.println(""T="" + T);
    int N;
    for (int test=1; test <= T; test++) {
      N=scan.nextInt();
      int[] tab=new int[N];
      for (int k=0; k < N; k++) {
        tab[k]=scan.nextInt();
      }
      int rep1=0;
      int rep2=0;
      int maxdiff=0;
      int aux;
      for (int k=0; k < N - 1; k++) {
        aux=tab[k] - tab[k + 1];
        if (tab[k] > tab[k + 1]) {
          rep1+=(tab[k] - tab[k + 1]);
        }
        if (aux > maxdiff) {
          maxdiff=aux;
        }
      }
      for (int k=0; k < N - 1; k++) {
        if (tab[k] < maxdiff) {
          rep2+=tab[k];
        }
 else {
          rep2+=maxdiff;
        }
      }
      fw.write(""Case #"" + test + "": ""+ rep1+ "" ""+ rep2+ ""\n"");
    }
    fw.close();
    System.out.println(""FINI!! exo1"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""erreur écriture solution"");
  }
}
"
30000901,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new File(""A.txt""));
  PrintWriter out=new PrintWriter(new File(""A.out""));
  int cases=sc.nextInt();
  for (int t=1; t <= cases; t++) {
    long ans1=0;
    int N=sc.nextInt();
    long[] array=new long[N];
    for (int a=0; a < N; a++)     array[a]=sc.nextLong();
    long largest=0;
    long increase=0;
    for (int a=1; a < N; a++) {
      if (array[a - 1] > array[a]) {
        ans1+=array[a - 1] - array[a];
        largest=Math.max(largest,array[a - 1] - array[a]);
        increase=Math.max(increase,array[a - 1] - array[a]);
      }
    }
    long ans2=0;
    long cur=array[0];
    for (int a=1; a < N; a++) {
      ans2+=Math.min(cur,increase);
      cur-=Math.min(cur,increase);
      cur=array[a];
    }
    String answer=String.format(""Case #%d: %d %d"",t,ans1,ans2);
    System.out.println(answer);
    out.println(answer);
  }
  out.close();
}
"
30000902,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(""A-large.out"");
  int t=Integer.parseInt(br.readLine());
  for (int test=0; test < t; test++) {
    int n=Integer.parseInt(br.readLine());
    int[] mushrooms=new int[n];
    StringTokenizer st=new StringTokenizer(br.readLine());
    for (int i=0; i < n; i++) {
      mushrooms[i]=Integer.parseInt(st.nextToken());
    }
    int cur=0;
    for (int i=1; i < mushrooms.length; i++) {
      cur+=Math.max(0,mushrooms[i - 1] - mushrooms[i]);
    }
    int m1=cur;
    int maxDiff=0;
    for (int i=1; i < mushrooms.length; i++) {
      maxDiff=Math.max(maxDiff,mushrooms[i - 1] - mushrooms[i]);
    }
    int r=0;
    for (int i=0; i < mushrooms.length - 1; i++) {
      r+=Math.min(maxDiff,mushrooms[i]);
    }
    int m2=r;
    pw.printf(""Case #%d: %d %d%n"",test + 1,m1,m2);
  }
  br.close();
  pw.close();
}
"
30000903,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(""mushroom.in""));
  PrintWriter out=new PrintWriter(new FileWriter(""C:/Users/David/Desktop/mushroom.txt""));
  StringTokenizer t=new StringTokenizer(f.readLine());
  int testCases=Integer.parseInt(t.nextToken());
  for (int i=1; i <= testCases; i++) {
    t=new StringTokenizer(f.readLine());
    int N=Integer.parseInt(t.nextToken());
    int[] M=new int[N];
    t=new StringTokenizer(f.readLine());
    for (int j=0; j < N; j++)     M[j]=Integer.parseInt(t.nextToken());
    int method1=0;
    for (int j=1; j < N; j++)     if (M[j] < M[j - 1])     method1+=M[j - 1] - M[j];
    int delta_X_Per_Ten=0;
    for (int j=1; j < N; j++)     if (M[j] < M[j - 1] && M[j - 1] - M[j] > delta_X_Per_Ten)     delta_X_Per_Ten=M[j - 1] - M[j];
    int method2=0;
    for (int j=0; j < N - 1; j++)     method2+=Math.min(delta_X_Per_Ten,M[j]);
    String ans=""Case #"" + i + "": ""+ method1+ "" ""+ method2;
    out.println(ans);
  }
  out.close();
  f.close();
  System.exit(0);
}
"
30000904,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int noCase=sc.nextInt();
  for (int ind=1; ind <= noCase; ind++) {
    int M=sc.nextInt();
    long[] arr=new long[M];
    for (int i=0; i < M; i++)     arr[i]=sc.nextLong();
    long soln=0L;
    for (int i=0; i < arr.length - 1; i++)     if (arr[i] > arr[i + 1])     soln+=arr[i] - arr[i + 1];
    long m1=soln;
    long soln1=0L;
    long maxD=0L;
    for (int i=0; i < arr.length - 1; i++)     maxD=Math.max(arr[i] - arr[i + 1],maxD);
    for (int i=0; i < arr.length - 1; i++)     soln1+=Math.min(maxD,arr[i]);
    long m2=soln1;
    System.out.printf(""Case #%d: %d %d\n"",ind,m1,m2);
  }
}
"
30000905,"public static void main(String[] args) throws Exception {
  Scanner inScan=new Scanner(System.in);
  System.out.println(""Enter the filename"");
  String filename=inScan.nextLine();
  BufferedReader b=new BufferedReader(new FileReader(filename));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""out.txt"")));
  int numExamples=Integer.parseInt(b.readLine());
  for (int i=0; i < numExamples; i++) {
    int numIntervals=Integer.parseInt(b.readLine());
    int[] mushrooms=new int[numIntervals];
    String[] stuff=b.readLine().split("" "");
    for (int j=0; j < numIntervals; j++) {
      mushrooms[j]=Integer.parseInt(stuff[j]);
    }
    BigInteger sumOne=new BigInteger(""0"");
    ;
    int bigIndex=-1;
    int bigDiff=-1;
    for (int j=0; j < numIntervals - 1; j++) {
      if (mushrooms[j] > mushrooms[j + 1]) {
        int diff=mushrooms[j] - mushrooms[j + 1];
        sumOne=sumOne.add(new BigInteger(Integer.toString(diff)));
        if (diff > bigDiff) {
          bigDiff=diff;
          bigIndex=j;
        }
      }
    }
    BigInteger sumTwo=new BigInteger(""0"");
    if (bigDiff > -1) {
      for (int j=0; j < numIntervals - 1; j++) {
        if (mushrooms[j] >= bigDiff)         sumTwo=sumTwo.add(new BigInteger(Integer.toString(bigDiff)));
 else         sumTwo=sumTwo.add(new BigInteger(Integer.toString(mushrooms[j])));
      }
    }
    out.print(""Case #"" + (i + 1) + "": ""+ sumOne.toString()+ "" ""+ sumTwo.toString());
    if (i != numExamples - 1)     out.println();
    out.flush();
  }
  out.close();
}
"
30000906,"public static void main(String[] args){
  String input=BASE + PROBLEM + "".in"";
  String output=BASE + PROBLEM + "".out"";
  try {
    Scanner sc=new Scanner(new FileReader(input));
    PrintWriter pw=new PrintWriter(output);
    int mumCases=sc.nextInt();
    sc.nextLine();
    for (int caseNumber=0; caseNumber < mumCases; caseNumber++) {
      System.out.println(""Test case "" + (caseNumber + 1) + ""..."");
      pw.print(""Case #"" + (caseNumber + 1) + "": "");
      final int N=sc.nextInt();
      int[] mushrooms=new int[N];
      for (int i=0; i < N; i++) {
        mushrooms[i]=sc.nextInt();
      }
      int prev1=mushrooms[0];
      int result1=0;
      for (int i1=1; i1 < mushrooms.length; i1++) {
        if (mushrooms[i1] < prev1) {
          result1+=prev1 - mushrooms[i1];
        }
        prev1=mushrooms[i1];
      }
      int method1=result1;
      int prev=mushrooms[0];
      int maxDiff=0;
      for (int i=1; i < mushrooms.length; i++) {
        if (mushrooms[i] < prev) {
          int diff=prev - mushrooms[i];
          if (diff > maxDiff) {
            maxDiff=diff;
          }
        }
        prev=mushrooms[i];
      }
      int result=Math.min(maxDiff,mushrooms[0]);
      for (int i=1; i < mushrooms.length - 1; i++) {
        result+=Math.min(maxDiff,mushrooms[i]);
      }
      int method2=result;
      pw.print(method1 + "" "" + method2);
      pw.println();
    }
    pw.println();
    pw.flush();
    pw.close();
    sc.close();
  }
 catch (  FileNotFoundException ex) {
    Logger.getLogger(A.class.getName()).log(Level.SEVERE,null,ex);
  }
}
"
30000907,"public static void main(String[] args) throws Exception {
  long start=System.currentTimeMillis();
  String questionName=""A-large"";
  BufferedReader r=new BufferedReader(new FileReader(questionName + "".in""));
  PrintStream out=System.out;
  String file=questionName + "".out"";
  if (new File(file).exists()) {
    throw new RuntimeException(new File(file).getAbsolutePath() + "" Already exists"");
  }
  FileOutputStream fos=new FileOutputStream(new File(file),true);
  PrintStream printStream=new PrintStream(fos);
  out=printStream;
  int count=Integer.parseInt(r.readLine());
  for (int x=0; x < count; x++) {
    String answer="""";
    int N=Integer.parseInt(r.readLine());
    String[] nums=r.readLine().split("" "");
    int[] ret=new int[nums.length];
    for (int x1=0; x1 < nums.length; x1++) {
      ret[x1]=Integer.parseInt(nums[x1]);
    }
    int[] m=ret;
    int maxRate=0;
    int m2=0;
    int m1=0;
    for (int y=0; y < m.length; y++) {
      if (y != 0) {
        maxRate=Math.max(maxRate,m[y - 1] - m[y]);
      }
    }
    for (int y=0; y < m.length; y++) {
      if (y != 0) {
        int diff=m[y - 1] - m[y];
        if (m[y - 1] > 0) {
          if (m[y - 1] >= maxRate) {
            m2+=maxRate;
          }
 else           if (m[y - 1] < maxRate) {
            m2+=m[y - 1];
          }
        }
        if (diff >= 0) {
          m1+=diff;
        }
      }
    }
    answer="""" + m1 + "" ""+ m2;
    out.printf(""Case #%d: "",x + 1);
    out.print(answer);
    out.println();
  }
  long end=System.currentTimeMillis();
  System.out.printf(""Took: %d(ms)\n"",(end - start));
}
"
30000908,"public static void main(String[] args) throws IOException {
  File infile=new File(""small.txt"");
  FileInputStream fis=new FileInputStream(infile);
  DataInputStream inp=new DataInputStream(fis);
  PrintWriter out=new PrintWriter(""output.txt"");
  int t=Integer.parseInt(inp.readLine().trim());
  int i=0;
  long sum1=0, sum2=0;
  for (i=1; i <= t; i++) {
    int max=0;
    sum1=0;
    sum2=0;
    int y=Integer.parseInt(inp.readLine().trim());
    String s[]=inp.readLine().split("" "");
    int a[]=new int[y];
    int j=0;
    for (j=0; j < y; j++) {
      a[j]=Integer.parseInt(s[j]);
    }
    for (j=0; j < y - 1; j++) {
      if (a[j] > a[j + 1]) {
        sum1=sum1 + (a[j] - a[j + 1]);
      }
      if (a[j] - a[j + 1] > max)       max=a[j] - a[j + 1];
    }
    for (j=0; j < y - 1; j++) {
      if (a[j] > max)       sum2=sum2 + max;
 else       sum2=sum2 + a[j];
    }
    out.print(""Case #"" + i + "": ""+ sum1+ "" ""+ sum2);
    out.println("""");
  }
  inp.close();
  out.close();
}
"
30000909,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new FileInputStream(""D:\\Internet\\A-large.in""));
  PrintStream op=new PrintStream(""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    int n=sc.nextInt();
    int[] m=new int[n];
    int y=0, max=0;
    for (int i=0; i < n; i++) {
      m[i]=sc.nextInt();
      if (i > 0 && m[i] < m[i - 1]) {
        y+=m[i - 1] - m[i];
        max=Math.max(max,m[i - 1] - m[i]);
      }
    }
    int z=0;
    for (int i=1; i < n; i++)     z+=Math.min(max,m[i - 1]);
    op.println(""Case #"" + t + "": ""+ y+ "" ""+ z);
  }
  sc.close();
  op.close();
}
"
30000910,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""C:/users/abhishek/Desktop/input.txt""));
  FileWriter f=new FileWriter(""C:/users/abhishek/Desktop/output.txt"");
  String newLine=System.getProperty(""line.separator"");
  int t=Integer.parseInt(br.readLine());
  for (int test=1; test <= t; test++) {
    int n=Integer.parseInt(br.readLine());
    int array[]=new int[n];
    StringTokenizer st=new StringTokenizer(br.readLine());
    for (int i=0; i < n; i++)     array[i]=Integer.parseInt(st.nextToken());
    int ans=0;
    for (int i=0; i < n - 1; i++) {
      if (array[i] <= array[i + 1])       continue;
 else       ans+=array[i] - array[i + 1];
    }
    int min=-1;
    for (int i=0; i < n - 1; i++) {
      if (array[i] >= array[i + 1])       min=Math.max(min,array[i] - array[i + 1]);
    }
    if (min <= 0) {
      f.write(""Case #"" + test + "": ""+ ans+ "" ""+ ""0""+ newLine);
      continue;
    }
    int temp=0;
    for (int i=0; i < n - 1; i++) {
      temp+=Math.min(array[i],min);
    }
    f.write(""Case #"" + test + "": ""+ ans+ "" ""+ temp+ newLine);
  }
  f.close();
}
"
30000911,"public static void main(String args[]) throws Exception {
  BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
  int t=Integer.parseInt(bf.readLine());
  int inc=1;
  while (t-- > 0) {
    int n=Integer.parseInt(bf.readLine());
    String str=bf.readLine();
    String s[]=str.split(""\\s+"");
    long com1=0, com2=0;
    for (int i=1; i < s.length; i++) {
      int p=Integer.parseInt(s[i - 1]) - Integer.parseInt(s[i]);
      if (p > 0) {
        com1=com1 + p;
      }
      if (i == (s.length - 1)) {
        if (p > 0)         com2=com2 + p;
      }
 else {
        com2=com2 + Integer.parseInt(s[i - 1]);
      }
    }
    System.out.println(""Case #"" + inc + "": ""+ com1+ "" ""+ com2);
    inc++;
  }
}
"
30000912,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""A_out1.txt""));
  int cases=Integer.parseInt(br.readLine());
  for (int n=1; n <= cases; n++) {
    int intervals=Integer.parseInt(br.readLine());
    StringTokenizer st=new StringTokenizer(br.readLine(),"" "");
    int[] mushrooms=new int[intervals];
    for (int i=0; i < intervals; i++)     mushrooms[i]=Integer.parseInt(st.nextToken());
    int maxDiff=0;
    for (int i=0; i < intervals - 1; i++) {
      int diff=mushrooms[i] - mushrooms[i + 1];
      maxDiff=maxDiff > diff ? maxDiff : diff;
    }
    int sumSecond=0;
    for (int i=0; i < intervals - 1; i++) {
      if (mushrooms[i] > maxDiff)       sumSecond+=maxDiff;
 else       sumSecond+=mushrooms[i];
    }
    int sumFirst=0;
    for (int i=0; i < intervals - 1; i++) {
      int diff=mushrooms[i] - mushrooms[i + 1];
      if (diff > 0)       sumFirst+=diff;
    }
    pw.printf(""Case #%d: %d %d\n"",n,sumFirst,sumSecond);
  }
  pw.close();
}
"
30000913,"public static void main(String... args){
  Scanner reader=new Scanner(System.in);
  int caseCount=Integer.parseInt(reader.nextLine());
  for (int caseId=0; caseId < caseCount; caseId++) {
    int first=0;
    int second=0;
    int count=Integer.parseInt(reader.nextLine());
    ArrayList<Integer> T=new ArrayList<Integer>();
    int last=0;
    int lowest=0;
    for (int i=0; i < count; i++) {
      int cur=reader.nextInt();
      int diff=cur - last;
      T.add(cur);
      if (diff < 0) {
        first+=Math.abs(diff);
        if (diff < lowest) {
          lowest=diff;
        }
      }
      last=cur;
    }
    int highest=Math.abs(lowest);
    last=0;
    for (int i=0; i < (count - 1); i++) {
      int cur=T.get(i);
      second+=(cur > highest) ? highest : cur;
      last=cur;
    }
    if (first < 0 || second < 0) {
      System.err.println(""Case #"" + (caseId + 1));
    }
    System.out.println(""Case #"" + (caseId + 1) + "": ""+ first+ "" ""+ second);
    reader.nextLine();
  }
}
"
30000914,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new FileReader(""in.txt""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""out.txt""));
  String line=in.readLine();
  int t=new Integer(line);
  for (int caseNum=1; caseNum <= t; caseNum++) {
    line=in.readLine();
    int n=new Integer(line);
    line=in.readLine();
    String[] sa=line.split("" "");
    int[] m=new int[n];
    int rate=0;
    int totalDecrease=0;
    m[0]=new Integer(sa[0]);
    for (int j=1; j < n; j++) {
      m[j]=new Integer(sa[j]);
      if ((m[j - 1] - m[j]) > rate)       rate=m[j - 1] - m[j];
      if ((m[j - 1] > m[j]))       totalDecrease+=m[j - 1] - m[j];
    }
    int total2=0;
    for (int j=0; j < n - 1; j++) {
      if (m[j] > rate)       total2+=rate;
 else       total2+=m[j];
    }
    out.write(""Case #"" + caseNum + "": ""+ totalDecrease+ "" ""+ total2+ ""\n"");
  }
  in.close();
  out.flush();
  out.close();
}
"
30000915,"/** 
 * @param args
 */
public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int i=0; i < T; i++) {
    int N=in.nextInt();
    int[] mush=new int[N];
    for (int i1=0; i1 < N; i1++) {
      mush[i1]=in.nextInt();
    }
    int firstOutput=0;
    for (int i2=0; i2 < N - 1; i2++) {
      int diff=mush[i2] - mush[i2 + 1];
      if (diff > 0) {
        firstOutput+=diff;
      }
    }
    int secondOutput=0;
    int maxDiff=0;
    for (int i3=0; i3 < N - 1; i3++) {
      int diff=mush[i3] - mush[i3 + 1];
      if (diff > maxDiff) {
        maxDiff=diff;
      }
    }
    for (int i4=0; i4 < N - 1; i4++) {
      if (mush[i4] > maxDiff) {
        secondOutput+=maxDiff;
      }
 else {
        secondOutput+=mush[i4];
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ firstOutput+ "" ""+ secondOutput);
  }
  in.close();
}
"
30000916,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  StringBuilder out=new StringBuilder();
  for (int c=1; c <= t; c++) {
    int n=sc.nextInt();
    List<Integer> list=new ArrayList<>();
    for (int i=0; i < n; i++) {
      list.add(sc.nextInt());
    }
    int eaten1=0;
    for (int i=0; i < list.size() - 1; i++) {
      int diff=list.get(i) - list.get(i + 1);
      if (diff > 0) {
        eaten1+=diff;
      }
    }
    int rate2=0;
    for (int i=0; i < list.size() - 1; i++) {
      int diff=list.get(i) - list.get(i + 1);
      if (diff > rate2) {
        rate2=diff;
      }
    }
    int eaten2=0;
    for (int i=0; i < list.size() - 1; i++) {
      if (list.get(i) < rate2) {
        eaten2+=list.get(i);
      }
 else {
        eaten2+=rate2;
      }
    }
    out.append(""Case #"").append(c).append("": "").append(eaten1).append("" "").append(eaten2).append(""\n"");
  }
  System.out.print(out);
}
"
30000917,"public static void main(String[] args){
  s=new Scanner(System.in);
  int t=s.nextInt();
  for (int i=0; i < t; i++) {
    int n=s.nextInt();
    int[] arr=new int[n];
    for (int i1=0; i1 < n; i1++) {
      arr[i1]=s.nextInt();
    }
    int prev=arr[0];
    int first=0;
    for (int i3=1; i3 < n; i3++) {
      if (arr[i3] < prev) {
        first+=prev - arr[i3];
      }
      prev=arr[i3];
    }
    prev=arr[0];
    int max=0;
    for (int i2=1; i2 < n; i2++) {
      if (arr[i2] < prev) {
        if (max < prev - arr[i2]) {
          max=prev - arr[i2];
        }
      }
      prev=arr[i2];
    }
    int second=0;
    for (int i4=0; i4 < n - 1; i4++) {
      second+=Math.min(max,arr[i4]);
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ first+ "" ""+ second);
  }
}
"
30000918,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int n=sc.nextInt();
  int t=0;
  while (t < n) {
    t++;
    long result=0;
    long result2=0;
    long maxDis=0;
    int n1=sc.nextInt();
    long[] a=new long[n1];
    for (int i=0; i < n1; i++)     a[i]=sc.nextInt();
    for (int i=1; i < n1; i++)     if (a[i] < a[i - 1])     result+=a[i - 1] - a[i];
    for (int i=0; i < n1 - 1; i++)     maxDis=Math.max(a[i] - a[i + 1],maxDis);
    for (int i=0; i < n1 - 1; i++)     result2+=Math.min(maxDis,a[i]);
    System.out.println(""Case #"" + t + "": ""+ result+ "" ""+ result2);
  }
}
"
30000919,"public static void main(String args[]){
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  for (int ca=1; ca <= T; ca++) {
    int N=scan.nextInt();
    int[] a=new int[N];
    for (int i=0; i < N; i++)     a[i]=scan.nextInt();
    int y=0;
    for (int i=1; i < N; i++)     if (a[i] < a[i - 1])     y+=a[i - 1] - a[i];
    int r=0;
    for (int i=1; i < N; i++)     r=Math.max(r,a[i - 1] - a[i]);
    int z=0;
    for (int i=0; i < N - 1; i++)     z+=Math.min(a[i],r);
    System.out.println(""Case #"" + ca + "": ""+ y+ "" ""+ z);
  }
}
"
30000920,"public static void main(String[] args) throws FileNotFoundException {
  Scanner input=new Scanner(new File(""A-large.in.txt""));
  PrintWriter output=new PrintWriter(new File(""output.txt""));
  int numberOfCases=input.nextInt();
  for (int i=0; i < numberOfCases; i++) {
    int numberOfMushroomCases=input.nextInt();
    int mushrooms[]=new int[numberOfMushroomCases];
    for (int j=0; j < numberOfMushroomCases; j++) {
      mushrooms[j]=input.nextInt();
    }
    int first=0;
    for (int j=1; j < numberOfMushroomCases; j++) {
      if (mushrooms[j] < mushrooms[j - 1]) {
        first+=mushrooms[j - 1] - mushrooms[j];
      }
    }
    int biggestDifference=0;
    for (int j=1; j < numberOfMushroomCases; j++) {
      if (mushrooms[j - 1] - mushrooms[j] > biggestDifference) {
        biggestDifference=mushrooms[j - 1] - mushrooms[j];
      }
    }
    int mushroomsPerTenSeconds=biggestDifference;
    System.out.println(biggestDifference / 10.0 + "" "" + Math.ceil(biggestDifference / 10.0) + "" "" + mushroomsPerTenSeconds);
    int second=0;
    for (int j=0; j < numberOfMushroomCases - 1; j++) {
      if (mushrooms[j] <= mushroomsPerTenSeconds) {
        second+=mushrooms[j];
      }
 else {
        second+=mushroomsPerTenSeconds;
      }
    }
    output.println(""Case #"" + (i + 1) + "": ""+ first+ "" ""+ second);
  }
  input.close();
  output.close();
}
"
30000921,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new FileReader(""A-large.in""));
  PrintWriter out=new PrintWriter(""A.out"");
  int cases=in.nextInt();
  for (int casenum=1; casenum <= cases; casenum++) {
    int n=in.nextInt();
    int[] mushrooms=new int[n];
    for (int i=0; i < n; i++) {
      mushrooms[i]=in.nextInt();
    }
    int maxDiff=0;
    int total=0;
    for (int i=1; i < n; i++) {
      int diff=mushrooms[i - 1] - mushrooms[i];
      maxDiff=Math.max(maxDiff,diff);
      total+=Math.max(diff,0);
    }
    int constTotal=0;
    for (int i=0; i < n - 1; i++) {
      constTotal+=Math.min(maxDiff,mushrooms[i]);
    }
    out.println(""Case #"" + casenum + "": ""+ total+ "" ""+ constTotal);
  }
  out.close();
  in.close();
}
"
30000922,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""/home/e/Downloads/A-large.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""/home/e/Documents/MushroomMonster.out""));
  int times=Integer.parseInt(br.readLine());
  for (int t=1; t <= times; t++) {
    int[] mushrooms=new int[Integer.parseInt(br.readLine())];
    StringTokenizer st=new StringTokenizer(br.readLine());
    for (int i=0; i < mushrooms.length; i++) {
      mushrooms[i]=Integer.parseInt(st.nextToken());
    }
    int firstComputation=0;
    for (int i=0; i < mushrooms.length - 1; i++) {
      if (mushrooms[i + 1] < mushrooms[i]) {
        firstComputation+=mushrooms[i] - mushrooms[i + 1];
      }
    }
    int secondComputation=0;
    int largestGap=0;
    for (int i=0; i < mushrooms.length - 1; i++) {
      if (mushrooms[i] - mushrooms[i + 1] > largestGap) {
        largestGap=mushrooms[i] - mushrooms[i + 1];
      }
    }
    for (int i=0; i < mushrooms.length - 1; i++) {
      if (mushrooms[i] > largestGap) {
        secondComputation+=largestGap;
      }
 else {
        secondComputation+=mushrooms[i];
      }
    }
    bw.write(""Case #"" + t + "": ""+ firstComputation+ "" ""+ secondComputation+ ""\n"");
  }
  br.close();
  bw.close();
}
"
30000923,"public static void main(String[] args) throws Exception {
  BufferedReader reader=new BufferedReader(new FileReader(args[0]));
  BufferedWriter writer=new BufferedWriter(new FileWriter(args[0].substring(0,args[0].length() - 2) + ""out""));
  int testCases=Integer.parseInt(reader.readLine());
  System.out.println(""Test cases: "" + testCases);
  for (int test=0; test < testCases; test++) {
    int n=Integer.parseInt(reader.readLine());
    String[] splitLine=reader.readLine().split("" "");
    int case1=0;
    int case2=0;
    int maxEat=0;
    for (int i=0; i < n - 1; i++) {
      if (Integer.parseInt(splitLine[i]) > Integer.parseInt(splitLine[i + 1])) {
        int eat=Integer.parseInt(splitLine[i]) - Integer.parseInt(splitLine[i + 1]);
        case1+=eat;
        maxEat=maxEat < eat ? eat : maxEat;
      }
    }
    for (int i=0; i < n - 1; i++) {
      if (Integer.parseInt(splitLine[i]) < maxEat) {
        case2+=Integer.parseInt(splitLine[i]);
      }
 else {
        case2+=maxEat;
      }
    }
    writer.write(""Case #"" + (test + 1) + "": ""+ case1+ "" ""+ case2+ ""\n"");
    System.out.println(""Case #"" + (test + 1) + "": ""+ case1+ "" ""+ case2+ ""\n"");
  }
  reader.close();
  writer.flush();
  writer.close();
}
"
30000924,"public static void main(String[] args){
  int n=parseInt(s.nextLine());
  for (int i=1; i <= n; i++) {
    System.out.print(""Case #"" + i + "": "");
    System.err.println(i + ""/"" + n);
    int N=s.nextInt();
    long kfirst=0;
    long ksecond=0;
    int m[]=new int[N];
    for (int i2=0; i2 < N; i2++) {
      m[i2]=s.nextInt();
    }
    int rate=0;
    for (int i3=1; i3 < N; i3++) {
      int dif=m[i3] - m[i3 - 1];
      if (dif < 0) {
        kfirst+=-dif;
      }
      if (-dif > rate) {
        rate=-dif;
      }
    }
    for (int i1=1; i1 < N; i1++) {
      ksecond+=Math.min(rate,m[i1 - 1]);
    }
    System.out.println(kfirst + "" "" + ksecond);
  }
}
"
30000925,"public static void main(String[] args) throws IOException {
  out=new PrintWriter(new BufferedWriter(new FileWriter(NAME + "".out"")));
  File file=new File(NAME + "".in"");
  try (BufferedReader br=new BufferedReader(new FileReader(file))){
    int T=Integer.parseInt(br.readLine());
    for (int i=0; i < T; i++) {
      int N=Integer.parseInt(br.readLine());
      int result1=0;
      int result2=0;
      String[] list=br.readLine().split("" "");
      int last=Integer.parseInt(list[N - 1]);
      int result2_max=0;
      for (int j=N - 2; j >= 0; j--) {
        int first=Integer.parseInt(list[j]);
        if (last < first) {
          result1+=first - last;
          if (result2_max < first - last) {
            result2_max=first - last;
          }
        }
        last=first;
      }
      System.out.println(result2_max);
      for (int j=N - 2; j >= 0; j--) {
        int thisD=Integer.parseInt(list[j]);
        if (thisD < result2_max) {
          result2+=thisD;
        }
 else {
          result2+=result2_max;
        }
      }
      out.println(""Case #"" + (i + 1) + "": ""+ result1+ "" ""+ result2);
    }
  }
   out.close();
  System.exit(0);
}
"
30000926,"public static void main(String[] args) throws IOException {
  BufferedReader inFile=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter outFile=new PrintWriter(new File(""a.out""));
  StringTokenizer tok=new StringTokenizer(inFile.readLine());
  int T=Integer.parseInt(tok.nextToken());
  for (int t=1; t <= T; t++) {
    tok=new StringTokenizer(inFile.readLine());
    int N=Integer.parseInt(tok.nextToken());
    tok=new StringTokenizer(inFile.readLine());
    int[] m=new int[N];
    for (int i=0; i < N; i++) {
      m[i]=Integer.parseInt(tok.nextToken());
    }
    int y=0;
    for (int i=1; i < N; i++) {
      if (m[i] < m[i - 1]) {
        y+=m[i - 1] - m[i];
      }
    }
    int z=0;
    int r=0;
    for (int i=1; i < N; i++) {
      if (m[i] < m[i - 1]) {
        if (m[i - 1] - m[i] > r) {
          r=m[i - 1] - m[i];
        }
      }
    }
    for (int i=0; i < N - 1; i++) {
      if (m[i] > r) {
        z+=r;
      }
 else {
        z+=m[i];
      }
    }
    outFile.printf(""Case #%d: %d %d %n"",t,y,z);
  }
  inFile.close();
  outFile.close();
}
"
30000927,"public static void main(String[] args){
  try {
    Scanner scanner=new Scanner(new FileReader(""A-large.in""));
    int T=scanner.nextInt();
    int[] Ns=new int[T];
    ArrayList<ArrayList<Integer>> list=new ArrayList<ArrayList<Integer>>();
    for (int i=0; i < T; i++) {
      Ns[i]=scanner.nextInt();
      ArrayList<Integer> subList=new ArrayList<Integer>();
      for (int j=0; j < Ns[i]; j++) {
        int current=scanner.nextInt();
        subList.add(current);
      }
      list.add(subList);
    }
    PrintWriter out=new PrintWriter(new FileWriter(""output1.txt""));
    for (int i=0; i < T; i++) {
      if (Ns[i] <= 1) {
        out.println(""Case #"" + (i + 1) + "": 0 0"");
        continue;
      }
      ArrayList<Integer> subList=list.get(i);
      int maxGap=0;
      int sumGap=0;
      int secondSum=0;
      for (int j=0; j < subList.size() - 1; j++) {
        if (subList.get(j) > subList.get(j + 1)) {
          sumGap+=subList.get(j) - subList.get(j + 1);
          maxGap=Math.max(maxGap,subList.get(j) - subList.get(j + 1));
        }
      }
      for (int j=0; j < subList.size() - 1; j++) {
        if (subList.get(j) > maxGap) {
          secondSum+=maxGap;
        }
 else {
          secondSum+=subList.get(j);
        }
      }
      out.println(""Case #"" + (i + 1) + "": ""+ sumGap+ "" ""+ secondSum);
    }
    out.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000928,"public static void main(String... args) throws Exception {
  File file=new File(loc);
  File[] paths=file.listFiles();
  List<File> input=new ArrayList<File>();
  for (  File f : paths) {
    String s=f.getName();
    if (s.startsWith(name_class) && s.endsWith("".in""))     input.add(f);
  }
  if (input.isEmpty()) {
    System.err.println(""LEYENDO DE CONSOLA"");
    in=new BufferedReader(new InputStreamReader(System.in));
  }
 else {
    File last_file=input.get(0);
    for (    File f : input) {
      if (f.lastModified() > last_file.lastModified())       last_file=f;
    }
    in=new BufferedReader(new FileReader(last_file.toString()));
    System.err.println(""LEYENDO DE ARCHIVO"");
  }
  FileWriter fw=new FileWriter(loc + ""/output.txt"");
  out=new PrintWriter(fw);
  int casos=Integer.parseInt(in.readLine());
  for (int casito=1; casito <= casos; casito++) {
    A r=new A();
    int n=Integer.parseInt(A.nextToken());
    int[] ret=new int[n];
    for (int i1=0; i1 < n; i1++)     ret[i1]=Integer.parseInt(A.nextToken());
    int[] arr=ret;
    int ret1=0;
    int abs=0;
    for (int i=0; i < n - 1; i++) {
      ret1+=Math.max(0,arr[i] - arr[i + 1]);
      abs=Math.max(abs,arr[i] - arr[i + 1]);
    }
    int ret2=0;
    for (int i=0; i < n - 1; i++)     ret2+=Math.min(arr[i],abs);
    Object o=ret1 + "" "" + ret2;
    out.println(""Case #"" + casito + "": ""+ o);
    System.out.println(""Case #"" + casito + "": ""+ o);
  }
  out.close();
}
"
30000929,"public static void main(String[] args){
  A r=new A();
  if (!r.DEBUG) {
    try {
      if (r.isSmall)       System.setIn(new FileInputStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-small-attempt1.in"")));
 else       System.setIn(new FileInputStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-large.in"")));
      if (r.isSmall)       System.setOut(new PrintStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-small_out2.txt"")));
 else       System.setOut(new PrintStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-large_out.txt"")));
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int CASE=1; CASE <= T; CASE++) {
    int n=sc.nextInt();
    int[] a=new int[n];
    for (int i=0; i < n; i++)     a[i]=sc.nextInt();
    int resY=0, res=1 << 29;
    for (int i=1; i < n; i++) {
      if (a[i] < a[i - 1])       resY+=a[i - 1] - a[i];
    }
    for (int rate=0; rate <= 10000; rate++) {
      boolean f=true;
      int sum=0, now=a[0];
      for (int i=1; f && i < n; i++) {
        if (now <= rate) {
          sum+=now;
          now=a[i];
        }
 else         if (now - rate <= a[i]) {
          sum+=rate;
          now=a[i];
        }
 else         f=false;
      }
      if (f) {
        res=Math.min(res,sum);
        break;
      }
    }
    System.out.println(""Case #"" + CASE + "": ""+ resY+ "" ""+ res);
  }
}
"
30000930,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int T=scanner.nextInt();
  for (int t=0; t < T; t++) {
    int N=scanner.nextInt();
    int[] num=new int[N];
    int[] subt=new int[N - 1];
    num[0]=scanner.nextInt();
    int max=0;
    for (int i=0; i < N - 1; i++) {
      num[i + 1]=scanner.nextInt();
      subt[i]=num[i] - num[i + 1];
      max=Math.max(subt[i],max);
    }
    int ans1=0;
    for (int i=0; i < N - 1; i++) {
      if (subt[i] > 0) {
        ans1+=subt[i];
      }
    }
    int ans2=0;
    for (int i=0; i < N - 1; i++) {
      if (num[i] < max) {
        ans2+=num[i];
      }
 else {
        ans2+=max;
      }
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ ans1+ "" ""+ ans2);
  }
}
"
30000931,"public static void main(String[] args) throws FileNotFoundException {
  seer=new Scanner(new File(filename));
  T=seer.nextInt();
  for (i=0; i < T; i++) {
    n=seer.nextInt();
    int sumdifs=0;
    int maxdif=0;
    int last=0;
    int curr=0;
    numlist=new ArrayList<Integer>();
    for (int j=0; j < n; j++) {
      curr=seer.nextInt();
      numlist.add(curr);
      if (last > curr) {
        int currdif=last - curr;
        sumdifs+=last - curr;
        if (maxdif < currdif)         maxdif=currdif;
      }
      last=curr;
    }
    int sum2=0;
    for (int ind=0; ind < n - 1; ind++) {
      sum2+=(int)Math.min(numlist.get(ind),maxdif);
    }
    System.out.printf(""Case #%d: %d %d\n"",i + 1,sumdifs,sum2);
  }
}
"
30000932,"/** 
 * @param args
 */
public static void main(String[] args){
  String filenameInput=""A-large.in"";
  String filenameOutput=""A-large.out"";
  Class currentClass=ProblemA.class;
  try {
    String path=""src/"" + currentClass.getPackage().getName().replace(""."",""/"");
    BufferedReader input=new BufferedReader(new FileReader(new File(path + ""/"" + filenameInput)));
    BufferedWriter output=new BufferedWriter(new FileWriter(new File(path + ""/"" + filenameOutput)));
    int numOfTestcases=Integer.parseInt(input.readLine());
    for (int i=0; i < numOfTestcases; i++) {
      System.out.println(""Testnumber : "" + i);
      int minimum=0;
      int constantSpeedMinimum=0;
      int numberOfIntervals=Integer.parseInt(input.readLine());
      String[] inputStringArray=input.readLine().split("" "");
      int[] numOfMushrooms=new int[numberOfIntervals];
      for (int j=0; j < numberOfIntervals; j++) {
        numOfMushrooms[j]=Integer.parseInt(inputStringArray[j]);
      }
      int speed=0;
      for (int j=0; j < numberOfIntervals - 1; j++) {
        minimum+=Math.max(0,numOfMushrooms[j] - numOfMushrooms[j + 1]);
        speed=Math.max(speed,numOfMushrooms[j] - numOfMushrooms[j + 1]);
      }
      System.out.println(speed);
      for (int j=0; j < numberOfIntervals - 1; j++) {
        constantSpeedMinimum+=Math.min(speed,numOfMushrooms[j]);
        System.out.println(constantSpeedMinimum + "" before "" + j);
      }
      String outputString=""Case #"" + (i + 1) + "": ""+ minimum+ "" ""+ constantSpeedMinimum;
      System.out.println(outputString);
      if (i + 1 != numOfTestcases) {
        outputString+=""\n"";
      }
      output.write(outputString);
    }
    output.flush();
    output.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000933,"public static void main(String[] args) throws Exception {
  Scanner scanner=new Scanner(new File(fileName));
  int T=scanner.nextInt();
  for (int i=0; i < T; i++) {
    int N=scanner.nextInt();
    int[] in=new int[N];
    for (int j=0; j < N; j++) {
      in[j]=scanner.nextInt();
    }
    long out=0;
    int start=0;
    for (int i1=0; i1 < in.length; i1++) {
      if (in[i1] > start) {
        start=in[i1];
      }
 else {
        out+=(start - in[i1]);
        start=in[i1];
      }
    }
    long y=out;
    int maxDiff=0;
    long out1=0;
    for (int i2=0; i2 < in.length - 1; i2++) {
      if ((in[i2] - in[i2 + 1] > maxDiff)) {
        maxDiff=(in[i2] - in[i2 + 1]);
      }
    }
    long rate=maxDiff;
    for (int i1=0; i1 < in.length - 1; i1++) {
      out1+=Math.min(rate,in[i1]);
    }
    long z=out1;
    System.out.println(""Case #"" + (i + 1) + "": ""+ y+ "" ""+ z);
  }
  scanner.close();
}
"
30000934,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int test=input.nextInt();
  for (int i=1; i <= test; i++) {
    int size=input.nextInt();
    List<Integer> list=new ArrayList<Integer>();
    for (int j=0; j < size; j++) {
      list.add(input.nextInt());
    }
    int amount=0;
    int current=list.get(0);
    for (int i1=1; i1 < list.size(); i1++) {
      if (current > list.get(i1))       amount+=current - list.get(i1);
      current=list.get(i1);
    }
    int one=amount;
    int per=0;
    int amount1=0;
    for (int i2=1; i2 < list.size(); i2++) {
      int drop=list.get(i2 - 1) - list.get(i2);
      if (drop > per) {
        per=drop;
      }
    }
    for (int i1=0; i1 < list.size() - 1; i1++) {
      amount1+=list.get(i1) > per ? per : list.get(i1);
    }
    int two=amount1;
    System.out.println(""Case #"" + i + "": ""+ one+ "" ""+ two);
  }
}
"
30000935,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int cases=input.nextInt();
  for (int c=0; c < cases; c++) {
    int n=input.nextInt();
    int[] m=new int[n];
    for (int i=0; i < n; i++) {
      m[i]=input.nextInt();
    }
    int minA=0;
    int maxD=0;
    for (int i=1; i < n; i++) {
      int d=m[i - 1] - m[i];
      if (d > 0) {
        minA+=d;
        maxD=Math.max(maxD,d);
      }
    }
    int minB=0;
    for (int i=0; i < n - 1; i++) {
      minB+=(m[i] < maxD ? m[i] : maxD);
    }
    System.out.println(String.format(""Case #%d: %d %d"",c + 1,minA,minB));
  }
}
"
30000936,"public static void main(String[] args){
  try {
    FileReader fr=new FileReader(""E:/codejam/A-large.in"");
    BufferedReader br=new BufferedReader(fr);
    FileWriter fw=new FileWriter(""E:/codejam/out.txt"");
    BufferedWriter bw=new BufferedWriter(fw);
    int T=Integer.parseInt(br.readLine());
    for (int x=0; x < T; x++) {
      int N=Integer.parseInt(br.readLine());
      long first=0, second=0, diff=0, maxx_diff=0;
      StringTokenizer st=new StringTokenizer(br.readLine());
      int[] n=new int[N];
      for (int i=0; i < N; i++) {
        n[i]=Integer.parseInt(st.nextToken());
      }
      for (int i=0; i < N - 1; i++) {
        if (n[i] > n[i + 1]) {
          diff=(n[i] - n[i + 1]);
          first+=diff;
          if (diff > maxx_diff) {
            maxx_diff=diff;
          }
        }
      }
      for (int i=0; i < N - 1; i++) {
        if (n[i] > maxx_diff) {
          second+=maxx_diff;
        }
 else {
          second+=n[i];
        }
      }
      String ans=""Case #"" + (x + 1) + "": ""+ first+ "" ""+ second;
      bw.write(ans);
      bw.newLine();
    }
    bw.flush();
    bw.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000937,"public static void main(String args[]){
  Main r=(new Main());
  Scanner cin=new Scanner(System.in);
  int T=cin.nextInt();
  for (int C=1; C <= T; ++C) {
    int N=cin.nextInt();
    int arr[]=new int[N];
    for (int i=0; i < N; ++i) {
      arr[i]=cin.nextInt();
    }
    int sum=0;
    int max=0;
    for (int i=1; i < N; ++i) {
      int diff=Math.max(arr[i - 1] - arr[i],0);
      max=Math.max(max,diff);
      sum+=diff;
    }
    int res=0;
    for (int i=1; i < N; ++i) {
      res+=Math.min(arr[i - 1],max);
    }
    System.out.println(""Case #"" + C + "": ""+ sum+ "" ""+ res);
  }
}
"
30000938,"public static void main(String[] args) throws IOException {
  BufferedReader x=new BufferedReader(new FileReader(""Alarge.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""Alarge.out"")));
  int t=Integer.parseInt(x.readLine());
  for (int cases=1; cases <= t; cases++) {
    int n=Integer.parseInt(x.readLine());
    int[] s=new int[n];
    StringTokenizer st=new StringTokenizer(x.readLine());
    for (int i=0; i < n; i++) {
      s[i]=Integer.parseInt(st.nextToken());
    }
    int maxgap=-1;
    for (int i=1; i < n; i++) {
      if (s[i - 1] - s[i] > maxgap)       maxgap=s[i - 1] - s[i];
    }
    int sum1=0;
    for (int i=1; i < n; i++) {
      if (s[i] < s[i - 1])       sum1+=s[i - 1] - s[i];
    }
    int sum2=0;
    for (int i=0; i < n - 1; i++) {
      sum2+=Math.min(maxgap,s[i]);
    }
    out.println(""Case #"" + cases + "": ""+ sum1+ "" ""+ sum2);
  }
  out.close();
  System.exit(0);
}
"
30000939,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""C:/Users/Nejc/Desktop/input.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(""C:/Users/Nejc/Desktop/output.txt"")));
  byte T=Byte.parseByte(br.readLine());
  for (byte t=0; t < T; t++) {
    int y=0;
    int z=0;
    int N=Integer.parseInt(br.readLine());
    String[] split=br.readLine().split("" "");
    int[] m=new int[N];
    for (int i=0; i < N; i++)     m[i]=Integer.parseInt(split[i]);
    int max=0;
    for (int i=1; i < N; i++) {
      if (m[i] < m[i - 1]) {
        int eaten=m[i - 1] - m[i];
        y+=eaten;
        if (eaten > max)         max=eaten;
      }
    }
    for (int i=1; i < N; i++) {
      if (m[i - 1] < max)       z+=m[i - 1];
 else       z+=max;
    }
    bw.write(""Case #"" + (t + 1) + "": ""+ y+ "" ""+ z);
    bw.newLine();
  }
  br.close();
  bw.close();
  System.out.println(""done"");
}
"
30000940,"public static void main(String[] args) throws IOException {
  BufferedReader in=null;
  try {
    in=new BufferedReader(new InputStreamReader(System.in));
    int testCaseNum=Integer.parseInt(in.readLine());
    for (int i=1; i <= testCaseNum; i++) {
      int n=Integer.parseInt(in.readLine());
      String[] m_str=in.readLine().split("" "");
      int[] m=new int[n];
      for (int j=0; j < n; j++) {
        m[j]=Integer.parseInt(m_str[j]);
      }
      int sumconsumption=0;
      int maxconsumption=0;
      for (int j=1; j < n; j++) {
        int consumption=Math.max(m[j - 1] - m[j],0);
        sumconsumption+=consumption;
        maxconsumption=Math.max(maxconsumption,consumption);
      }
      long z=0;
      for (int j=0; j < n - 1; j++) {
        z+=Math.min(maxconsumption,m[j]);
      }
      System.out.print(""Case #"" + i + "": "");
      System.out.print(sumconsumption);
      System.out.print("" "");
      System.out.print(z);
      System.out.println();
    }
  }
 catch (  IOException ioe) {
    throw ioe;
  }
 finally {
    if (in != null) {
      in.close();
    }
  }
}
"
30000941,"public static void main(String[] args){
  Scanner scanner=null;
  PrintWriter out=null;
  try {
    String inputFile=""/Users/adarsh.sharma/Documents/coding/java/src/com/google/code/jam/OneA/A-large.in"";
    scanner=new Scanner(new FileReader(inputFile));
    String outFile=""/Users/adarsh.sharma/Documents/coding/java/src/com/google/code/jam/OneA/A-large.out"";
    out=new PrintWriter(outFile);
    int T=scanner.nextInt();
    for (int t=1; t <= T; t++) {
      int N=scanner.nextInt();
      List<Integer> A=new ArrayList<Integer>();
      for (int n=0; n < N; n++) {
        A.add(scanner.nextInt());
      }
      int X=0;
      for (int n=1; n < N; n++) {
        X+=max(A.get(n - 1) - A.get(n),0);
      }
      int minRate=0;
      for (int n=1; n < N; n++) {
        minRate=max(A.get(n - 1) - A.get(n),minRate);
      }
      int Y=0;
      for (int n=1; n < N; n++) {
        Y+=min(A.get(n - 1),minRate);
      }
      out.println(""Case #"" + t + "": ""+ X+ "" ""+ Y);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    scanner.close();
    out.close();
  }
}
"
30000942,"public static void main(String args[]) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(""A.txt"");
  int n=Integer.parseInt(br.readLine());
  String line;
  for (int q=1; q <= n; q++) {
    line=br.readLine() + "" "" + br.readLine();
    Scanner sc=new Scanner(line);
    int N=sc.nextInt();
    int ar[]=new int[N];
    for (int i=0; i < N; i++)     ar[i]=sc.nextInt();
    double rate=0;
    for (int i=1; i < N; i++)     if (ar[i] < ar[i - 1] && ar[i - 1] - ar[i] > rate)     rate=ar[i - 1] - ar[i];
    System.out.println(rate/=10);
    int a=0;
    double b=0, bval;
    bval=ar[0];
    for (int i=1; i < N; i++) {
      if (ar[i - 1] > ar[i]) {
        a+=-ar[i] + ar[i - 1];
      }
      if (bval >= rate * 10) {
        b+=rate * 10;
        bval-=rate * 10;
      }
 else {
        b+=bval;
        bval=0;
      }
      bval=ar[i];
    }
    System.out.println(q + ""> "" + a+ "" ""+ (int)b);
    pw.println(""Case #"" + q + "": ""+ a+ "" ""+ (int)b);
  }
  pw.close();
}
"
30000943,"/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
  StringTokenizer st;
  int T=Integer.parseInt(br.readLine());
  for (int cn=1; cn <= T; cn++) {
    int N=Integer.parseInt(br.readLine());
    int m[]=new int[N];
    st=new StringTokenizer(br.readLine());
    for (int i=0; i < N; i++) {
      m[i]=Integer.parseInt(st.nextToken());
    }
    int ans1=0, maxd=0;
    for (int i=1; i < N; i++) {
      int diff=Math.max(0,m[i - 1] - m[i]);
      ans1+=diff;
      maxd=Math.max(maxd,diff);
    }
    int ans2=0;
    for (int i=0; i < N - 1; i++) {
      int diff=Math.min(m[i],maxd);
      ans2+=diff;
    }
    bw.append(""Case #"" + cn + "": ""+ ans1+ "" ""+ ans2+ ""\n"");
  }
  bw.flush();
}
"
30000944,"public static void main(String[] args) throws FileNotFoundException {
  in=new Scanner(new File(""input.txt""));
  out=new PrintWriter(new BufferedOutputStream(new FileOutputStream(new File(""output.txt""))));
  int totalCases=in.nextInt();
  in.nextLine();
  for (int i=1; i <= totalCases; i++) {
    int n=in.nextInt();
    int oldM=0;
    int sum1=0;
    int sum2=0;
    int mostDiff=0;
    int[] a=new int[n];
    a[0]=in.nextInt();
    oldM=a[0];
    for (int i2=1; i2 < n - 1; i2++) {
      a[i2]=in.nextInt();
      if (a[i2] < oldM)       sum1+=(oldM - a[i2]);
      if ((oldM - a[i2]) > mostDiff)       mostDiff=(oldM - a[i2]);
      oldM=a[i2];
    }
    int m=in.nextInt();
    if (m < oldM)     sum1+=(oldM - m);
    if ((oldM - m) > mostDiff)     mostDiff=(oldM - m);
    for (int i1=0; i1 < n - 1; i1++) {
      if (a[i1] < mostDiff)       sum2+=a[i1];
 else       sum2+=mostDiff;
    }
    out.println(""Case #"" + i + "": ""+ sum1+ "" ""+ sum2);
  }
  out.close();
  System.err.println(""Completed"");
}
"
30000945,"public static void main(String[] args) throws IOException {
  FileReader fr=new FileReader(""in.txt"");
  BufferedReader textReader=new BufferedReader(fr);
  int num=Integer.parseInt(textReader.readLine());
  for (int k=0; k < num; k++) {
    int count=Integer.parseInt(textReader.readLine());
    String read=textReader.readLine();
    int meth1;
    int meth2;
    int shroom1=0;
    int shroom2=0;
    String[] str=read.split("" "");
    int[] intr=new int[str.length];
    for (int l=0; l < str.length; l++) {
      intr[l]=Integer.parseInt(str[l]);
    }
    int[] intrd=new int[str.length - 1];
    for (int m=0; m < str.length - 1; m++) {
      intrd[m]=intr[m] - intr[m + 1];
    }
    Arrays.sort(intrd);
    int max=intrd[intrd.length - 1];
    for (int j=0; j < count; j++) {
      if (j < count - 1 && intr[j] > intr[j + 1])       shroom1+=intr[j] - intr[j + 1];
      if (intr[j] > max && j < count - 1)       shroom2+=max;
 else       if (j < count - 1)       shroom2+=intr[j];
    }
    out.println(""Case #"" + (k + 1) + "": ""+ shroom1+ "" ""+ shroom2);
  }
  textReader.close();
}
"
30000946,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(new File(args[0])));
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(args[1]))));
  int testCases=Integer.parseInt(br.readLine());
  for (int i=0; i < testCases; ++i) {
    int totalTime=Integer.parseInt(br.readLine());
    String[] mushroormNumbers=br.readLine().split(""\\s+"");
    int[] coockiesNumbers=new int[totalTime];
    int totalEaten=0;
    double maxRate=0;
    int current=Integer.parseInt(mushroormNumbers[0]);
    coockiesNumbers[0]=current;
    for (int time=1; time < totalTime; ++time) {
      int newNum=Integer.parseInt(mushroormNumbers[time]);
      coockiesNumbers[time]=newNum;
      if (current > newNum) {
        totalEaten+=current - newNum;
        maxRate=new Double(Math.max(maxRate,(current - newNum) / 10.0));
      }
      current=newNum;
    }
    double totalEatenB=0;
    current=coockiesNumbers[0];
    for (int time=1; time < totalTime; ++time) {
      int newNum=coockiesNumbers[time];
      totalEatenB+=Math.min(maxRate * 10,current);
      current=newNum;
    }
    writer.append(""Case #"" + (i + 1) + "": ""+ totalEaten+ "" ""+ new Double(totalEatenB).intValue()+ ""\n"");
  }
  writer.close();
  br.close();
}
"
30000947,"public static void main(String[] args) throws FileNotFoundException {
  File f=new File(""A-large.in"");
  PrintWriter out=new PrintWriter(""out.txt"");
  Scanner s=new Scanner(f);
  int T=s.nextInt();
  int iter=0;
  while (T > 0) {
    T--;
    iter++;
    int N=s.nextInt();
    int N_i=N;
    int[] in=new int[N];
    int i=0;
    while (N_i > 0) {
      N_i--;
      in[i++]=s.nextInt();
    }
    int m1=0;
    for (int j=1; j < N; j++) {
      if (in[j] < in[j - 1]) {
        System.out.println(m1);
        m1+=in[j - 1] - in[j];
      }
    }
    int max=0;
    int diff=0;
    for (int j=0; j < N - 1; j++) {
      diff=in[j] - in[j + 1];
      if (diff > max) {
        max=diff;
      }
    }
    int m2=0;
    for (int j=0; j < N - 1; j++) {
      if (in[j] <= max) {
        m2+=in[j];
      }
 else {
        m2+=max;
      }
    }
    out.println(""Case #"" + iter + "": ""+ m1+ "" ""+ m2);
  }
  s.close();
  out.close();
}
"
30000948,"public static void main(String[] args){
  int T=in.nextInt();
  for (int test=1; test <= T; test++) {
    int N=in.nextInt();
    int[] m=new int[N];
    for (int i=0; i < N; i++) {
      m[i]=in.nextInt();
    }
    int R1=0;
    for (int i=1; i < N; i++) {
      if (m[i] - m[i - 1] < 0) {
        R1+=Math.abs(m[i] - m[i - 1]);
      }
    }
    int maxDiff=0;
    for (int i=0; i < N - 1; i++) {
      maxDiff=Math.max(maxDiff,m[i] - m[i + 1]);
    }
    int R2=0;
    for (int i=0; i < N - 1; i++) {
      R2+=Math.min(m[i],maxDiff);
    }
    out.println(String.format(""Case #%d: %d %d"",test,R1,R2));
  }
}
"
30000949,"public static void main(String[] args) throws Exception {
  local=false;
  if (args.length == 1 && args[0].equals(_localArg))   local=true;
  Main r=new Main();
  if (Main.local) {
    r.inb=new BufferedReader(new FileReader(""input.txt""));
    r.out=new PrintWriter(new OutputStreamWriter(System.out));
  }
 else {
switch (Main.IO) {
case 1:
      r.inb=new BufferedReader(new InputStreamReader(System.in));
    r.out=new PrintWriter(new OutputStreamWriter(System.out));
  break;
case 2:
r.inb=new BufferedReader(new FileReader(""input.txt""));
r.out=new PrintWriter(new FileWriter(""output.txt""));
break;
case 3:
r.inb=new BufferedReader(new FileReader(r.problemname + "".in""));
r.out=new PrintWriter(new FileWriter(r.problemname + "".out""));
break;
}
}
r.in=new StringTokenizer("""");
double Time=System.nanoTime();
int T=Integer.parseInt(r.next());
A: for (int q=1; q <= T; q++) {
int n=Integer.parseInt(r.next());
int[] a1=new int[n];
for (int i1=0; i1 < n; i1++) a1[i1]=Integer.parseInt(r.next());
int[] a=a1;
long ans1=0, ans2=0;
int maxP=0;
for (int i=1; i < n; i++) {
if (a[i - 1] > a[i]) ans1+=a[i - 1] - a[i];
maxP=max(maxP,a[i - 1] - a[i]);
}
for (int i=0; i < n - 1; i++) {
if (a[i] > maxP) {
ans2+=maxP;
}
 else {
ans2+=a[i];
}
}
r.out.println(""Case #"" + q + "": ""+ ans1+ "" ""+ ans2);
}
if (Main.local) {
Time=System.nanoTime() - Time;
r.out.println();
r.out.println("" Time work: "" + Time / (1e9) + "" seconds"");
}
r.out.flush();
}
"
30000950,"public static void main(String args[]) throws IOException {
  BufferedReader cin=new BufferedReader(new FileReader(""c:\\input.txt""));
  PrintWriter cout=new PrintWriter(""c:\\users\\johng_000\\desktop\\output.txt"");
  StringTokenizer st=new StringTokenizer(cin.readLine());
  int T=Integer.parseInt(st.nextToken());
  for (int count=0; count < T; count++) {
    st=new StringTokenizer(cin.readLine());
    int N=Integer.parseInt(st.nextToken());
    int[] mu=new int[N];
    st=new StringTokenizer(cin.readLine());
    for (int i=0; i < N; i++) {
      mu[i]=Integer.parseInt(st.nextToken());
    }
    long firstMethod=0;
    long secondMethod=0;
    long max=mu[0] - mu[1];
    for (int i=2; i < N; i++) {
      if (mu[i - 1] - mu[i] > max)       max=mu[i - 1] - mu[i];
    }
    for (int i=1; i < N; i++) {
      if (mu[i - 1] > mu[i])       firstMethod+=mu[i - 1] - mu[i];
    }
    for (int i=0; i < N - 1; i++) {
      if (mu[i] > max)       secondMethod+=max;
 else {
        secondMethod+=mu[i];
      }
    }
    cout.println(""Case #"" + (count + 1) + "": ""+ firstMethod+ "" ""+ secondMethod);
  }
  cout.close();
}
"
30000951,"public static void main(String[] args) throws IOException {
  reader=new Scanner(new FileReader(""input""));
  writer=new PrintWriter(new FileWriter(""output""));
  int nt=reader.nextInt();
  for (int tc=1; tc <= nt; tc++) {
    int n=reader.nextInt();
    int[] m=new int[n];
    for (int i=0; i < n; i++) {
      m[i]=reader.nextInt();
    }
    int min1=0;
    int maxDecrease=-1;
    for (int i=1; i < n; i++) {
      min1+=Math.max(0,m[i - 1] - m[i]);
      maxDecrease=Math.max(maxDecrease,Math.max(0,m[i - 1] - m[i]));
    }
    int min2=0;
    for (int i=0; i < n - 1; i++) {
      min2+=Math.min(m[i],maxDecrease);
    }
    writer.println(""Case #"" + tc + "": ""+ min1+ "" ""+ min2);
  }
  writer.close();
  reader.close();
}
"
30000952,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
  int totalCaseNumber=Integer.parseInt(reader.readLine());
  for (int caseNo=1; caseNo <= totalCaseNumber; caseNo++) {
    String line=reader.readLine();
    line=reader.readLine();
    String[] parts=line.split("" "");
    int[] m=new int[parts.length];
    for (int i=0; i < parts.length; i++) {
      m[i]=Integer.parseInt(parts[i]);
    }
    int res1=0, res2=0, largeDiff=0;
    for (int i=1; i < m.length; i++) {
      if (m[i] < m[i - 1]) {
        int diff=m[i - 1] - m[i];
        res1+=diff;
        largeDiff=Math.max(largeDiff,diff);
      }
    }
    for (int i=0; i < m.length - 1; i++) {
      if (m[i] <= largeDiff) {
        res2+=m[i];
      }
 else {
        res2+=largeDiff;
      }
    }
    System.out.println(""Case #"" + caseNo + "": ""+ res1+ "" ""+ res2);
  }
  reader.close();
}
"
30000953,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  PrintWriter writer;
  try {
    writer=new PrintWriter(""out.txt"",""UTF-8"");
    int t=Integer.parseInt(s.nextLine());
    for (int i=1; i <= t; ++i) {
      int n=Integer.valueOf(s.nextLine());
      String[] times=s.nextLine().split("" "");
      int r1=0;
      int max_rate=0;
      for (int j=1; j < n; j++) {
        int x=Integer.valueOf(times[j - 1]);
        int y=Integer.valueOf(times[j]);
        if (x > y) {
          r1+=x - y;
        }
        if (x - y > max_rate) {
          max_rate=x - y;
        }
      }
      int r2=0;
      for (int j=0; j < n - 1; j++) {
        int x=Integer.valueOf(times[j]);
        r2+=x > max_rate ? max_rate : x;
      }
      String result=r1 + "" "" + r2;
      System.out.println(""Case #"" + i + "": ""+ result);
      writer.println(""Case #"" + i + "": ""+ result);
    }
    s.close();
    writer.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
}
"
30000954,"public static void main(String[] args){
  BufferedReader br=null;
  try {
    br=new BufferedReader(new FileReader(""input.txt""));
    int numTestCase=Integer.valueOf(br.readLine());
    for (int testCase=1; testCase <= numTestCase; testCase++) {
      System.out.print(""Case #"" + testCase + "": "");
      int numObservation=Integer.valueOf(br.readLine());
      String[] observationStr=br.readLine().split("" "");
      Long[] observation=new Long[numObservation];
      for (int i=0; i < numObservation; i++) {
        observation[i]=Long.valueOf(observationStr[i]);
      }
      long ans1=0;
      long ans2=0;
      long maxDiff=0;
      for (int i=0; i < numObservation - 1; i++) {
        long diff=observation[i] - observation[i + 1];
        if (diff > 0) {
          ans1+=diff;
        }
        if (diff > maxDiff) {
          maxDiff=diff;
        }
      }
      for (int i=0; i < numObservation - 1; i++) {
        if (maxDiff > observation[i]) {
          ans2+=observation[i];
        }
 else {
          ans2+=maxDiff;
        }
      }
      System.out.println(ans1 + "" "" + ans2);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30000955,"public static void main(String[] args) throws FileNotFoundException {
  Scanner input=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(new File(""A.out""));
  while (input.hasNext()) {
    int T=input.nextInt();
    for (int caseNum=1; caseNum <= T; ++caseNum) {
      int N=input.nextInt();
      int[] mushroom=new int[N];
      for (int i=0; i < mushroom.length; ++i) {
        mushroom[i]=input.nextInt();
      }
      int method1=0;
      int rate=0;
      for (int i=1; i < mushroom.length; ++i) {
        if (mushroom[i] < mushroom[i - 1]) {
          method1+=mushroom[i - 1] - mushroom[i];
          rate=Math.max(rate,mushroom[i - 1] - mushroom[i]);
        }
      }
      int method2=0;
      for (int i=0; i < mushroom.length - 1; ++i) {
        if (mushroom[i] <= rate) {
          method2+=mushroom[i];
        }
 else {
          method2+=rate;
        }
      }
      out.printf(""Case #%d: %d %d\n"",caseNum,method1,method2);
    }
  }
  input.close();
  out.close();
}
"
30000956,"public static void main(String[] args) throws Exception {
  Scanner scan=new Scanner(System.in);
  BufferedWriter out=new BufferedWriter(new FileWriter(""C:\\Users\\aschonfe\\Desktop\\tmp.out""));
  String firstLine=scan.nextLine();
  Boolean isFile=!Character.isDigit(firstLine.charAt(0));
  int T;
  if (isFile) {
    scan=new Scanner(new FileReader(firstLine));
    T=scan.nextInt();
  }
 else {
    T=Integer.parseInt(firstLine);
  }
  for (int t=1; t <= T; t++) {
    int N=scan.nextInt();
    int[] m=new int[N];
    for (int n=0; n < N; n++) {
      m[n]=scan.nextInt();
    }
    int method1=0;
    int prev=m[0];
    for (int n=0; n < N; n++) {
      if (m[n] > prev) {
        prev=m[n];
      }
 else {
        method1+=prev - m[n];
        prev=m[n];
      }
    }
    int rate=0;
    for (int n=1; n < N; n++) {
      if ((m[n - 1] - m[n]) > rate) {
        rate=m[n - 1] - m[n];
      }
    }
    int method2=0;
    for (int n=0; n < N - 1; n++) {
      if (m[n] > rate) {
        method2+=rate;
      }
 else {
        method2+=m[n];
      }
    }
    System.out.printf(""Case #%d: %d %d%n"",t,method1,method2);
    out.write(String.format(""Case #%d: %d %d%n"",t,method1,method2));
  }
  if (isFile) {
    scan.close();
  }
  out.close();
}
"
30000957,"public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int ca=1; ca <= T; ca++) {
    int N=sc.nextInt();
    int arr[]=new int[N];
    for (int i=0; i < N; i++)     arr[i]=sc.nextInt();
    int a=0;
    int b=0;
    int max=0;
    for (int i=0; i < N - 1; i++) {
      if (arr[i] > arr[i + 1]) {
        a+=arr[i] - arr[i + 1];
        max=Math.max(max,arr[i] - arr[i + 1]);
      }
    }
    for (int i=0; i < N - 1; i++)     b+=Math.min(max,arr[i]);
    System.out.printf(""Case #%d: %d %d\n"",ca,a,b);
  }
}
"
30000958,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""LargeProblemA.out""));
  int numTestCases=Integer.parseInt(br.readLine());
  for (int i=1; i <= numTestCases; i++) {
    int arrsize=Integer.parseInt(br.readLine());
    String line=br.readLine();
    String[] list=line.split("" "");
    Integer[] result=new Integer[list.length];
    int minEaten=0;
    int minRate=0;
    for (int iii=0; iii < arrsize; iii++) {
      result[iii]=Integer.parseInt(list[iii]);
      if (iii > 0) {
        int rate=Math.max(0,result[iii - 1] - result[iii]);
        minEaten+=rate;
        minRate=Math.max(minRate,rate);
      }
    }
    int totalEaten=0;
    for (int jjj=0; jjj < arrsize - 1; jjj++) {
      totalEaten+=Math.min(minRate,result[jjj]);
    }
    bw.write(""Case #"" + i + "": ""+ minEaten+ "" ""+ totalEaten+ ""\n"");
  }
  br.close();
  bw.close();
}
"
30000959,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  StringBuilder out=new StringBuilder();
  int tests=Integer.parseInt(in.readLine());
  int n;
  int[] mushrooms;
  int[] differences;
  long totalDifferences;
  String[] tok;
  int maxDifference;
  long linearCount;
  for (int testno=1; testno <= tests; testno++) {
    out.append(""Case #"").append(testno).append("": "");
    n=Integer.parseInt(in.readLine());
    tok=in.readLine().trim().split(""\\s+"");
    mushrooms=new int[n];
    differences=new int[n];
    totalDifferences=0;
    maxDifference=0;
    linearCount=0;
    mushrooms[0]=Integer.parseInt(tok[0]);
    for (int i=1; i < n; i++) {
      mushrooms[i]=Integer.parseInt(tok[i]);
      differences[i]=mushrooms[i - 1] - mushrooms[i];
      maxDifference=Math.max(maxDifference,differences[i]);
      totalDifferences+=differences[i] > 0 ? differences[i] : 0;
    }
    for (int i=0; i < n - 1; i++) {
      if (mushrooms[i] >= maxDifference) {
        linearCount+=maxDifference;
      }
 else {
        linearCount+=mushrooms[i];
      }
    }
    out.append(totalDifferences).append("" "").append(linearCount).append(""\n"");
  }
  System.out.println(out);
}
"
30000960,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(""mushroom.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""mushroom.out"")));
  int nmnmnm=Integer.parseInt(f.readLine());
  for (int nmnm=0; nmnm < nmnmnm; nmnm++) {
    int n=Integer.parseInt(f.readLine());
    int[] a=new int[n];
    StringTokenizer st=new StringTokenizer(f.readLine());
    a[0]=Integer.parseInt(st.nextToken());
    int sum=0;
    int max=0;
    for (int i=1; i < n; i++) {
      a[i]=Integer.parseInt(st.nextToken());
      if (a[i] < a[i - 1]) {
        sum+=a[i - 1] - a[i];
      }
      if (max < a[i - 1] - a[i]) {
        max=a[i - 1] - a[i];
      }
    }
    out.print(""Case #"" + (nmnm + 1) + "": ""+ sum+ "" "");
    sum=0;
    for (int i=0; i < n - 1; i++) {
      if (a[i] < max) {
        sum+=a[i];
      }
 else {
        sum+=max;
      }
    }
    out.println(sum);
  }
  out.close();
  System.exit(0);
}
"
30000961,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int numCases=input.nextInt();
  for (int i=1; i <= numCases; i++) {
    case1=0;
    case2=0;
    maxDiff=0;
    int n=input.nextInt();
    int[] arr=new int[n];
    for (int i1=0; i1 < n; i1++) {
      arr[i1]=input.nextInt();
    }
    for (int k=0; k < (n - 1); k++) {
      int current=arr[k];
      int next=arr[k + 1];
      maxDiff=Math.max(maxDiff,current - next);
      if (current > next) {
        case1+=current - next;
      }
    }
    for (int k=0; k < (n - 1); k++) {
      int current=arr[k];
      if (current >= maxDiff) {
        case2+=maxDiff;
      }
 else {
        case2+=current;
      }
    }
    System.out.printf(""Case #%d: %d %d"",i,case1,case2);
    if (i != numCases)     System.out.println();
  }
}
"
30000962,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new File(""A-large.in""));
  FileWriter fw=new FileWriter(new File(""outputLarge.txt""));
  int numTestCases=sc.nextInt();
  for (int testCaseNum=0; testCaseNum < numTestCases; testCaseNum++) {
    int numStates=sc.nextInt();
    int diff=0;
    int maxEatPerState=0;
    int[] states=new int[numStates];
    for (int state=0; state < numStates; state++) {
      int numMushrooms=sc.nextInt();
      states[state]=numMushrooms;
    }
    int sumEat=0;
    for (int state=1; state < numStates; state++) {
      diff=states[state] - states[state - 1];
      if (diff < 0) {
        int d=-1 * diff;
        if (maxEatPerState < d) {
          maxEatPerState=d;
        }
        sumEat+=d;
      }
    }
    int m2Eat=0;
    for (int state=0; state < numStates - 1; state++) {
      int numMushrooms=states[state];
      if (numMushrooms < maxEatPerState) {
        m2Eat+=numMushrooms;
      }
 else {
        m2Eat+=maxEatPerState;
      }
      System.out.println(m2Eat);
    }
    System.out.printf(""Case #%d: %d %d %d%n"",testCaseNum + 1,sumEat,m2Eat,maxEatPerState);
    fw.write(String.format(""Case #%d: %d %d%n"",testCaseNum + 1,sumEat,m2Eat));
  }
  fw.close();
}
"
30000963,"public static void main(String[] args) throws FileNotFoundException {
  Problem1A prog=new Problem1A();
  Scanner in=new Scanner(new FileReader(args[0]));
  final int cntCases=in.nextInt();
  in.nextLine();
  for (int caseNum=1; caseNum <= cntCases && in.hasNextLine(); caseNum++) {
    in.nextLine();
    String[] vals1=in.nextLine().split(""\\s+"");
    int[] arr=new int[vals1.length];
    for (int i1=0; i1 < vals1.length; i1++) {
      arr[i1]=Integer.valueOf(vals1[i1]);
    }
    final int[] vals=arr;
    int sum1=0;
    int prev1=vals[0];
    for (int i1=1; i1 < vals.length; i1++) {
      int cur1=vals[i1];
      if (cur1 < prev1) {
        sum1+=(prev1 - cur1);
      }
      prev1=cur1;
    }
    int ans1=sum1;
    int maxDiff=0;
    int prev=vals[0];
    for (int i=1; i < vals.length; i++) {
      int cur=vals[i];
      if (cur < prev) {
        maxDiff=Math.max(maxDiff,(prev - cur));
      }
      prev=cur;
    }
    int sum=0;
    prev=vals[0];
    for (int i=1; i < vals.length; i++) {
      int cur=vals[i];
      sum+=Math.min(prev,maxDiff);
      prev=cur;
    }
    int ans2=sum;
    System.out.println(""Case #"" + caseNum + "": ""+ ans1+ "" ""+ ans2);
  }
}
"
30000964,"public static void main(String[] args) throws IOException {
  FileInputStream fis=new FileInputStream(file + "".in"");
  InputStreamReader isr=new InputStreamReader(fis);
  BufferedReader br=new BufferedReader(isr);
  FileOutputStream fos=new FileOutputStream(file + "".out"");
  OutputStreamWriter isw=new OutputStreamWriter(fos);
  BufferedWriter bw=new BufferedWriter(isw);
  String line=null;
  List<String> lines=new ArrayList<String>();
  while ((line=br.readLine()) != null) {
    lines.add(line);
  }
  int problemCount=Integer.parseInt(lines.get(0));
  int currentIndex=1;
  for (int i=0; i < problemCount; i++) {
    String line1=lines.get(currentIndex++);
    String line2=lines.get(currentIndex++);
    String[] vals=line2.split("" "");
    int[] ans=new int[vals.length];
    for (int i4=0; i4 < vals.length; i4++) {
      ans[i4]=Integer.valueOf(vals[i4]);
    }
    int[] mush=ans;
    long[] min1=new long[2];
    for (int i2=0; i2 < mush.length - 1; i2++) {
      if (mush[i2 + 1] < mush[i2]) {
        min1[0]+=mush[i2] - mush[i2 + 1];
      }
    }
    int rate=0;
    for (int i3=0; i3 < mush.length - 1; i3++) {
      if (mush[i3 + 1] < mush[i3]) {
        rate=Math.max(rate,mush[i3] - mush[i3 + 1]);
      }
    }
    for (int i1=0; i1 < mush.length - 1; i1++) {
      min1[1]+=Math.min(mush[i1],rate);
    }
    long[] min=min1;
    String r=""Case #"" + (i + 1) + "": ""+ min[0]+ "" ""+ min[1];
    bw.write(r);
    bw.newLine();
  }
  if (bw != null)   bw.close();
  if (br != null)   br.close();
}
"
30000965,"public static void main(String[] args) throws IOException, FileNotFoundException {
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(""other/gcj2015/A-large.in""))));
  PrintWriter ou=new PrintWriter(""other/gcj2015/R1A.txt"");
  int res, rep, i, j, n, rate;
  long ans1, ans2;
  int[] m=new int[10001];
  res=sc.nextInt();
  for (rep=1; rep <= res; rep++) {
    n=sc.nextInt();
    ans1=0;
    rate=0;
    for (i=0; i < n; i++) {
      m[i]=sc.nextInt();
      if (i > 0) {
        ans1+=Math.max(0,m[i - 1] - m[i]);
        if (m[i - 1] - m[i] > rate)         rate=m[i - 1] - m[i];
      }
    }
    ans2=0;
    for (i=0; i < n - 1; i++) {
      if (m[i] >= rate)       ans2+=rate;
 else       ans2+=m[i];
    }
    System.out.printf(""Case #%d: %d %d\n"",rep,ans1,ans2);
    ou.printf(""Case #%d: %d %d\n"",rep,ans1,ans2);
  }
  ou.close();
}
"
30000966,"/** 
 * Assumes input/output file names passed on command line
 * @param args
 */
public static void main(String[] args) throws Exception {
  BufferedReader brIn=new BufferedReader(new FileReader(args[0]));
  BufferedWriter bwOut=new BufferedWriter(new FileWriter(args[1]));
  String sLine;
  int ca=1;
  brIn.readLine();
  while ((sLine=brIn.readLine()) != null) {
    int N=Integer.parseInt(sLine);
    int[] m=new int[N];
    sLine=brIn.readLine();
    String[] fields=sLine.split("" "");
    int totalDec=0;
    int maxDec=0;
    int prev=0;
    for (int i=0; i < m.length; i++) {
      m[i]=Integer.parseInt(fields[i]);
      if (i != 0) {
        int dec=prev - m[i];
        if (dec > maxDec)         maxDec=dec;
        if (dec > 0) {
          totalDec+=dec;
        }
      }
      prev=m[i];
    }
    int rateEst=0;
    for (int i=0; i < m.length - 1; i++) {
      rateEst+=Math.min(maxDec,m[i]);
    }
    String msg=totalDec + "" "" + rateEst;
    bwOut.write(""Case #"" + ca + "": ""+ msg+ ""\r\n"");
    ca++;
  }
  brIn.close();
  bwOut.close();
}
"
30000967,"public static void main(String[] args){
  File file=new File(""A-large.in"");
  try {
    Scanner sc=new Scanner(file);
    int numOfTests=sc.nextInt();
    for (int i=1; i < numOfTests + 1; i++) {
      int numOfPlates=sc.nextInt();
      int[] arr=new int[numOfPlates];
      for (int j=0; j < arr.length; j++) {
        arr[j]=sc.nextInt();
      }
      int method1=0;
      for (int j=0; j < arr.length - 1; j++) {
        if (arr[j + 1] < arr[j]) {
          method1+=(arr[j] - arr[j + 1]);
        }
      }
      int method2=0;
      int slope=Integer.MIN_VALUE;
      for (int j=0; j < arr.length - 1; j++) {
        if ((arr[j] - arr[j + 1]) > slope) {
          slope=arr[j] - arr[j + 1];
        }
      }
      for (int j=0; j < arr.length - 1; j++) {
        if (arr[j] <= slope) {
          method2+=arr[j];
        }
 else {
          method2+=slope;
        }
      }
      System.out.println(""Case #"" + i + "": ""+ method1+ "" ""+ method2);
    }
  }
 catch (  Exception e) {
  }
}
"
30000968,"public static void main(String[] args) throws IOException {
  File inf=new File(""A-large.in"");
  File outf=new File(""output.txt"");
  Scanner scanner=new Scanner(inf);
  BufferedWriter out=new BufferedWriter(new FileWriter(outf));
  int caseNum=scanner.nextInt();
  for (int i=1; i <= caseNum; i++) {
    String outStr=""Case #"" + i + "": "";
    int N=scanner.nextInt();
    int[] list=new int[N];
    for (int j=0; j < list.length; j++) {
      list[j]=scanner.nextInt();
    }
    BigInteger ans=new BigInteger(""0"");
    for (int i1=1; i1 < list.length; i1++) {
      if (list[i1] < list[i1 - 1]) {
        int num=list[i1 - 1] - list[i1];
        ans=ans.add(new BigInteger(Integer.toString(num)));
      }
    }
    BigInteger ans1=ans;
    int maxInter=0;
    for (int i1=1; i1 < list.length; i1++) {
      if (list[i1] < list[i1 - 1] && list[i1 - 1] - list[i1] > maxInter) {
        maxInter=list[i1 - 1] - list[i1];
      }
    }
    BigInteger ans3=new BigInteger(""0"");
    for (int i2=0; i2 < list.length - 1; i2++) {
      int num=(list[i2] < maxInter) ? list[i2] : maxInter;
      ans3=ans3.add(new BigInteger(Integer.toString(num)));
    }
    BigInteger ans2=ans3;
    outStr+=ans1 + "" "" + ans2;
    System.out.println(outStr);
    out.write(outStr + ""\n"");
  }
  scanner.close();
  out.close();
}
"
30000969,"public static void main(String[] args) throws UnsupportedEncodingException, FileNotFoundException {
  FileInputStream fis=new FileInputStream(""A-large.in"");
  Scanner sc=new Scanner(fis);
  PrintWriter writer=new PrintWriter(""out1.txt"",""UTF-8"");
  int t, x, i, j, n, plate[], eat, eat1, f;
  t=sc.nextInt();
  for (x=1; x <= t; x++) {
    n=sc.nextInt();
    f=0;
    eat=0;
    eat1=0;
    plate=new int[n];
    plate[0]=sc.nextInt();
    for (i=1; i < n; i++) {
      plate[i]=sc.nextInt();
      if (plate[i] < plate[i - 1])       eat+=plate[i - 1] - plate[i];
    }
    for (i=1; i < n; i++) {
      int a=plate[i - 1] - plate[i];
      f=f > a ? f : a;
    }
    for (i=0; i < n - 1; i++) {
      eat1+=plate[i] - f >= 0 ? f : plate[i];
    }
    writer.println(""Case #"" + x + "": ""+ eat+ "" ""+ eat1);
  }
  writer.close();
}
"
30000970,"public static void main(String[] args) throws java.lang.Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int t=Integer.parseInt(br.readLine()), n, x, c, r, arr[];
  String s[], ss;
  for (int bv=1; bv <= t; bv++) {
    n=Integer.parseInt(br.readLine());
    s=br.readLine().split("" "");
    arr=new int[n];
    for (int i=0; i < n; i++) {
      arr[i]=Integer.parseInt(s[i]);
    }
    int max=0;
    for (int i=1; i < n; i++) {
      if ((arr[i - 1] - arr[i]) > max) {
        max=arr[i - 1] - arr[i];
      }
    }
    long ans=0;
    for (int i=0; i < n - 1; i++) {
      if (arr[i] <= max) {
        ans=ans + (long)arr[i];
      }
 else {
        ans+=(long)max;
      }
    }
    long ans1=0;
    for (int i=1; i < n; i++) {
      if (arr[i - 1] > arr[i]) {
        ans1+=(long)(arr[i - 1] - arr[i]);
      }
    }
    System.out.println(""Case #"" + bv + "": ""+ ans1+ "" ""+ ans);
  }
}
"
30000971,"public static void main(String[] args){
  try {
    Scanner scanner=new Scanner(new FileInputStream(""input.txt""));
    scanner.useLocale(Locale.ENGLISH);
    BufferedWriter out=new BufferedWriter(new FileWriter(""output.txt""));
    int tests=scanner.nextInt();
    for (int i=0; i < tests; i++) {
      int n=scanner.nextInt();
      int[] values=new int[n];
      for (int j=0; j < values.length; j++) {
        values[j]=scanner.nextInt();
      }
      int minSlope=0;
      int firstMin=0;
      for (int j=0; j < values.length - 1; j++) {
        int delta=values[j] - values[j + 1];
        if (delta > 0) {
          firstMin+=delta;
          minSlope=Math.max(minSlope,delta);
        }
      }
      int secondMin=0;
      for (int j=0; j < values.length - 1; j++) {
        secondMin+=Math.min(values[j],minSlope);
      }
      out.write(""Case #"" + (i + 1) + "": ""+ firstMin+ "" ""+ secondMin+ ""\n"");
    }
    out.close();
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
  }
}
"
30000972,"public static void main(String[] args){
  A a=new A();
  Scanner in=new Scanner(System.in);
  int cases=Integer.parseInt(in.nextLine());
  for (int a1=0; a1 < cases; a1++) {
    int num=Integer.parseInt(in.nextLine());
    String[] split=in.nextLine().split("" "");
    int[] vals=new int[num];
    for (int i=0; i < num; i++) {
      vals[i]=Integer.parseInt(split[i]);
    }
    int first=0;
    int second=0;
    int rate=0;
    for (int i=0; i < num - 1; i++) {
      if (vals[i + 1] < vals[i]) {
        first+=vals[i] - vals[i + 1];
        rate=Math.max(rate,vals[i] - vals[i + 1]);
      }
    }
    for (int i=0; i < num - 1; i++) {
      second+=Math.min(vals[i],rate);
    }
    System.out.println(""Case #"" + (a1 + 1) + "": ""+ first+ "" ""+ second);
  }
}
"
30000973,"public static void main(String[] args){
  A r=(new A());
  Scanner sc=new Scanner(System.in);
  r.cases=1;
  r.nt=sc.nextInt();
  while (--r.nt >= 0) {
    System.out.print(""Case #"" + r.cases + "": "");
    r.n=sc.nextInt();
    r.ans=new int[2];
    r.mushroom=new int[r.n];
    for (int i=0; i < r.n; ++i) {
      r.mushroom[i]=sc.nextInt();
    }
    r.ans[0]=0;
    for (int i=1; i < r.n; ++i) {
      if (r.mushroom[i] <= r.mushroom[i - 1]) {
        r.ans[0]+=r.mushroom[i - 1] - r.mushroom[i];
      }
    }
    r.maxVal=0;
    for (int i=1; i < r.n; ++i) {
      if (r.mushroom[i] < r.mushroom[i - 1]) {
        r.maxVal=Math.max(r.maxVal,r.mushroom[i - 1] - r.mushroom[i]);
      }
    }
    r.ans[1]=0;
    for (int i=1; i < r.n; ++i) {
      r.ans[1]+=Math.min(r.mushroom[i - 1],r.maxVal);
    }
    System.out.println(r.ans[0] + "" "" + r.ans[1]);
    ++r.cases;
  }
}
"
30000974,"public static void main(String[] args) throws Exception {
  in=new Scanner(new File(filename + "".in""));
  out=new PrintStream(new FileOutputStream(filename + "".out""));
  int num=Integer.parseInt(in.nextLine());
  for (int i=1; i <= num; i++) {
    String line=in.nextLine();
    int n=Integer.parseInt(line);
    int[] arr=new int[n];
    String[] ss=in.nextLine().split("" "");
    for (int j=0; j < n; j++) {
      arr[j]=Integer.parseInt(ss[j]);
    }
    int sum=0;
    for (int i1=0; i1 < arr.length - 1; i1++) {
      if (arr[i1] > arr[i1 + 1])       sum+=arr[i1] - arr[i1 + 1];
    }
    int res1=sum;
    int sum1=0;
    int rate=0;
    for (int i2=0; i2 < arr.length - 1; i2++) {
      if (arr[i2] - arr[i2 + 1] > rate)       rate=arr[i2] - arr[i2 + 1];
    }
    for (int i1=0; i1 < arr.length - 1; i1++) {
      if (arr[i1] >= rate) {
        sum1+=rate;
        arr[i1]-=rate;
      }
 else {
        sum1+=arr[i1];
        arr[i1]=0;
      }
    }
    int res2=sum1;
    String s=""Case #"" + i + "": ""+ res1+ "" ""+ res2;
    System.out.println(s);
    out.println(s);
  }
  in.close();
  out.close();
}
"
30000975,"public static void main(String[] args){
  Mushrooms mt=new Mushrooms();
  try {
    Scanner s=new Scanner(new File(mt.inputFile));
    int t=s.nextInt();
    for (int tc=1; tc <= t; tc++) {
      System.out.print(""Case #"" + tc + "": "");
      int N=s.nextInt();
      int[] m=new int[N];
      for (int i=0; i < N; i++) {
        m[i]=s.nextInt();
      }
      int bd=0;
      for (int i=0; i < N - 1; i++) {
        if ((m[i] - m[i + 1]) > bd) {
          bd=m[i] - m[i + 1];
        }
      }
      int m1=0;
      int m2=0;
      for (int i=0; i < N - 1; i++) {
        if ((m[i] - m[i + 1]) > 0) {
          m1+=m[i] - m[i + 1];
        }
        if (m[i] >= bd) {
          m2+=bd;
        }
 else {
          m2+=m[i];
        }
      }
      System.out.println(m1 + "" "" + m2);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000976,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int t=Integer.parseInt(in.readLine());
  for (int i=1; i <= t; i++) {
    int n=Integer.parseInt(in.readLine());
    String[] next=in.readLine().split("" "");
    int[] mushrooms=new int[n];
    for (int j=0; j < n; j++) {
      mushrooms[j]=Integer.parseInt(next[j]);
    }
    int[] diffs=new int[n - 1];
    for (int j=1; j < n; j++) {
      diffs[j - 1]=mushrooms[j] - mushrooms[j - 1];
    }
    int first=0;
    int second=0;
    int smallestD=9999999;
    for (int j=0; j < n - 1; j++) {
      if (diffs[j] < 0)       first+=Math.abs(diffs[j]);
    }
    for (int j=0; j < n - 1; j++) {
      smallestD=Math.min(smallestD,diffs[j]);
    }
    smallestD=Math.abs(smallestD);
    for (int j=0; j < n - 1; j++) {
      second+=Math.min(mushrooms[j],smallestD);
    }
    System.out.format(""Case #%d: %d %d\n"",i,first,second);
  }
}
"
30000977,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""in.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""out.out""));
  int t=Integer.parseInt(br.readLine());
  for (c=1; c <= t; c++) {
    long len=Integer.parseInt(br.readLine());
    String line=br.readLine();
    String[] fields=line.split("" "");
    long prev=Integer.parseInt(fields[0]);
    long meth1=0;
    long meth2=0;
    long rate=0;
    for (int i=1; i < len; i++) {
      long curr=Integer.parseInt(fields[i]);
      if (prev > curr) {
        meth1+=(prev - curr);
      }
      if (prev - rate > curr) {
        rate=prev - curr;
      }
      prev=curr;
    }
    meth2=rate * (len - 1);
    for (int i=0; i < len - 1; i++) {
      int num=Integer.parseInt(fields[i]);
      if (num - rate < 0) {
        meth2+=num - rate;
      }
    }
    bw.write(""Case #"" + c + "": ""+ meth1+ "" ""+ meth2+ ""\n"");
  }
  br.close();
  bw.close();
}
"
30000978,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new FileReader(""A-large.in""));
    PrintWriter out=new PrintWriter(new FileWriter(""outA.txt""));
    int cases=in.nextInt();
    in.nextLine();
    for (int i=0; i < cases; i++) {
      int n=in.nextInt();
      int[] a=new int[n];
      for (int j=0; j < a.length; j++) {
        a[j]=in.nextInt();
      }
      A aa=new A();
      int total=0;
      for (int i1=1; i1 < a.length; i1++) {
        if (a[i1 - 1] > a[i1]) {
          total+=(a[i1 - 1] - a[i1]);
        }
      }
      int total1=total;
      int total3=0, rate=0;
      for (int i1=1; i1 < a.length; i1++) {
        if (a[i1 - 1] > a[i1] && (a[i1 - 1] - a[i1] > rate)) {
          rate=a[i1 - 1] - a[i1];
        }
      }
      for (int i2=0; i2 < a.length - 1; i2++) {
        if (a[i2] < rate) {
          total3+=a[i2];
        }
 else {
          total3+=rate;
        }
      }
      int total2=total3;
      out.println(""Case #"" + (i + 1) + "": ""+ total1+ "" ""+ total2);
    }
    in.close();
    out.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000979,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(""A-large(1).in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""mush.out.txt"")));
  StringTokenizer st=new StringTokenizer(f.readLine());
  String answer="""";
  int numCases=Integer.parseInt(st.nextToken());
  for (int i=0; i < numCases; i++) {
    st=new StringTokenizer(f.readLine());
    LinkedList<Integer> arr=new LinkedList();
    int numStacks=Integer.parseInt(st.nextToken());
    st=new StringTokenizer(f.readLine());
    int totalDrop=0;
    int maxDrop=0;
    int lastNum=0;
    int newNum=0;
    for (int j=0; j < numStacks; j++) {
      lastNum=newNum;
      newNum=Integer.parseInt(st.nextToken());
      arr.add(newNum);
      if (lastNum - newNum > maxDrop) {
        maxDrop=lastNum - newNum;
      }
      if (lastNum - newNum > 0) {
        totalDrop+=lastNum - newNum;
      }
    }
    int totMaxDrop=0;
    for (int j=0; j < arr.size() - 1; j++) {
      if (arr.get(j) - maxDrop < 0) {
        totMaxDrop+=arr.get(j);
      }
 else {
        totMaxDrop+=maxDrop;
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ totalDrop+ "" ""+ totMaxDrop);
    out.println(""Case #"" + (i + 1) + "": ""+ totalDrop+ "" ""+ totMaxDrop);
  }
  out.close();
  System.exit(0);
}
"
30000980,"public static void main(String[] args) throws Exception {
  InputStream inStream=new FileInputStream(""input/A-large.in"");
  OutputStream outStream=new FileOutputStream(""output/A-large-out.txt"");
  Scanner in=new Scanner(new BufferedInputStream(inStream));
  PrintWriter out=new PrintWriter(new BufferedOutputStream(outStream));
  int numCases=in.nextInt();
  for (int caseIdx=1; caseIdx <= numCases; caseIdx++) {
    int numSamples=in.nextInt();
    int[] samples=new int[numSamples];
    for (int i=0; i < numSamples; i++) {
      samples[i]=in.nextInt();
    }
    int decreaseSum=0;
    int maxDecrease=0;
    for (int i=0; i < samples.length - 1; i++) {
      int decrease=samples[i] - samples[i + 1];
      if (decrease > 0) {
        decreaseSum+=decrease;
        maxDecrease=Math.max(decrease,maxDecrease);
      }
    }
    double minRate=maxDecrease / 10.0;
    int time=(samples.length - 1) * 10;
    double minEaten1=0;
    for (int i=0; i < samples.length - 1; i++) {
      minEaten1+=Math.min(minRate * 10,samples[i]);
    }
    int result0=decreaseSum;
    int result1=(int)Math.floor(minEaten1);
    int[] result=new int[]{result0,result1};
    String resultStr=String.format(""%s %s"",result[0],result[1]);
    String fullResultStr=String.format(""Case #%s: %s"",caseIdx,resultStr);
    out.println(fullResultStr);
    System.out.println(fullResultStr);
  }
  in.close();
  out.close();
}
"
30000981,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  long t=sc.nextLong();
  int i=1;
  while (i <= t) {
    int numEle=sc.nextInt();
    int arr[]=new int[numEle];
    long sum1=0, sum2=0;
    arr[0]=sc.nextInt();
    int maxRate=-1;
    for (int j=1; j < numEle; j++) {
      arr[j]=sc.nextInt();
      if (arr[j - 1] - arr[j] >= 0) {
        sum1+=arr[j - 1] - arr[j];
        maxRate=Math.max(maxRate,arr[j - 1] - arr[j]);
      }
    }
    for (int k=0; k < numEle - 1; k++) {
      if (arr[k] <= maxRate) {
        sum2+=arr[k];
      }
 else {
        sum2+=maxRate;
      }
    }
    System.out.println(""Case #"" + i + "": ""+ sum1+ "" ""+ sum2);
    i++;
  }
}
"
30000982,"public static void main(String[] argv){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=0; i < T; i++) {
    int N=sc.nextInt();
    int[] m=new int[N];
    for (int i2=0; i2 < N; i2++) {
      m[i2]=sc.nextInt();
    }
    long diff_tot=0;
    int diff_max=0;
    int prev=m[0];
    for (int i3=1; i3 < N; i3++) {
      int diff=m[i3] - m[i3 - 1];
      if (diff <= 0) {
        diff_tot-=diff;
        diff_max=Math.max(diff_max,-diff);
      }
      prev=m[i3];
    }
    long e2_tot=0;
    for (int i1=0; i1 < N - 1; i1++) {
      if (m[i1] >= diff_max) {
        e2_tot+=diff_max;
      }
 else {
        e2_tot+=m[i1];
      }
    }
    System.out.printf(""Case #%d: %d %d\n"",i + 1,diff_tot,e2_tot);
  }
}
"
30000983,"public static void main(String[] args) throws java.lang.Exception {
  BufferedReader in=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter out=new PrintWriter(""output.txt"");
  int t, x1, n, i, v1, v2, ans1, ans2, diff;
  t=Integer.parseInt(in.readLine());
  for (x1=0; x1 < t; x1++) {
    n=Integer.parseInt(in.readLine());
    StringTokenizer st1=new StringTokenizer(in.readLine());
    int[] a=new int[n];
    for (i=0; i < n; i++) {
      a[i]=Integer.parseInt(st1.nextToken());
    }
    v1=a[0];
    ans1=0;
    diff=0;
    for (i=1; i < n; i++) {
      v2=a[i];
      if (v2 < v1) {
        ans1+=(v1 - v2);
        diff=Math.max(diff,v1 - v2);
      }
      v1=a[i];
    }
    ans2=0;
    for (i=0; i < n - 1; i++) {
      ans2+=Math.min(a[i],diff);
    }
    out.println(""Case #"" + (x1 + 1) + "": ""+ ans1+ "" ""+ ans2);
  }
  out.flush();
  out.close();
}
"
30000984,"public static void main(String[] args) throws Exception {
  Mushroom m=new Mushroom();
  BufferedReader input=new BufferedReader(new InputStreamReader(System.in));
  int n=Integer.parseInt(input.readLine());
  for (int i=0; i < n; i++) {
    int a=Integer.parseInt(input.readLine());
    int[] p=new int[a];
    String[] ss=input.readLine().split(""\\s"");
    for (int j=0; j < ss.length; j++) {
      p[j]=Integer.parseInt(ss[j]);
    }
    int[] r=new int[2];
    int a1=0;
    int b=0;
    for (int i1=1; i1 < p.length; ++i1) {
      if (p[i1 - 1] > p[i1]) {
        a1+=p[i1 - 1] - p[i1];
        b=Math.max(p[i1 - 1] - p[i1],b);
      }
    }
    r[0]=a1;
    a1=0;
    for (int i2=1; i2 < p.length; ++i2) {
      if (b < p[i2 - 1]) {
        a1+=b;
      }
 else {
        a1+=p[i2 - 1];
      }
    }
    r[1]=a1;
    int[] answer=r;
    System.out.println(""Case #"" + (i + 1) + "": ""+ answer[0]+ "" ""+ answer[1]);
  }
}
"
30000985,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(""src/A-large.in""))));
  String output="""";
  int t=sc.nextInt();
  sc.nextLine();
  for (int i=1; i <= t; i++) {
    int n=sc.nextInt();
    int[] intervals=new int[n];
    for (int j=0; j < n; j++) {
      intervals[j]=sc.nextInt();
    }
    int y=0;
    int minPerInterval=0;
    for (int j=1; j < n; j++) {
      if (intervals[j] < intervals[j - 1]) {
        y+=intervals[j - 1] - intervals[j];
        if (intervals[j - 1] - intervals[j] > minPerInterval)         minPerInterval=intervals[j - 1] - intervals[j];
      }
    }
    int z=0;
    for (int j=0; j < n - 1; j++) {
      z+=Math.min(minPerInterval,intervals[j]);
    }
    output+=""Case #"" + i + "": ""+ y+ "" ""+ z+ ""\n"";
  }
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""src/A-large.out""),""utf-8""));
  bw.write(output);
  bw.close();
}
"
30000986,"public static void main(String[] args){
  try (Scanner input=new Scanner(System.in)){
    int T=input.nextInt();
    for (int t=1; t <= T; t++) {
      int N=input.nextInt();
      int m[]=new int[N];
      int x1=0, x2=0;
      int offset=0;
      m[0]=input.nextInt();
      for (int i=1; i < N; i++) {
        m[i]=input.nextInt();
        if (m[i] < m[i - 1])         x1+=m[i - 1] - m[i];
        offset=Math.max(m[i - 1] - m[i],offset);
      }
      if (offset > 0)       for (int i=0; i < N - 1; i++) {
        x2+=Math.min(m[i],offset);
      }
      System.out.printf(""Case #%d: %d %d"",t,x1,x2);
      System.out.println();
    }
  }
 }
"
30000987,"public static void main(String[] args) throws IOException {
  int numCases;
  File in=new File(""A-large.in"");
  FileWriter out=new FileWriter(""output"");
  BufferedReader reader=new BufferedReader(new FileReader(in));
  BufferedWriter writer=new BufferedWriter(out);
  numCases=Integer.parseInt(reader.readLine());
  for (int i=0; i < numCases; i++) {
    int numInter=Integer.parseInt(reader.readLine());
    String[] intervals_String=reader.readLine().split("" "");
    int[] intervals=new int[numInter];
    for (int j=0; j < numInter; j++) {
      intervals[j]=Integer.parseInt(intervals_String[j]);
    }
    int total=0;
    int[] operate=new int[intervals.length];
    for (int i1=1; i1 <= intervals.length; i1++) {
      operate[intervals.length - i1]=intervals[i1 - 1];
    }
    for (int j=0, k=1; k < operate.length; j++, k++) {
      if (operate[j] < operate[k]) {
        total+=(operate[k] - operate[j]);
      }
    }
    int x=total;
    int total1=0;
    int maxDif=0;
    for (int j=0, k=1; k < intervals.length; j++, k++) {
      if ((intervals[j] - intervals[k]) > maxDif) {
        maxDif=(intervals[j] - intervals[k]);
      }
    }
    for (int h=0; h < intervals.length - 1; h++) {
      if (maxDif > intervals[h]) {
        total1+=intervals[h];
      }
 else {
        total1+=maxDif;
      }
    }
    int y=total1;
    System.out.println(x + "" "" + y);
    writer.write(""Case #"" + (i + 1) + "": ""+ x+ "" ""+ y+ ""\n"");
  }
  reader.close();
  writer.close();
}
"
30000988,"public static void main(String[] args) throws Throwable {
  Scanner in=SAMPLE ? new Scanner(System.in) : new Scanner(new File(PATH + PROBLEM + ""-""+ INPUT+ ""-""+ ID+ "".in""));
  PrintStream out=SAMPLE ? System.out : new PrintStream(PATH + PROBLEM + ""-""+ INPUT+ ""-""+ ID+ "".out"");
  int test=in.nextInt();
  for (int t=1; t <= test; t++) {
    out.print(""Case #"" + t + "": "");
    int N=in.nextInt();
    int[] mushrooms=new int[N];
    for (int i=0; i < mushrooms.length; i++) {
      mushrooms[i]=in.nextInt();
    }
    int minEat1=0;
    for (int i=0; i < mushrooms.length - 1; i++) {
      minEat1+=Math.max(0,mushrooms[i] - mushrooms[i + 1]);
    }
    int maxSingleEat=0;
    for (int i=0; i < mushrooms.length - 1; i++) {
      maxSingleEat=Math.max(maxSingleEat,Math.max(0,mushrooms[i] - mushrooms[i + 1]));
    }
    int minEat2=0;
    for (int i=1; i < mushrooms.length; i++) {
      minEat2+=Math.min(maxSingleEat,mushrooms[i - 1]);
    }
    out.println(minEat1 + "" "" + minEat2);
  }
  out.close();
  in.close();
  System.out.println(""finish!"");
}
"
30000989,"public static void main(String[] args) throws FileNotFoundException {
  File file=new File(""A-large.in"");
  Scanner stdin=new Scanner(file);
  int numCases=stdin.nextInt();
  for (int i=1; i <= numCases; i++) {
    int numSessions=stdin.nextInt();
    int m1Sum=0;
    int previous=0;
    int bigDiff=0;
    int[] mushrooms=new int[numSessions];
    for (int k=0; k < numSessions; k++) {
      int current=stdin.nextInt();
      mushrooms[k]=current;
      if (current < previous) {
        if (previous - current > bigDiff) {
          bigDiff=previous - current;
        }
        m1Sum+=previous - current;
      }
      previous=current;
    }
    int m2Sum=0;
    for (int k=0; k < numSessions - 1; k++) {
      int current=mushrooms[k];
      if (current > bigDiff) {
        m2Sum+=bigDiff;
      }
 else {
        m2Sum+=current;
      }
    }
    System.out.println(""Case #"" + i + "": ""+ m1Sum+ "" ""+ m2Sum);
  }
}
"
30000990,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    int N=in.nextInt();
    int[] intervals=new int[N];
    for (int j=0; j < N; j++) {
      intervals[j]=in.nextInt();
    }
    int eat1=0;
    for (int i2=0; i2 < intervals.length - 1; i2++) {
      if (intervals[i2] > intervals[i2 + 1]) {
        eat1+=intervals[i2] - intervals[i2 + 1];
      }
    }
    int eat2=0, maxEaten=0;
    for (int i3=0; i3 < intervals.length - 1; i3++) {
      if (intervals[i3] - intervals[i3 + 1] > maxEaten) {
        maxEaten=intervals[i3] - intervals[i3 + 1];
      }
    }
    for (int i1=0; i1 < intervals.length - 1; i1++) {
      if (intervals[i1] <= maxEaten) {
        eat2+=intervals[i1];
      }
 else {
        eat2+=maxEaten;
      }
    }
    System.out.println(""Case #"" + i + "": ""+ eat1+ "" ""+ eat2);
  }
}
"
30000991,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new File(FILES_PATH + FILE_NAME + IN_EXT));
  FileWriter fw=new FileWriter(new File(FILES_PATH + FILE_NAME + OUT_EXT));
  int nbTests=in.nextInt();
  in.nextLine();
  int nbEtapes, rate, nbM1, nbM2;
  int[] tab;
  for (int i=0; i < nbTests; i++) {
    nbEtapes=in.nextInt();
    in.nextLine();
    tab=new int[nbEtapes];
    nbM1=0;
    nbM2=0;
    rate=0;
    for (int j=0; j < nbEtapes; j++) {
      tab[j]=in.nextInt();
    }
    for (int j=0; j < nbEtapes - 1; j++) {
      rate=Math.max(rate,tab[j] - tab[j + 1]);
    }
    for (int j=1; j < nbEtapes; j++) {
      if (tab[j] < tab[j - 1]) {
        nbM1+=tab[j - 1] - tab[j];
      }
      nbM2+=Math.min(rate,tab[j - 1]);
    }
    fw.write(""Case #"" + (i + 1) + "": ""+ nbM1+ "" ""+ nbM2+ ""\n"");
    in.nextLine();
  }
  fw.close();
  in.close();
}
"
30000992,"public static void main(String[] args) throws Exception {
  String inputLine;
  try {
    BufferedReader br=new BufferedReader(new FileReader(""C:/Users/vincent/Desktop/A-large.txt""));
    FileWriter fw=new FileWriter(""C:/Users/vincent/Desktop/output.txt"");
    inputLine=br.readLine();
    int testCaseNumber=0;
    int[] inputData;
    while ((inputLine=br.readLine()) != null) {
      double maxDiff=0;
      int currentInPlate=0;
      int timesWeCheck=0;
      testCaseNumber++;
      timesWeCheck=Integer.parseInt(inputLine);
      inputData=new int[timesWeCheck];
      inputLine=br.readLine();
      String[] inputParts=inputLine.split("" "");
      currentInPlate=Integer.parseInt(inputParts[0]);
      inputData[0]=currentInPlate;
      for (int i=1; i < timesWeCheck; i++) {
        int newInPlate=Integer.parseInt(inputParts[i]);
        int currentDiff=currentInPlate - newInPlate;
        if (currentDiff >= 0 && currentDiff > maxDiff) {
          maxDiff=currentDiff;
        }
        currentInPlate=newInPlate;
        inputData[i]=newInPlate;
      }
      int answer1=0;
      for (int i=0; i < inputData.length - 1; i++) {
        int currentOnPlate=inputData[i];
        int nextOnPlate=inputData[i + 1];
        int diff=currentOnPlate - nextOnPlate;
        if (diff > 0) {
          answer1+=diff;
        }
      }
      int answer=answer1;
      double rate=maxDiff / 10;
      int answer3=0;
      for (int i=0; i < inputData.length - 1; i++) {
        int currentOnPlate=inputData[i];
        if (currentOnPlate - inputData[i + 1] >= 0) {
          if (currentOnPlate >= rate * 10) {
            answer3+=rate * 10;
          }
 else {
            answer3+=currentOnPlate;
          }
        }
 else {
          if (currentOnPlate < rate * 10) {
            answer3+=currentOnPlate;
          }
 else {
            answer3+=rate * 10;
          }
        }
      }
      int answer2=answer3;
      String output=""Case #"" + testCaseNumber + "": ""+ answer+ "" ""+ answer2+ ""\n"";
      fw.write(output);
    }
    fw.close();
    br.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30000993,"public static void main(String args[]){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  int z, N, i, j, k;
  int num[]=new int[1000];
  int answ1, answ2, max, min;
  boolean found;
  for (z=1; z <= T; z++) {
    N=in.nextInt();
    answ1=answ2=max=min=0;
    for (i=0; i < N; i++) {
      num[i]=in.nextInt();
      if (i > 0 && num[i - 1] > num[i])       min=Math.max(min,num[i - 1] - num[i]);
      max=Math.max(max,num[i]);
    }
    for (i=1; i < N; i++)     if (num[i - 1] > num[i])     answ1+=num[i - 1] - num[i];
    for (k=min; k <= max; k++) {
      found=true;
      answ2=Math.min(num[0],k);
      for (i=1; i < N; i++) {
        if (num[i - 1] - k > num[i]) {
          found=false;
          break;
        }
        if (i != N - 1)         answ2+=Math.min(k,num[i]);
      }
      if (found)       break;
    }
    System.out.println(""Case #"" + z + "": ""+ answ1+ "" ""+ answ2);
  }
}
"
30000994,"public static void main(String[] args) throws Exception {
  String fileName=args[0];
  MushroomMonster obj=new MushroomMonster();
  BufferedReader br=new BufferedReader(new FileReader(fileName));
  BufferedWriter bw=new BufferedWriter(new FileWriter(fileName + "".out""));
  int T=Integer.parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    Integer N=Integer.parseInt(br.readLine());
    String str=br.readLine();
    StringTokenizer token=new StringTokenizer(str,"" "");
    int[] m=new int[N];
    int max=0;
    for (int j=0; j < N; j++) {
      m[j]=Integer.parseInt(token.nextToken());
      if (j > 0 && m[j] - m[j - 1] < 0) {
        max=Math.max(max,m[j - 1] - m[j]);
      }
    }
    int ans_x=0;
    int ans_y=0;
    for (int j=1; j < N; j++) {
      if (m[j] - m[j - 1] < 0) {
        ans_x+=m[j - 1] - m[j];
      }
      if (m[j - 1] <= max) {
        ans_y+=m[j - 1];
      }
 else {
        ans_y+=max;
      }
    }
    bw.write(""Case #"" + (i + 1) + "": ""+ ans_x+ "" ""+ ans_y);
    bw.write(""\r\n"");
  }
  bw.close();
  br.close();
}
"
30000995,"public static void main(String[] args) throws IOException {
  File text=new File(""A-large.in"");
  Scanner scn=new Scanner(text);
  FileWriter out=new FileWriter(""large-practice.out"");
  int N=scn.nextInt();
  int num_pan;
  for (int i=1; i <= N; i++) {
    num_pan=scn.nextInt();
    int arr[]=new int[num_pan];
    for (int j=0; j < num_pan; j++) {
      arr[j]=scn.nextInt();
    }
    int num_1=0;
    int num_2=0;
    int diff;
    for (int k=0; k < num_pan - 1; k++) {
      if (arr[k] > arr[k + 1]) {
        diff=arr[k] - arr[k + 1];
        num_1=num_1 + diff;
      }
 else {
        diff=0;
        num_1=num_1 + diff;
      }
    }
    int grt=0;
    int temp_grt;
    for (int k=0; k < num_pan - 1; k++) {
      temp_grt=arr[k] - arr[k + 1];
      if (temp_grt > grt)       grt=temp_grt;
    }
    for (int k=0; k < num_pan - 1; k++) {
      if ((arr[k] < arr[k + 1]) && (arr[k] < grt)) {
        num_2=num_2 + arr[k];
      }
 else       if ((arr[k] < arr[k + 1]) && (arr[k] >= grt))       num_2=num_2 + grt;
 else       if ((arr[k] > arr[k + 1]) && (arr[k] >= grt)) {
        num_2=num_2 + grt;
      }
 else       if ((arr[k] > arr[k + 1]) && (arr[k] < grt)) {
        num_2=num_2 + arr[k];
      }
 else       if ((arr[k] == arr[k + 1]) && (arr[k] < grt)) {
        num_2=num_2 + arr[k];
      }
 else       if ((arr[k] == arr[k + 1]) && (arr[k] == grt))       num_2=num_2 + grt;
 else       if ((arr[k] == arr[k + 1]) && (arr[k] > grt))       num_2=num_2 + grt;
    }
    out.write(""Case #"" + i + "": ""+ num_1+ "" ""+ num_2+ ""\n"");
  }
  out.flush();
  out.close();
}
"
30000996,"public static void main(String[] args) throws Exception {
  Scanner input=new Scanner(System.in);
  int caseCount=input.nextInt();
  for (int caseNo=1; caseNo <= caseCount; caseNo++) {
    int N=input.nextInt();
    int cs1=0;
    int cr2=0;
    int cs2=0;
    int ary[]=new int[1000];
    int prev=input.nextInt();
    ary[0]=prev;
    for (int i=1; i < N; i++) {
      int nw=input.nextInt();
      ary[i]=nw;
      if (prev > nw) {
        cs1=cs1 + (prev - nw);
        if (cr2 < (prev - nw)) {
          cr2=(prev - nw);
        }
      }
      prev=nw;
    }
    for (int j=0; j < N - 1; j++) {
      if (ary[j] > cr2) {
        cs2=cs2 + cr2;
      }
 else {
        cs2=cs2 + ary[j];
      }
    }
    System.out.println(""Case #"" + caseNo + "": ""+ cs1+ "" ""+ cs2);
  }
}
"
30000997,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(WORK_DIR + ""input.txt""));
  PrintWriter pw=new PrintWriter(new FileWriter(WORK_DIR + ""output.txt""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    System.out.println(""Processing test case "" + (caseNum + 1));
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    Mushroom r=new Mushroom();
    int N=sc.nextInt();
    int[] A=new int[N];
    for (int i=0; i < N; i++) {
      A[i]=sc.nextInt();
    }
    int ans1=0;
    int speed=0;
    for (int i=0; i + 1 < N; i++) {
      if (A[i + 1] < A[i]) {
        ans1+=A[i] - A[i + 1];
        speed=Math.max(speed,A[i] - A[i + 1]);
      }
    }
    int ans2=0;
    for (int i=0; i + 1 < N; i++) {
      ans2+=Math.min(A[i],speed);
    }
    pw.println(ans1 + "" "" + ans2);
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30000998,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numCases=sc.nextInt();
  for (int caseNum=1; caseNum <= numCases; caseNum++) {
    int N=sc.nextInt();
    int[] m=new int[N];
    for (int i=0; i < N; i++) {
      m[i]=sc.nextInt();
    }
    int totalDecrease=0;
    int maxDecrease=0;
    for (int i=1; i < N; i++) {
      if (m[i] < m[i - 1]) {
        int difference=m[i - 1] - m[i];
        totalDecrease+=difference;
        maxDecrease=Math.max(maxDecrease,difference);
      }
    }
    int mushrooms=0;
    for (int i=0; i < N - 1; i++) {
      mushrooms+=Math.min(maxDecrease,m[i]);
    }
    System.out.println(""Case #"" + caseNum + "": ""+ totalDecrease+ "" ""+ mushrooms);
  }
}
"
30000999,"public static void main(String[] args) throws IOException {
  BufferedReader input=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter output=new PrintWriter(new FileWriter(""output.txt""));
  int count=Integer.parseInt(input.readLine());
  for (int counter=1; counter <= count; counter++) {
    int numberOfVars=Integer.parseInt(input.readLine());
    String[] vars=input.readLine().split("" "");
    int[] variables=new int[numberOfVars];
    for (int x=0; x < numberOfVars; x++)     variables[x]=Integer.parseInt(vars[x]);
    int totalFirst=0;
    for (int x=1; x < numberOfVars; x++) {
      if (variables[x - 1] > variables[x])       totalFirst+=variables[x - 1] - variables[x];
    }
    int totalSecond=0;
    int largestDiff=0;
    for (int x=1; x < numberOfVars; x++) {
      if (variables[x - 1] > variables[x]) {
        if (largestDiff < variables[x - 1] - variables[x])         largestDiff=variables[x - 1] - variables[x];
      }
    }
    int firstVal=variables[0];
    for (int x=1; x < numberOfVars; x++) {
      if (variables[x - 1] - largestDiff < 0) {
        totalSecond+=variables[x - 1];
      }
 else       totalSecond+=largestDiff;
    }
    output.println(""Case #"" + counter + "": ""+ totalFirst+ "" ""+ totalSecond);
  }
  output.close();
}
"
30001000,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(args[0]));
  int numCases=Integer.parseInt(br.readLine());
  for (int i=0; i < numCases; i++) {
    int intervals=Integer.parseInt(br.readLine());
    String[] sv=br.readLine().split("" "");
    int[] iv=new int[intervals];
    for (int j=0; j < intervals; j++) {
      iv[j]=Integer.parseInt(sv[j]);
    }
    int y=0, a=0, max=0, z=0;
    for (int j=0; j < intervals - 1; j++) {
      y+=(a=iv[j] - iv[j + 1]) > 0 ? a : 0;
      max=a > max ? a : max;
    }
    for (int j=0; j < intervals - 1; j++) {
      z+=(iv[j] < max) ? iv[j] : max;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ y+ "" ""+ z);
  }
}
"
30001001,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int test=1; test <= t; ++test) {
    int n=in.nextInt();
    int[] arr=new int[n];
    for (int i=0; i < arr.length; ++i)     arr[i]=in.nextInt();
    long totalWithChoice=0;
    for (int i=1; i < arr.length; ++i) {
      if (arr[i] < arr[i - 1])       totalWithChoice+=arr[i - 1] - arr[i];
    }
    long totalWithConstant=0;
    int maxChange=0;
    for (int i=1; i < arr.length; ++i)     maxChange=Math.max(maxChange,arr[i - 1] - arr[i]);
    for (int i=0; i < arr.length - 1; ++i) {
      totalWithConstant+=Math.min(arr[i],maxChange);
    }
    System.out.printf(""Case #%d: %d %d\n"",test,totalWithChoice,totalWithConstant);
  }
}
"
30001002,"public static void main(String[] args) throws Exception {
  String output="""";
  String pathname=""D:\\Documents\\Downloads\\A-l.in"";
  File filename=new File(pathname);
  InputStreamReader reader=new InputStreamReader(new FileInputStream(filename));
  BufferedReader sc=new BufferedReader(reader);
  int total=Integer.parseInt(sc.readLine());
  int starting=1;
  int[] arr=new int[total];
  for (int i=0; i < total; i++) {
    int n=Integer.parseInt(sc.readLine());
    String r1=sc.readLine();
    String[] a1=r1.split("" "");
    int totalSum=0;
    int before=Integer.parseInt(a1[0]);
    for (int k=1; k < n; k++) {
      int mm=Integer.parseInt(a1[k]);
      if (mm <= before) {
        totalSum+=(before - mm);
      }
 else {
      }
      before=mm;
    }
    int totalSum2=0;
    int before2=Integer.parseInt(a1[0]);
    int findMax2=0;
    for (int k=1; k < n; k++) {
      int mm=Integer.parseInt(a1[k]);
      int difference=before2 - mm;
      if (difference > findMax2) {
        findMax2=difference;
      }
 else {
      }
      before2=mm;
    }
    before2=Integer.parseInt(a1[0]);
    for (int k=1; k < n; k++) {
      int mm=Integer.parseInt(a1[k]);
      int difference=before2 - mm;
      if (before2 < findMax2) {
        totalSum2+=before2;
      }
 else {
        totalSum2+=findMax2;
      }
      before2=mm;
    }
    output+=""Case #"" + (i + 1) + "": ""+ totalSum+ "" ""+ totalSum2+ ""\n"";
  }
  Writer writer=null;
  try {
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""generatedNumber.txt""),""utf-8""));
    writer.write(output);
  }
 catch (  IOException ex) {
  }
 finally {
    try {
      writer.close();
    }
 catch (    Exception ex) {
    }
  }
}
"
30001003,"public static void main(String[] abb){
  try {
    Scanner in=new Scanner(new File(""safia.in""));
    PrintWriter writer=new PrintWriter(""out2.in"",""UTF-8"");
    int testcase=in.nextInt();
    int tab[][]=new int[5][5];
    for (int p=0; p < testcase; p++) {
      int n=in.nextInt();
      int inp[]=new int[n];
      int max=0;
      for (int i=0; i < n; i++) {
        inp[i]=in.nextInt();
        if (i != 0) {
          max=Math.max(max,(inp[i - 1] - inp[i]));
        }
      }
      System.out.println(max);
      int out1=0;
      int out2=0;
      for (int j=0; j < n - 1; j++) {
        if (inp[j + 1] < inp[j]) {
          out1=inp[j] - inp[j + 1] + out1;
        }
        if (inp[j] < max) {
          out2=out2 + inp[j];
        }
 else {
          out2=out2 + max;
        }
      }
      writer.println(""Case #"" + (p + 1) + "": ""+ out1+ "" ""+ out2);
    }
    writer.close();
  }
 catch (  IOException e) {
  }
}
"
30001004,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(""mushroom.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""mushroom.out"")));
  int t=Integer.parseInt(f.readLine());
  for (int waka=0; waka < t; waka++) {
    StringTokenizer st=new StringTokenizer(f.readLine());
    int n=Integer.parseInt(st.nextToken());
    int m[]=new int[n];
    StringTokenizer sc=new StringTokenizer(f.readLine());
    System.out.println(n);
    for (int i=0; i < n; i++) {
      m[i]=Integer.parseInt(sc.nextToken());
      System.out.println(""m["" + i + ""] is ""+ m[i]);
    }
    int first=0;
    int rate=0;
    for (int i=0; i < n - 1; i++) {
      first+=Math.max(0,m[i] - m[i + 1]);
      if (m[i] > m[i + 1]) {
        rate=Math.max(rate,m[i] - m[i + 1]);
      }
    }
    int second=0;
    for (int i=0; i < n - 1; i++) {
      if (rate >= m[i]) {
        second+=m[i];
      }
 else {
        second+=rate;
      }
    }
    out.print(""Case #"" + (waka + 1) + "": "");
    out.println(first + "" "" + second);
  }
  out.close();
  System.exit(0);
}
"
30001005,"public static void main(String[] args) throws IOException {
  String filename=args[0];
  BufferedReader in=new BufferedReader(new FileReader(filename));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""A-ans.txt"")));
  StringTokenizer st=new StringTokenizer(in.readLine());
  int numCase=Integer.valueOf(st.nextToken());
  for (int c=1; c <= numCase; c++) {
    st=new StringTokenizer(in.readLine());
    int N=Integer.valueOf(st.nextToken());
    st=new StringTokenizer(in.readLine());
    int[] input=new int[N];
    for (int i=0; i < N; i++) {
      input[i]=Integer.valueOf(st.nextToken());
    }
    int largestGap=0;
    long sum1=0;
    for (int i=1; i < input.length; i++) {
      if (input[i - 1] > input[i]) {
        int gap=input[i - 1] - input[i];
        if (gap > largestGap) {
          largestGap=gap;
        }
        sum1+=gap;
      }
    }
    long sum2=0;
    for (int j=0; j < input.length - 1; j++) {
      if (input[j] < largestGap) {
        sum2+=input[j];
      }
 else {
        sum2+=largestGap;
      }
    }
    long[] solution=new long[]{sum1,sum2};
    out.println(""Case #"" + c + "": ""+ solution[0]+ "" ""+ solution[1]);
  }
  out.close();
  in.close();
}
"
30001006,"public static void main(String[] args) throws Exception {
  Scanner input=new Scanner(new FileReader(""A-large.in""));
  int numCases=input.nextInt();
  String out="""";
  for (int i=0; i < numCases; i++) {
    int looks=input.nextInt();
    int m1=0, m2=0, spr=0;
    int[] shrooms=new int[looks];
    for (int j=0; j < looks; j++) {
      shrooms[j]=input.nextInt();
      if (j > 0) {
        if (shrooms[j - 1] > shrooms[j]) {
          m1+=shrooms[j - 1] - shrooms[j];
          if (shrooms[j - 1] - shrooms[j] > spr) {
            spr=shrooms[j - 1] - shrooms[j];
          }
        }
      }
    }
    for (int j=0; j < looks - 1; j++) {
      if (shrooms[j] - spr >= 0) {
        m2+=spr;
      }
 else {
        m2+=shrooms[j];
      }
    }
    out+=""Case #"" + (i + 1) + "": ""+ m1+ "" ""+ m2+ ""\n"";
  }
  try {
    FileWriter fw=new FileWriter(""Solution.out"");
    BufferedWriter bw=new BufferedWriter(fw);
    PrintWriter fileOut=new PrintWriter(bw);
    fileOut.println(out);
    fileOut.close();
    System.out.println(""the file "" + ""Solution.out"" + "" is created!"");
  }
 catch (  Exception e) {
    System.out.println(e.toString());
  }
}
"
30001007,"public static void main(String[] args) throws IOException {
  File input=new File(""A-large.in"");
  Scanner sc=new Scanner(input);
  int numCases=sc.nextInt();
  for (int i=1; i <= numCases; i++) {
    int numM=sc.nextInt();
    int localMax=0;
    int count1=0;
    ArrayList<Integer> diffList=new ArrayList<Integer>();
    ArrayList<Integer> numList=new ArrayList<Integer>();
    for (int j=1; j <= numM; j++) {
      int nextNum=sc.nextInt();
      numList.add(nextNum);
      int difference=localMax - nextNum;
      diffList.add(difference);
      if (localMax >= nextNum) {
        count1+=difference;
      }
      localMax=nextNum;
    }
    int maxDiff=Collections.max(diffList);
    int total=0;
    for (int k=0; k < numList.size() - 1; k++) {
      if (numList.get(k) > maxDiff)       total+=maxDiff;
 else       total+=numList.get(k);
    }
    System.out.println(""Case #"" + i + "": ""+ count1+ "" ""+ total);
  }
  sc.close();
}
"
30001008,"public static void main(String args[]) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  int cases=Integer.parseInt(br.readLine());
  for (int i=0; i < cases; i++) {
    System.out.print(""Case #"" + (i + 1) + "": "");
    int periods=Integer.parseInt(br.readLine());
    StringTokenizer st=new StringTokenizer(br.readLine());
    int[] mushrooms=new int[periods];
    for (int j=0; j < periods; j++) {
      mushrooms[j]=Integer.parseInt(st.nextToken());
    }
    int eaten=0;
    int prev=mushrooms[0];
    for (int i1=1; i1 < mushrooms.length; i1++) {
      if (mushrooms[i1] < prev) {
        eaten+=prev - mushrooms[i1];
      }
      prev=mushrooms[i1];
    }
    System.out.print("""" + eaten);
    int maxInPeriod=0;
    int prev1=mushrooms[0];
    for (int i2=1; i2 < mushrooms.length; i2++) {
      if ((prev1 - mushrooms[i2]) > maxInPeriod) {
        maxInPeriod=prev1 - mushrooms[i2];
      }
      prev1=mushrooms[i2];
    }
    int eaten1=0;
    prev1=mushrooms[0];
    for (int i1=1; i1 < mushrooms.length; i1++) {
      int potentiallyEaten=mushrooms[i1] - prev1;
      if (prev1 < maxInPeriod) {
        eaten1+=prev1;
      }
 else {
        eaten1+=maxInPeriod;
      }
      prev1=mushrooms[i1];
    }
    int answer=maxInPeriod * (mushrooms.length - 1);
    System.out.println("" "" + eaten1);
  }
}
"
30001009,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(INPUT_FILE)));
  PrintWriter out=new PrintWriter(new FileOutputStream(OUTPUT_FILE));
  int T=Integer.parseInt(in.readLine());
  for (int CASE=1; CASE <= T; CASE++) {
    StringTokenizer st=new StringTokenizer(in.readLine());
    int N=parseInt(st.nextToken());
    int[] array=new int[N];
    st=new StringTokenizer(in.readLine());
    for (int i=0; i < N; i++) {
      array[i]=parseInt(st.nextToken());
    }
    int total1=0;
    for (int i=0; i < array.length - 1; i++) {
      if (array[i] - array[i + 1] > 0) {
        total1+=array[i] - array[i + 1];
      }
    }
    int max=0;
    for (int i=0; i < array.length - 1; i++) {
      if (array[i] - array[i + 1] > max) {
        max=array[i] - array[i + 1];
      }
    }
    int total2=0;
    for (int i=0; i < array.length - 1; i++) {
      if (array[i] > max) {
        total2+=max;
      }
 else       total2+=array[i];
    }
    out.println(""Case #"" + CASE + "": ""+ total1+ "" ""+ total2);
    out.flush();
  }
  out.close();
  in.close();
}
"
30001010,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(WORK_DIR + "".in""));
  PrintWriter pw=new PrintWriter(new FileWriter(WORK_DIR + "".out""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    System.out.println(""Processing test case "" + (caseNum + 1));
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    A r=new A();
    int N=sc.nextInt();
    int[] a=new int[N];
    for (int i=0; i < N; i++) {
      a[i]=sc.nextInt();
    }
    long ret1=0;
    long ret2=0;
    int max=0;
    for (int i=1; i < N; i++) {
      if (a[i] < a[i - 1]) {
        int dif=a[i - 1] - a[i];
        max=Math.max(max,dif);
        ret1+=dif;
      }
    }
    for (int i=0; i < N - 1; i++) {
      ret2+=Math.min(a[i],max);
    }
    pw.println(ret1 + "" "" + ret2);
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30001011,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  int[] nums=new int[1000];
  for (int i=1; i <= t; i++) {
    int n=sc.nextInt();
    int maxGap=0;
    int sum1=0;
    int sum2=0;
    for (int j=0; j < n; j++) {
      nums[j]=sc.nextInt();
      if (j > 0) {
        maxGap=Math.max(maxGap,nums[j - 1] - nums[j]);
        sum1+=Math.max(0,nums[j - 1] - nums[j]);
      }
    }
    for (int j=0; j < n - 1; j++) {
      sum2+=Math.min(maxGap,nums[j]);
    }
    System.out.printf(""Case #%d: %d %d\n"",i,sum1,sum2);
  }
}
"
30001012,"public static void main(String[] args){
  LinkedList<String> s=new LinkedList<String>();
  try {
    String encoding=""GBK"";
    File file=new File(""/Users/ldfrank533/b.txt"");
    if (file.isFile() && file.exists()) {
      InputStreamReader read=new InputStreamReader(new FileInputStream(file),encoding);
      BufferedReader bufferedReader=new BufferedReader(read);
      String lineTxt=null;
      while ((lineTxt=bufferedReader.readLine()) != null) {
        s.add(lineTxt);
      }
      read.close();
    }
  }
 catch (  Exception e) {
    System.out.println(""读取文件内容出错"");
    e.printStackTrace();
  }
  int trial=Integer.valueOf(s.get(0));
  String[] raw=new String[trial * 2 + 1];
  for (int i=0; i < s.size(); i++) {
    raw[i]=s.get(i);
  }
  for (  String x : raw) {
    System.out.println(x);
  }
  System.out.println(""--------------------------------------------------------------------"");
  int[] intervals=new int[trial];
  int[][] data=new int[trial][0];
  for (int i=0; i < trial; i++) {
    intervals[i]=Integer.valueOf(raw[2 * i + 1]);
    String[] numbers=raw[2 * i + 2].split(""\\s+"");
    int[] ints=new int[numbers.length];
    for (int i1=0; i1 < ints.length; i1++)     ints[i1]=Integer.parseInt(numbers[i1]);
    data[i]=ints;
  }
  int[][] res=new int[trial][2];
  for (int i=0; i < trial; i++) {
    int[] in=data[i];
    int res1=0;
    for (int i1=0; i1 < in.length - 1; i1++) {
      if (in[i1] > in[i1 + 1]) {
        res1+=in[i1] - in[i1 + 1];
      }
    }
    res[i][0]=res1;
    int[] in1=data[i];
    int maxdif=0;
    int res2=0;
    for (int i2=0; i2 < in1.length - 1; i2++) {
      if (in1[i2] > in1[i2 + 1]) {
        if (in1[i2] - in1[i2 + 1] > maxdif) {
          maxdif=in1[i2] - in1[i2 + 1];
        }
      }
    }
    for (int i1=0; i1 < in1.length - 1; i1++) {
      if (in1[i1] < maxdif) {
        res2+=in1[i1];
      }
 else {
        res2+=maxdif;
      }
    }
    res[i][1]=res2;
  }
  try {
    String path=""/Users/ldfrank533/Mushroom0.txt"";
    File file=new File(path);
    BufferedWriter ow=new BufferedWriter(new FileWriter(file));
    for (int i=0; i < trial; i++) {
      String temp=""Case "" + ""#"" + String.valueOf(i + 1) + "": ""+ res[i][0]+ "" ""+ res[i][1];
      ow.write(temp);
      ow.newLine();
    }
    ow.close();
    System.out.println(""Finished Writing"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001013,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int zz=1; zz <= T; zz++) {
    int N=in.nextInt();
    long[] M=new long[N];
    for (int i=0; i < N; i++)     M[i]=in.nextInt();
    long ans1=0;
    for (int i=0; i < N - 1; i++) {
      ans1+=max(0,M[i] - M[i + 1]);
    }
    long max=0;
    for (int i=0; i < N - 1; i++) {
      max=max(max,M[i] - M[i + 1]);
    }
    long ans2=0;
    for (int i=0; i < N - 1; i++)     ans2+=min(max,M[i]);
    System.out.format(""Case #%d: %d %d\n"",zz,ans1,ans2);
  }
}
"
30001014,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new FileReader(""A.in""));
  PrintStream out=new PrintStream(""A.out"");
  int t=Integer.parseInt(in.readLine());
  for (int i=0; i < t; i++) {
    int n=Integer.parseInt(in.readLine());
    String[] arr=in.readLine().split("" "");
    int[] a=new int[n];
    for (int j=0; j < n; j++) {
      a[j]=Integer.parseInt(arr[j]);
    }
    int tot=0;
    int max=0;
    for (int j=0; j < n - 1; j++) {
      if (a[j] > a[j + 1]) {
        tot+=a[j] - a[j + 1];
      }
      max=Math.max(max,a[j] - a[j + 1]);
    }
    long tot2=Long.MAX_VALUE >> 1;
    for (int j=0; j <= 100000; j++) {
      boolean works=true;
      long temptot=0;
      for (int k=0; k < n - 1; k++) {
        if (a[k] <= j) {
          temptot+=a[k];
        }
 else {
          temptot+=j;
        }
        if (j < a[k] - a[k + 1]) {
          works=false;
        }
      }
      if (works) {
        tot2=Math.min(tot2,temptot);
      }
    }
    out.println(""Case #"" + (i + 1) + "": ""+ tot+ "" ""+ tot2);
  }
}
"
30001015,"public static void main(String[] args) throws IOException {
  File fileInput=new File(""A-large.in"");
  File fileOutput=new File(""output.out"");
  BufferedReader reader=new BufferedReader(new FileReader(fileInput));
  BufferedWriter writer=new BufferedWriter(new FileWriter(fileOutput));
  int cases=Integer.parseInt(reader.readLine());
  for (int c=1; c <= cases; c++) {
    int n=Integer.parseInt(reader.readLine());
    String mushroomsS[]=reader.readLine().split("" "");
    int mushrooms[]=new int[n];
    for (int i=0; i < n; i++) {
      mushrooms[i]=Integer.parseInt(mushroomsS[i]);
    }
    int eaten1=0;
    for (int i=1; i < n; i++) {
      if (mushrooms[i - 1] > mushrooms[i]) {
        eaten1+=(mushrooms[i - 1] - mushrooms[i]);
      }
    }
    int t[]=Arrays.copyOf(mushrooms,mushrooms.length);
    int k=0;
    for (int i1=1; i1 < t.length; i1++) {
      if ((t[i1 - 1] - t[i1]) > k) {
        k=(t[i1 - 1] - t[i1]);
      }
    }
    int eatCount=k;
    int eaten2=0;
    if (eatCount == 0) {
    }
 else {
      for (int i=0; i < n - 1; i++) {
        if (mushrooms[i] < eatCount) {
          eaten2+=mushrooms[i];
        }
 else {
          eaten2+=eatCount;
        }
      }
    }
    writer.write(""Case #"" + c + "": ""+ eaten1+ "" ""+ eaten2+ ""\n"");
  }
  reader.close();
  writer.close();
}
"
30001016,"public static void main(String[] args) throws IOException {
  BufferedReader f=new BufferedReader(new FileReader(""g.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""gJamout.txt"")));
  int t=Integer.parseInt(f.readLine());
  for (int iii=1; iii <= t; iii++) {
    int num=Integer.parseInt(f.readLine());
    String[] cur=f.readLine().split("" "");
    int[] te=new int[num];
    for (int i=0; i < num; i++) {
      te[i]=Integer.parseInt(cur[i]);
    }
    int res1=0;
    for (int i=1; i < num; i++) {
      if (te[i] < te[i - 1]) {
        res1+=te[i - 1] - te[i];
      }
    }
    int res2=0;
    int md=0;
    for (int i=1; i < num; i++) {
      md=Math.max(md,te[i - 1] - te[i]);
    }
    for (int i=0; i < num - 1; i++) {
      res2+=Math.min(md,te[i]);
    }
    out.println(""Case #"" + iii + "": ""+ res1+ "" ""+ res2);
  }
  out.close();
  System.exit(0);
}
"
30001017,"public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int k=1; k <= t; k++) {
    int n=sc.nextInt();
    int a[]=new int[n];
    int i=0;
    for (i=0; i < n; i++) {
      a[i]=sc.nextInt();
    }
    int max=0;
    int total2=0;
    int total1=0;
    int diff;
    for (i=0; i < n - 1; i++) {
      diff=a[i] - a[i + 1];
      if (diff > max)       max=diff;
    }
    for (i=0; i < n - 1; i++) {
      if (a[i] > a[i + 1])       total1+=a[i] - a[i + 1];
    }
    for (i=0; i < n - 1; i++) {
      if (a[i] < max)       total2+=a[i];
 else       total2+=max;
    }
    System.out.println(""Case #"" + k + "": ""+ total1+ "" ""+ total2);
  }
}
"
30001018,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numcases=sc.nextInt();
  for (int cas=1; cas <= numcases; cas++) {
    System.out.print(""Case #"" + cas + "": "");
    long methone=0;
    int numticks=sc.nextInt();
    long[] values=new long[numticks];
    for (int i=0; i < numticks; i++) {
      values[i]=sc.nextInt();
    }
    long maxdec=0;
    for (int i=1; i < numticks; i++) {
      if (values[i] < values[i - 1]) {
        methone+=values[i - 1] - values[i];
        if (values[i - 1] - values[i] > maxdec) {
          maxdec=values[i - 1] - values[i];
        }
      }
    }
    int methtwo=0;
    for (int i=0; i < numticks - 1; i++) {
      if (values[i] > maxdec) {
        methtwo+=maxdec;
      }
 else {
        methtwo+=values[i];
      }
    }
    System.out.println(methone + "" "" + methtwo);
  }
}
"
30001019,"public static void main(String[] args) throws Exception {
  FileWriter fw=new FileWriter(""C:\\output.txt"");
  BufferedWriter out=new BufferedWriter(fw);
  String pathname=""C:\\Users\\YC14rp1\\Downloads\\A-large (1).in"";
  Scanner scanner=new Scanner(new File(pathname));
  int tn=scanner.nextInt();
  scanner.nextLine();
  for (int ti=1; ti <= tn; ti++) {
    int n=scanner.nextInt();
    int[] l21=new int[n];
    for (int i1=0; i1 < n; i1++) {
      l21[i1]=scanner.nextInt();
    }
    int[] l2=l21;
    int s1=0;
    int mx=0;
    for (int i=1; i < n; i++) {
      if (l2[i] < l2[i - 1]) {
        int delta=l2[i - 1] - l2[i];
        s1+=delta;
        if (delta > mx) {
          mx=delta;
        }
      }
    }
    int mx2=0;
    int cr=0;
    for (int i=1; i < n; i++) {
      cr=l2[i - 1];
      if (l2[i - 1] > mx) {
        mx2+=mx;
      }
 else {
        mx2+=l2[i - 1];
      }
    }
    String s;
    s=""Case #"" + ti + "": ""+ s1+ "" ""+ mx2;
    System.out.println(s);
    out.write(s);
    out.write(""\n"");
  }
  out.close();
}
"
30001020,"public static void main(String[] args){
  Scanner scanner=null;
  try {
    scanner=new Scanner(new File(""input.txt""));
  }
 catch (  FileNotFoundException e) {
    System.out.println(""Couldn't open input file.\n"" + e.getMessage());
    e.printStackTrace();
  }
  FileWriter writer=null;
  try {
    writer=new FileWriter(new File(""output.txt""));
  }
 catch (  IOException e) {
    System.out.println(""Couldn't open/make output file."" + e.getMessage());
    e.printStackTrace();
  }
  int numTrials=scanner.nextInt();
  for (int trial=1; trial <= numTrials; trial++) {
    try {
      writer.write(""Case #"" + trial + "": "");
      int N=scanner.nextInt();
      int previous=scanner.nextInt();
      int sum=0;
      int max=0;
      int[] values=new int[N];
      values[0]=previous;
      for (int i=1; i < N; i++) {
        int current=scanner.nextInt();
        values[i]=current;
        int difference=previous - current;
        if (difference > 0) {
          max=Math.max(difference,max);
          sum+=difference;
        }
        previous=current;
      }
      int sum2=0;
      for (int i=0; i < N - 1; i++) {
        if (values[i] >= max)         sum2+=max;
 else         sum2+=values[i];
      }
      writer.write(sum + "" "" + sum2);
      writer.write(""\n"");
    }
 catch (    IOException e) {
      System.out.println(""Error on trial #"" + trial + ""\n""+ e.getMessage());
      e.printStackTrace();
    }
  }
  try {
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  scanner.close();
  System.out.println(""Completed Trials!"");
}
"
30001021,"public static void main(String args[]) throws Exception {
  Main r=new Main();
  r.out=new PrintStream(new FileOutputStream(Main.OUT));
  int t=r.sc.nextInt();
  for (int i=1; i <= t; i++) {
    r.out.print(""Case #"" + i + "": "");
    int met1=0;
    int met2=0;
    int nInter=r.sc.nextInt();
    int[] hongos=new int[nInter];
    if (nInter > 0) {
      int first=r.sc.nextInt();
      hongos[0]=first;
      int second=0;
      int maxDifer=0;
      int difer=0;
      for (int i1=0; i1 < nInter - 1; i1++) {
        second=r.sc.nextInt();
        hongos[i1 + 1]=second;
        if (second < first) {
          difer=(first - second);
          met1+=difer;
          if (difer > maxDifer) {
            maxDifer=difer;
          }
        }
        first=second;
      }
      for (int i2=0; i2 < nInter - 1; i2++) {
        if (hongos[i2] < maxDifer) {
          met2+=hongos[i2];
        }
 else {
          met2+=maxDifer;
        }
      }
    }
    r.out.println(met1 + "" "" + met2);
  }
  r.sc.close();
  r.out.close();
}
"
30001022,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""A-large.in""));
  sc.useLocale(Locale.US);
  int cases=sc.nextInt();
  for (int i=1; i <= cases; i++) {
    System.out.format(Locale.US,""Case #%d: "",i);
    int N=sc.nextInt();
    int[] m=new int[N];
    int maxDiff=0;
    int eaten1=0;
    for (int i1=0; i1 < m.length; i1++) {
      m[i1]=sc.nextInt();
      if (i1 > 0) {
        maxDiff=Math.max(maxDiff,m[i1 - 1] - m[i1]);
        if (m[i1 - 1] - m[i1] > 0) {
          eaten1+=m[i1 - 1] - m[i1];
        }
      }
    }
    int eaten2=0;
    for (int i2=0; i2 < m.length - 1; i2++) {
      eaten2+=Math.min(maxDiff,m[i2]);
    }
    System.out.println(eaten1 + "" "" + eaten2);
  }
  sc.close();
}
"
30001023,"public static void main(String[] args) throws IOException {
  try (Scanner s=new Scanner(new FileReader(filename));FileWriter writer=new FileWriter(new File(filename.substring(0,filename.length() - 2) + ""out""))){
    int T=Integer.valueOf(s.nextLine());
    for (int i=0; i < T; i++) {
      s.nextLine();
      String[] intStrings=s.nextLine().split("" "");
      int[] ints=new int[intStrings.length];
      for (int inti=0; inti < intStrings.length; inti++) {
        ints[inti]=Integer.valueOf(intStrings[inti]);
      }
      int result=0;
      int last=0;
      for (      int i1 : ints) {
        if (i1 < last)         result+=last - i1;
        last=i1;
      }
      int min1=result;
      int max=0;
      int last1=0;
      for (      int i3 : ints) {
        if (i3 < last1 && (max < (last1 - i3))) {
          max=last1 - i3;
        }
        last1=i3;
      }
      int result1=0;
      for (int i2=0; i2 < ints.length - 1; i2++) {
        int plate=ints[i2];
        int eatenThisTime=Math.min(plate,max);
        result1+=eatenThisTime;
      }
      int min2=result1;
      writer.write(""Case #"" + (i + 1) + "": ""+ min1+ "" ""+ min2+ ""\n"");
      System.out.println(""Case #"" + (i + 1) + "": ""+ +min1+ "" ""+ min2);
    }
  }
 }
"
30001024,"public static void main(String[] args) throws Exception {
  FileInputStream fis=null;
  BufferedReader reader=null;
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""/home/luong/Downloads/"" + args[0] + "".out"",true)));
  String s;
  fis=new FileInputStream(""/home/luong/Downloads/"" + args[0] + "".in"");
  reader=new BufferedReader(new InputStreamReader(fis));
  s=reader.readLine();
  int nbLoop=Integer.parseInt(s);
  for (int i=1; i <= nbLoop; i++) {
    String ch="""";
    int n=Integer.parseInt(reader.readLine());
    int[] m=new int[n];
    StringTokenizer st=new StringTokenizer(reader.readLine());
    for (int j=0; j < n; j++) {
      m[j]=Integer.parseInt(st.nextToken());
    }
    int y=0;
    int z=0;
    int v=0;
    for (int j=1; j < n; j++) {
      if (m[j] < m[j - 1]) {
        y+=m[j - 1] - m[j];
        v=Math.max(v,m[j - 1] - m[j]);
      }
    }
    for (int j=1; j < n; j++) {
      z+=Math.min(m[j - 1],v);
    }
    bw.write(""Case #"" + i + "": ""+ y+ "" ""+ z);
    bw.newLine();
  }
  reader.close();
  fis.close();
  bw.close();
}
"
30001025,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  for (int Q=1; Q <= T; Q++) {
    int N=scan.nextInt();
    int[] pieces=new int[N];
    int anytime=0;
    int maxDiff=-1;
    for (int i=0; i < N; i++) {
      pieces[i]=scan.nextInt();
      if (i > 0) {
        int diff=pieces[i - 1] - pieces[i];
        if (diff > 0) {
          anytime+=diff;
        }
        if (diff > maxDiff) {
          maxDiff=diff;
        }
      }
    }
    int constant=0;
    if (maxDiff > 0) {
      for (int i=0; i < N - 1; i++) {
        if (pieces[i] > maxDiff) {
          constant+=maxDiff;
        }
 else {
          constant+=pieces[i];
        }
      }
    }
    System.out.printf(""Case #%d: %d %d\n"",Q,anytime,constant);
  }
  scan.close();
}
"
30001026,"public static void main(String[] args){
  String fileName=""A-small-attempt1.in"";
  try (BufferedReader br=new BufferedReader(new FileReader(fileName))){
    try (BufferedWriter bw=new BufferedWriter(new FileWriter(fileName + "".out""))){
      int tests=Integer.valueOf(br.readLine());
      for (int test=1; test <= tests; ++test) {
        Scanner scanner=new Scanner(br.readLine());
        int nn=scanner.nextInt();
        int rr=scanner.nextInt();
        int pp=scanner.nextInt();
        int ss=scanner.nextInt();
        List<String> res=new ArrayList<>();
        start:         for (int start=0; start <= 2; ++start) {
          int n=nn;
          int r=rr;
          int p=pp;
          int s=ss;
          int prevLen=1;
          char prev[]=new char[prevLen];
          if (start == 0)           prev[0]='P';
          if (start == 1)           prev[0]='R';
          if (start == 2)           prev[0]='S';
          int curLen;
          while (n-- > 0) {
            curLen=prevLen * 2;
            char cur[]=new char[curLen];
            for (int i=0; i < prevLen; ++i) {
              if (prev[i] == 'P') {
                cur[i * 2]='P';
                cur[i * 2 + 1]='R';
              }
 else               if (prev[i] == 'R') {
                if (n == 0) {
                  cur[i * 2]='R';
                  cur[i * 2 + 1]='S';
                }
 else {
                  cur[i * 2]='S';
                  cur[i * 2 + 1]='R';
                }
              }
 else               if (prev[i] == 'S') {
                if (n >= 2) {
                  cur[i * 2]='S';
                  cur[i * 2 + 1]='P';
                }
 else {
                  cur[i * 2]='P';
                  cur[i * 2 + 1]='S';
                }
              }
            }
            prevLen=curLen;
            prev=cur;
          }
          int a=1;
          for (          char c : prev) {
            if ('P' == c)             --p;
            if ('R' == c)             --r;
            if ('S' == c)             --s;
            if (p < 0 || s < 0 || r < 0)             continue start;
          }
          res.add(new String(prev));
        }
        bw.write(""Case #"" + test + "": "");
        if (res.isEmpty())         bw.write(""IMPOSSIBLE"");
 else {
          String result=null;
          for (          String s : res) {
            if (result == null)             result=s;
 else {
              if (result.compareTo(s) > 0)               result=s;
            }
          }
          bw.write(result);
        }
        bw.write(""\n"");
      }
      bw.close();
    }
   }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001027,"public static void main(String args[]) throws IOException {
  FileInputStream in=null;
  PrintWriter out=null;
  try {
    in=new FileInputStream(""A-large.in"");
    out=new PrintWriter(""A-large.output"");
    Scanner sc=new Scanner(in);
    String line=sc.nextLine();
    int T=Integer.parseInt(line);
    for (int t=1; t <= T; t++) {
      String output=""Case #"" + t + "":"";
      line=sc.nextLine();
      int n=Integer.parseInt(line.split("" "")[0]);
      int r=Integer.parseInt(line.split("" "")[1]);
      int p=Integer.parseInt(line.split("" "")[2]);
      int s=Integer.parseInt(line.split("" "")[3]);
      Vector<HashMap<String,String>> memo=new Vector<HashMap<String,String>>();
      ;
      HashMap<String,String> base=new HashMap<String,String>();
      base.put(""P"",""P"");
      base.put(""R"",""R"");
      base.put(""S"",""S"");
      memo.add(base);
      for (int i=1; i <= 12; ++i) {
        HashMap<String,String> subMemo=new HashMap<String,String>();
        if (memo.elementAt(i - 1).get(""P"").compareTo(memo.elementAt(i - 1).get(""R"")) < 0) {
          String ss=memo.elementAt(i - 1).get(""P"") + memo.elementAt(i - 1).get(""R"");
          subMemo.put(""P"",ss);
        }
 else {
          String ss=memo.elementAt(i - 1).get(""R"") + memo.elementAt(i - 1).get(""P"");
          subMemo.put(""P"",ss);
        }
        if (memo.elementAt(i - 1).get(""R"").compareTo(memo.elementAt(i - 1).get(""S"")) < 0) {
          String ss=memo.elementAt(i - 1).get(""R"") + memo.elementAt(i - 1).get(""S"");
          subMemo.put(""R"",ss);
        }
 else {
          String ss=memo.elementAt(i - 1).get(""S"") + memo.elementAt(i - 1).get(""R"");
          subMemo.put(""R"",ss);
        }
        if (memo.elementAt(i - 1).get(""P"").compareTo(memo.elementAt(i - 1).get(""S"")) < 0) {
          String ss=memo.elementAt(i - 1).get(""P"") + memo.elementAt(i - 1).get(""S"");
          subMemo.put(""S"",ss);
        }
 else {
          String ss=memo.elementAt(i - 1).get(""S"") + memo.elementAt(i - 1).get(""P"");
          subMemo.put(""S"",ss);
        }
        memo.add(subMemo);
      }
      int flag=0;
      for (      String key : Arrays.asList(""P"",""R"",""S"")) {
        int pNum=0, rNum=0, sNum=0;
        String currentS=memo.elementAt(n).get(key);
        for (int k=0; k < currentS.length(); k++) {
          char c=currentS.charAt(k);
          if (c == 'P')           ++pNum;
 else           if (c == 'R')           ++rNum;
 else           if (c == 'S')           ++sNum;
        }
        if (pNum == p && rNum == r && sNum == s) {
          output+="" "" + memo.elementAt(n).get(key);
          out.println(output);
          flag=1;
          break;
        }
      }
      if (flag == 0) {
        output+="" "" + ""IMPOSSIBLE"";
        out.println(output);
      }
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
}
"
30001028,"public static void main(String[] args) throws Exception {
  String filePrefix=args.length > 0 ? args[0] : ""A-large"";
  try {
    A r=new A();
    r.sc=new Scanner(new FileReader(filePrefix + "".in""));
    r.pw=new PrintWriter(new FileWriter(filePrefix + "".out""));
    int ntest=r.sc.nextInt();
    for (int test=1; test <= ntest; test++) {
      Scanner sc=r.sc;
      r.N=sc.nextInt();
      for (int i=0; i < 3; i++)       r.p[i]=sc.nextInt();
      r.pw.print(""Case #"" + test + "": "");
      System.out.print(""Case #"" + test + "": "");
      int SIZE=1 << r.N;
      char[] C={'R','P','S'};
      char[] ans=null;
      for (int i=0; i < 3; i++) {
        int[] win=new int[SIZE * 2 - 1];
        win[0]=i;
        for (int j=0; j < SIZE - 1; j++) {
          win[j * 2 + 1]=win[j];
          win[j * 2 + 2]=(win[j] + 2) % 3;
        }
        int[] cnt=new int[3];
        char[] ini=new char[SIZE];
        for (int j=0; j < SIZE; j++) {
          cnt[win[SIZE - 1 + j]]++;
          ini[j]=C[win[SIZE - 1 + j]];
        }
        boolean ok=true;
        for (int j=0; j < 3; j++)         if (cnt[j] != r.p[j])         ok=false;
        if (!ok)         continue;
        for (int j=0; j < r.N; j++) {
          for (int k=0; k < SIZE; k+=1 << (j + 1)) {
            boolean rev=false;
            for (int l=0; l < 1 << j; l++) {
              if (ini[k + l] > ini[k + (1 << j) + l]) {
                rev=true;
                break;
              }
            }
            if (rev) {
              for (int l=0; l < 1 << j; l++) {
                char temp=ini[k + l];
                ini[k + l]=ini[k + (1 << j) + l];
                ini[k + (1 << j) + l]=temp;
              }
            }
          }
        }
        if (ans == null || String.valueOf(ini).compareTo(String.valueOf(ans)) < 0)         ans=ini;
      }
      Object s=ans == null ? ""IMPOSSIBLE"" : String.valueOf(ans);
      r.pw.println(s);
      System.out.println(s);
    }
    System.out.println(""Finished."");
    r.sc.close();
    r.pw.close();
  }
 catch (  Exception e) {
    System.err.println(e);
  }
}
"
30001029,"public static void main(String[] args) throws IOException {
  Scanner kb=new Scanner(System.in);
  PrintWriter out=new PrintWriter(new FileWriter(""showdown.out""));
  int[][][] solutions=new int[13][3][3];
  solutions[0][0][0]=1;
  solutions[0][1][1]=1;
  solutions[0][2][2]=1;
  String[][] answers=new String[13][3];
  answers[0][0]=""P"";
  answers[0][1]=""R"";
  answers[0][2]=""S"";
  for (int i=1; i <= 12; i++) {
    for (int j=0; j < 3; j++) {
      solutions[i][j][0]=solutions[i - 1][j][0] + solutions[i - 1][j][2];
      solutions[i][j][1]=solutions[i - 1][j][1] + solutions[i - 1][j][0];
      solutions[i][j][2]=solutions[i - 1][j][2] + solutions[i - 1][j][1];
    }
    answers[i][0]=minString(answers[i - 1][0],answers[i - 1][1]);
    answers[i][1]=minString(answers[i - 1][1],answers[i - 1][2]);
    answers[i][2]=minString(answers[i - 1][2],answers[i - 1][0]);
  }
  int cases=kb.nextInt();
  for (int n=0; n < cases; n++) {
    out.print(""Case #"" + (n + 1) + "": "");
    int N=kb.nextInt();
    int r=kb.nextInt();
    int p=kb.nextInt();
    int s=kb.nextInt();
    boolean found=false;
    for (int j=0; j < 3; j++) {
      if (solutions[N][j][0] == p && solutions[N][j][1] == r && solutions[N][j][2] == s) {
        out.print(answers[N][j]);
        found=true;
      }
    }
    if (!found)     out.print(""IMPOSSIBLE"");
    out.println();
  }
  out.close();
}
"
30001030,"public static void main(String[] args) throws IOException {
  Scanner qwe=new Scanner(new File(""A.in""));
  int T=qwe.nextInt();
  int p=0;
  int r=1;
  int s=2;
  int[][][] am=new int[13][3][3];
  int[][] ordering=new int[13][3];
  String[][] str=new String[13][3];
  for (int i=0; i < 3; i++)   am[0][i][i]=1;
  ordering[0][p]=0;
  ordering[0][r]=1;
  ordering[0][s]=2;
  str[0][p]=""P"";
  str[0][r]=""R"";
  str[0][s]=""S"";
  for (int lvl=1; lvl < 13; lvl++) {
    for (int i=0; i < 3; i++) {
      for (int j=0; j < 3; j++)       am[lvl][i][j]=am[lvl - 1][(i + 1) % 3][j] + am[lvl - 1][i][j];
    }
    for (int i=0; i < 3; i++) {
      ordering[lvl][i]=ordering[lvl - 1][i] + ordering[lvl - 1][(i + 1) % 3] - 1;
      String a=str[lvl - 1][i] + str[lvl - 1][(i + 1) % 3];
      String b=str[lvl - 1][(i + 1) % 3] + str[lvl - 1][i];
      if (a.compareTo(b) < 0) {
        str[lvl][i]=a;
      }
 else       str[lvl][i]=b;
    }
  }
  for (int cse=1; cse <= T; cse++) {
    int N=qwe.nextInt();
    int R=qwe.nextInt();
    int P=qwe.nextInt();
    int S=qwe.nextInt();
    boolean pos=false;
    int best=3;
    String ans="""";
    for (int i=0; i < 3; i++) {
      int next=ordering[N][i];
      if (next < best) {
        if (am[N][i][p] == P && am[N][i][r] == R && am[N][i][s] == S) {
          ans=str[N][i];
          best=next;
          pos=true;
        }
      }
    }
    if (pos)     System.out.println(""Case #"" + cse + "": ""+ ans);
 else {
      System.out.println(""Case #"" + cse + "": IMPOSSIBLE"");
    }
  }
  qwe.close();
}
"
30001031,"public static void main(String[] args) throws NumberFormatException, IOException {
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int numCases=Integer.parseInt(in.nextLine());
  for (int caseNum=1; caseNum <= numCases; caseNum++) {
    String line=in.nextLine();
    Scanner sc=new Scanner(line);
    int n=Integer.parseInt(sc.next());
    int r=Integer.parseInt(sc.next());
    int p=Integer.parseInt(sc.next());
    int s=Integer.parseInt(sc.next());
    int[] test=new int[3];
    test[0]=1;
    test[1]=1;
    for (int i=1; i < n; i++) {
      int[] nextStep=new int[3];
      nextStep[0]=test[0] + test[2];
      nextStep[1]=test[1] + test[0];
      nextStep[2]=test[1] + test[2];
      test[0]=nextStep[0];
      test[1]=nextStep[1];
      test[2]=nextStep[2];
    }
    ArrayList<String> round=new ArrayList<String>();
    if (test[0] == p && test[1] == r && test[2] == s) {
      round.add(""PR"");
    }
 else     if (test[0] == r && test[1] == s && test[2] == p) {
      round.add(""RS"");
    }
 else     if (test[0] == s && test[1] == p && test[2] == r) {
      round.add(""PS"");
    }
 else {
      System.out.println(""Case #"" + caseNum + "": ""+ ""IMPOSSIBLE"");
      continue;
    }
    for (int i=1; i < n; i++) {
      ArrayList<String> nextRound=new ArrayList<String>();
      for (int j=0; j < round.size(); j++) {
        if (round.get(j).equals(""PR"")) {
          nextRound.add(""PR"");
          nextRound.add(""RS"");
        }
 else         if (round.get(j).equals(""PS"")) {
          nextRound.add(""PR"");
          nextRound.add(""PS"");
        }
 else         if (round.get(j).equals(""RS"")) {
          nextRound.add(""RS"");
          nextRound.add(""PS"");
        }
      }
      round=nextRound;
    }
    for (int i=1; i < n; i++) {
      ArrayList<String> lastRound=new ArrayList<String>();
      for (int j=0; j < round.size() / 2; j++) {
        String s1=round.get(2 * j);
        String s2=round.get(2 * j + 1);
        if (s1.compareTo(s2) < 0) {
          lastRound.add(s1 + s2);
        }
 else {
          lastRound.add(s2 + s1);
        }
      }
      round=lastRound;
    }
    if (round.size() != 1) {
      System.out.println(""FAIL"");
    }
    System.out.println(""Case #"" + caseNum + "": ""+ round.get(0));
  }
}
"
30001032,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int num=in.nextInt();
  for (int i=0; i < num; i++) {
    boolean ayy=false;
    System.out.print(""Case #"" + (i + 1) + "": "");
    int n=in.nextInt();
    int nn=(int)Math.pow(2,n);
    int r=in.nextInt();
    int p=in.nextInt();
    int s=in.nextInt();
    char[] test=new char[nn];
    Arrays.fill(test,'p');
    if (p == nn) {
      System.out.print(""IMPOSSIBLE"");
      ayy=true;
    }
 else {
      boolean solvable=true;
      boolean unsolved=true;
      while (solvable) {
        for (int ii=nn - 1; ii >= 0; ii--) {
          if (test[ii] == 'p') {
            test[ii]='r';
            break;
          }
 else           if (test[ii] == 'r') {
            test[ii]='s';
            break;
          }
          if (ii == 0) {
            solvable=false;
            s=-1;
            break;
          }
 else {
            test[ii]='p';
          }
        }
        int cr=0;
        int cp=0;
        int cs=0;
        for (int j=0; j < nn; j++) {
          if (test[j] == 'p')           cp++;
          if (test[j] == 'r')           cr++;
          if (test[j] == 's')           cs++;
        }
        if (cr != r || cp != p || cs != s) {
          continue;
        }
        boolean decent=true;
        while (true && unsolved && decent) {
          int nnn=nn;
          char[] prev=new char[nn];
          char[] rec;
          for (int sp=0; sp < nn; sp++) {
            prev[sp]=test[sp];
          }
          while (nnn > 1) {
            nnn/=2;
            rec=new char[nnn];
            for (int mm=0; mm < nnn; mm++) {
              if (prev[mm * 2] == prev[mm * 2 + 1]) {
                nnn=0;
                decent=false;
                break;
              }
              if (prev[mm * 2] != 'r' && prev[mm * 2 + 1] != 'r') {
                rec[mm]='s';
              }
 else               if (prev[mm * 2] != 's' && prev[mm * 2 + 1] != 's') {
                rec[mm]='p';
              }
 else {
                rec[mm]='r';
              }
            }
            prev=rec;
          }
          if (decent) {
            unsolved=false;
          }
        }
        if (!unsolved) {
          for (int meh=0; meh < nn; meh++) {
            if (test[meh] == 'r')             System.out.print('R');
 else             if (test[meh] == 's')             System.out.print('S');
 else             System.out.print('P');
          }
          ayy=true;
          break;
        }
      }
    }
    if (!ayy)     System.out.print(""IMPOSSIBLE"");
    System.out.println();
  }
}
"
30001033,"public static void main(String[] args) throws IOException {
  BufferedReader x=new BufferedReader(new InputStreamReader(System.in));
  int t=Integer.parseInt(x.readLine());
  for (int cases=1; cases <= t; cases++) {
    StringTokenizer st=new StringTokenizer(x.readLine());
    int n=Integer.parseInt(st.nextToken());
    int r=Integer.parseInt(st.nextToken());
    int p=Integer.parseInt(st.nextToken());
    int s=Integer.parseInt(st.nextToken());
    int num1=1;
    for (int i1=0; i1 < n; i1++) {
      num1*=2;
    }
    int num=num1;
    if (n % 2 == 1)     num++;
    num/=3;
    if ((r == num && s == num) || (s == num && p == num) || (r == num && p == num)) {
      if (n == 1) {
        if (r == 0)         System.out.println(""Case #"" + cases + "": PS"");
        if (s == 0)         System.out.println(""Case #"" + cases + "": PR"");
        if (p == 0)         System.out.println(""Case #"" + cases + "": RS"");
        continue;
      }
      String ans="""";
      if (n % 2 == 0) {
        if (p != num)         ans=""S"";
        if (r != num)         ans=""P"";
        if (s != num)         ans=""R"";
      }
 else {
        if (p != num)         ans=""P"";
        if (r != num)         ans=""R"";
        if (s != num)         ans=""S"";
      }
      for (int i=n - 1; i >= 0; i--) {
        String temp="""";
        for (int j=0; j < ans.length(); j++) {
          if (ans.charAt(j) == 'S') {
            if (i % 6 == 0 || i % 6 == 1 || i % 6 == 5) {
              temp+=""PS"";
            }
 else {
              temp+=""SP"";
            }
          }
          if (ans.charAt(j) == 'P') {
            if (i % 6 == 0 || i % 6 == 1 || i % 6 == 2) {
              temp+=""PR"";
            }
 else {
              temp+=""RP"";
            }
          }
          if (ans.charAt(j) == 'R') {
            if (i % 6 == 0 || i % 6 == 4 || i % 6 == 5) {
              temp+=""RS"";
            }
 else {
              temp+=""SR"";
            }
          }
        }
        ans=temp;
      }
      System.out.println(""Case #"" + cases + "": ""+ ans);
    }
 else {
      System.out.println(""Case #"" + cases + "": IMPOSSIBLE"");
    }
  }
}
"
30001034,"public static void main(String[] args){
  String[][] table=new String[3][13];
  for (int i=0; i < 3; i++)   table[i][0]="""" + let[i];
  for (int n=0; n <= 11; n++)   for (int i=0; i < 3; i++) {
    String a=table[i][n], b=table[(i + 1) % 3][n];
    if (a.compareTo(b) < 0)     table[i][n + 1]=a + b;
 else     table[i][n + 1]=b + a;
  }
  Scanner in=new Scanner(System.in);
  int numRuns=in.nextInt();
  int[] count=new int[3];
  for (int run=1; run <= numRuns; run++) {
    int n=in.nextInt();
    count[1]=in.nextInt();
    count[0]=in.nextInt();
    count[2]=in.nextInt();
    boolean match=false;
    for (int i=0; i < 3; i++) {
      match=true;
      String game=table[i][n];
      for (int j=0; j < 3; j++)       if (game.length() - game.replace("""" + let[j],"""").length() != count[j])       match=false;
      if (match) {
        System.out.println(""Case #"" + run + "": ""+ game);
        break;
      }
    }
    if (!match)     System.out.println(""Case #"" + run + "": IMPOSSIBLE"");
  }
}
"
30001035,"public static void main(String[] args) throws Exception {
  File inputFile=new File(""A-large.in"");
  Scanner in=new Scanner(inputFile);
  File outputFile=new File(""output.txt"");
  PrintWriter out=new PrintWriter(outputFile);
  String[][] answers=new String[13][3];
  answers[0]=new String[]{""P"",""R"",""S""};
  for (int n=1; n <= 12; n++) {
    String s1=answers[n - 1][0] + answers[n - 1][1];
    String s2=answers[n - 1][1] + answers[n - 1][0];
    answers[n][0]=s1.compareTo(s2) < 0 ? s1 : s2;
    s1=answers[n - 1][1] + answers[n - 1][2];
    s2=answers[n - 1][2] + answers[n - 1][1];
    answers[n][1]=s1.compareTo(s2) < 0 ? s1 : s2;
    s1=answers[n - 1][2] + answers[n - 1][0];
    s2=answers[n - 1][0] + answers[n - 1][2];
    answers[n][2]=s1.compareTo(s2) < 0 ? s1 : s2;
  }
  int T=in.nextInt();
  for (int t=0; t < T; t++) {
    int N=in.nextInt();
    int R=in.nextInt();
    int P=in.nextInt();
    int S=in.nextInt();
    String best=null;
    for (int i=0; i < 3; i++) {
      String cand=answers[N][i];
      int[] stats=new int[3];
      for (      char c : cand.toCharArray()) {
        if (c == 'R') {
          stats[0]++;
        }
 else         if (c == 'P') {
          stats[1]++;
        }
 else {
          stats[2]++;
        }
      }
      if (stats[0] == R && stats[1] == P && stats[2] == S) {
        if (best == null || cand.compareTo(best) < 0) {
          best=cand;
        }
      }
    }
    String answer=(best == null) ? ""IMPOSSIBLE"" : best;
    out.println(""Case #"" + (t + 1) + "": ""+ answer);
  }
  out.close();
}
"
30001036,"public static void main(String[] args){
  r[0]=""R"";
  p[0]=""P"";
  s[0]=""S"";
  for (int i=0; i < 12; i++) {
    if (r[i].compareTo(p[i]) < 0) {
      p[i + 1]=r[i] + p[i];
    }
 else {
      p[i + 1]=p[i] + r[i];
    }
    if (r[i].compareTo(s[i]) < 0) {
      r[i + 1]=r[i] + s[i];
    }
 else {
      r[i + 1]=s[i] + r[i];
    }
    if (s[i].compareTo(p[i]) < 0) {
      s[i + 1]=s[i] + p[i];
    }
 else {
      s[i + 1]=p[i] + s[i];
    }
  }
  Scanner sc=new Scanner(System.in);
  int numCases=sc.nextInt();
  for (int caseNum=1; caseNum <= numCases; caseNum++) {
    int N=sc.nextInt();
    int[] R=new int[N + 1];
    R[0]=sc.nextInt();
    int[] P=new int[N + 1];
    P[0]=sc.nextInt();
    int[] S=new int[N + 1];
    S[0]=sc.nextInt();
    for (int i=0; i < N; i++) {
      P[i + 1]=(P[i] + R[i] - S[i]) / 2;
      R[i + 1]=(R[i] + S[i] - P[i]) / 2;
      S[i + 1]=(P[i] + S[i] - R[i]) / 2;
    }
    System.out.print(""Case #"" + caseNum + "": "");
    boolean possible=true;
    for (int i=0; i <= N; i++) {
      if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
        System.out.println(""IMPOSSIBLE"");
        possible=false;
        break;
      }
    }
    if (!possible) {
      continue;
    }
    if (R[N] == 1) {
      System.out.println(r[N]);
    }
 else     if (P[N] == 1) {
      System.out.println(p[N]);
    }
 else {
      System.out.println(s[N]);
    }
  }
  sc.close();
}
"
30001037,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(""src/A-large.in""))));
  String output="""";
  int t=sc.nextInt();
  sc.nextLine();
  for (int i=1; i <= t; i++) {
    int n=sc.nextInt();
    int r=sc.nextInt();
    int p=sc.nextInt();
    int s=sc.nextInt();
    ArrayList<String> poss=new ArrayList<String>();
    String ans=""P"";
    int ar=0;
    int ap=0;
    int as=0;
    for (int j=0; j < n; j++) {
      StringBuilder next=new StringBuilder();
      for (      char c : ans.toCharArray()) {
        if (c == 'P')         next.append(""PR"");
        if (c == 'S')         next.append(""PS"");
        if (c == 'R')         next.append(""RS"");
      }
      ans=next.toString();
    }
    for (    char c : ans.toCharArray()) {
      if (c == 'P')       ap++;
      if (c == 'R')       ar++;
      if (c == 'S')       as++;
    }
    if (ap == p && ar == r && as == s) {
      for (int j=0; j < n; j++) {
        StringBuilder fa=new StringBuilder();
        int step=1 << j;
        for (int k=0; k < ans.length(); k+=step * 2) {
          if (ans.substring(k,k + step).compareTo(ans.substring(k + step,k + step * 2)) < 0) {
            fa.append(ans.substring(k,k + step * 2));
          }
 else {
            fa.append(ans.substring(k + step,k + step * 2));
            fa.append(ans.substring(k,k + step));
          }
        }
        ans=fa.toString();
      }
      poss.add(ans);
    }
    ans=""R"";
    ar=0;
    ap=0;
    as=0;
    for (int j=0; j < n; j++) {
      StringBuilder next=new StringBuilder();
      for (      char c : ans.toCharArray()) {
        if (c == 'P')         next.append(""PR"");
        if (c == 'S')         next.append(""PS"");
        if (c == 'R')         next.append(""RS"");
      }
      ans=next.toString();
    }
    for (    char c : ans.toCharArray()) {
      if (c == 'P')       ap++;
      if (c == 'R')       ar++;
      if (c == 'S')       as++;
    }
    if (ap == p && ar == r && as == s) {
      for (int j=0; j < n; j++) {
        StringBuilder fa=new StringBuilder();
        int step=1 << j;
        for (int k=0; k < ans.length(); k+=step * 2) {
          if (ans.substring(k,k + step).compareTo(ans.substring(k + step,k + step * 2)) < 0) {
            fa.append(ans.substring(k,k + step * 2));
          }
 else {
            fa.append(ans.substring(k + step,k + step * 2));
            fa.append(ans.substring(k,k + step));
          }
        }
        ans=fa.toString();
      }
      poss.add(ans);
    }
    ans=""S"";
    ar=0;
    ap=0;
    as=0;
    for (int j=0; j < n; j++) {
      StringBuilder next=new StringBuilder();
      for (      char c : ans.toCharArray()) {
        if (c == 'P')         next.append(""PR"");
        if (c == 'S')         next.append(""PS"");
        if (c == 'R')         next.append(""RS"");
      }
      ans=next.toString();
    }
    for (    char c : ans.toCharArray()) {
      if (c == 'P')       ap++;
      if (c == 'R')       ar++;
      if (c == 'S')       as++;
    }
    if (ap == p && ar == r && as == s) {
      for (int j=0; j < n; j++) {
        StringBuilder fa=new StringBuilder();
        int step=1 << j;
        for (int k=0; k < ans.length(); k+=step * 2) {
          if (ans.substring(k,k + step).compareTo(ans.substring(k + step,k + step * 2)) < 0) {
            fa.append(ans.substring(k,k + step * 2));
          }
 else {
            fa.append(ans.substring(k + step,k + step * 2));
            fa.append(ans.substring(k,k + step));
          }
        }
        ans=fa.toString();
      }
      poss.add(ans);
    }
    if (poss.size() == 0)     output+=""Case #"" + i + "": ""+ ""IMPOSSIBLE""+ ""\n"";
 else {
      Collections.sort(poss);
      output+=""Case #"" + i + "": ""+ poss.get(0)+ ""\n"";
    }
  }
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""src/A-large.out""),""utf-8""));
  bw.write(output);
  bw.close();
}
"
30001038,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""A.in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""A.out""));
  int T=Integer.parseInt(in.readLine());
  for (int t=1; t <= T; t++) {
    StringTokenizer st=new StringTokenizer(in.readLine());
    int N=Integer.parseInt(st.nextToken());
    int R=Integer.parseInt(st.nextToken());
    int P=Integer.parseInt(st.nextToken());
    int S=Integer.parseInt(st.nextToken());
    String ans=""IMPOSSIBLE"";
    int[][] win={{0,1},{1,2},{0,2}};
    for (int i=0; i < 3; i++) {
      String store=new String[]{""P"",""R"",""S""}[i];
      for (int k=0; k < N; k++) {
        String temp="""";
        for (        char c : store.toCharArray())         if (c == 'P')         temp+=""PR"";
 else         if (c == 'R')         temp+=""RS"";
 else         temp+=""PS"";
        store=temp;
      }
      int p=0, r=0, s=0;
      for (      char c : store.toCharArray())       if (c == 'P')       p++;
 else       if (c == 'R')       r++;
 else       s++;
      for (int j=1; j < (1 << N); j*=2)       for (int k=0; k + j < (1 << N); k+=j + j)       if (store.substring(k + j,k + 2 * j).compareTo(store.substring(k,k + j)) < 0)       store=store.substring(0,k) + store.substring(k + j,k + 2 * j) + store.substring(k,k + j)+ store.substring(k + 2 * j);
      if (P == p && R == r && S == s && (ans.equals(""IMPOSSIBLE"") || store.compareTo(ans) < 0))       ans=store;
    }
    out.write(""Case #"" + t + "": "");
    out.write(ans);
    out.write(""\n"");
  }
  in.close();
  out.close();
}
"
30001039,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new BufferedReader(new FileReader(new File(""A-large.in"")),256 << 10));
    BufferedWriter out=new BufferedWriter(new FileWriter(new File(""output.txt"")),256 << 10);
    int testsNumber=in.nextInt();
    for (int testId=1; testId <= testsNumber; testId++) {
      int rounds=in.nextInt();
      int n=1 << rounds;
      int r=in.nextInt();
      int p=in.nextInt();
      int s=in.nextInt();
      String[] pp=new String[rounds + 1];
      String[] rr=new String[rounds + 1];
      String[] ss=new String[rounds + 1];
      pp[0]=""P"";
      rr[0]=""R"";
      ss[0]=""S"";
      for (int i=1; i <= rounds; i++) {
        if (pp[i - 1].compareTo(rr[i - 1]) < 0)         pp[i]=pp[i - 1] + rr[i - 1];
 else         pp[i]=rr[i - 1] + pp[i - 1];
        if (rr[i - 1].compareTo(ss[i - 1]) < 0)         rr[i]=rr[i - 1] + ss[i - 1];
 else         rr[i]=ss[i - 1] + rr[i - 1];
        if (pp[i - 1].compareTo(ss[i - 1]) < 0)         ss[i]=pp[i - 1] + ss[i - 1];
 else         ss[i]=ss[i - 1] + pp[i - 1];
      }
      String result=null;
      int ar=0, ap=0, as=0;
      for (int i=0; i < pp[rounds].length(); i++) {
        char ch=pp[rounds].charAt(i);
        if (ch == 'P')         ap++;
 else         if (ch == 'R')         ar++;
 else         if (ch == 'S')         as++;
      }
      if (ar == r & as == s & ap == p) {
        if (result == null || result.compareTo(pp[rounds]) > 0)         result=pp[rounds];
      }
      ar=0;
      ap=0;
      as=0;
      for (int i=0; i < rr[rounds].length(); i++) {
        char ch=rr[rounds].charAt(i);
        if (ch == 'P')         ap++;
 else         if (ch == 'R')         ar++;
 else         if (ch == 'S')         as++;
      }
      if (ar == r & as == s & ap == p) {
        if (result == null || result.compareTo(rr[rounds]) > 0)         result=rr[rounds];
      }
      ar=0;
      ap=0;
      as=0;
      for (int i=0; i < ss[rounds].length(); i++) {
        char ch=ss[rounds].charAt(i);
        if (ch == 'P')         ap++;
 else         if (ch == 'R')         ar++;
 else         if (ch == 'S')         as++;
      }
      if (ar == r & as == s & ap == p) {
        if (result == null || result.compareTo(ss[rounds]) > 0)         result=ss[rounds];
      }
      if (result == null)       result=IMPOSSIBLE;
      out.append(""Case #"" + testId + "": ""+ result);
      out.append(""\n"");
    }
    in.close();
    out.close();
  }
 catch (  RuntimeException rte) {
    throw rte;
  }
catch (  Exception e) {
    System.err.println(""Error:"" + e.getMessage());
  }
}
"
30001040,"public static void main(String[] args) throws IOException {
  BufferedReader buf=new BufferedReader(new FileReader(""RPS.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""RPS.out"")));
  int t=Integer.parseInt(buf.readLine());
  for (int i=1; i <= t; i++) {
    String[] str=buf.readLine().split("" "");
    int n=Integer.parseInt(str[0]);
    int r=Integer.parseInt(str[1]);
    int p=Integer.parseInt(str[2]);
    int s=Integer.parseInt(str[3]);
    String st=""R"";
    String st2=""P"";
    String st3=""S"";
    for (int j=0; j < n; j++) {
      String stemp="""";
      String stemp2="""";
      String stemp3="""";
      if (st.compareTo(st2) < 0) {
        stemp=st + st2;
      }
 else {
        stemp=st2 + st;
      }
      if (st2.compareTo(st3) < 0) {
        stemp2=st2 + st3;
      }
 else {
        stemp2=st3 + st2;
      }
      if (st3.compareTo(st) < 0) {
        stemp3=st3 + st;
      }
 else {
        stemp3=st + st3;
      }
      st=stemp;
      st2=stemp2;
      st3=stemp3;
    }
    out.print(""Case #"" + i + "": "");
    int countr=0;
    int countp=0;
    int counts=0;
    for (int j=0; j < st.length(); j++) {
      if (st.charAt(j) == 'R') {
        countr++;
      }
 else       if (st.charAt(j) == 'P') {
        countp++;
      }
 else       if (st.charAt(j) == 'S') {
        counts++;
      }
    }
    if (countr == r && countp == p && counts == s) {
      out.println(st);
    }
 else {
      countr=0;
      countp=0;
      counts=0;
      for (int j=0; j < st.length(); j++) {
        if (st2.charAt(j) == 'R') {
          countr++;
        }
 else         if (st2.charAt(j) == 'P') {
          countp++;
        }
 else         if (st2.charAt(j) == 'S') {
          counts++;
        }
      }
      if (countr == r && countp == p && counts == s) {
        out.println(st2);
      }
 else {
        countr=0;
        countp=0;
        counts=0;
        for (int j=0; j < st.length(); j++) {
          if (st3.charAt(j) == 'R') {
            countr++;
          }
 else           if (st3.charAt(j) == 'P') {
            countp++;
          }
 else           if (st3.charAt(j) == 'S') {
            counts++;
          }
        }
        if (countr == r && countp == p && counts == s) {
          out.println(st3);
        }
 else {
          out.println(""IMPOSSIBLE"");
        }
      }
    }
  }
  out.close();
}
"
30001041,"public static void main(String[] args){
  List[] p=new ArrayList[MAX_N];
  List[] r=new ArrayList[MAX_N];
  List[] s=new ArrayList[MAX_N];
  List[] merged=new ArrayList[MAX_N];
  for (int i=0; i < MAX_N; ++i) {
    p[i]=new ArrayList();
    r[i]=new ArrayList();
    s[i]=new ArrayList();
    if (i == 0) {
      p[0].add(""PR"");
      r[0].add(""RS"");
      s[0].add(""PS"");
    }
 else {
      for (      Object ao : p[i - 1])       for (      Object bo : r[i - 1]) {
        String aos=ao.toString();
        String bos=bo.toString();
        if (aos.compareTo(bos) > 0) {
          aos=bo.toString();
          bos=ao.toString();
        }
        p[i].add(aos + bos);
      }
      for (      Object ao : r[i - 1])       for (      Object bo : s[i - 1]) {
        String aos=ao.toString();
        String bos=bo.toString();
        if (aos.compareTo(bos) > 0) {
          aos=bo.toString();
          bos=ao.toString();
        }
        r[i].add(aos + bos);
      }
      for (      Object ao : p[i - 1])       for (      Object bo : s[i - 1]) {
        String aos=ao.toString();
        String bos=bo.toString();
        if (aos.compareTo(bos) > 0) {
          aos=bo.toString();
          bos=ao.toString();
        }
        s[i].add(aos + bos);
      }
    }
    merged[i]=new ArrayList();
    merged[i].addAll(p[i]);
    merged[i].addAll(r[i]);
    merged[i].addAll(s[i]);
    Collections.sort(merged[i]);
  }
  Scanner scan=new Scanner(System.in);
  int tcc=scan.nextInt();
  for (int tc=1; tc <= tcc; ++tc) {
    int n=scan.nextInt();
    int rc=scan.nextInt();
    int pc=scan.nextInt();
    int sc=scan.nextInt();
    String best=null;
    for (    Object o : merged[n - 1]) {
      String os=o.toString();
      if (best != null && o.toString().compareTo(best) > 0)       break;
      int rrc=0;
      int rpc=0;
      int rsc=0;
      for (int i=0; i < os.length(); ++i) {
        if (os.charAt(i) == 'R')         ++rrc;
        if (os.charAt(i) == 'P')         ++rpc;
        if (os.charAt(i) == 'S')         ++rsc;
      }
      if (rrc == rc && rpc == pc && rsc == sc)       best=os;
    }
    System.out.printf(""Case #%d: "",tc);
    System.out.println(best == null ? ""IMPOSSIBLE"" : best);
  }
}
"
30001042,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(new File(""A.in"")));
  PrintWriter pw=new PrintWriter(new BufferedWriter(new FileWriter(new File(""A.out""))));
  String[][] prs=new String[13][3];
  prs[0][0]=""P"";
  prs[0][1]=""R"";
  prs[0][2]=""S"";
  int[][] prsp=new int[13][3];
  int[][] prsr=new int[13][3];
  int[][] prss=new int[13][3];
  prsp[0][0]=1;
  prsr[0][1]=1;
  prss[0][2]=1;
  for (int n=0; n < 12; n++) {
    prsp[n + 1][0]=prsp[n][0] + prsp[n][1];
    prsp[n + 1][1]=prsp[n][1] + prsp[n][2];
    prsp[n + 1][2]=prsp[n][2] + prsp[n][0];
    prsr[n + 1][0]=prsr[n][0] + prsr[n][1];
    prsr[n + 1][1]=prsr[n][1] + prsr[n][2];
    prsr[n + 1][2]=prsr[n][2] + prsr[n][0];
    prss[n + 1][0]=prss[n][0] + prss[n][1];
    prss[n + 1][1]=prss[n][1] + prss[n][2];
    prss[n + 1][2]=prss[n][2] + prss[n][0];
    if (prs[n][0].compareTo(prs[n][1]) < 0)     prs[n + 1][0]=prs[n][0] + prs[n][1];
 else     prs[n + 1][0]=prs[n][1] + prs[n][0];
    if (prs[n][1].compareTo(prs[n][2]) < 0)     prs[n + 1][1]=prs[n][1] + prs[n][2];
 else     prs[n + 1][1]=prs[n][2] + prs[n][1];
    if (prs[n][2].compareTo(prs[n][0]) < 0)     prs[n + 1][2]=prs[n][2] + prs[n][0];
 else     prs[n + 1][2]=prs[n][0] + prs[n][2];
  }
  int T=Integer.parseInt(br.readLine());
  for (int t=0; t < T; t++) {
    String[] str=br.readLine().split("" "");
    int N=Integer.parseInt(str[0]);
    int R=Integer.parseInt(str[1]);
    int P=Integer.parseInt(str[2]);
    int S=Integer.parseInt(str[3]);
    String answer=""IMPOSSIBLE"";
    if (prsp[N][0] == P && prsr[N][0] == R && prss[N][0] == S)     answer=prs[N][0];
 else     if (prsp[N][1] == P && prsr[N][1] == R && prss[N][1] == S)     answer=prs[N][1];
 else     if (prsp[N][2] == P && prsr[N][2] == R && prss[N][2] == S)     answer=prs[N][2];
    pw.println(""Case #"" + (t + 1) + "": ""+ answer);
    pw.flush();
  }
  pw.close();
  br.close();
}
"
30001043,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-small-attempt0.in""));
  PrintWriter pw=new PrintWriter(new File(""A-small.out""));
  int T=Integer.parseInt(br.readLine());
  for (int i=1; i <= T; i++) {
    String[] l=br.readLine().split("" "");
    int n=Integer.parseInt(l[0]);
    int r=Integer.parseInt(l[1]);
    int p=Integer.parseInt(l[2]);
    int s=Integer.parseInt(l[3]);
    int max=Math.max(p,Math.max(r,s));
    if (n == 1) {
      if (max > 1) {
        pw.println(""Case #"" + i + "": IMPOSSIBLE"");
        continue;
      }
      if (p == 1 && r == 1) {
        pw.println(""Case #"" + i + "": PR"");
        continue;
      }
      if (p == 1 && s == 1) {
        pw.println(""Case #"" + i + "": PS"");
        continue;
      }
      if (s == 1 && r == 1) {
        pw.println(""Case #"" + i + "": RS"");
        continue;
      }
    }
    if (n == 2) {
      if (max >= 3 || p * r * s == 0) {
        pw.println(""Case #"" + i + "": IMPOSSIBLE"");
        continue;
      }
      if (p == 1 && r == 1) {
        pw.println(""Case #"" + i + "": PSRS"");
        continue;
      }
      if (p == 1 && s == 1) {
        pw.println(""Case #"" + i + "": PRRS"");
        continue;
      }
      if (s == 1 && r == 1) {
        pw.println(""Case #"" + i + "": PRPS"");
        continue;
      }
    }
    if (n == 3) {
      if (max >= 4 || p * r * s == 0) {
        pw.println(""Case #"" + i + "": IMPOSSIBLE"");
        continue;
      }
      if (p == 3 && r == 3) {
        pw.println(""Case #"" + i + "": PRPSPRRS"");
        continue;
      }
      if (p == 3 && s == 3) {
        pw.println(""Case #"" + i + "": PRPSPSRS"");
        continue;
      }
      if (s == 3 && r == 3) {
        pw.println(""Case #"" + i + "": PRRSPSRS"");
        continue;
      }
    }
  }
  pw.close();
  br.close();
}
"
30001044,"public static void main(String[] args) throws IOException {
  BufferedReader bf=new BufferedReader(new FileReader(""A-small-attempt0.in""));
  PrintWriter out=new PrintWriter(new FileWriter(""output.txt""));
  int t=Integer.parseInt(bf.readLine());
  for (int tc=1; tc <= t; tc++) {
    int n=Integer.parseInt(bf.readLine());
    int a[]=new int[n];
    StringTokenizer st=new StringTokenizer(bf.readLine());
    int sum=0;
    for (int i=0; i < n; i++) {
      a[i]=Integer.parseInt(st.nextToken());
      sum+=a[i];
    }
    String s="""";
    while (true) {
      if (sum <= 0)       break;
      int max=-1;
      int maxi=-1;
      for (int i=0; i < n; i++)       if (a[i] > max) {
        max=a[i];
        maxi=i;
      }
      s+="" "" + (char)(maxi + 'A');
      a[maxi]--;
      sum--;
      max=-1;
      maxi=-1;
      for (int i=0; i < n; i++)       if (a[i] > max) {
        max=a[i];
        maxi=i;
      }
      if (max > sum / 2) {
        s+=(char)(maxi + 'A');
        a[maxi]--;
        sum--;
      }
    }
    out.println(""Case #"" + tc + "":""+ s);
  }
  out.flush();
  out.close();
}
"
30001045,"public static void main(String[] agrs) throws FileNotFoundException {
  String FILENAME=""longA"";
  File FILE=new File(FILENAME);
  Scanner fileReader=new Scanner(FILE);
  int T=fileReader.nextInt();
  for (int test=0; test < T; test++) {
    int parties=fileReader.nextInt();
    int[] senate=new int[parties];
    int left=0;
    int partiesLeft=parties;
    for (int party=0; party < parties; party++) {
      int x=fileReader.nextInt();
      senate[party]=x;
      left+=x;
    }
    ArrayList<String> out=new ArrayList<String>();
    char[] alphabet=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"".toCharArray();
    while (left > 0) {
      int biggest=-1;
      int max=-1;
      int biggest2=-1;
      int max2=-1;
      for (int party=0; party < parties; party++) {
        if (senate[party] >= max) {
          max2=max;
          biggest2=biggest;
          max=senate[party];
          biggest=party;
        }
      }
      String addMe="""";
      if (partiesLeft == 2 && max == max2) {
        addMe="""" + alphabet[biggest] + alphabet[biggest2];
        left-=2;
        senate[biggest]-=1;
        senate[biggest2]-=1;
        if (senate[biggest2] == 0) {
          partiesLeft--;
        }
      }
 else {
        left-=1;
        addMe="""" + alphabet[biggest];
        senate[biggest]-=1;
      }
      if (senate[biggest] == 0) {
        partiesLeft--;
      }
      out.add(addMe);
    }
    int numOuts=out.size();
    System.out.print(""Case #"" + (test + 1) + "": "");
    for (int i=0; i < numOuts; i++) {
      String me=out.get(i);
      System.out.print(me + "" "");
    }
    System.out.println("""");
  }
  fileReader.close();
}
"
30001046,"public A(char se,int value){
  this.name="""" + se;
  this.value=value;
}
"
30001047,"public static void main(String args[]) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int test=Integer.parseInt(in.readLine());
  for (int t=0; t < test; t++) {
    int n=Integer.parseInt(in.readLine());
    StringTokenizer st=new StringTokenizer(in.readLine());
    int a[]=new int[40];
    int ost=0;
    for (int i=0; i < n; i++) {
      a[i]=Integer.parseInt(st.nextToken());
      ost+=a[i];
    }
    String ans[]=new String[1000];
    int count=0;
    while (ost > 0) {
      int max1=-1;
      int max2=-1;
      int max3=-1;
      for (int i=0; i < n; i++) {
        if (max1 == -1 || a[i] > a[max1]) {
          max3=max2;
          max2=max1;
          max1=i;
        }
 else         if (max2 == -1 || a[i] > a[max2]) {
          max3=max2;
          max2=i;
        }
 else         if (max3 == -1 || a[i] > a[max3]) {
          max3=i;
        }
      }
      if (ost == 3) {
        ans[count++]=(char)(max1 + 'A') + """";
        a[max1]--;
        ost--;
      }
 else       if (ost == 1) {
        ans[count++]=(char)(max1 + 'A') + """";
        a[max1]--;
        ost--;
      }
 else       if (a[max1] == a[max2]) {
        ans[count++]=(char)(max1 + 'A') + """" + (char)(max2 + 'A');
        a[max1]--;
        a[max2]--;
        ost-=2;
      }
 else {
        if (a[max2] > ((ost - 2) / 2)) {
          ans[count++]=(char)(max1 + 'A') + """" + (char)(max2 + 'A');
          a[max1]--;
          a[max2]--;
          ost-=2;
        }
 else {
          ans[count++]=(char)(max1 + 'A') + """" + (char)(max1 + 'A');
          a[max1]--;
          a[max1]--;
          ost-=2;
        }
      }
    }
    System.out.print(""Case #"" + (t + 1) + "":"");
    for (int i=0; i < count; i++) {
      System.out.print("" "" + ans[i]);
    }
    System.out.println();
  }
  in.close();
}
"
30001048,"public static void main(String[] args) throws IOException {
  A r=new A();
  int i, k, l, n;
  BufferedReader br=new BufferedReader(new FileReader(A.inFile));
  try {
    File file=new File(A.outFile);
    if (!file.exists()) {
      file.createNewFile();
    }
    FileWriter fw=new FileWriter(file.getAbsoluteFile());
    BufferedWriter bw=new BufferedWriter(fw);
    A.line=br.readLine();
    A.t=Integer.valueOf(A.line);
    for (l=0; l < A.t; l++) {
      bw.write(""Case #"" + (l + 1) + "": "");
      A.line=br.readLine();
      n=Integer.valueOf(A.line);
      A.a=new int[n];
      Arrays.fill(A.a,0);
      A.sum=0;
      A.line=br.readLine();
      A.row=A.line.split(""\\s"");
      for (i=0; i < n; i++) {
        A.a[i]=Integer.valueOf(A.row[i]);
        A.sum+=A.a[i];
      }
      A.rem=A.sum;
      A.maj=A.sum / 2;
      int max, pos1, pos2;
      for (; A.rem > 0; ) {
        max=-1;
        pos1=-1;
        pos2=-1;
        for (i=0; i < n; i++) {
          if (A.a[i] > max) {
            max=A.a[i];
            pos1=i;
          }
        }
        for (i=0; i < n; i++) {
          if (A.a[i] == max && i != pos1) {
            pos2=i;
          }
        }
        if (pos2 > -1 && A.rem == 3)         pos2=-1;
        if (pos2 > -1) {
          bw.write("""" + (char)('A' + pos1) + """"+ (char)('A' + pos2));
          A.a[pos1]--;
          A.a[pos2]--;
          A.rem-=2;
        }
 else {
          bw.write("""" + (char)('A' + pos1));
          A.a[pos1]--;
          A.rem-=1;
        }
        if (A.rem > 0)         bw.write("" "");
        max=-1;
        for (i=0; i < n; i++) {
          max=(A.a[i] > max) ? A.a[i] : max;
        }
        if (max > A.rem / 2) {
          System.out.println(""Problem!"");
        }
      }
      bw.write(""\n"");
    }
    bw.close();
  }
  finally {
    br.close();
  }
}
"
30001049,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""A-large (1).in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""out.txt""));
  int caseLength=in.nextInt();
  for (int caseNumber=1; caseNumber <= caseLength; caseNumber++) {
    out.write(String.format(""Case #%d: "",caseNumber));
    int partyCount=in.nextInt();
    int[] party=new int[partyCount];
    int total=0;
    for (int i=0; i < partyCount; i++) {
      party[i]=in.nextInt();
      total+=party[i];
    }
    ArrayList<Integer> nonZero=new ArrayList<>();
    for (int i=0; i < partyCount; i++) {
      if (party[i] > 0) {
        nonZero.add(i);
      }
    }
    if (nonZero.size() == 2) {
      int count=party[nonZero.get(0)];
      int first=nonZero.get(0);
      int second=nonZero.get(1);
      for (int i=0; i < count; i++) {
        out.write((char)('A' + first));
        out.write((char)('A' + second));
        out.write((' '));
      }
    }
 else {
      while (total > 2) {
        int maxParty=0;
        for (int i=1; i < partyCount; i++) {
          if (party[i] > party[maxParty]) {
            maxParty=i;
          }
        }
        party[maxParty]--;
        total--;
        out.write((char)('A' + maxParty));
        out.write(' ');
      }
      for (int i=0; i < partyCount; i++) {
        if (party[i] != 0) {
          out.write((char)('A' + i));
        }
      }
    }
    out.write('\n');
  }
  out.close();
}
"
30001050,"public static void main(String args[]){
  Locale.setDefault(Locale.US);
  Scanner in;
  try {
    in=new Scanner(new File(""input.txt""));
  }
 catch (  Exception e) {
    in=new Scanner(System.in);
  }
  PrintWriter out;
  try {
    out=new PrintWriter(""output.txt"");
  }
 catch (  Exception e) {
    out=new PrintWriter(System.out);
  }
  int t=in.nextInt();
  for (int x=1; x <= t; ++x) {
    String res=""Case #"" + x + "": "";
    int n=in.nextInt();
    int[] ns=new int[n];
    int total=0;
    for (int i=0; i < n; ++i) {
      int p=in.nextInt();
      total+=p;
      ns[i]=p;
    }
    boolean even=false;
    while (!even) {
      int max=ns[0];
      int maxPos=0;
      int min=ns[0];
      int minPos=0;
      for (int i=1; i < n; ++i) {
        if (ns[i] > max) {
          max=ns[i];
          maxPos=i;
        }
 else         if (ns[i] < min) {
          min=ns[i];
          minPos=i;
        }
      }
      if (max != min) {
        res+=((char)(65 + maxPos)) + "" "";
        --ns[maxPos];
        --total;
      }
 else {
        even=true;
      }
    }
    int totalColumns=0;
    for (int i=0; i < n; ++i) {
      if (ns[i] > 0) {
        ++totalColumns;
      }
    }
    System.out.println(totalColumns);
    for (int i=0; i < n; ++i) {
      if (totalColumns > 2) {
        while (ns[i] > 0) {
          res+=((char)(65 + i)) + "" "";
          --ns[i];
          --total;
        }
        --totalColumns;
      }
 else       break;
    }
    int a=-1;
    int b=-1;
    int times=0;
    for (int i=0; i < n; ++i) {
      if (ns[i] > 0) {
        if (a == -1) {
          a=i;
          times=ns[i];
        }
 else {
          b=i;
        }
      }
    }
    for (int i=0; i < times; ++i) {
      res+=((char)(65 + a)) + """" + ((char)(65 + b))+ "" "";
    }
    res+=""\n"";
    System.out.print(res);
    out.print(res);
  }
  out.close();
}
"
30001051,"public static void main(String args[]){
  int t, i, ind=1, n, temp;
  Scanner sc=new Scanner(System.in);
  t=sc.nextInt();
  String s;
  while (t-- > 0) {
    s=sc.next();
    n=s.length();
    int arr[]=new int[26], ans[]=new int[10];
    for (i=0; i < 26; ++i)     arr[i]=0;
    for (i=0; i < 10; ++i)     ans[i]=0;
    for (i=0; i < n; ++i) {
      arr[(int)s.charAt(i) - 65]++;
    }
    if (arr[6] != 0) {
      temp=arr[6];
      ans[8]=temp;
      arr[6]=0;
      arr[4]-=temp;
      arr[8]-=temp;
      arr[7]-=temp;
      arr[19]-=temp;
    }
    if (arr[20] != 0) {
      temp=arr[20];
      ans[4]=temp;
      arr[5]-=temp;
      arr[14]-=temp;
      arr[20]-=temp;
      arr[17]-=temp;
    }
    if (arr[25] != 0) {
      temp=arr[25];
      ans[0]=temp;
      arr[25]-=temp;
      arr[4]-=temp;
      arr[14]-=temp;
      arr[17]-=temp;
    }
    if (arr[22] != 0) {
      temp=arr[22];
      ans[2]=temp;
      arr[22]-=temp;
      arr[19]-=temp;
      arr[14]-=temp;
    }
    if (arr[23] != 0) {
      temp=arr[23];
      ans[6]=temp;
      arr[18]-=temp;
      arr[23]-=temp;
      arr[8]-=temp;
    }
    if (arr[14] != 0) {
      temp=arr[14];
      ans[1]=temp;
      arr[14]=0;
      arr[13]-=temp;
      arr[4]-=temp;
    }
    if (arr[5] != 0) {
      temp=arr[5];
      ans[5]=temp;
      arr[5]=0;
      arr[8]-=temp;
      arr[21]-=temp;
      arr[4]-=temp;
    }
    if (arr[21] != 0) {
      temp=arr[21];
      ans[7]=temp;
      arr[21]=0;
      arr[18]-=temp;
      arr[13]-=temp;
      arr[4]-=temp;
      arr[4]-=temp;
    }
    if (arr[8] != 0) {
      temp=arr[8];
      ans[9]=temp;
      arr[8]=0;
      arr[13]-=temp;
      arr[13]-=temp;
      arr[4]-=temp;
    }
    if (arr[19] != 0) {
      temp=arr[19];
      ans[3]=temp;
      arr[14]=0;
      arr[17]-=temp;
      arr[7]-=temp;
      arr[4]-=temp;
      arr[4]-=temp;
    }
    System.out.print(""Case #"" + ind + "": "");
    for (i=0; i < 10; ++i)     while (ans[i]-- > 0)     System.out.print(i);
    System.out.println();
    ++ind;
  }
}
"
30001052,"public static void main(String args[]) throws Exception {
  File file=new File(""C:\\Users\\oleksii\\workspace\\GCodeJam\\src\\A-large.in"");
  File outFile=new File(""C:\\Users\\oleksii\\workspace\\GCodeJam\\src\\A-large.out"");
  BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
  Scanner scanner=new Scanner(file);
  int T=Integer.parseInt(scanner.nextLine()), count=0, N=0, max=0, prevMax=0, idx=0;
  int[] parties;
  String alphabet=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
  StringBuilder output;
  char one, two;
  boolean stop=false;
  for (int t=1; t <= T; t++) {
    output=new StringBuilder();
    stop=false;
    N=Integer.parseInt(scanner.nextLine());
    parties=new int[N];
    for (int n=0; n < N; n++) {
      parties[n]=scanner.nextInt();
    }
    while (!stop) {
      max=0;
      count=0;
      prevMax=-1;
      idx=-1;
      for (int i=0; i < N; i++) {
        if (max < parties[i]) {
          prevMax=idx;
          max=parties[i];
          idx=i;
          count=1;
        }
 else         if (max == parties[i]) {
          prevMax=i;
          count++;
        }
      }
      if (max == 0) {
        stop=true;
        break;
      }
 else       if (max == 1 && prevMax >= 0 && parties[prevMax] == 1) {
        output.append(alphabet.charAt(idx));
        parties[idx]--;
        if (count != 3) {
          output.append(alphabet.charAt(prevMax));
          parties[prevMax]--;
        }
        output.append("" "");
      }
 else       if (max <= 2) {
        output.append(alphabet.charAt(idx));
        parties[idx]--;
        if (prevMax >= 0 && parties[prevMax] > 1) {
          output.append(alphabet.charAt(prevMax));
          parties[prevMax]--;
        }
        output.append("" "");
      }
 else       if (prevMax >= 0 && max == parties[prevMax]) {
        output.append(alphabet.charAt(idx));
        parties[idx]--;
        output.append(alphabet.charAt(prevMax));
        parties[prevMax]--;
        output.append("" "");
      }
 else {
        output.append(alphabet.charAt(idx));
        output.append(alphabet.charAt(idx));
        parties[idx]-=2;
        output.append("" "");
      }
    }
    System.out.println(output);
    bw.write(""Case #"" + t + "": ""+ output.toString());
    if (t != T) {
      bw.write(""\n"");
      scanner.nextLine();
    }
  }
  bw.close();
  System.out.println(""Done!"");
}
"
30001053,"public static void main(String[] args) throws FileNotFoundException {
  FileInputStream fin=new FileInputStream(""A-large.in.txt"");
  Scanner scanner=new Scanner(fin);
  FileOutputStream fout=new FileOutputStream(""A-large.out.txt"");
  PrintWriter writer=new PrintWriter(fout);
  int testCount=scanner.nextInt();
  for (int testCase=1; testCase <= testCount; ++testCase) {
    int n=scanner.nextInt();
    int[] a=new int[n];
    for (int i=0; i < n; ++i) {
      a[i]=scanner.nextInt();
    }
    writer.printf(""Case #%d: %s\n"",testCase,solve(a));
  }
  writer.close();
}
"
30001054,"public static void main(String[] args){
  File file=new File(""D://A-large.in"");
  File out=new File(""D://outA.txt"");
  try {
    scan=new Scanner(file);
    writer=new PrintWriter(out);
    int t=scan.nextInt();
    for (int i=1; i <= t; i++) {
      writer.print(""Case #"" + i + "": "");
      int P=scan.nextInt();
      List<Integer> list=new ArrayList<Integer>();
      for (int j=0; j < P; j++) {
        list.add(scan.nextInt());
      }
      if (list.size() == 2) {
        int min=0;
        if (list.get(0) > list.get(1)) {
          min=list.get(1);
          for (int i3=0; i3 < list.get(0) - list.get(1); i3++) {
            writer.print(""A "");
          }
        }
 else {
          min=list.get(0);
          for (int i4=0; i4 < list.get(1) - list.get(0); i4++) {
            writer.print(""B "");
          }
        }
        for (int i1=0; i1 < min; i1++) {
          writer.print(""AB "");
        }
        writer.println();
      }
 else {
        while (true) {
          int max=-1, imax=-1;
          int sum=0;
          for (int i5=0; i5 < list.size(); i5++) {
            sum+=list.get(i5);
            if (list.get(i5) > max) {
              max=list.get(i5);
              imax=i5;
            }
          }
          if (sum > 2) {
            writer.print((char)('A' + imax) + "" "");
            list.set(imax,list.get(imax) - 1);
          }
 else {
            for (int i2=0; i2 < list.size(); i2++) {
              if (list.get(i2) > 0) {
                writer.print((char)('A' + i2));
              }
            }
            writer.println("""");
            break;
          }
        }
      }
    }
  }
 catch (  Exception ex) {
  }
 finally {
    writer.close();
  }
}
"
30001055,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(args[0]));
  BufferedWriter out=new BufferedWriter(new FileWriter(args[1]));
{
    int nb_cases=Integer.parseInt(in.readLine());
    for (int icase=0; icase < nb_cases; icase++) {
      int N=Integer.parseInt(in.readLine());
      String[] P_str=in.readLine().split("" "");
      int[] P=new int[N];
      for (int i=0; i < N; i++)       P[i]=Integer.parseInt(P_str[i]);
      LinkedList<String> y=new LinkedList<String>();
      int S=0;
      for (int p=0; p < N; p++)       S+=P[p];
      while (true) {
        String res="""";
{
          int pmax=0;
          for (int p=1; p < N; p++)           if (P[p] > P[pmax])           pmax=p;
          if (P[pmax] == 0)           break;
          P[pmax]--;
          S--;
          res=res + (char)('A' + pmax);
        }
{
          int pmax=0;
          for (int p=1; p < N; p++)           if (P[p] > P[pmax])           pmax=p;
          if (P[pmax] > 0) {
            P[pmax]--;
            S--;
            int newpmax=0;
            for (int p=1; p < N; p++)             if (P[p] > P[newpmax])             newpmax=p;
            if (P[newpmax] > S / 2) {
              P[pmax]++;
              S++;
            }
 else             res=res + (char)('A' + pmax);
          }
        }
        y.add(res);
      }
      out.write(""Case #"" + (icase + 1) + "":"");
      for (      String ye : y)       out.write("" "" + ye);
      out.write(""\n"");
    }
  }
  out.close();
  in.close();
}
"
30001056,"public static void main(String[] args){
}
"
30001057,"public static void main(String[] args) throws Exception {
  File file=new File(""D:\\A-small.in"");
  File outFile=new File(""D:\\A-small.out"");
  BufferedReader br=new BufferedReader(new FileReader(file));
  BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
  int testCases=Integer.parseInt(br.readLine());
  for (int t=1; t <= testCases; t++) {
    int N=Integer.parseInt(br.readLine());
    int[] Ninput=new int[N];
    String input=br.readLine();
    StringTokenizer strToken=new StringTokenizer(input);
    int count=strToken.countTokens();
    for (int x=0; x < count; x++) {
      Ninput[x]=Integer.parseInt((String)strToken.nextElement());
    }
    System.out.println(""============="");
    String removed="""";
    while (!areAllZero(Ninput)) {
      String removedSen="""";
      int large1;
      int large2;
      int largeindex1;
      int largeindex2;
      int sum=Ninput[0] + Ninput[1];
      if (Ninput[0] > Ninput[1]) {
        large1=Ninput[0];
        large2=Ninput[1];
        largeindex1=0;
        largeindex2=1;
      }
 else {
        large1=Ninput[1];
        large2=Ninput[0];
        largeindex1=1;
        largeindex2=0;
      }
      for (int i=2; i < Ninput.length; i++) {
        sum+=Ninput[i];
        if (Ninput[i] >= large1) {
          large2=large1;
          large1=Ninput[i];
          largeindex2=largeindex1;
          largeindex1=i;
        }
 else         if (Ninput[i] >= large2) {
          large2=Ninput[i];
          large2=i;
        }
      }
      if (Ninput[largeindex1] > 0) {
        Ninput[largeindex1]--;
        removedSen+=(char)(largeindex1 + 0x41);
      }
      if (largeindex1 != largeindex2 && sum % 2 == 0) {
        if (Ninput[largeindex2] > 0) {
          Ninput[largeindex2]--;
          removedSen+=(char)(largeindex2 + 0x41);
        }
      }
      removed+=removedSen + "" "";
    }
    bw.write(""Case #"" + t + "": ""+ removed+ ""\n"");
  }
  br.close();
  bw.close();
}
"
30001058,"public static void main(String[] args) throws IOException {
  A my=new A();
  BufferedReader r=new BufferedReader(new FileReader(new File(my.problemName + my.inTheMiddle + my.inTheEnd+ "".in"")));
  BufferedWriter w=new BufferedWriter(new FileWriter(my.problemName + my.inTheMiddle + my.inTheEnd+ "".out""));
  my.caseC=Integer.parseInt(r.readLine());
  for (int c=0; c < my.caseC; c++) {
    w.write(""Case #"" + (c + 1) + "": "");
    int N=Integer.parseInt(r.readLine());
    int[] partySize=new int[N];
    String[] args1=r.readLine().split(""\\s+"");
    int sum=0;
    for (int i=0; i < N; i++) {
      partySize[i]=Integer.parseInt(args1[i]);
      sum+=partySize[i];
    }
    while (sum != 0) {
      int biggestPartyIndex1=-1;
      int biggestPartyIndex2=-1;
      int biggestPartySize=0;
      for (int i=0; i < N; i++) {
        if (partySize[i] > biggestPartySize) {
          biggestPartyIndex1=i;
          biggestPartySize=partySize[i];
          biggestPartyIndex2=-1;
        }
 else         if (partySize[i] == biggestPartySize) {
          biggestPartyIndex2=i;
        }
      }
      int evacuated=(biggestPartyIndex1 == -1 ? 0 : 1) + (biggestPartyIndex2 == -1 ? 0 : 1);
      if (sum != 3) {
        w.write((biggestPartyIndex1 == -1 ? """" : (char)('A' + biggestPartyIndex1)) + """" + (biggestPartyIndex2 == -1 ? """" : (char)('A' + biggestPartyIndex2)));
        if (sum - evacuated != 0) {
          w.write("" "");
        }
        sum-=evacuated;
        if (biggestPartyIndex1 != -1) {
          partySize[biggestPartyIndex1]-=1;
        }
        if (biggestPartyIndex2 != -1) {
          partySize[biggestPartyIndex2]-=1;
        }
      }
 else {
        w.write((biggestPartyIndex1 == -1 ? """" : (char)('A' + biggestPartyIndex1)) + "" "");
        sum-=1;
        if (biggestPartyIndex1 != -1) {
          partySize[biggestPartyIndex1]-=1;
        }
      }
    }
    w.write(""\n"");
  }
  r.close();
  w.close();
}
"
30001059,"public static void main(String[] args){
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    int N=sc.nextInt();
    int[] s=new int[N];
    for (int i=0; i < N; i++)     s[i]=sc.nextInt();
    nbParty=N;
    sum=0;
    for (int i=0; i < N; i++)     sum+=s[i];
    StringBuilder sb=new StringBuilder();
    while (sum > 0) {
      nbParty=0;
      sum=0;
      for (int i=0; i < N; i++) {
        if (s[i] > 0) {
          nbParty++;
          sum+=s[i];
        }
      }
      if (nbParty > 3) {
        int max1=s[0] > s[1] ? s[0] : s[1];
        int idx1=s[0] > s[1] ? 0 : 1;
        int max2=s[0] > s[1] ? s[1] : s[0];
        int idx2=s[0] > s[1] ? 1 : 0;
        for (int i=2; i < N; i++) {
          if (max1 < s[i]) {
            max2=max1;
            idx2=idx1;
            max1=s[i];
            idx1=i;
          }
 else {
            if (max2 < s[i]) {
              max2=s[i];
              idx2=i;
            }
          }
        }
        sb.append((char)(idx1 + 'A') + """" + (char)(idx2 + 'A')+ "" "");
        s[idx1]--;
        s[idx2]--;
      }
 else       if (nbParty == 3) {
        int[] party=new int[nbParty];
        nbParty=0;
        for (int i=0; i < N; i++)         if (s[i] > 0) {
          party[nbParty++]=i;
        }
        if (sum == 3) {
          sb.append((char)(party[0] + 'A') + "" "");
          s[party[0]]--;
        }
 else {
          int max1=s[0] > s[1] ? s[0] : s[1];
          int idx1=s[0] > s[1] ? 0 : 1;
          int max2=s[0] > s[1] ? s[1] : s[0];
          int idx2=s[0] > s[1] ? 1 : 0;
          for (int i=2; i < N; i++) {
            if (max1 < s[i]) {
              max2=max1;
              idx2=idx1;
              max1=s[i];
              idx1=i;
            }
 else {
              if (max2 < s[i]) {
                max2=s[i];
                idx2=i;
              }
            }
          }
          sb.append((char)(idx1 + 'A') + """" + (char)(idx2 + 'A')+ "" "");
          s[idx1]--;
          s[idx2]--;
        }
      }
 else       if (nbParty == 2) {
        int idx1=-1;
        int idx2=-1;
        for (int i1=0; i1 < N; i1++) {
          if (s[i1] > 0) {
            if (idx1 == -1)             idx1=i1;
 else             idx2=i1;
          }
        }
        if (s[idx1] > s[idx2]) {
          sb.append((char)(idx1 + 'A') + "" "");
          s[idx1]--;
        }
 else         if (s[idx2] > s[idx1]) {
          sb.append((char)(idx2 + 'A') + "" "");
          s[idx2]--;
        }
        for (int i1=0; i1 < s[idx1]; i1++) {
          sb.append((char)(idx1 + 'A') + """" + (char)(idx2 + 'A'));
          if (i1 != s[idx1] - 1)           sb.append("" "");
        }
        sum=0;
      }
    }
    System.out.printf(""Case #%d: %s\n"",t,sb.toString());
  }
  sc.close();
}
"
30001060,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""src/prob1/in2.in""));
  PrintWriter out=new PrintWriter(""src/prob1/out2.txt"");
  Main m=new Main();
  int T=in.nextInt();
  in.nextLine();
  for (int i=1; i <= T; i++) {
    int nParties=in.nextInt();
    int total=0;
    int[] parties=new int[nParties];
    for (int j=0; j < nParties; j++) {
      parties[j]=in.nextInt();
      total+=parties[j];
    }
    ;
    String sol=m.solve(total,parties);
    System.out.println(""Case #"" + i + "": ""+ sol);
    out.write(""Case #"" + i + "": ""+ sol);
    out.write(""\n"");
  }
  out.close();
}
"
30001061,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new File(""D/large.txt""));
  PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(new File(""src/D.txt""))));
  int size=sc.nextInt();
  sc.nextLine();
  for (int i=0; i < size; i++) {
    int length=sc.nextInt();
    System.out.println(length);
    writer.print(""Case #"" + (i + 1) + "":"");
    System.out.print(""Case #"" + (i + 1) + "":"");
    int max=-1;
    int index=-1;
    int[] line=new int[length];
    for (int j=0; j < length; j++) {
      line[j]=sc.nextInt();
      if (line[j] > max) {
        index=j;
        max=line[j];
      }
    }
    while (max != 0) {
      int i1=-1;
      int i2=-1;
      int count=0;
      for (int j=0; j < length; j++) {
        if (line[j] == max) {
          i2=i1;
          i1=j;
          count++;
        }
      }
      if (count % 2 == 0) {
        line[i1]--;
        line[i2]--;
        writer.print("" "" + String.valueOf((char)(i1 + 65)) + String.valueOf((char)(i2 + 65)));
        System.out.print("" "" + String.valueOf((char)(i1 + 65)) + String.valueOf((char)(i2 + 65)));
      }
 else {
        line[i1]--;
        writer.print("" "" + String.valueOf((char)(i1 + 65)));
        System.out.print("" "" + String.valueOf((char)(i1 + 65)));
      }
      max=0;
      for (int j=0; j < length; j++) {
        if (line[j] > max) {
          index=j;
          max=line[j];
        }
      }
    }
    writer.println("""");
    System.out.println("""");
  }
  writer.close();
  sc.close();
}
"
30001062,"public static void main(String[] args){
  File infile=new File(""C:\\Users\\iftikhar\\Downloads\\A-large.in"");
  File outFile=new File(""C:\\Users\\iftikhar\\Downloads\\A-large.out"");
  try {
    BufferedReader br=new BufferedReader(new FileReader(infile));
    BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
    int testCases=Integer.parseInt(br.readLine());
    for (int t=1; t <= testCases; t++) {
      int N=Integer.parseInt(br.readLine());
      String s=br.readLine();
      String[] line1=s.split("" "");
      int[] num=new int[line1.length];
      String gs="""";
      for (int i=0; i < line1.length; i++) {
        num[i]=Integer.parseInt(line1[i]);
        gs+=num[i];
      }
      boolean flag=true;
      String FS="""";
      System.out.println(gs);
      while (flag) {
        int max=0;
        String maxs="""";
        for (int i=0; i < num.length; i++) {
          if (num[i] > max) {
            max=num[i];
            maxs=i + "" "";
          }
 else           if (num[i] == max)           maxs+=i + "" "";
        }
        System.out.println(maxs);
        String[] hhh=maxs.split("" "");
        if (hhh.length == 1) {
          String[] hh=maxs.split("" "");
          FS+="""" + String.valueOf((char)('A' + Integer.parseInt(hh[0]))) + """"+ String.valueOf((char)('A' + Integer.parseInt(hh[0])));
          num[Integer.parseInt(hh[0])]-=2;
        }
 else         if (hhh.length == 3 && max == 1) {
          String[] hh=maxs.split("" "");
          FS+="""" + String.valueOf((char)('A' + Integer.parseInt(hh[0])));
          num[Integer.parseInt(hh[0])]-=1;
        }
 else         if (hhh.length > 1) {
          String[] hh=maxs.split("" "");
          FS+="""" + String.valueOf((char)('A' + Integer.parseInt(hh[0]))) + """"+ String.valueOf((char)('A' + Integer.parseInt(hh[1])));
          num[Integer.parseInt(hh[0])]--;
          num[Integer.parseInt(hh[1])]--;
        }
        FS+="" "";
        flag=false;
        for (int i=0; i < line1.length; i++)         if (num[i] != 0)         flag=true;
        max=0;
        int maxn=-1;
        for (int i=0; i < num.length; i++) {
          if (num[i] > max) {
            max=num[i];
            maxn=i;
          }
        }
        if (maxn != -1) {
          for (int i=0; i < num.length; i++) {
            if (num[i] > max) {
              max=num[i];
              maxn=i;
            }
          }
          int sum=0;
          for (int i=0; i < num.length; i++) {
            if (maxn != i)             sum+=num[i];
          }
          if (sum < num[maxn]) {
            System.out.println(""errror:::"" + FS);
            System.exit(0);
          }
        }
      }
      System.out.println(""***********"");
      bw.write(""Case #"" + t + "": ""+ FS+ ""\n"");
    }
    br.close();
    bw.close();
  }
 catch (  FileNotFoundException ex) {
    System.out.println(""Unable to open file"");
  }
catch (  IOException ex) {
    System.out.println(""Error reading file"");
  }
}
"
30001063,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int testNum=scan.nextInt();
  for (int i=1; i <= testNum; i++) {
    int numParties=scan.nextInt();
    int[] partyPeopleCount=new int[numParties];
    for (int j=0; j < numParties; j++) {
      partyPeopleCount[j]=scan.nextInt();
    }
    char[] partyName=new char[numParties];
    for (int i1=0; i1 < numParties; i1++) {
      partyName[i1]=(char)('A' + i1);
    }
    int numTotalPeople=0;
    for (int i2=0; i2 < numParties; i2++) {
      numTotalPeople+=partyPeopleCount[i2];
    }
    String plan1="""";
    while (numTotalPeople > 0) {
      int maxIndex1=-1;
      int maxValue1=Integer.MIN_VALUE;
      for (int i1=0; i1 < numParties; i1++) {
        if (partyPeopleCount[i1] > maxValue1) {
          maxValue1=partyPeopleCount[i1];
          maxIndex1=i1;
        }
      }
      int maxIndex=maxIndex1;
      int nextMaxIndex1=-1;
      int nextMaxValue1=Integer.MIN_VALUE;
      for (int i1=0; i1 < numParties; i1++) {
        if (i1 != maxIndex && partyPeopleCount[i1] > nextMaxValue1) {
          nextMaxValue1=partyPeopleCount[i1];
          nextMaxIndex1=i1;
        }
      }
      int nextMaxIndex=nextMaxIndex1;
      int maxValue=partyPeopleCount[maxIndex];
      int nextMaxValue=partyPeopleCount[nextMaxIndex];
      if (maxValue >= 2) {
        partyPeopleCount[maxIndex]-=2;
        numTotalPeople-=2;
        int maxIndex2=-1;
        int maxValue2=Integer.MIN_VALUE;
        for (int i2=0; i2 < numParties; i2++) {
          if (partyPeopleCount[i2] > maxValue2) {
            maxValue2=partyPeopleCount[i2];
            maxIndex2=i2;
          }
        }
        int newMaxIndex=maxIndex2;
        if (partyPeopleCount[newMaxIndex] > numTotalPeople / 2) {
          partyPeopleCount[maxIndex]+=2;
          numTotalPeople+=2;
        }
 else {
          plan1+=String.valueOf(partyName[maxIndex]);
          plan1+=String.valueOf(partyName[maxIndex]);
          plan1+="" "";
          continue;
        }
      }
      if (nextMaxValue >= 1) {
        partyPeopleCount[maxIndex]--;
        partyPeopleCount[nextMaxIndex]--;
        numTotalPeople-=2;
        int maxIndex2=-1;
        int maxValue2=Integer.MIN_VALUE;
        for (int i2=0; i2 < numParties; i2++) {
          if (partyPeopleCount[i2] > maxValue2) {
            maxValue2=partyPeopleCount[i2];
            maxIndex2=i2;
          }
        }
        int newMaxIndex=maxIndex2;
        if (partyPeopleCount[newMaxIndex] > numTotalPeople / 2) {
          partyPeopleCount[maxIndex]++;
          partyPeopleCount[nextMaxIndex]++;
          numTotalPeople+=2;
        }
 else {
          plan1+=String.valueOf(partyName[maxIndex]);
          plan1+=String.valueOf(partyName[nextMaxIndex]);
          plan1+="" "";
          continue;
        }
      }
      partyPeopleCount[maxIndex]--;
      numTotalPeople--;
      plan1+=String.valueOf(partyName[maxIndex]);
      plan1+="" "";
    }
    String plan=plan1;
    System.out.printf(""Case #%d: %s\n"",i,plan.trim());
  }
  scan.close();
}
"
30001064,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(""large_output.txt"");
  int n=in.nextInt();
  int m=-1;
  int party=m;
  int max=0;
  int maxid=0;
  int max2=0;
  int max2id=0;
  int temp=0;
  int sum=0;
  String ans="""";
  for (int i=1; i <= n + 1; i++) {
    if (in.hasNext()) {
      m=in.nextInt();
      party=m;
      sum=0;
      int arrParty[]=new int[m];
      for (int j=0; j < party; j++) {
        arrParty[j]=in.nextInt();
        sum=sum + arrParty[j];
      }
      while (sum > 3) {
        max=0;
        for (int j=0; j < party; j++) {
          if (max < arrParty[j]) {
            max=arrParty[j];
            maxid=j;
          }
        }
        ans=ans + (char)(maxid + 'A');
        arrParty[maxid]--;
        sum--;
        max=0;
        for (int j=0; j < party; j++) {
          if (max < arrParty[j]) {
            max=arrParty[j];
            maxid=j;
          }
        }
        ans=ans + (char)(maxid + 'A');
        arrParty[maxid]--;
        sum--;
        max=0;
        ans=ans + "" "";
      }
      if (sum == 3) {
        for (int j=0; j < party; j++) {
          if (max < arrParty[j]) {
            max=arrParty[j];
            maxid=j;
          }
        }
        ans=ans + (char)(maxid + 'A');
        arrParty[maxid]--;
        sum--;
        max=0;
        ans=ans + "" "";
      }
      if (sum <= 2) {
        for (int j=0; j < party; j++) {
          if (arrParty[j] != 0) {
            maxid=j;
            break;
          }
        }
        for (int j=party - 1; j > 0; j--) {
          if (arrParty[j] != 0) {
            max2id=j;
            break;
          }
        }
        if (maxid == max2id)         ans=ans + (char)(maxid + 'A');
        if (maxid != max2id)         ans=ans + (char)(maxid + 'A') + (char)(max2id + 'A');
      }
      if (m != -1)       out.println(""Case #"" + i + "": ""+ ans);
 else {
        out.println(""Case #"" + i + "": ""+ ""Wrong Input"");
      }
      ans="""";
    }
  }
  in.close();
  out.close();
}
"
30001065,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int testCases=in.nextInt();
  for (int i=1; i <= testCases; i++) {
    int n=in.nextInt();
    String[] senators=new String[n];
    int currentParty=65;
    int sens=0;
    String plan="""";
    for (int j=0; j < n; j++) {
      int sen=in.nextInt();
      String toReturn="""";
      for (int i1=0; i1 < sen; i1++) {
        toReturn+=(char)currentParty;
      }
      senators[j]=toReturn;
      currentParty++;
      sens+=sen;
    }
    Arrays.sort(senators,new Comparator<String>(){
      @Override public int compare(      String s1,      String s2){
        return s2.length() - s1.length();
      }
    }
);
    senators=senators;
    if (sens % 2 != 0) {
      plan+=senators[0].charAt(0) + "" "";
      StringBuilder sb=new StringBuilder(senators[0]);
      sb.deleteCharAt(0);
      senators[0]=sb.toString();
      Arrays.sort(senators,new Comparator<String>(){
        @Override public int compare(        String s1,        String s2){
          return s2.length() - s1.length();
        }
      }
);
      senators=senators;
    }
    while (!senators[0].equals("""")) {
      plan+=senators[0].charAt(0);
      if (senators[1].length() != 0) {
        plan+=senators[1].charAt(0);
        StringBuilder sb=new StringBuilder(senators[1]);
        sb.deleteCharAt(0);
        senators[1]=sb.toString();
      }
      StringBuilder sb=new StringBuilder(senators[0]);
      sb.deleteCharAt(0);
      senators[0]=sb.toString();
      plan+="" "";
      Arrays.sort(senators,new Comparator<String>(){
        @Override public int compare(        String s1,        String s2){
          return s2.length() - s1.length();
        }
      }
);
      senators=senators;
    }
    System.out.println(""Case #"" + i + "": ""+ plan.trim());
  }
}
"
30001066,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int numOfTestCases=in.nextInt();
  int testCaseNum=1;
  while (numOfTestCases != 0) {
    int numOfParties=in.nextInt();
    in.nextLine();
    String partyMembersNum=in.nextLine();
    String[] tokens=partyMembersNum.split("" "");
    int[] eachPartyMemberCount=new int[numOfParties];
    String[] ResultOps=new String[100000];
    int ResultOpsIndex=0;
    int i=0;
    for (    String token : tokens) {
      eachPartyMemberCount[i++]=Integer.parseInt(token);
    }
    int finish=0;
    char beginChar='A';
    String tempStr="""";
    while (finish != 1) {
      int maxLoc=0;
      int maxVal=eachPartyMemberCount[maxLoc];
      for (int k=1; k < eachPartyMemberCount.length; k++) {
        if (eachPartyMemberCount[k] > maxVal) {
          maxVal=eachPartyMemberCount[k];
          maxLoc=k;
        }
      }
      eachPartyMemberCount[maxLoc]--;
      int zeroCount=0;
      for (int k=0; k < eachPartyMemberCount.length; k++) {
        if (eachPartyMemberCount[k] == 0) {
          zeroCount++;
        }
      }
      if (zeroCount == numOfParties) {
        tempStr=Character.toString((char)(beginChar + maxLoc));
        ResultOps[ResultOpsIndex]=tempStr;
        ResultOpsIndex++;
        break;
      }
      int maxLoc1=0;
      int maxVal1=eachPartyMemberCount[maxLoc1];
      for (int k=1; k < eachPartyMemberCount.length; k++) {
        if (eachPartyMemberCount[k] > maxVal1) {
          maxVal1=eachPartyMemberCount[k];
          maxLoc1=k;
        }
      }
      eachPartyMemberCount[maxLoc1]--;
      int zeroCount1=0;
      for (int k=0; k < eachPartyMemberCount.length; k++) {
        if (eachPartyMemberCount[k] == 0) {
          zeroCount1++;
        }
      }
      if (zeroCount1 == numOfParties) {
        tempStr=Character.toString((char)(beginChar + maxLoc)) + Character.toString((char)(beginChar + maxLoc1));
        ResultOps[ResultOpsIndex]=tempStr;
        ResultOpsIndex++;
        break;
      }
 else {
        tempStr=Character.toString((char)(beginChar + maxLoc)) + Character.toString((char)(beginChar + maxLoc1));
        ResultOps[ResultOpsIndex]=tempStr;
        ResultOpsIndex++;
      }
    }
    System.out.print(""Case #"" + testCaseNum + "": "");
    if (ResultOps[ResultOpsIndex - 1].length() == 1) {
      System.out.print(ResultOps[ResultOpsIndex - 1]);
      System.out.print("" "");
      for (int p=0; p < ResultOpsIndex - 1; p++) {
        System.out.print(ResultOps[p]);
        System.out.print("" "");
      }
    }
 else {
      for (int p=0; p < ResultOpsIndex; p++) {
        System.out.print(ResultOps[p]);
        System.out.print("" "");
      }
    }
    System.out.println();
    numOfTestCases--;
    testCaseNum++;
  }
  in.close();
}
"
30001067,"public static void main(String[] args) throws Exception {
}
"
30001068,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(""text3"")));
  int testCount=Integer.parseInt(br.readLine());
  for (int i=1; i <= testCount; i++) {
    int number=Integer.parseInt(br.readLine());
    int sena[]=new int[number];
    double sum=0;
    Map<Character,Integer> map=new HashMap<>();
    String[] string=br.readLine().split("" "");
    for (int j=0; j < number; j++) {
      sena[j]=Integer.parseInt(string[j]);
      map.put((char)(j + 65),sena[j]);
      sum+=sena[j];
    }
    String answer="""";
    while (sum > 0) {
      Map.Entry<Character,Integer> maxEntry=null;
      for (      Map.Entry<Character,Integer> entry : map.entrySet()) {
        if (maxEntry == null || entry.getValue().compareTo(maxEntry.getValue()) > 0) {
          maxEntry=entry;
        }
      }
      answer+=maxEntry.getKey().toString();
      map.put(maxEntry.getKey(),maxEntry.getValue() - 1);
      sum--;
      if (sum > 0 && sum != 2) {
        for (        Map.Entry<Character,Integer> entry : map.entrySet()) {
          if (maxEntry == null || entry.getValue().compareTo(maxEntry.getValue()) > 0) {
            maxEntry=entry;
          }
        }
        answer=answer + maxEntry.getKey().toString();
        map.put(maxEntry.getKey(),maxEntry.getValue() - 1);
        sum--;
      }
      answer+="" "";
    }
    System.out.println(""Case #"" + i + "": ""+ answer.trim());
  }
}
"
30001069,"public static void main(String[] args){
  int numOfCases=in.nextInt();
  for (int i=0; i < numOfCases; i++) {
    int n=in.nextInt();
    int[] partyNum=new int[n];
    System.out.print(""Case #"" + (i + 1) + "": "");
    int k=0;
    for (int j=0; j < n; j++) {
      partyNum[j]=in.nextInt();
      k+=partyNum[j];
    }
    int max=0;
    while (max != 1) {
      max=0;
      int maxIdx1=-1;
      int maxIdx2=-1;
      for (int j=0; j < n; j++) {
        if (partyNum[j] == max && max != 0) {
          maxIdx2=j;
        }
        if (partyNum[j] > max) {
          maxIdx2=-1;
          max=partyNum[j];
          maxIdx1=j;
        }
      }
      if (max != 1) {
        partyNum[maxIdx1]--;
        if (maxIdx2 != -1) {
          partyNum[maxIdx2]--;
          System.out.print((char)(65 + maxIdx2));
        }
        System.out.print((char)(65 + maxIdx1) + "" "");
      }
    }
    int cnt=3;
    while (cnt > 2) {
      cnt=0;
      for (int j=0; j < n; j++) {
        if (partyNum[j] == 1)         cnt++;
      }
      if (cnt > 2) {
        for (int j=0; j < n; j++) {
          if (partyNum[j] == 1) {
            System.out.print((char)(65 + j) + "" "");
            partyNum[j]--;
            break;
          }
        }
      }
    }
    for (int j=0; j < n; j++) {
      if (partyNum[j] == 1) {
        System.out.print((char)(65 + j));
      }
    }
    System.out.println();
  }
}
"
30001070,"public static void main(String[] args){
  A r=new A();
  Scanner sc=new Scanner(System.in);
  int testNum=sc.nextInt();
  for (int t=1; t <= testNum; t++) {
    r.n=sc.nextInt();
    r.a=new int[r.n];
    r.sum=0;
    for (int i=0; i < r.n; i++) {
      r.a[i]=sc.nextInt();
      r.sum+=r.a[i];
    }
    StringBuilder sb=new StringBuilder();
    while (true) {
      if (r.sum == 2) {
        for (int i=0; i < r.n; i++) {
          if (r.a[i] != 0) {
            sb.append((char)(i + 65));
          }
        }
        break;
      }
      int max=-1;
      int id=-1;
      for (int i=0; i < r.n; i++) {
        if (r.a[i] > max) {
          max=r.a[i];
          id=i;
        }
      }
      r.a[id]--;
      r.sum--;
      sb.append((char)(id + 65));
      if (r.sum == 2) {
        sb.append(' ');
        for (int i=0; i < r.n; i++) {
          if (r.a[i] != 0) {
            sb.append((char)(i + 65));
          }
        }
        break;
      }
      for (int i=0; i < r.n; i++) {
        if ((double)r.a[i] / r.sum >= 0.5) {
          r.a[i]--;
          r.sum--;
          sb.append((char)(i + 65));
          break;
        }
      }
      sb.append(' ');
    }
    String ans=sb.toString().trim();
    System.out.println(""Case #"" + t + "": ""+ ans);
  }
}
"
30001071,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numTests=sc.nextInt();
  for (int tc=1; tc <= numTests; ++tc) {
    int n=sc.nextInt();
    int[] ascii=new int[256];
    int total=0;
    int parties=n;
    for (int i='A'; i < 'A' + n; ++i) {
      ascii[i]=sc.nextInt();
      total+=ascii[i];
    }
    System.out.print(""Case #"" + tc + "": "");
    while (total > 0) {
      if (parties == 2) {
        for (int i='A'; i < 'A' + n; ++i) {
          if (ascii[i] > 0) {
            --ascii[i];
            --total;
            System.out.print((char)i);
          }
        }
      }
 else {
        int maxValue=0;
        int maxIndex=-1;
        for (int i='A'; i < 'A' + n; ++i) {
          if (ascii[i] > maxValue) {
            maxValue=ascii[i];
            maxIndex=i;
          }
        }
        --ascii[maxIndex];
        --total;
        if (ascii[maxIndex] == 0) {
          --parties;
        }
        System.out.print((char)maxIndex);
      }
      System.out.print(' ');
    }
    System.out.println();
  }
}
"
30001072,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(br.readLine());
  PrintWriter out=new PrintWriter(System.out);
  for (int caze=1; caze <= T; caze++) {
    int n=Integer.parseInt(br.readLine());
    StringTokenizer st=new StringTokenizer(br.readLine());
    int[] sens=new int[n];
    int m=0;
    for (int i=0; i < n; i++) {
      sens[i]=Integer.parseInt(st.nextToken());
      m+=sens[i];
    }
    List<Character> ret=new ArrayList<Character>();
    boolean started=false;
    StringBuilder sb=new StringBuilder();
    while (m > 0) {
      if (!started) {
        started=true;
      }
 else {
        sb.append("" "");
      }
      int max1=Integer.MIN_VALUE;
      int min1=-1;
      int min2=-1;
      int max2=Integer.MIN_VALUE;
      for (int i=0; i < sens.length; i++) {
        if (sens[i] > max1) {
          min1=i;
          max1=sens[i];
        }
      }
      for (int i=0; i < sens.length; i++)       if (i != min1) {
        if (sens[i] > max2) {
          min2=i;
          max2=sens[i];
        }
      }
      sens[min1]--;
      m--;
      sb.append(Character.toChars('A' + min1)[0]);
      if (m > 0 && m != 2) {
        sens[min2]--;
        m--;
        sb.append(Character.toChars('A' + min2)[0]);
      }
    }
    out.write(String.format(""Case #%d: %s"",caze,sb.toString()));
    out.write('\n');
  }
  out.close();
}
"
30001073,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int T=scanner.nextInt();
  scanner.nextLine();
  for (int t=1; t <= T; t++) {
    int N=scanner.nextInt();
    int senators[]=new int[N];
    int top1=0;
    int top1C=0;
    int top2=0;
    int top2C=0;
    int count=0;
    for (int i=0; i < N; i++) {
      senators[i]=scanner.nextInt();
      count+=senators[i];
      if (senators[i] > top1C) {
        if (top1C > top2C) {
          top2=top1;
          top2C=top1C;
        }
        top1=i;
        top1C=senators[i];
      }
 else       if (senators[i] > top2C) {
        top2=i;
        top2C=senators[i];
      }
    }
    System.out.printf(""Case #%d:"",t);
    while (top1C > top2C) {
      char t11=(char)('A' + top1);
      if (top1C - top2C >= 2) {
        System.out.print("" "" + t11 + t11);
        top1C-=2;
      }
 else {
        System.out.print("" "" + t11);
        top1C-=1;
      }
    }
    for (int i=0; i < N; i++) {
      if (i != top1 && i != top2) {
        char t1=(char)('A' + i);
        while (senators[i] > 0) {
          if (senators[i] >= 2) {
            System.out.print("" "" + t1 + t1);
            senators[i]-=2;
          }
 else {
            System.out.print("" "" + t1);
            senators[i]-=1;
          }
        }
      }
    }
    while (top1C > 0) {
      char t1=(char)('A' + top1);
      char t2=(char)('A' + top2);
      System.out.print("" "" + t1 + t2);
      top1C-=1;
    }
    System.out.print(""\n"");
  }
}
"
30001074,"public static void main(String[] args){
}
"
30001075,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""A.in""));
  PrintWriter out=new PrintWriter(new File(""A.out""));
  int tt=in.nextInt();
  in.nextLine();
  for (int tc=1; tc <= tt; tc++) {
    int n=in.nextInt();
    int[] a=new int[n];
    for (int i=0; i < n; i++) {
      a[i]=in.nextInt();
    }
    out.print(""Case #"" + tc + "": "");
    if (n > 2) {
      int m1, i1;
      while (true) {
        m1=0;
        i1=-1;
        for (int i=0; i < n; i++) {
          if (a[i] >= m1) {
            m1=a[i];
            i1=i;
          }
        }
        if (m1 == 1)         break;
        out.print((char)((int)'A' + i1) + "" "");
        a[i1]--;
      }
      out.print((char)((int)'A' + n - 1) + "" "");
      for (int i=0; i < n - 1; i+=2) {
        out.print((char)((int)'A' + i) + """" + (char)((int)'A' + i + 1)+ "" "");
      }
    }
 else {
      if (a[0] == a[1]) {
        for (int i=0; i < a[0]; i++) {
          out.print(""AB "");
        }
      }
 else {
        if (a[0] > a[1]) {
          for (int i=a[0]; i > a[1]; i--) {
            out.print(""A "");
          }
          for (int i=0; i < a[1]; i++) {
            out.print(""AB "");
          }
        }
 else {
          for (int i=a[1]; i > a[0]; i--) {
            out.print(""B "");
          }
          for (int i=0; i < a[0]; i++) {
            out.print(""AB "");
          }
        }
      }
    }
    out.println();
  }
  out.close();
  in.close();
}
"
30001076,"public static void main(String[] args) throws IOException {
  FileInputStream fi=new FileInputStream(""large.in"");
  FileOutputStream fo=new FileOutputStream(""large.out"");
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(fo));
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(fi)));
  int cases=in.nextInt();
  for (int i=1; i <= cases; ++i) {
    System.out.print(""Case #"" + i + "":"");
    bw.write(""Case #"" + i + "":"");
    int N=in.nextInt();
    int[] P=new int[N];
    int M=0;
    for (int j=0; j < N; ++j) {
      P[j]=in.nextInt();
      M+=P[j];
    }
    while (true) {
      int max=-1;
      int imax=-1;
      for (int j=0; j < N; ++j) {
        if (P[j] != 0 && P[j] > max) {
          max=P[j];
          imax=j;
        }
      }
      if (max == -1)       break;
      --P[imax];
      --M;
      char x=(char)('A' + imax);
      for (int j=0; j < N; ++j)       if (P[j] > M / 2) {
      }
      System.out.print("" "" + x);
      bw.write("" "" + x);
      if (M != 2) {
        max=-1;
        imax=-1;
        for (int j=0; j < N; ++j) {
          if (P[j] != 0 && P[j] > max) {
            max=P[j];
            imax=j;
          }
        }
        if (max == -1)         break;
        --P[imax];
        --M;
        char x2=(char)('A' + imax);
        System.out.print(x2);
        bw.write("""" + x2);
        for (int j=0; j < N; ++j)         if (P[j] > M / 2)         System.out.print(""YYYY"");
      }
    }
    System.out.println("""");
    bw.write(""\n"");
  }
  bw.close();
}
"
30001077,"public static void main(String[] args) throws IOException {
  int T, i, j, N, ptotal, evac=0, k, kcount=0, check=0;
  int[] P=new int[26];
  char[] alphabet=new char[26];
  String[] result=new String[1000];
  Scanner filein=new Scanner(new File(""C:/codejamdata/A-small-attempt0.in""));
  PrintStream fileout=new PrintStream(new FileOutputStream(""C:/codejamdata/gcj1casoutput.txt""));
  alphabet[0]='A';
  for (i=1; i < 26; i++) {
    alphabet[i]=(char)((int)alphabet[i - 1] + 1);
  }
  T=filein.nextInt();
  for (i=0; i < T; i++) {
    N=filein.nextInt();
    ptotal=0;
    for (j=0; j < N; j++) {
      P[j]=filein.nextInt();
      ptotal=ptotal + P[j];
    }
    evac=0;
    k=0;
    kcount=0;
    if (ptotal % 2 > 0)     check=(ptotal + 1) / 2;
 else     check=ptotal / 2;
    while (evac == 0) {
      if (ptotal <= 0)       break;
      result[k]="""";
      for (j=0; j < N; j++) {
        if (P[j] >= check) {
          result[k]=result[k] + alphabet[j];
          kcount++;
          P[j]--;
          if (kcount == 2) {
            break;
          }
        }
      }
      ptotal=ptotal - kcount;
      kcount=0;
      if (result[k] == """") {
        for (j=0; j < N; j++) {
          if (P[j] > 0) {
            result[k]=result[k] + alphabet[j];
            ptotal--;
            kcount++;
            P[j]--;
          }
          if (ptotal != 1) {
            kcount=0;
            break;
          }
        }
      }
      k++;
      if (ptotal % 2 > 0)       check=(ptotal + 1) / 2;
 else       check=ptotal / 2;
    }
    fileout.print(""Case #"" + (i + 1) + "": "");
    for (j=0; j < k; j++) {
      fileout.print("" "" + result[j]);
    }
    fileout.println();
  }
  filein.close();
  fileout.close();
}
"
30001078,"public static void main(String args[]){
  try {
    System.setIn(new FileInputStream(""C:\\Users\\ericc\\Desktop\\Question\\R1C\\Q1\\Q1-large.in""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  Scanner sc=new Scanner(System.in);
  sc.nextLine();
  int caseCount=0;
  while (sc.hasNext()) {
    int numParty=Integer.parseInt(sc.nextLine());
    int se[]=new int[26];
    int total=0;
    for (int i=0; i < numParty; i++) {
      se[i]=sc.nextInt();
      total+=se[i];
    }
    if (sc.hasNext())     sc.nextLine();
    String result="""";
    while (total != 0) {
      if (total != 3) {
        for (int i=0; i < 2; i++) {
          int maxIdx=0;
          for (int j=0; j < numParty; j++) {
            if (se[j] > se[maxIdx]) {
              maxIdx=j;
            }
          }
          total--;
          se[maxIdx]--;
          result+=(char)('A' + maxIdx);
        }
      }
 else {
        int maxIdx=0;
        for (int j=0; j < numParty; j++) {
          if (se[j] > se[maxIdx]) {
            maxIdx=j;
          }
        }
        total--;
        se[maxIdx]--;
        result+=(char)('A' + maxIdx);
      }
      result+="" "";
    }
    caseCount++;
    System.out.println(""Case #"" + caseCount + "": ""+ result);
  }
}
"
30001079,"/** 
 * @param args
 */
public static void main(String[] args){
  File testFile=new File(""e:\\Users\\Ricardo\\Documents\\CodeJam\\SenateEvac\\A-large.in"");
  Scanner in=null;
  try {
    in=new Scanner(testFile);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  if (in == null) {
    return;
  }
  Integer testCases=in.nextInt();
  in.nextLine();
  for (Integer currentCase=0; currentCase < testCases; currentCase++) {
    Integer partyNumber=in.nextInt();
    Integer totalSenators=0;
    in.nextLine();
    int[] partyMembers=new int[partyNumber];
    System.out.print(String.format(""Case #%d: "",currentCase + 1));
    for (Character nextCharacter='A'; nextCharacter < 'A' + partyNumber; nextCharacter++) {
      Integer senatorsInParty=in.nextInt();
      partyMembers[nextCharacter - 'A']=senatorsInParty;
      totalSenators+=senatorsInParty;
    }
    while (totalSenators > 0) {
      ArrayList<Integer> evacuees=new ArrayList<Integer>();
      int lastCandidate=-1;
      for (int i=0; i < partyNumber; i++) {
        if (partyMembers[i] > 0) {
          if (partyMembers[i] > (totalSenators - 1) / 2) {
            evacuees.add(i);
            if (evacuees.size() == 2) {
              break;
            }
          }
 else {
            if (evacuees.size() == 0) {
              lastCandidate=i;
            }
          }
        }
      }
      if (evacuees.size() == 0) {
        evacuees.add(lastCandidate);
      }
      for (      Integer nextEvacuee : evacuees) {
        partyMembers[nextEvacuee]-=1;
        System.out.print((char)(nextEvacuee + 'A'));
        totalSenators--;
      }
      if (totalSenators > 0)       System.out.print("" "");
    }
    System.out.println();
    if (currentCase + 1 < testCases) {
      in.nextLine();
    }
  }
  in.close();
}
"
30001080,"public static void main(String[] args){
  try {
    BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
    int T=Integer.parseInt(bf.readLine());
    for (int i=0; i < T; i++) {
      int N=Integer.parseInt(bf.readLine());
      String[] strTemp=bf.readLine().split("" "");
      int[] P=new int[N];
      int total=0;
      for (int j=0; j < N; j++) {
        P[j]=Integer.parseInt(strTemp[j]);
        total+=P[j];
      }
      System.out.print(""Case #"" + (i + 1) + "":"");
      while (total > 0) {
        int maxSenatesAllowed=(total - 2) / 2;
        int[] defaultEvac={-1,-1};
        int[] requiredEvac={-1,-1};
        for (int x=0; x < N; x++) {
          if (defaultEvac[0] == -1) {
            if (P[x] >= 2)             defaultEvac[1]=x;
            if (P[x] >= 1)             defaultEvac[0]=x;
          }
 else           if (defaultEvac[1] == -1) {
            if (P[x] >= 1)             defaultEvac[1]=x;
          }
          if (P[x] > maxSenatesAllowed) {
            if (requiredEvac[0] == -1)             requiredEvac[0]=x;
 else             if (requiredEvac[1] == -1)             requiredEvac[1]=x;
          }
        }
        if (requiredEvac[0] == -1)         requiredEvac=defaultEvac;
 else         if (requiredEvac[1] == -1) {
          if (defaultEvac[0] != -1 && defaultEvac[0] != requiredEvac[0]) {
            requiredEvac[1]=defaultEvac[0];
          }
 else {
            requiredEvac[1]=defaultEvac[1];
          }
        }
        if (total == 3)         requiredEvac[1]=-1;
        System.out.print("" "");
        int count=0;
        if (count < 2 && requiredEvac[0] != -1) {
          System.out.print((char)('A' + (char)requiredEvac[0]));
          P[requiredEvac[0]]--;
          total--;
          count++;
        }
        if (count < 2 && requiredEvac[1] != -1) {
          System.out.print((char)('A' + (char)requiredEvac[1]));
          P[requiredEvac[1]]--;
          total--;
          count++;
        }
      }
      System.out.println();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001081,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int tcase=in.nextInt();
  for (int i=1; i <= tcase; i++) {
    int N=in.nextInt();
    int[] data=new int[N];
    int total=0;
    for (int j=0; j < N; j++) {
      data[j]=in.nextInt();
      total=total + data[j];
    }
    System.out.print(""Case #"" + i + "": "");
    for (int k=1; k <= total; k++) {
      int total1=0;
      for (int j=0; j < data.length; j++) {
        total1=total1 + data[j];
      }
      int max1=0, max1index=-1, max2=0, max2index=-1;
      for (int j=0; j < data.length; j++) {
        if (data[j] > max1) {
          max1=data[j];
          max1index=j;
        }
      }
      if (max1index >= 0) {
        data[max1index]--;
        System.out.print((char)(max1index + 65));
      }
      if (total1 != 3) {
        for (int j=0; j < data.length; j++) {
          if (data[j] > max2) {
            max2=data[j];
            max2index=j;
          }
        }
        if (max2index >= 0) {
          data[max2index]--;
          System.out.print((char)(max2index + 65));
        }
      }
      if (max2index >= 0 || max1index >= 0) {
        System.out.print("" "");
      }
    }
    System.out.println("""");
  }
}
"
30001082,"public static void main(String args[]){
  Scanner sc;
  try {
    sc=new Scanner(new File(""A-small-attempt0.in""));
    PrintWriter out=new PrintWriter(""A-small-attempt0.out"");
    int T=Integer.parseInt(sc.nextLine());
    int testcase=1;
    char[] alphabet={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
    while (T-- > 0) {
      out.print(""Case #"" + testcase + "": "");
      int N=Integer.parseInt(sc.nextLine());
      String line=sc.nextLine();
      String[] arr=line.split("" "");
      int[] p=new int[N];
      int sump=0;
      for (int i=0; i < N; i++) {
        p[i]=Integer.parseInt(arr[i]);
        sump+=p[i];
      }
      int large=-1, seclarge=-1;
      int lar, seclar;
      double tempsum, tempsum1, tempsum2, tempsum3;
      while (sump > 0) {
        lar=Integer.MIN_VALUE;
        seclar=Integer.MIN_VALUE;
        for (int i=0; i < N; i++) {
          if (p[i] >= lar) {
            seclar=lar;
            seclarge=large;
            lar=p[i];
            large=i;
          }
 else           if (p[i] >= seclar) {
            seclar=p[i];
            seclarge=i;
          }
        }
        if (sump <= 2) {
          while (p[large] > 0) {
            p[large]=p[large] - 1;
            out.print(alphabet[large]);
            sump=sump - 1;
          }
          while (p[seclarge] > 0) {
            p[seclarge]=p[seclarge] - 1;
            out.print(alphabet[seclarge]);
            sump=sump - 1;
          }
          break;
        }
        boolean flag=true;
        for (int i=0; i < N; i++) {
          if (p[i] > 1) {
            flag=false;
            break;
          }
        }
        if (flag) {
          if (N % 2 == 0) {
            out.print(alphabet[large]);
            out.print(alphabet[seclarge]);
            out.print("" "");
            p[large]=p[large] - 1;
            p[seclarge]=p[seclarge] - 1;
            sump=sump - 2;
            continue;
          }
 else {
            out.print(alphabet[large]);
            out.print("" "");
            p[large]=p[large] - 1;
            sump=sump - 1;
          }
          continue;
        }
        if (p[large] > 1) {
          double val=sump - 2;
          tempsum1=(p[seclarge] / val) * 100;
          if (tempsum1 <= 50) {
            p[large]=p[large] - 2;
            out.print(alphabet[large]);
            out.print(alphabet[large]);
            out.print("" "");
            sump=sump - 2;
            continue;
          }
        }
        if (p[seclarge] > 0) {
          tempsum2=((p[seclarge] - 1) / (sump - 2)) * 100;
          if (tempsum2 <= 50) {
            out.print(alphabet[large]);
            out.print(alphabet[seclarge]);
            out.print("" "");
            p[large]=p[large] - 1;
            p[seclarge]=p[seclarge] - 1;
            sump=sump - 2;
            continue;
          }
        }
        tempsum=((p[large] - 1) / (sump - 1)) * 100;
        tempsum3=((p[seclarge]) / (sump - 1)) * 100;
        if (tempsum <= 50 && tempsum3 <= 50) {
          out.print(alphabet[large]);
          out.print("" "");
          p[large]=p[large] - 1;
          sump=sump - 1;
        }
      }
      testcase++;
      out.println();
    }
    out.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30001083,"public static void main(String[] args) throws IOException {
  File input=new File(""input.txt"");
  Scanner scanner=new Scanner(input);
  int T=scanner.nextInt();
  for (int i=0; i < T; i++) {
    N=scanner.nextInt();
    party=new int[N];
    sum=0;
    for (int j=0; j < N; j++) {
      party[j]=scanner.nextInt();
      sum+=party[j];
    }
    System.out.printf(""Case #%d: "",i + 1);
    if (N == 2) {
      for (int j=1; j < party[0]; j++)       System.out.print(""AB "");
      System.out.println(""AB"");
    }
 else     while (sum > 0) {
      int gold, silver, bronze;
      gold=silver=bronze=-1;
      for (int i1=0; i1 < N; i1++)       if (gold == -1 || party[i1] > party[gold]) {
        bronze=silver;
        silver=gold;
        gold=i1;
      }
 else       if (silver == -1 || party[i1] > party[silver]) {
        bronze=silver;
        silver=i1;
      }
 else       if (bronze == -1 || party[i1] > party[bronze])       bronze=i1;
      int x=party[gold] - 1;
      int y=party[bronze];
      if ((x > y ? x : y) > (sum - 2) / 2) {
        sum--;
        party[gold]--;
        System.out.print((char)((int)'A' + gold));
      }
 else {
        sum-=2;
        party[gold]--;
        party[silver]--;
        System.out.print((char)((int)'A' + gold));
        System.out.print((char)((int)'A' + silver));
      }
      if (sum == 0)       System.out.println();
 else       System.out.print(' ');
    }
  }
  scanner.close();
}
"
30001084,"public static void main(String[] args) throws IOException {
  Scanner s=new Scanner(new File(""a.in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""a.out""));
  int T=s.nextInt();
  for (int t=1; t <= T; t++) {
    out.write(""Case #"" + t + "": "");
    int N=s.nextInt();
    int[] parties=new int[N];
    int sum=0;
    for (int i=0; i < N; i++) {
      parties[i]=s.nextInt();
      sum+=parties[i];
    }
    while (sum > 0) {
      int differentParties=0;
      int max=0;
      int iMax=-1;
      for (int i=0; i < N; i++) {
        if (parties[i] > 0)         differentParties++;
        if (parties[i] > max) {
          max=parties[i];
          iMax=i;
        }
      }
      if (differentParties == 2) {
        for (int i=0; i < N; i++) {
          if (parties[i] > 0) {
            out.write("""" + (char)('A' + i));
            parties[i]--;
            sum--;
          }
        }
      }
 else {
        out.write("""" + (char)('A' + iMax));
        parties[iMax]--;
        sum--;
      }
      out.write("" "");
    }
    out.write(""\n"");
  }
  out.close();
}
"
30001085,"@Override public void run(){
  Scanner in=new Scanner(System.in);
  for (  int casei : ZeroTo.get(in.nextInt())) {
    Heap<Pair<Integer,Integer>> heap=BinaryHeapFactory.getInstance().create(SeriesComparator.create(new Comparator<Pair<Integer,Integer>>(){
      @Override public int compare(      Pair<Integer,Integer> o1,      Pair<Integer,Integer> o2){
        return -o1.v2.compareTo(o2.v2);
      }
    }
,new Comparator<Pair<Integer,Integer>>(){
      @Override public int compare(      Pair<Integer,Integer> o1,      Pair<Integer,Integer> o2){
        return o1.v1.compareTo(o2.v1);
      }
    }
));
    int n=in.nextInt();
    int sum=0;
    for (    int i : ZeroTo.get(n)) {
      int p=in.nextInt();
      heap.insert(Pair.create(i,p));
      sum+=p;
    }
    System.out.print(""Case #"" + (casei + 1) + "":"");
    int remain=sum;
    while (remain > 0) {
      Pair<Integer,Integer> pair1=heap.extractMinimum();
      heap.insert(Pair.create(pair1.v1,pair1.v2 - 1));
      remain--;
      String r=(char)(pair1.v1 + 'A') + """";
      if (heap.getMinimum().v2 > remain / 2) {
        Pair<Integer,Integer> pair2=heap.extractMinimum();
        heap.insert(Pair.create(pair2.v1,pair2.v2 - 1));
        remain--;
        r+=(char)(pair2.v1 + 'A');
      }
      System.out.print("" "" + r);
    }
    System.out.println();
  }
}
"
30001086,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  for (int f=1; f <= t; f++) {
    System.out.print(""Case #"" + f + "": "");
    int n=s.nextInt();
    int[] p=new int[n];
    for (int i=0; i < n; i++)     p[i]=s.nextInt();
    while (true) {
      int max=0, m_ind=-1;
      int sec=0, s_ind=-1;
      int count=0, flag=0;
      if (n % 2 != 0) {
        for (int i=0; i < n && p[i] == 1; i++)         count++;
        if (count == n)         flag=1;
      }
      if (flag == 0) {
        for (int i=0; i < n; i++) {
          if (max < p[i]) {
            max=p[i];
            m_ind=i;
          }
        }
        if (max == 0)         break;
        for (int i=0; i < n; i++) {
          if (sec < p[i] && i != m_ind) {
            sec=p[i];
            s_ind=i;
          }
        }
        p[m_ind]--;
        p[s_ind]--;
        int on=65 + m_ind;
        int tw=65 + s_ind;
        System.out.print((char)on);
        System.out.print((char)tw);
        System.out.print("" "");
      }
 else {
        p[0]--;
        int on=65;
        System.out.print((char)(on) + "" "");
        flag=0;
      }
    }
    System.out.println();
  }
}
"
30001087,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt(), total=0;
    Vector<Integer> m=new Vector<Integer>();
    for (int j=0; j < n; j++) {
      m.add(in.nextInt());
      total+=m.elementAt(j);
    }
    System.out.print(""Case #"" + i + "": "");
    int mid;
    while (total != 0) {
      mid=(int)Collections.max(m);
      int max;
      int ind1=m.indexOf(mid), ind2=m.lastIndexOf(mid);
      if (ind1 != -1 && ind2 != -1) {
        if (ind1 != ind2) {
          total-=2;
          m.set(ind1,m.elementAt(ind1) - 1);
          m.set(ind2,m.elementAt(ind2) - 1);
          max=(int)Collections.max(m);
          if (max > total / 2) {
            m.set(ind2,m.elementAt(ind2) + 1);
            total+=1;
            System.out.print((char)(ind1 + 'A') + "" "");
          }
 else {
            System.out.print((char)(ind1 + 'A') + """" + (char)(ind2 + 'A')+ "" "");
          }
        }
 else {
          if (m.elementAt(ind1) > 2) {
            System.out.print((char)(ind1 + 'A') + """" + (char)(ind2 + 'A')+ "" "");
            m.set(ind1,m.elementAt(ind1) - 1);
            m.set(ind2,m.elementAt(ind2) - 1);
            total-=2;
          }
 else {
            System.out.print((char)(ind1 + 'A') + "" "");
            m.set(ind1,m.elementAt(ind1) - 1);
            total-=1;
          }
        }
      }
    }
    System.out.println();
  }
}
"
30001088,"public static void main(String args[]){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  int t=T;
  while (T-- > 0) {
    String ans="""";
    int N=in.nextInt();
    int ar[]=new int[N];
    char arr[]=new char[N];
    int sum=0;
    for (int i=0; i < N; i++) {
      ar[i]=in.nextInt();
      sum=sum + ar[i];
      arr[i]=(char)('A' + i);
    }
    while (sum != 0) {
      int max=0;
      int index=0;
      for (int i=0; i < N; i++) {
        if (ar[i] > max) {
          max=ar[i];
          index=i;
        }
      }
      int sec_max=0;
      int sec_index=0;
      ar[index]=-1;
      for (int i=0; i < N; i++) {
        if (ar[i] > sec_max) {
          sec_max=ar[i];
          sec_index=i;
        }
      }
      ar[index]=max;
      if (ar[index] > 2 && ar[index] != ar[sec_index]) {
        ar[index]-=2;
        sum-=2;
        ans=ans + arr[index] + arr[index]+ ' ';
      }
 else       if (ar[index] > 0) {
        if (sum % 2 == 0) {
          ar[index]--;
          ar[sec_index]--;
          sum-=2;
          ans=ans + arr[index] + arr[sec_index]+ ' ';
        }
 else {
          ar[index]--;
          sum-=1;
          ans=ans + arr[index] + ' ';
        }
      }
    }
    System.out.println(""Case #"" + (t - (T)) + "": ""+ ans);
  }
}
"
30001089,"public static void main(String[] args) throws Exception {
  Scanner cin=new Scanner(new FileInputStream(""A-large (3).in""));
  PrintWriter cout=new PrintWriter(new FileOutputStream(""output.txt""));
  int T=cin.nextInt();
  for (int t=0; t < T; ++t) {
    int N=cin.nextInt();
    int[] a=new int[N];
    int sum=0;
    for (int i=0; i < N; ++i)     sum+=a[i]=cin.nextInt();
    int ind1=-1, ind2=-1;
    cout.print(""Case #"" + (t + 1) + "": "");
    while (sum > 0) {
      if (ind1 == -1) {
        int m1=0;
        for (int i1=1; i1 < a.length; ++i1)         if (a[m1] < a[i1])         m1=i1;
        int m=m1;
        for (int i=0; i < N; ++i)         if (i != m && a[i] == a[m]) {
          ind1=i;
          ind2=m;
          break;
        }
      }
      if (ind1 != -1) {
        int fnd=-1;
        for (int i=0; i < N; ++i)         if (i != ind1 && i != ind2 && a[i] > 0) {
          fnd=i;
          break;
        }
        if (fnd != -1) {
          cout.print((char)('A' + fnd) + "" "");
          a[fnd]--;
          sum--;
        }
 else {
          cout.print((char)('A' + ind1) + """" + (char)('A' + ind2)+ "" "");
          sum-=2;
          a[ind1]--;
          a[ind2]--;
        }
      }
 else {
        int m1=0;
        for (int i=1; i < a.length; ++i)         if (a[m1] < a[i])         m1=i;
        int m=m1;
        cout.print((char)('A' + m) + "" "");
        sum--;
        a[m]--;
      }
    }
    cout.println();
  }
  cout.flush();
}
"
30001090,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader bf=new BufferedReader(new FileReader(""A-large.in-2.txt""));
  PrintStream obj=new PrintStream(new File(""output.txt""));
  int num_case=Integer.parseInt(bf.readLine());
  for (int i=0; i < num_case; i++) {
    String num=bf.readLine();
    int numSenate=Integer.valueOf(num);
    obj.print(""Case #"" + (i + 1) + "": "");
    String line=bf.readLine();
    String[] lineNum=line.split("" "");
    int[] arr=new int[26];
    int count=0;
    int max=0;
    int totalNum=0;
    for (int i2=0; i2 < lineNum.length; i2++) {
      if (lineNum[i2] != "" "") {
        arr[count]+=Integer.valueOf(lineNum[i2]);
        count++;
        totalNum+=Integer.valueOf(lineNum[i2]);
        max=Math.max(Integer.valueOf(lineNum[i2]),max);
      }
    }
    ArrayList<Integer> arrList=new ArrayList<>(0);
    while (totalNum > 0) {
      int max1=0;
      for (int i1=0; i1 < arr.length; i1++) {
        max1=arr[max1] > arr[i1] ? max1 : i1;
      }
      int remove=max1;
      arr[remove]--;
      totalNum--;
      arrList.add(remove);
    }
    int counter=0;
    int length=arrList.size();
    for (int i1=0; i1 < length && arrList.size() > 3; i1++) {
      if (counter < 1) {
        obj.print((char)(arrList.remove(0) + 65));
        counter++;
      }
 else {
        obj.print((char)(arrList.remove(0) + 65));
        obj.print("" "");
        counter=0;
      }
    }
    if (arrList.size() == 4) {
      obj.print((char)(arrList.remove(0) + 65));
      obj.print((char)(arrList.remove(0) + 65));
      obj.print("" "");
      obj.print((char)(arrList.remove(0) + 65));
      obj.print((char)(arrList.remove(0) + 65));
    }
 else     if (arrList.size() == 3) {
      obj.print((char)(arrList.remove(0) + 65));
      obj.print("" "");
      obj.print((char)(arrList.remove(0) + 65));
      obj.print((char)(arrList.remove(0) + 65));
    }
 else     if (arrList.size() == 2) {
      obj.print((char)(arrList.remove(0) + 65));
      obj.print((char)(arrList.remove(0) + 65));
    }
    obj.println();
  }
  obj.close();
}
"
30001091,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int i=0; i < t; i++) {
    int n=in.nextInt();
    int[] num=new int[n];
    int total=0;
    for (int j=0; j < n; j++) {
      num[j]=in.nextInt();
      total+=num[j];
    }
    String[] alph={""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""};
    String evacuation="""";
    if (n == 2) {
      if (total == 2) {
        evacuation=""AB"";
      }
 else       if (total == 4) {
        evacuation=""AB AB"";
      }
 else       if (total == 6) {
        evacuation=""AB AB AB"";
      }
 else       if (total == 8) {
        evacuation=""AB AB AB AB"";
      }
    }
 else {
      if (num[0] == 1 && num[1] == 1 && num[2] == 1) {
        evacuation=""A BC"";
      }
 else {
        int a=num[0];
        int b=num[1];
        int c=num[2];
        if (a == 4 || b == 4 || c == 4) {
          if (a == 4) {
            num[0]=3;
            evacuation+=""A"";
          }
          if (b == 4) {
            num[1]=3;
            evacuation+=""B"";
          }
          if (c == 4) {
            num[2]=3;
            evacuation+=""C"";
          }
          evacuation+="" "";
        }
        a=num[0];
        b=num[1];
        c=num[2];
        if (a == 3 || b == 3 || c == 3) {
          if (a == 3 && b == 3 && c == 3) {
            evacuation=""A BC A BC A BC"";
            num[0]=0;
            num[1]=0;
            num[2]=0;
          }
 else {
            if (a == 3) {
              evacuation+=""A"";
              num[0]=2;
            }
            if (b == 3) {
              evacuation+=""B"";
              num[1]=2;
            }
            if (c == 3) {
              evacuation+=""C"";
              num[2]=2;
            }
            evacuation+="" "";
          }
        }
        a=num[0];
        b=num[1];
        c=num[2];
        if (a == 2 || b == 2 || c == 2) {
          if (a == 2 && b == 2 && c == 2) {
            evacuation+=""A BC A BC"";
            num[0]=0;
            num[1]=0;
            num[2]=0;
          }
 else {
            if (a == 2) {
              num[0]=1;
              evacuation+=""A"";
            }
            if (b == 2) {
              num[1]=1;
              evacuation+=""B"";
            }
            if (c == 2) {
              num[2]=1;
              evacuation+=""C"";
            }
            evacuation+="" "";
            evacuation+=""A BC"";
          }
        }
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ evacuation);
  }
}
"
30001092,"public static void main(String[] args){
  Scanner scnr=new Scanner(System.in);
  int t=scnr.nextInt();
  String ans[]=new String[t];
  for (int i=0; i < t; i++) {
    StringBuilder evac=new StringBuilder();
    int n=scnr.nextInt();
    int[] parties=new int[n];
    int pcount=0;
    for (int j=0; j < n; j++) {
      parties[j]=scnr.nextInt();
      pcount+=parties[j];
    }
    while (pcount > 0) {
      int max=0, smax=0, tmax=0;
      char c='A', d='A';
      for (int j=0; j < n; j++) {
        if (parties[j] >= parties[max]) {
          tmax=smax;
          smax=max;
          max=j;
        }
      }
      if (parties[max] == parties[smax] && parties[max] == parties[tmax] && smax != tmax) {
        if (parties[max] > 0) {
          parties[max]-=1;
          c+=max;
          evac.append(c);
          pcount-=1;
        }
      }
 else       if (parties[max] - parties[smax] > 1) {
        if (parties[max] > 0) {
          parties[max]-=1;
          c+=max;
          evac.append(c);
          pcount-=1;
        }
        if (parties[max] > 0) {
          parties[max]-=1;
          evac.append(c);
          pcount-=1;
        }
      }
 else {
        if (parties[max] > 0) {
          parties[max]-=1;
          c+=max;
          evac.append(c);
          pcount-=1;
        }
        if (parties[smax] > 0) {
          parties[smax]-=1;
          d+=smax;
          evac.append(d);
          pcount-=1;
        }
      }
      evac.append("" "");
    }
    ans[i]=evac.toString();
  }
  for (int i=0; i < t; i++) {
    System.out.println(""Case #"" + (i + 1) + "": ""+ ans[i]);
  }
}
"
30001093,"public static void main(String[] args) throws Exception {
  PrintWriter pw=new PrintWriter(""A-large.out"");
  br=new BufferedReader(new FileReader(""A-large.in""));
  int t=Integer.parseInt(next());
  for (int test=1; test <= t; test++) {
    pw.printf(""Case #%d:"",test);
    int n=Integer.parseInt(next());
    int total=0;
    int[] s=new int[n];
    for (int i=0; i < n; i++) {
      s[i]=Integer.parseInt(next());
      total+=s[i];
    }
    while (total > 0) {
      String a="""";
      for (int j=0; j < 2; j++) {
        int m=0;
        for (int i=1; i < n; i++) {
          if (s[i] > s[m]) {
            m=i;
          }
        }
        s[m]--;
        if (j == 1) {
          int m2=0;
          for (int i=1; i < n; i++) {
            if (s[i] > s[m2]) {
              m2=i;
            }
          }
          if (s[m2] > (total - 1) / 2) {
            s[m]++;
            break;
          }
        }
        a+=ALPHA.charAt(m);
        total--;
      }
      pw.print("" "" + a);
    }
    pw.println();
  }
  pw.close();
}
"
30001094,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new BufferedReader(new FileReader(inname)));
    BufferedWriter out=new BufferedWriter(new FileWriter(outname));
    int t=in.nextInt();
    in.nextLine();
    for (int cas=1; cas <= t; cas++) {
      int n=in.nextInt();
      int[] p=new int[n];
      for (int i=0; i < n; i++)       p[i]=in.nextInt();
      int n1=p.length;
      int max1=0;
      int max2=0;
      for (int i=0; i < n1; i++)       if (p[i] > p[max1])       max1=i;
      if (max1 == 0)       max2=1;
      for (int i=0; i < n1; i++)       if (i != max1 && p[i] > p[max2])       max2=i;
      String ans1="""";
      int ptr=0;
      while (p[max1] > p[max2]) {
        for (; ptr < n1; ptr++) {
          if (ptr == max1 || ptr == max2)           continue;
          while (p[ptr] > 0) {
            ans1+=("""" + (char)('A' + max1)) + ("""" + (char)('A' + ptr)) + "" "";
            p[max1]--;
            p[ptr]--;
            if (p[max1] <= p[max2])             break;
          }
          if (p[max1] <= p[max2])           break;
        }
      }
      for (; ptr < n1; ptr++) {
        if (ptr == max1 || ptr == max2)         continue;
        if (p[ptr] <= 0)         continue;
        for (int i=ptr + 1; i < n1; i++) {
          if (i == max1 || i == max2)           continue;
          while (p[i] > 0) {
            ans1+=("""" + (char)('A' + ptr)) + ("""" + (char)('A' + i)) + "" "";
            p[i]--;
            p[ptr]--;
            if (p[ptr] <= 0)             break;
          }
          if (p[ptr] <= 0)           break;
        }
      }
      for (int i=0; i < n1; i++) {
        if (i == max1 || i == max2)         continue;
        while (p[i] > 0) {
          ans1+=("""" + (char)('A' + i)) + "" "";
          p[i]--;
        }
      }
      while (p[max1] > 0) {
        ans1+=("""" + (char)('A' + max1)) + ("""" + (char)('A' + max2)) + "" "";
        p[max1]--;
        p[max2]--;
      }
      String ans=ans1;
      String s=in.nextLine();
      System.out.print(""Case #"" + cas + "": ""+ ans+ ""\n"");
      out.write(""Case #"" + cas + "": ""+ ans+ ""\n"");
    }
    in.close();
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001095,"public static void main(String[] args) throws IOException {
  infileName=args[0];
  outFileName=infileName.substring(0,infileName.indexOf('.')).concat("".out"");
  reader=Files.newBufferedReader(Paths.get(infileName));
  writer=Files.newBufferedWriter(Paths.get(outFileName));
  int numTests=Integer.parseInt(reader.readLine());
  for (int i=0; i < numTests; i++) {
    int parties=Integer.parseInt(reader.readLine());
    int[] in=new int[parties];
    int j=0;
    for (    String s2 : reader.readLine().split(""\\s"")) {
      in[j++]=Integer.parseInt(s2);
    }
    int[] senates=in;
    int[] senates1=senates;
    StringBuilder sb=new StringBuilder();
    int evac=0;
    do {
      String s="""";
      int sum1=0;
      for (      int s1 : senates1)       sum1+=s1;
      int sum=sum1;
      int mjor1=(sum - 1) / 2 + 1;
      int mjor2=(sum - 2) / 2 + 1;
      evac=0;
      int[] temp=Arrays.copyOf(senates1,parties);
      for (int i1=parties - 1; i1 >= 0; i1--) {
        if (temp[i1] >= mjor2) {
          temp[i1]=temp[i1] - 1;
          char a=(char)(65 + i1);
          s+=a;
          evac++;
          i1++;
        }
      }
      if (evac > 1) {
        temp=Arrays.copyOf(senates1,parties);
        s="""";
        evac=0;
        for (int i3=parties - 1; i3 >= 0; i3--) {
          if (temp[i3] >= mjor1) {
            temp[i3]=temp[i3] - 1;
            char a=(char)(65 + i3);
            s+=a;
            evac++;
          }
        }
      }
      if (evac == 0) {
        for (int i2=0; i2 < parties; i2++) {
          if (temp[i2] >= 1) {
            temp[i2]=temp[i2] - 1;
            char a=(char)(65 + i2);
            s+=a;
            evac++;
            break;
          }
        }
      }
      sb.append(s).append("" "");
      senates1=Arrays.copyOf(temp,parties);
    }
 while (evac != 0);
    String plan=sb.toString();
    Object[] ans={plan};
    writer.write(""Case #"" + (i + 1) + "":"");
    for (    Object a : ans)     writer.write("" "" + a);
    writer.newLine();
  }
  reader.close();
  writer.close();
}
"
30001096,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int T=input.nextInt();
  for (int n=0; n < T; n++) {
    int N=input.nextInt();
    char[] chars={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
    int[] strength=new int[N];
    int total=0;
    for (int i=0; i < N; i++) {
      strength[i]=input.nextInt();
      total+=strength[i];
    }
    String str="""";
    int count=0;
    while (total > 0) {
      double[] per=new double[N];
      for (int i=0; i < N; i++) {
        per[i]=((double)strength[i]) / total;
      }
      int maxpos=0;
      for (int i=0; i < N; i++) {
        if (strength[i] > strength[maxpos]) {
          maxpos=i;
        }
      }
      if (count == 0) {
        str=str + chars[maxpos];
        strength[maxpos]--;
        total--;
      }
      if (count == 1) {
        strength[maxpos]--;
        total--;
        double[] newper=new double[N];
        for (int i=0; i < N; i++) {
          newper[i]=((double)strength[i]) / total;
        }
        boolean b=false;
        for (int i=0; i < N; i++) {
          if (newper[i] > .5) {
            b=true;
          }
        }
        if (b) {
          strength[maxpos]++;
          total++;
        }
 else {
          str=str + chars[maxpos];
        }
        str=str + "" "";
        count=-1;
      }
      count++;
    }
    System.out.println(""Case #"" + (n + 1) + "": ""+ str);
  }
}
"
30001097,"public static void main(String[] args){
  C1 c=new C1();
  try {
    Scanner sc=new Scanner(new FileReader(c.bigInput));
    PrintWriter pw=new PrintWriter(c.bigOutput);
    c.n=sc.nextInt();
    for (int i=0; i < c.n; i++) {
      int s=sc.nextInt();
      int[] a=new int[s];
      int t=0;
      for (int j=0; j < s; j++) {
        a[j]=sc.nextInt();
        t+=a[j];
      }
      int x=i + 1;
      pw.print(""Case #"" + x + "":"");
      for (int j=t; j > 2; j--) {
        int lar=0;
        int slar=0;
        int in=0;
        int in2=0;
        for (int k=0; k < s; k++) {
          if (a[k] > lar) {
            if (lar != 0) {
              slar=lar;
              in2=in;
            }
            lar=a[k];
            in=k;
          }
 else           if (a[k] > slar) {
            slar=a[k];
            in2=k;
          }
        }
        if (lar == slar & s == 2) {
          char c1='A';
          char c2='A';
          c1+=in;
          c2+=in2;
          pw.print("" "" + c1 + c2);
          a[in]--;
          a[in2]--;
          j--;
        }
 else {
          char c1='A';
          c1+=in;
          pw.print("" "" + c1);
          a[in]--;
        }
      }
      int on=0;
      int tw=0;
      for (int f=0; f < s; f++) {
        if (a[f] > 0) {
          on=f;
          a[f]--;
          break;
        }
      }
      for (int f=0; f < s; f++) {
        if (a[f] > 0) {
          tw=f;
          break;
        }
      }
      char ch1='A';
      char ch2='A';
      ch1+=on;
      ch2+=tw;
      pw.print("" "" + ch1 + ch2);
      pw.println();
    }
    sc.close();
    pw.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30001098,"public static void main(String[] args) throws java.lang.Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(""output1.txt"");
  int t=Integer.parseInt(br.readLine());
  for (int q=1; q <= t; q++) {
    int n=Integer.parseInt(br.readLine());
    int p[]=new int[n];
    StringTokenizer st=new StringTokenizer(br.readLine());
    for (int i=0; i < n; i++) {
      p[i]=Integer.parseInt(st.nextToken());
    }
    pw.print(""Case #"" + q + "":"");
    while (true) {
      int f=0;
      int first=-1, second=-1;
      int less=-1;
      int max=0;
      int more=-1;
      for (int i=0; i < n; i++) {
        if (p[i] > max) {
          max=p[i];
          first=i;
        }
      }
      for (int i=0; i < n; i++) {
        if (p[i] == max && first != i) {
          second=i;
          more++;
        }
      }
      if (first != -1 && second != -1 && more == 0) {
        p[first]--;
        p[second]--;
        char ch=(char)(first + 65);
        char ch1=(char)(second + 65);
        pw.print("" "" + ch + ch1);
      }
 else       if (first != -1) {
        p[first]--;
        char ch=(char)(first + 65);
        pw.print("" "" + ch);
      }
 else {
        break;
      }
    }
    pw.println();
  }
  pw.close();
}
"
30001099,"public static void main(String args[]) throws FileNotFoundException, IOException {
  Scanner in=new Scanner(new FileReader(""E:\\a.in""));
  PrintWriter out=new PrintWriter(new FileWriter(""E:\\a.out""));
  int t=in.nextInt();
  for (int z=1; z <= t; z++) {
    int n=in.nextInt();
    int arr[]=new int[n];
    System.out.println(n);
    StringBuilder str=new StringBuilder("""");
    for (int i=0; i < n; i++) {
      arr[i]=in.nextInt();
      System.out.print(arr[i] + "" "");
    }
    System.out.println();
    int count=1;
    str.append(""Case #"" + z + "": "");
    while (true) {
      if (count % 3 == 0) {
        str.append("" "");
        count++;
      }
      int max=Integer.MIN_VALUE;
      for (int i=0; i < n; i++) {
        if (arr[i] > max)         max=arr[i];
      }
      if (max == 0) {
        break;
      }
      for (int i=0; i < n; i++) {
        if (arr[i] == max) {
          str.append((char)(i + 'A'));
          arr[i]--;
          break;
        }
      }
      count++;
    }
    if (str.charAt(str.length() - 2) == ' ') {
      System.out.println(str);
      char ch=str.charAt(str.length() - 3);
      str.replace(str.length() - 3,str.length() - 1,"" "" + ch);
    }
    System.out.println(str);
    out.println(str);
  }
  out.close();
}
"
30001100,"public static void main(String[] args){
  Scanner input;
  Formatter output;
  int a=1, b=1;
  try {
    output=new Formatter(""output.txt"");
    input=new Scanner(new File(""A-large(1).in""));
    int T=input.nextInt();
    char[] letters={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
    for (int i=0; i < T; i++) {
      int N=input.nextInt();
      int[] P=new int[N];
      for (int j=0; j < N; j++) {
        P[j]=input.nextInt();
      }
      int hold=0;
      boolean cont=true;
      output.format(""Case #%d: "",(i + 1));
      while (cont) {
        int largest=0;
        int num=0;
        for (int j=0; j < N; j++) {
          num+=P[j];
        }
        int count=0;
        for (int j=0; j < N; j++) {
          if (P[j] == 0) {
            cont=false;
            count++;
          }
 else {
            cont=true;
            break;
          }
        }
        if (count == N) {
          break;
        }
        for (int j=0; j < N; j++) {
          if (P[j] > largest) {
            hold=j;
            largest=P[j];
          }
        }
        System.out.println(""hold "" + hold);
        output.format(""%c"",letters[hold]);
        P[hold]-=1;
        largest=0;
        count=0;
        if (num % 2 != 0) {
          output.format("" "");
          continue;
        }
        for (int j=0; j < N; j++) {
          if (P[j] == 0) {
            cont=false;
            count++;
          }
 else {
            cont=true;
            break;
          }
        }
        if (count == N) {
          break;
        }
        for (int j=0; j < N; j++) {
          if (P[j] > largest) {
            hold=j;
            largest=P[j];
            ;
          }
        }
        System.out.println(""hold "" + hold);
        output.format(""%c "",letters[hold]);
        P[hold]--;
      }
      output.format(""\n"");
    }
    output.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001101,"public static void main(String[] args){
  try {
    Scanner sc=new Scanner(new FileReader(""A-large.in""));
    FileWriter fw=new FileWriter(new File(""Output.txt""));
    PrintWriter pw=new PrintWriter(fw);
    int t=sc.nextInt();
    sc.nextLine();
    for (int r=1; r <= t; r++) {
      int n=sc.nextInt();
      int[] a=new int[n];
      int total=0;
      System.out.print(""Case# "" + r + "": "");
      for (int i=0; i < n; i++) {
        a[i]=sc.nextInt();
        total+=a[i];
        System.out.print(a[i] + "" "");
      }
      System.out.println();
      pw.print(""Case #"" + r + "": "");
      int max=0;
      int index=-1;
      boolean next=false;
      boolean first=true;
      while (total > 0) {
        if (first && total == 3) {
          boolean c=true;
          for (int j=0; j < n; j++) {
            if (a[j] > 1)             c=false;
          }
          if (c)           for (int j=0; j < n; j++) {
            if (a[j] == 1) {
              a[j]-=1;
              pw.print((char)('A' + j) + "" "");
              total-=1;
              break;
            }
          }
        }
        max=0;
        for (int i=0; i < n; i++) {
          if (a[i] > max) {
            max=a[i];
            index=i;
          }
        }
        a[index]=a[index] - 1;
        pw.print((char)('A' + index));
        total-=1;
        if (total == 0)         break;
        if (next) {
          pw.print("" "");
          if (total == 3) {
            boolean c=true;
            for (int j=0; j < n; j++) {
              if (a[j] > 1)               c=false;
            }
            if (c)             for (int j=0; j < n; j++) {
              if (a[j] == 1) {
                a[j]-=1;
                pw.print((char)('A' + j) + "" "");
                total-=1;
                break;
              }
            }
          }
        }
        next=!next;
        first=false;
      }
      pw.println();
    }
    pw.flush();
    pw.close();
  }
 catch (  IOException ioe) {
    System.out.print(ioe);
  }
}
"
30001102,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
  FileWriter fw=new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
  int T=in.nextInt();
  in.nextLine();
  for (int tc=1; tc <= T; tc++) {
    int N=in.nextInt();
    int[] arr=new int[65 + N];
    int count=0;
    for (int i=65; i < 65 + N; i++) {
      arr[i]=in.nextInt();
      count+=arr[i];
    }
    String returnString="""";
    while (count > 0) {
      int[] largestTwo1=new int[4];
      for (int i=65; i < arr.length; i++) {
        if (arr[i] > largestTwo1[0]) {
          largestTwo1[0]=arr[i];
          largestTwo1[1]=i;
          largestTwo1[2]=0;
        }
 else         if (arr[i] == largestTwo1[0]) {
          largestTwo1[2]=arr[i];
          largestTwo1[3]=i;
        }
      }
      int[] largestTwo=largestTwo1;
      if (largestTwo[0] == largestTwo[2]) {
        if (count == 3) {
          returnString+=(char)largestTwo[1];
          returnString+="" "";
          count-=1;
          arr[largestTwo[1]]-=1;
        }
 else {
          returnString+=(char)largestTwo[1];
          returnString+=(char)largestTwo[3];
          returnString+="" "";
          count-=2;
          arr[largestTwo[1]]-=1;
          arr[largestTwo[3]]-=1;
        }
      }
 else {
        returnString+=(char)largestTwo[1];
        returnString+="" "";
        count-=1;
        arr[largestTwo[1]]-=1;
      }
    }
    fw.write(""Case #"" + tc + "": ""+ returnString+ ""\n"");
  }
  in.close();
  fw.flush();
  fw.close();
}
"
30001103,"public static void main(String[] args){
  String filename=""src/y20161C/A-large"";
  FileInputStream file;
  int T;
  try {
    file=new FileInputStream(filename + "".in"");
    BufferedReader in=new BufferedReader(new InputStreamReader(file));
    T=Integer.parseInt(in.readLine());
    BufferedWriter bw=new BufferedWriter(new FileWriter(filename + "".out""));
    for (int i=0; i < T; i++) {
      int ind=i + 1;
      int N=Integer.parseInt(in.readLine());
      String data[]=in.readLine().split("" "");
      int P[]=new int[N];
      for (int j=0; j < N; j++) {
        P[j]=Integer.parseInt(data[j]);
      }
      String res1="""";
      int max1=0;
      int max2=0;
      int ind1=-1;
      int ind2=-1;
      for (int i1=0; i1 < N; i1++) {
        if (P[i1] > max1) {
          if (max1 > max2) {
            max2=P[i1];
            ind2=i1;
          }
 else {
            max1=P[i1];
            ind1=i1;
          }
        }
 else         if (P[i1] > max2) {
          max2=P[i1];
          ind2=i1;
        }
      }
      int tab[]=P.clone();
      while (tab[ind1] != tab[ind2]) {
        if (tab[ind1] > tab[ind2]) {
          res1+="" "" + (char)('A' + ind1);
          tab[ind1]--;
        }
 else {
          res1+="" "" + (char)('A' + ind2);
          tab[ind2]--;
        }
      }
      for (int i2=0; i2 < N; i2++) {
        if (i2 == ind1 || i2 == ind2)         continue;
        while (tab[i2] > 1) {
          res1+="" "" + (char)('A' + i2) + (char)('A' + i2);
          tab[i2]-=2;
        }
        if (tab[i2] == 1) {
          res1+="" "" + (char)('A' + i2);
        }
      }
      while (tab[ind1] > 0) {
        res1+="" "" + (char)('A' + ind1) + (char)('A' + ind2);
        tab[ind1]--;
        tab[ind2]--;
      }
      res1=res1.substring(1);
      String res=res1;
      System.out.println(""Result "" + i + "": ""+ res);
      bw.write(""Case #"" + ind + "": ""+ res+ ""\n"");
    }
    bw.close();
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001104,"public static void main(final String[] args){
  final String base=""/home/jfortin/workspace-gcj/Codejam2016/r1c/ExoA/"";
  final String input=base + ""b1.in"";
  final String output=base + ""b1.out"";
  try {
    final Scanner sc=new Scanner(new FileReader(input));
    final PrintWriter pw=new PrintWriter(output);
    final int n=sc.nextInt();
    sc.nextLine();
    for (int c=0; c < n; c++) {
      System.out.println(""Test case "" + (c + 1) + ""..."");
      pw.print(""Case #"" + (c + 1) + "": "");
      int N=sc.nextInt();
      int nn[]=new int[N];
      for (int i=0; i < N; i++) {
        nn[i]=sc.nextInt();
      }
      while (true) {
        int max=Integer.MIN_VALUE;
        int maxi=-1;
        int maxi2=-1;
        int count=0;
        for (int i=0; i < nn.length; i++) {
          if (nn[i] > max) {
            maxi=i;
            max=nn[i];
            maxi2=-1;
            count=1;
          }
 else           if (nn[i] == max) {
            maxi2=i;
            count++;
          }
        }
        if (max == 0) {
          break;
        }
        pw.print(Character.valueOf((char)('A' + maxi)));
        nn[maxi]--;
        if (maxi2 != -1 && count == 2) {
          pw.print(Character.valueOf((char)('A' + maxi2)));
          nn[maxi2]--;
        }
        pw.print(' ');
      }
      pw.println();
    }
    pw.println();
    pw.flush();
    pw.close();
    sc.close();
  }
 catch (  final FileNotFoundException ex) {
    Logger.getLogger(ExoA.class.getName()).log(Level.SEVERE,null,ex);
  }
}
"
30001105,"public static void main(String[] args){
  StringBuffer answer=new StringBuffer();
  char[] parties=new char[26];
  for (int i=0; i < parties.length; i++)   parties[i]=(char)('A' + i);
  try (Scanner sc=new Scanner(new File(filePath))){
    int T=sc.nextInt();
    for (int i=1; i <= T; i++) {
      answer.append(""Case #"" + i + "":"");
      int N=sc.nextInt();
      int[] Pi=new int[N];
      int sum=0;
      for (int j=0; j < N; j++) {
        Pi[j]=sc.nextInt();
        sum+=Pi[j];
        Pi[j]*=2;
      }
      while (sum > 0) {
        answer.append("" "");
        int flag=0;
        sum--;
        for (int j=0; j < N; j++) {
          if (Pi[j] > sum) {
            if (flag == 0) {
              answer.append(parties[j]);
              Pi[j]-=2;
              flag=1;
            }
 else {
              answer.append(parties[j]);
              Pi[j]-=2;
              sum--;
              break;
            }
          }
        }
        if (flag == 0) {
          for (int j=0; j < N; j++) {
            if (Pi[j] > 0) {
              answer.append(parties[0]);
              Pi[0]-=2;
              break;
            }
          }
        }
      }
      answer.append(""\n"");
    }
    String outPath=""answer.out"";
    if (filePath != null && !filePath.equals("""")) {
      outPath=filePath.substring(0,filePath.length() - 2) + ""out"";
    }
    try (FileOutputStream fos=new FileOutputStream(outPath,false)){
      fos.write(answer.toString().getBytes());
    }
     System.out.println(answer);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001106,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  int x[], sum;
  String gg;
  for (int i=0; i < t; i++) {
    gg=""Case #"" + (i + 1) + "": "";
    int n=sc.nextInt();
    x=new int[n];
    sum=0;
    for (int j=0; j < n; j++) {
      int m=sc.nextInt();
      x[j]=m;
      sum+=m;
    }
    while (sum > 0) {
      int max1=0, max2=0, dex1=0, dex2=0;
      for (int i1=0; i1 < x.length; i1++) {
        if (x[i1] >= max1) {
          max2=max1;
          dex2=dex1;
          max1=x[i1];
          dex1=i1;
        }
      }
      int a1[];
      a1=max1 == max2 ? new int[]{max1,max2,dex1,dex2} : new int[]{max1,dex1};
      int a[]=a1;
      if (sum == 3) {
        for (int k=0; k < x.length; k++)         if (x[k] <= a[0] && x[k] > 0 && k != a[1]) {
          x[k]--;
          gg=gg + (char)(k + 65) + "" "";
          sum--;
          break;
        }
      }
 else       if (a.length != 4) {
        if (x[a[1]] - 2 != 0) {
          x[a[1]]-=2;
          sum-=2;
          gg=gg + (char)('A' + a[1]) + (char)(a[1] + 'A')+ "" "";
        }
 else {
          x[a[1]]--;
          sum--;
          gg=gg + (char)('A' + a[1]) + "" "";
        }
      }
 else       if (a.length == 4) {
        x[a[2]]--;
        x[a[3]]--;
        gg=gg + (char)('A' + a[2]) + (char)(a[3] + 'A')+ "" "";
        sum-=2;
      }
    }
    System.out.println(gg);
  }
}
"
30001107,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(br.readLine());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(br.readLine());
    int p[]=new int[N];
    String split[]=br.readLine().split("" "");
    for (int i=0; i < N; i++) {
      p[i]=Integer.parseInt(split[i]);
    }
    int ex1=0;
    for (int i=1; i < N; i++) {
      if (p[i] > p[ex1]) {
        ex1=i;
      }
    }
    int ex2=0;
    int max=0;
    for (int i=0; i < N; i++) {
      if (i == ex1)       continue;
      if (p[i] > max) {
        ex2=i;
        max=p[i];
      }
    }
    System.out.print(""Case #"" + t + "":"");
    while (p[ex1] > p[ex2]) {
      System.out.print("" "" + (char)('A' + ex1));
      p[ex1]--;
    }
    for (int i=0; i < N; i++) {
      if (i == ex2 || i == ex1)       continue;
      while (p[i] > 0) {
        System.out.print("" "" + (char)('A' + i));
        if (p[i] > 1)         System.out.print((char)('A' + i));
        p[i]-=2;
      }
    }
    while (p[ex1] > 0) {
      System.out.print("" "" + (char)('A' + ex1) + (char)('A' + ex2));
      p[ex1]--;
    }
    System.out.println();
  }
}
"
30001108,"public static void main(String[] args) throws FileNotFoundException {
  Scanner input=new Scanner(new File(""Input.in""));
  PrintWriter output=new PrintWriter(""Output.out"");
  int testCase, totalCases;
  totalCases=input.nextInt();
  for (testCase=1; testCase <= totalCases; testCase++) {
    int N=input.nextInt();
    int[] P=new int[N];
    for (int i=0; i < N; i++) {
      P[i]=input.nextInt();
    }
    String result="""";
    int resultIndex=0;
    for (int i1=0; i1 < P.length; i1++) {
      if (P[i1] > P[resultIndex])       resultIndex=i1;
    }
    int firstLargestIndex=resultIndex;
    int resultIndex1=0;
    if (firstLargestIndex == 0)     resultIndex1=1;
    for (int i1=0; i1 < P.length; i1++) {
      if (i1 == firstLargestIndex)       continue;
      if (P[i1] > P[resultIndex1])       resultIndex1=i1;
    }
    int secondLargestIndex=resultIndex1;
    while (P[firstLargestIndex] - P[secondLargestIndex] > 0) {
      if (P[firstLargestIndex] - P[secondLargestIndex] > 1) {
        result+=(char)(65 + firstLargestIndex) + """" + (char)(65 + firstLargestIndex)+ "" "";
        P[firstLargestIndex]-=2;
      }
 else {
        result+=(char)(65 + firstLargestIndex) + "" "";
        P[firstLargestIndex]-=1;
      }
    }
    for (int i=0; i < P.length; i++) {
      if (i == firstLargestIndex || i == secondLargestIndex)       continue;
      while (P[i] > 0) {
        if (P[i] - 2 >= 0) {
          result+=(char)(65 + i) + """" + (char)(65 + i)+ "" "";
          P[i]-=2;
        }
 else {
          result+=(char)(65 + i) + "" "";
          P[i]-=1;
        }
      }
    }
    while (P[firstLargestIndex] > 0) {
      result+=(char)(65 + firstLargestIndex) + """" + (char)(65 + secondLargestIndex)+ "" "";
      P[firstLargestIndex]--;
    }
    String solution=result;
    System.out.println(""Case #"" + testCase + "": ""+ solution);
    output.println(""Case #"" + testCase + "": ""+ solution);
  }
  output.flush();
}
"
30001109,"public static void main(String[] args) throws IOException {
  int noOfCase=0;
  writer=new PrintWriter(new File(outpath));
  try (BufferedReader br=new BufferedReader(new FileReader(inpath))){
    String line=br.readLine();
    noOfCase=Integer.parseInt(line);
    String result="""";
    for (int caseNo=0; caseNo < noOfCase; caseNo++) {
      int noOfParty=Integer.parseInt(br.readLine());
      line=br.readLine();
      String[] lineSplit=line.split("" "");
      int[] senors=new int[noOfParty];
      String[] senParty=new String[noOfParty];
      result="""";
      int total=0;
      for (byte i=0; i < noOfParty; i++) {
        senors[i]=Integer.parseInt(lineSplit[i]);
        total+=senors[i];
        char c='A';
        c+=i;
        senParty[i]=lineSplit[i] + c;
      }
      while (total > 0) {
        Arrays.sort(senParty);
        String maxParty=senParty[noOfParty - 1];
        String maxPartyMinux=senParty[noOfParty - 2];
        if (total != 3) {
          result=result + maxParty.charAt(1) + """";
          char c=maxParty.charAt(0);
          c=(char)(c - 1);
          senParty[noOfParty - 1]=c + """" + maxParty.charAt(1);
          if ((maxPartyMinux.charAt(0) - '0') != 0) {
            result=result + maxPartyMinux.charAt(1);
            c=maxPartyMinux.charAt(0);
            c=(char)(c - 1);
            senParty[noOfParty - 2]=c + """" + maxPartyMinux.charAt(1);
          }
          total=total - 2;
        }
 else {
          result=result + maxParty.charAt(1) + """";
          char c=maxParty.charAt(0);
          c=(char)(c - 1);
          senParty[noOfParty - 1]=c + """" + maxParty.charAt(1);
          total=total - 1;
        }
        if (total > 0)         result=result + "" "";
      }
      String msg=String.format(""Case #%d: %S "",caseNo + 1,result);
      writer.println(msg);
      System.out.println(msg);
    }
    br.close();
  }
   writer.close();
}
"
30001110,"public static void main(String[] args) throws Throwable {
  in=new Scanner(System.in);
  in=new Scanner(new FileInputStream(""A-large.in""));
  out=System.out;
  out=new PrintStream(new FileOutputStream(""A-large.out""));
  final char[] chr=new char[100];
  for (char ch='A'; ch <= 'Z'; ch++) {
    chr[ch - 'A']=ch;
  }
  int T=in.nextInt();
  int[] max1and2=new int[2];
  for (int t=1; t <= T; t++) {
    out.print(CASE_N);
    out.print(t);
    out.print(COLON_SPACE);
    int N=in.nextInt();
    int[] P=new int[N];
    int total=0;
    for (int n=0; n < N; n++) {
      P[n]=in.nextInt();
      total+=P[n];
    }
    while (total > 0) {
      int vMax=-1;
      int iMax=-1;
      int vMax21=-1;
      int iMax21=-1;
      for (int i=0; i < P.length; i++) {
        int v=P[i];
        if (v > vMax) {
          vMax21=vMax;
          iMax21=iMax;
          vMax=v;
          iMax=i;
        }
 else         if (v > vMax21) {
          vMax21=v;
          iMax21=i;
        }
      }
      max1and2[0]=iMax;
      max1and2[1]=iMax21;
      int iMax1=max1and2[0];
      int iMax2=max1and2[1];
      int vMax1=P[iMax1];
      int vMax2=iMax2 > -1 ? P[iMax2] : 0;
      if (vMax1 == vMax2) {
        out.print(chr[iMax1]);
        P[iMax1]--;
        total--;
        if (total > 2 || total == 1) {
          out.print(chr[iMax2]);
          P[iMax2]--;
          total--;
        }
      }
 else {
        out.print(chr[iMax1]);
        P[iMax1]--;
        total--;
        if (total > 2 || total == 1) {
          out.print(chr[iMax1]);
          P[iMax1]--;
          total--;
        }
      }
      if (total > 0) {
        out.print(' ');
      }
    }
    out.println();
  }
  out.flush();
}
"
30001111,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(WORK_DIR + ""A-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(WORK_DIR + ""output.txt""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    System.out.println(""Processing test case "" + (caseNum + 1));
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    prblmA r=new prblmA();
    int N=sc.nextInt();
    int P[]=new int[N];
    for (int i=0; i < N; i++) {
      P[i]=sc.nextInt();
    }
    int flag=1;
    int max=P[0];
    int maxi=0;
    char out='A';
    while (true) {
      max=P[0];
      maxi=0;
      for (int i=0; i < N; i++) {
        if (P[i] > max) {
          max=P[i];
          maxi=i;
        }
      }
      if (max == 1) {
        int count=0;
        for (int i=0; i < N; i++) {
          if (P[i] == 1) {
            count++;
          }
        }
        if (count == 3) {
          flag=0;
        }
      }
      System.out.println(max + "" "" + maxi);
      if (max == 0) {
        break;
      }
 else {
        P[maxi]=P[maxi] - 1;
        out=(char)('A' + maxi);
        if (flag == 1) {
          pw.print(out);
          flag=0;
        }
 else {
          pw.print(out + "" "");
          flag=1;
        }
      }
    }
    pw.println();
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30001112,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""C:/Users/Harish/Downloads/A-large.in""));
  String line=br.readLine();
  int t=Integer.parseInt(line);
  int count=0;
  while (t-- > 0) {
    line=br.readLine();
    int n=Integer.parseInt(line);
    int[] arr=new int[n];
    line=br.readLine();
    int orgtotal=0;
    int max=0;
    int max2=0;
    String[] str=line.split("" "");
    int i=0;
    int a=-1;
    int b=-1;
    for (    String st : str) {
      int val=Integer.parseInt(st);
      orgtotal+=val;
      arr[i]=val;
      i++;
    }
    boolean flag=true;
    System.out.print(""Case #"" + (++count) + "": "");
    int total;
    while (flag) {
      flag=false;
      max=0;
      max2=0;
      a=-1;
      b=-1;
      total=0;
      for (int j=0; j < n; j++) {
        if (arr[j] > max) {
          if (max != 0) {
            b=a;
            max2=max;
          }
          a=j;
          max=arr[j];
        }
 else         if (arr[j] > max2 && arr[j] <= max) {
          b=j;
          max2=arr[j];
        }
        total+=arr[j];
      }
      if (total == 3) {
        System.out.print((char)(65 + a) + "" "");
        arr[a]--;
        total--;
      }
 else {
        System.out.print((char)(65 + a) + """" + (char)(65 + b)+ "" "");
        arr[a]--;
        arr[b]--;
        total-=2;
      }
      if (total != 0)       flag=true;
    }
    System.out.println();
  }
}
"
30001113,"public static void main(String[] args) throws IOException {
  JamProblems r=new JamProblems();
  Scanner sc=null;
  PrintWriter pw=null;
  try {
    sc=new Scanner(new File(""A-large.in""));
    pw=new PrintWriter(new File(""output.out""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  int tests=sc.nextInt();
  for (int j=1; j <= tests; j++) {
    pw.print(""Case #"" + j + "": "");
    int n=sc.nextInt();
    int[] partEmp=new int[n];
    Map<Integer,Integer> parties=new HashMap<Integer,Integer>();
    String partNames=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    int lastEmpl=0;
    for (int i=0; i < n; i++) {
      partEmp[i]=sc.nextInt();
      parties.put(i,partEmp[i]);
      lastEmpl+=partEmp[i];
    }
    while (true) {
      int fMaxInd=0, sMaxInd=0, maxEm=0;
      for (int z=0; z < n; z++) {
        if (partEmp[z] > maxEm) {
          maxEm=partEmp[z];
          fMaxInd=z;
        }
      }
      if (lastEmpl == 3) {
        pw.print(partNames.charAt(fMaxInd) + "" "");
        partEmp[fMaxInd]--;
      }
 else {
        maxEm=0;
        for (int z=0; z < n; z++) {
          if (z != fMaxInd && partEmp[z] > maxEm) {
            maxEm=partEmp[z];
            sMaxInd=z;
          }
        }
        pw.print(partNames.charAt(fMaxInd) + """" + partNames.charAt(sMaxInd)+ "" "");
        partEmp[fMaxInd]--;
        partEmp[sMaxInd]--;
      }
      lastEmpl=0;
      for (int i=0; i < n; i++) {
        lastEmpl+=partEmp[i];
      }
      if (lastEmpl == 0)       break;
    }
    pw.println();
  }
  pw.close();
}
"
30001114,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int cases=in.nextInt();
  for (int c=0; c < cases; c++) {
    int no_of_parties=in.nextInt();
    int parties[]=new int[no_of_parties];
    int remaining=0;
    for (int i=0; i < no_of_parties; i++) {
      parties[i]=in.nextInt();
      remaining+=parties[i];
    }
    StringBuilder output=new StringBuilder("""");
    output.append(""Case #"" + (c + 1) + "":"");
    while (remaining > 0) {
      output.append("" "");
      int max=0;
      for (int i=0; i < no_of_parties; i++) {
        if (parties[i] > max)         max=parties[i];
      }
      int no_of_max=0;
      for (int i=0; i < no_of_parties; i++) {
        if (parties[i] == max)         no_of_max++;
      }
      if (no_of_max > 3 || no_of_max == 2) {
        int count=2;
        for (int i=0; i < no_of_parties; i++) {
          if (count == 0)           break;
          if (parties[i] == max) {
            parties[i]--;
            output.append((char)(('A') + i));
            count--;
          }
        }
        remaining-=2;
      }
 else {
        int count=1;
        for (int i=0; i < no_of_parties; i++) {
          if (count == 0)           break;
          if (parties[i] == max) {
            parties[i]--;
            output.append((char)(('A') + i));
            count--;
          }
        }
        remaining-=1;
      }
      int maxpol=remaining / 2 + 1;
      for (int i=0; i < no_of_parties; i++) {
        if (parties[i] >= maxpol) {
          System.out.println(""WARNING"");
        }
      }
    }
    System.out.println(output);
  }
}
"
30001115,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(in.readLine());
  for (int t=0; t < T; ++t) {
    int N=Integer.parseInt(in.readLine());
    PriorityQueue<Integer> pq=new PriorityQueue<>(Collections.reverseOrder());
    StringTokenizer st=new StringTokenizer(in.readLine());
    for (int i=0; i < N; ++i)     pq.add(Integer.parseInt(st.nextToken()) * 100 + i);
    StringBuilder sb=new StringBuilder();
    sb.append(String.format(""Case #%d:"",t + 1));
    while (!pq.isEmpty()) {
      int a=pq.poll();
      if (a / 100 == 1 && pq.size() > 1) {
        sb.append(' ').append((char)(a % 100 + 'A'));
        continue;
      }
      int b=pq.poll();
      int ca=a / 100, pa=a % 100;
      int cb=b / 100, pb=b % 100;
      sb.append(' ').append((char)(pa + 'A')).append((char)(pb + 'A'));
      if (ca > 1)       pq.add(a - 100);
      if (cb > 1)       pq.add(b - 100);
    }
    System.out.println(sb.toString());
  }
}
"
30001116,"/** 
 * @param args
 * @throws IOException 
 */
public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; i++) {
    int n=in.nextInt();
    int a[]=new int[26];
    int p[]=new int[n];
    int total=0;
    for (int j=0; j < n; j++) {
      p[j]=in.nextInt();
      total+=p[j];
    }
    System.out.print(""Case #"" + i + "": "");
    while (total > 0) {
      int max1=0;
      int max2=0;
      int max3=0;
      for (int j=1; j < n; j++) {
        if (p[j] >= p[max1]) {
          max3=max2;
          max2=max1;
          max1=j;
        }
 else         if (p[j] >= p[max2]) {
          max3=max2;
          max2=j;
        }
 else         if (p[j] >= p[max3]) {
          max3=j;
        }
      }
      if ((p[max1] - 2) < total / 2 && p[max2] < total / 2 && p[max3] < total / 2) {
        System.out.print("""" + (char)('A' + max1) + (char)('A' + max1)+ "" "");
        total-=2;
        p[max1]-=2;
      }
 else       if ((p[max1] - 1) < total / 2 && (p[max2] - 1) < total / 2 && p[max3] < total / 2) {
        System.out.print("""" + (char)('A' + max1) + (char)('A' + max2)+ "" "");
        total-=2;
        p[max1]-=1;
        p[max2]-=1;
      }
 else       if (p[max1] == p[max2] && p[max3] == p[max2] && max1 != max2 && max2 != max3) {
        System.out.print("""" + (char)('A' + max3) + "" "");
        total-=1;
        p[max3]-=1;
      }
 else {
        System.out.print("""" + (char)('A' + max1) + (char)('A' + max2)+ "" "");
        total-=2;
        p[max1]-=1;
        p[max2]-=1;
      }
    }
    System.out.println();
  }
  in.close();
}
"
30001117,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(WORK_DIR + INPUT_FILE_NAME));
  PrintWriter pw=new PrintWriter(new FileWriter(WORK_DIR + OUTPUT_FILE_NAME));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    Problem1 r=new Problem1();
    r.n=sc.nextInt();
    r.map=new int[r.n];
    r.letter=new int[r.n];
    for (int index=0; index < r.n; index++) {
      r.map[index]=sc.nextInt();
      r.letter[index]=index;
    }
    for (int i=0; i < r.n; i++) {
      for (int j=i + 1; j < r.n; j++) {
        if (r.map[i] < r.map[j]) {
          int temp=r.map[i];
          r.map[i]=r.map[j];
          r.map[j]=temp;
          temp=r.letter[i];
          r.letter[i]=r.letter[j];
          r.letter[j]=temp;
        }
      }
    }
    while (true) {
      if (r.map[0] == 0)       break;
      if (r.map[0] > 1) {
        if (r.map[1] > 0) {
          r.map[0]=r.map[0] - 1;
          r.map[1]=r.map[1] - 1;
          pw.print(Character.toChars(r.letter[0] + 65));
          pw.print(Character.toChars(r.letter[1] + 65));
          pw.print("" "");
          for (int i=0; i < r.n; i++) {
            for (int j=i + 1; j < r.n; j++) {
              if (r.map[i] < r.map[j]) {
                int temp=r.map[i];
                r.map[i]=r.map[j];
                r.map[j]=temp;
                temp=r.letter[i];
                r.letter[i]=r.letter[j];
                r.letter[j]=temp;
              }
            }
          }
        }
 else {
          r.map[0]=r.map[0] - 1;
          pw.print(Character.toChars(r.letter[0] + 65));
          pw.print("" "");
          break;
        }
      }
 else {
        if (r.map[1] > 0) {
          if ((r.n % 2) != 0 && r.map[2] > 0) {
            r.map[0]=r.map[0] - 1;
            pw.print(Character.toChars(r.letter[0] + 65));
            pw.print("" "");
            for (int i=0; i < r.n; i++) {
              for (int j=i + 1; j < r.n; j++) {
                if (r.map[i] < r.map[j]) {
                  int temp=r.map[i];
                  r.map[i]=r.map[j];
                  r.map[j]=temp;
                  temp=r.letter[i];
                  r.letter[i]=r.letter[j];
                  r.letter[j]=temp;
                }
              }
            }
          }
 else {
            r.map[0]=r.map[0] - 1;
            r.map[1]=r.map[1] - 1;
            pw.print(Character.toChars(r.letter[0] + 65));
            pw.print(Character.toChars(r.letter[1] + 65));
            pw.print("" "");
            for (int i=0; i < r.n; i++) {
              for (int j=i + 1; j < r.n; j++) {
                if (r.map[i] < r.map[j]) {
                  int temp=r.map[i];
                  r.map[i]=r.map[j];
                  r.map[j]=temp;
                  temp=r.letter[i];
                  r.letter[i]=r.letter[j];
                  r.letter[j]=temp;
                }
              }
            }
          }
        }
 else {
          r.map[0]=r.map[0] - 1;
          pw.print(Character.toChars(r.letter[0] + 65));
          pw.print("" "");
          break;
        }
      }
    }
    pw.println();
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30001118,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(new FileInputStream(inputPath));
  PrintWriter printer=new PrintWriter(new FileOutputStream(outputPath));
  int T=scanner.nextInt();
  for (int i=0; i < T; i++) {
    printer.format(""Case #%d: "",i + 1);
    int n=scanner.nextInt();
    int p[]=new int[n];
    for (int j=0; j < n; j++) {
      p[j]=scanner.nextInt();
    }
    if (n == 2) {
      for (int j=0; j < p[0]; j++) {
        printer.print(""AB "");
      }
      printer.println();
      printer.flush();
      continue;
    }
    for (int k=1000; k > 1; k--) {
      for (int j=0; j < n; j++) {
        if (p[j] == k) {
          printer.print((char)('A' + j));
          printer.print(' ');
          p[j]--;
        }
      }
    }
    for (int j=2; j < n; j++) {
      printer.print((char)('A' + j));
      printer.print(' ');
    }
    printer.print(""AB "");
    printer.println();
    printer.flush();
  }
}
"
30001119,"public static void main(String[] args) throws FileNotFoundException {
  FileInputStream fileInputStream=new FileInputStream(""/Users/ratmir/Downloads/A-large (3).in"");
  Scanner sc=new Scanner(fileInputStream);
  FileOutputStream outputStream=new FileOutputStream(""/Users/ratmir/Documents/code/hackerrank/algs/src/codejam/y2016/r3/z1/z2.txt"");
  PrintWriter printWriter=new PrintWriter(outputStream);
  int t=sc.nextInt();
  for (int ti=1; ti <= t; ti++) {
    int n=sc.nextInt();
    int[] arr=new int[n];
    int cnt=0;
    TreeMap<Integer,Set<Integer>> tm=new TreeMap<Integer,Set<Integer>>();
    for (int i=0; i < n; i++) {
      arr[i]=sc.nextInt();
      cnt+=arr[i];
      Set<Integer> integers=tm.get(arr[i]);
      if (integers == null) {
        integers=new HashSet<Integer>();
        tm.put(arr[i],integers);
      }
      integers.add(i);
    }
    StringBuilder sb=new StringBuilder();
    while (cnt > 0) {
      if (cnt == 3 && tm.size() == 1 || (cnt == 3 && tm.size() == 2 && tm.containsKey(0) && tm.containsKey(1))) {
        System.err.println(tm);
        Set<Integer> integers=tm.get(1);
        Iterator<Integer> iterator=integers.iterator();
        Integer mx1=iterator.next();
        Integer mx2=iterator.next();
        Integer mx3=iterator.next();
        String c1=alphabet.substring(mx1,mx1 + 1);
        String c2=alphabet.substring(mx2,mx2 + 1);
        String c3=alphabet.substring(mx3,mx3 + 1);
        sb=sb.append(c1 + "" "" + c2+ c3);
        cnt-=3;
        break;
      }
      System.err.println(tm);
      Map.Entry<Integer,Set<Integer>> entry=tm.lastEntry();
      Integer key=entry.getKey();
      Set<Integer> value=entry.getValue();
      Iterator<Integer> iterator=value.iterator();
      int mx=iterator.next();
      if (value.size() > 1) {
        int mx1=iterator.next();
        value.remove(mx);
        value.remove(mx1);
        if (value.size() == 0) {
          tm.remove(key);
        }
        String c=alphabet.substring(mx,mx + 1);
        String c1=alphabet.substring(mx1,mx1 + 1);
        sb=sb.append(c + c1 + "" "");
        Set<Integer> integers=tm.get(key - 1);
        if (integers == null) {
          integers=new HashSet<Integer>();
          tm.put(key - 1,integers);
        }
        integers.add(mx);
        integers.add(mx1);
        cnt-=2;
      }
 else {
        tm.remove(key);
        if (key > 1) {
          String c=alphabet.substring(mx,mx + 1);
          sb=sb.append(c + c + "" "");
          Set<Integer> integers=tm.get(key - 2);
          if (integers == null) {
            integers=new HashSet<Integer>();
            tm.put(key - 2,integers);
          }
          integers.add(mx);
          cnt-=2;
        }
 else {
          String c=alphabet.substring(mx,mx + 1);
          sb=sb.append(c + c + "" "");
          Set<Integer> integers=tm.get(key - 1);
          if (integers == null) {
            integers=new HashSet<Integer>();
            tm.put(key - 1,integers);
          }
          integers.add(mx);
          cnt-=1;
        }
      }
      if (cnt > 0) {
        Map.Entry<Integer,Set<Integer>> entry1=tm.lastEntry();
        if (entry1.getValue().size() == 1) {
          if (entry1.getKey() > cnt / 2) {
            System.err.println(entry1.getKey() + "" "" + cnt);
            throw new RuntimeException();
          }
        }
      }
    }
    String res=""Case #"" + ti + "": ""+ sb.toString();
    System.out.println(res);
    printWriter.write(res + ""\n"");
  }
  printWriter.close();
}
"
30001120,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int testCase=1; testCase <= t; testCase++) {
    int n=in.nextInt();
    int p[]=new int[n];
    int total=0;
    for (int i=0; i < n; i++) {
      p[i]=in.nextInt();
      total+=p[i];
    }
    StringBuilder sb=new StringBuilder();
    while (total > 0) {
      sb.append("" "");
      int max=0;
      for (int i1=1; i1 < p.length; i1++) {
        if (p[i1] > p[max]) {
          max=i1;
        }
      }
      int i=max;
      total-=1;
      p[i]-=1;
      sb.append((char)('A' + i));
      for (int j=0; j < n; j++) {
        if (p[j] * 1.0 / total > 0.5) {
          total-=1;
          p[j]-=1;
          sb.append((char)('A' + j));
        }
      }
    }
    System.out.println(""Case #"" + testCase + "":""+ sb.toString());
  }
  in.close();
}
"
30001121,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new FileReader(""src/round1/roundC/A-large (5).in""));
  PrintWriter pw=new PrintWriter(""src/round1/roundC/A-large.out"");
  int testCases=sc.nextInt();
  String alphabet=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
  for (int casen=0; casen < testCases; casen++) {
    pw.printf(""Case #%d: "",casen + 1);
    int n=sc.nextInt();
    int arr[]=new int[n];
    for (int i=0; i < n; i++) {
      arr[i]=sc.nextInt();
    }
    int max1=0;
    for (int i=0; i < arr.length; i++) {
      if (arr[i] > max1) {
        max1=arr[i];
      }
    }
    int max=max1;
    while (max != 0) {
      Queue<Integer> arrOfIndexOfMaxNum=new LinkedList<>();
      for (int i1=0; i1 < arr.length; i1++) {
        if (arr[i1] == max)         arrOfIndexOfMaxNum.add(i1);
      }
      Queue<Integer> indexOfMax=arrOfIndexOfMaxNum;
      if (indexOfMax.size() % 2 == 1) {
        int t=indexOfMax.poll();
        arr[t]--;
        pw.print(alphabet.charAt(t) + "" "");
      }
      while (!indexOfMax.isEmpty()) {
        int t1=indexOfMax.poll();
        int t2=indexOfMax.poll();
        arr[t1]--;
        arr[t2]--;
        pw.print(alphabet.charAt(t1));
        pw.print(alphabet.charAt(t2) + "" "");
      }
      int max2=0;
      for (int i=0; i < arr.length; i++) {
        if (arr[i] > max2) {
          max2=arr[i];
        }
      }
      max=max2;
    }
    pw.println();
    pw.flush();
  }
  pw.close();
  sc.close();
}
"
30001122,"public static void main(String args[]){
  List<String> inputList1=new ArrayList<String>();
  String filePath=""/Users/zzluck/Downloads/"";
  String fileName=""A-large.in.txt"";
  String fullFileName=filePath + fileName;
  try {
    BufferedReader in=new BufferedReader(new FileReader(fullFileName));
    String s;
    while ((s=in.readLine()) != null) {
      inputList1.add(s.trim());
    }
    in.close();
  }
 catch (  IOException e) {
    System.err.println(""Error during input process:"" + e);
    System.exit(1);
  }
  List<String> inputList=inputList1;
  List<String> outputList=new ArrayList<String>();
  String testCaseResult="""";
  int testCount=Integer.valueOf(inputList.get(0));
  int curIdx=1;
  for (int i=1; i <= testCount; i++) {
    String line=inputList.get(curIdx) + "" "" + inputList.get(curIdx + 1);
    curIdx=curIdx + 2;
    String answer="""";
    String strArr[]=line.split("" "");
    int n=Integer.valueOf(strArr[0]);
    int p[]=new int[n];
    char pCh[]={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
    int totalNum=0;
    String outP="""";
    for (int i3=0; i3 < n; i3++) {
      p[i3]=Integer.valueOf(strArr[i3 + 1]);
    }
    for (    int i2 : p) {
      totalNum+=i2;
    }
    for (int i1=0; i1 < totalNum; i1++) {
      int totalNum1=0;
      for (      int i3 : p) {
        totalNum1+=i3;
      }
      int curNum=totalNum1;
      int max=p[0];
      int min=p[0];
      int maxIdx=0;
      for (int i5=1; i5 < p.length; i5++) {
        if (p[i5] > max) {
          max=p[i5];
          maxIdx=i5;
        }
      }
      int curMaxIdx=maxIdx;
      if (n >= curNum) {
        int max1=p[p.length - 1];
        int min1=p[p.length - 1];
        int maxIdx1=p.length - 1;
        for (int i5=p.length - 2; i5 >= 0; i5--) {
          if (p[i5] > max1) {
            max1=p[i5];
            maxIdx1=i5;
          }
        }
        curMaxIdx=maxIdx1;
      }
      outP+=pCh[curMaxIdx];
      p[curMaxIdx]--;
      if (outP.length() == 2) {
        answer+=outP + "" "";
        outP="""";
      }
      int totalNum2=0;
      for (      int i4 : p) {
        totalNum2+=i4;
      }
      curNum=totalNum2;
      if (curNum == 2 && (outP.length() != 0)) {
        answer+=outP + "" "";
        outP="""";
      }
    }
    answer=answer.trim();
    testCaseResult=answer;
    outputList.add(""Case #"" + i + "": ""+ testCaseResult+ ""\n"");
  }
  String filePath1=""/Users/zzluck/Downloads/codejamOutput/"";
  String fileName1=""sol1.txt"";
  String fullFileName1=filePath1 + fileName1;
  try {
    File file=new File(fullFileName1);
    FileWriter fw=new FileWriter(file);
    for (int i=0; i < outputList.size(); i++) {
      fw.write(outputList.get(i));
      fw.flush();
    }
    fw.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001123,"public static void main(String[] arg) throws IOException {
  BufferedReader reader=new BufferedReader(new FileReader(PATH + PROBLEM_NAME + "".in""));
  writer=new PrintWriter(new BufferedWriter(new FileWriter(PATH + PROBLEM_NAME + "".out"")));
  int testCases=Integer.parseInt(reader.readLine());
  for (int i=0; i < testCases; i++) {
    int partyCount=Integer.parseInt(reader.readLine());
    int[][] dist=new int[partyCount][2];
    StringTokenizer tokenizer=new StringTokenizer(reader.readLine());
    int count=0;
    for (int j=0; j < partyCount; j++) {
      dist[j][0]=Integer.parseInt(tokenizer.nextToken());
      dist[j][1]=j + 65;
      count+=dist[j][0];
    }
    Arrays.sort(dist,comparator);
    StringBuilder answer=new StringBuilder();
    while (dist[0][0] > 0) {
      if (dist[1][0] / ((float)(count - 1)) <= 0.5) {
        answer.append(((char)dist[0][1]) + "" "");
        dist[0][0]--;
        count-=1;
      }
 else {
        answer.append(((char)dist[0][1]) + """" + ((char)dist[1][1])+ "" "");
        dist[0][0]--;
        dist[1][0]--;
        count-=2;
      }
      Arrays.sort(dist,comparator);
    }
    answer.deleteCharAt(answer.length() - 1);
    writer.println(""Case #"" + (i + 1) + "": ""+ answer);
  }
  reader.close();
  writer.close();
}
"
30001124,"public static void main(String... orange) throws Exception {
  Scanner input=new Scanner(System.in);
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    int N=input.nextInt();
    int[] senatorList=new int[N];
    int max=0;
    int maxValue=0;
    int sum=0;
    for (int i=0; i < N; i++) {
      senatorList[i]=input.nextInt();
      if (senatorList[i] > maxValue) {
        maxValue=senatorList[i];
        max=i;
      }
      sum+=senatorList[i];
    }
    StringBuilder answerSB=new StringBuilder();
    while (sum > 0) {
      answerSB.append(String.valueOf((char)(max + 65)));
      senatorList[max]--;
      sum--;
      if (sum == 0)       break;
      int[] maxes1=new int[2];
      maxes1[0]=0;
      maxes1[1]=0;
      for (int i=0; i < N; i++) {
        if (senatorList[i] > maxes1[1]) {
          maxes1[1]=senatorList[i];
          maxes1[0]=i;
        }
      }
      int[] maxes=maxes1;
      max=maxes[0];
      maxValue=maxes[1];
      sum--;
      maxValue--;
      if (sum == 0) {
        senatorList[max]--;
        answerSB.append(String.valueOf((char)(max + 65)));
        break;
      }
 else       if ((double)maxValue / (double)sum <= 0.5 && sum > 1) {
        senatorList[max]--;
        answerSB.append(String.valueOf((char)(max + 65)));
      }
 else {
        sum++;
        maxValue++;
      }
      answerSB.append("" "");
      int[] maxes2=new int[2];
      maxes2[0]=0;
      maxes2[1]=0;
      for (int i=0; i < N; i++) {
        if (senatorList[i] > maxes2[1]) {
          maxes2[1]=senatorList[i];
          maxes2[0]=i;
        }
      }
      maxes=maxes2;
      max=maxes[0];
      maxValue=maxes[1];
    }
    String answer=answerSB.toString();
    System.out.printf(""Case #%d: %s\n"",n + 1,answer);
  }
}
"
30001125,"public static void main(String[] args) throws IOException {
  writer=new PrintWriter(""out.txt"");
  BufferedReader br=null;
  try {
    br=new BufferedReader(new FileReader(""A-large (1).in""));
    String line=br.readLine();
    int Num=Integer.parseInt(line);
    for (int i=0; i < Num; ++i) {
      line=br.readLine();
      int party=Integer.parseInt(line);
      line=br.readLine();
      String bufs[]=line.split("" "");
      int[] sena=new int[30];
      for (int j=0; j < party; ++j) {
        sena[j]=Integer.parseInt(bufs[j]);
      }
      String output="""";
      while (true) {
        int min=-1;
        int index1=-1;
        int count=0;
        int another1=-1;
        for (int i1=0; i1 < party; ++i1) {
          if (sena[i1] > 0 && (min == -1 || sena[i1] > min)) {
            min=sena[i1];
            index1=i1;
            count=1;
            another1=-1;
          }
 else           if (sena[i1] > 0 && (min == -1 || sena[i1] == min)) {
            count++;
            another1=i1;
          }
        }
        if (count == 2 && another1 > -1) {
          index1+=another1 * 100;
        }
        int index=index1;
        if (index == -1) {
          break;
        }
        if (index < 30) {
          sena[index]--;
          char a=(char)(index + 'A');
          output+=(a + "" "");
        }
 else {
          int another=index / 100;
          index=index % 100;
          sena[index]--;
          char a=(char)(index + 'A');
          char s=(char)(another + 'A');
          output+=a;
          output+=(s + "" "");
          sena[another]--;
        }
      }
      writer.println(""Case #"" + (i + 1) + "": ""+ output);
    }
  }
  finally {
    br.close();
    writer.close();
  }
}
"
30001126,"public static void main(String[] args) throws FileNotFoundException {
  File fin=new File(""input.in"");
  File fout=new File(""output.out"");
  Scanner in=new Scanner(fin);
  PrintWriter out=new PrintWriter(fout);
  int T=in.nextInt();
  int n;
  ArrayList<Integer> senators=new ArrayList<Integer>();
  int sum;
  String sol="""";
  for (int cT=1; cT <= T; cT++) {
    senators.clear();
    sol="""";
    n=in.nextInt();
    for (int i=0; i < n; i++)     senators.add(in.nextInt());
    sum=0;
    for (int i=0; i < n; i++)     sum+=senators.get(i);
    while (sum-- > 2) {
      int max=0, index=-1, index2=-1;
      boolean match3=false;
      for (int i=0; i < n; i++)       if (senators.get(i) > max) {
        index=i;
        max=senators.get(i);
        index2=-1;
      }
 else       if (senators.get(i) == max) {
        if (index2 == -1)         index2=i;
 else         match3=true;
      }
      if (index2 == -1 || match3) {
        senators.set(index,max - 1);
        sol+="" "" + (char)(index + 'A');
      }
 else {
        senators.set(index,max - 1);
        senators.set(index2,max - 1);
        sol+="" "" + (char)(index + 'A') + (char)(index2 + 'A');
        sum--;
      }
      for (int i=0; i < n; i++)       if (senators.get(i) > sum / 2)       System.out.println(""flawed"");
    }
    sol+="" "";
    for (int i=0; i < n; i++)     if (senators.get(i) > 0)     sol+=(char)(i + 'A');
    out.println(""Case #"" + cT + "":""+ sol);
  }
  in.close();
  out.close();
}
"
30001127,"public static void main(String[] args) throws FileNotFoundException {
  Scanner s=new Scanner(System.in);
  int numIter=s.nextInt();
  for (int i=0; i < numIter; i++) {
    n=s.nextInt();
    aList=new HashMap<Character,Integer>();
    for (int j=0; j < n; j++)     aList.put(aString.charAt(j),s.nextInt());
    System.out.print(""Case #"" + (i + 1) + "": "");
    int count=0;
    int count2=0;
    boolean flag=false;
    while (Collections.max(aList.values()) != 0) {
      int maxValueInMap=(Collections.max(aList.values()));
      int tempCount=0;
      for (      Entry<Character,Integer> entry : aList.entrySet()) {
        if (entry.getValue() == maxValueInMap)         tempCount++;
      }
      if (tempCount % 2 == 0)       count=2;
 else       count=1;
      count2=0;
      for (      Entry<Character,Integer> entry : aList.entrySet()) {
        if (entry.getValue() == maxValueInMap) {
          count2++;
          System.out.print(entry.getKey());
          aList.replace(entry.getKey(),entry.getValue() - 1);
        }
        if (count == count2)         break;
      }
      if (Collections.max(aList.values()) != 0)       System.out.print("" "");
    }
    if (i + 1 != numIter)     System.out.println("""");
  }
}
"
30001128,"public static void main(String[] args) throws Exception {
  FileInputStream is=new FileInputStream(new File(args[0]));
  InputStreamReader isr=new InputStreamReader(is);
  BufferedReader br=new BufferedReader(isr);
  String line=br.readLine();
  int testCase=1;
  while ((line=br.readLine()) != null) {
    int N=Integer.parseInt(line);
    line=br.readLine();
    String[] sForPartiesString=line.split("" "");
    int[] sForParties=new int[sForPartiesString.length];
    int cantidad=0;
    for (int i=0; i < sForParties.length; i++) {
      sForParties[i]=Integer.parseInt(sForPartiesString[i]);
      cantidad+=sForParties[i];
    }
    int mitad=cantidad / 2;
    List<String> toOut=new ArrayList<String>();
    while (cantidad > 0) {
      int mayor=Integer.MIN_VALUE;
      for (int i1=0; i1 < sForParties.length; i1++) {
        if (sForParties[i1] > mayor) {
          mayor=sForParties[i1];
        }
      }
      int maximo=mayor;
      if (sForParties.length == 2) {
        toOut.add(""AB"");
        cantidad-=2;
        continue;
      }
 else {
        if (cantidad == 2) {
          String out="""";
          for (int i=0; i < sForParties.length; i++) {
            if (sForParties[i] == maximo) {
              out+=String.valueOf(Character.toChars(65 + i));
              sForParties[i]=sForParties[i] - 1;
            }
          }
          toOut.add(out);
        }
 else {
          String out="""";
          for (int i=0; i < sForParties.length; i++) {
            if (sForParties[i] == maximo) {
              out+=String.valueOf(Character.toChars(65 + i));
              sForParties[i]=sForParties[i] - 1;
              break;
            }
          }
          toOut.add(out);
        }
        int cantidad1=0;
        for (int i=0; i < sForParties.length; i++) {
          cantidad1+=sForParties[i];
        }
        cantidad=cantidad1;
      }
    }
    System.out.format(""Case #%d:"",testCase);
    for (int i=0; i < toOut.size(); i++) {
      System.out.print("" "" + toOut.get(i));
    }
    System.out.println("""");
    testCase++;
  }
  br.close();
}
"
30001129,"public static void main(String[] args){
  Scanner in=null;
  PrintWriter out=null;
  try {
    in=new Scanner(new FileReader(""input.txt""));
    out=new PrintWriter(""output.txt"");
    final char FIRST_CHAR='A';
    int totalCases=in.nextInt();
    for (int testCase=1; testCase <= totalCases; testCase++) {
      int n=in.nextInt();
      int[] parties=new int[n];
      int sum=0;
      for (int i=0; i < n; i++) {
        parties[i]=in.nextInt();
        sum+=parties[i];
      }
      out.printf(""Case #%d: "",testCase);
      int maxIndex=0;
      if (sum % 2 == 1) {
        maxIndex=0;
        for (int i=1; i < n; i++) {
          if (parties[maxIndex] < parties[i]) {
            maxIndex=i;
          }
        }
        out.printf(""%c "",FIRST_CHAR + ((char)maxIndex));
        sum--;
        parties[maxIndex]--;
      }
      int weak;
      int strong;
      int temp=0;
      while (sum > 0) {
        weak=0;
        strong=1;
        if (parties[0] >= parties[1]) {
          strong=0;
          weak=1;
        }
        for (int i=2; i < n; i++) {
          if (parties[weak] < parties[i]) {
            weak=i;
            if (parties[weak] > parties[strong]) {
              temp=strong;
              strong=weak;
              weak=temp;
            }
          }
        }
        out.printf(""%c%c "",FIRST_CHAR + ((char)weak),FIRST_CHAR + ((char)strong));
        parties[weak]--;
        parties[strong]--;
        sum-=2;
      }
      out.println();
      out.flush();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (in != null)     in.close();
    if (out != null)     out.close();
  }
}
"
30001130,"public static void main(String[] args) throws java.lang.Exception {
  String alphabet=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
  Scanner scn=new Scanner(System.in);
  int $=scn.nextInt();
  for (int cas=0; cas < $; cas++) {
    StringJoiner sj=new StringJoiner("" "");
    int N=scn.nextInt();
    int[] arr=new int[N];
    for (int i=0; i < N; i++) {
      arr[i]=scn.nextInt();
    }
    while (true) {
      String s="""";
      int sum=0;
      for (      int i : arr)       sum+=i;
      if (sum == 0)       break;
      int max=0;
      int ind=-1;
      for (int $$=2 - (sum % 2); $$ > 0; $$--) {
        ind=-1;
        for (int i=0; i < N; i++) {
          if (ind == -1 || arr[i] > max) {
            max=arr[i];
            ind=i;
          }
        }
        s+=alphabet.charAt(ind);
        arr[ind]--;
      }
      sj.add(s);
    }
    System.out.printf(""Case #%d: %s\n"",cas + 1,sj);
  }
}
"
30001131,"public static void main(String[] args){
  Scanner scn=new Scanner(System.in);
  int t=scn.nextInt();
  for (int i=1; i <= t; i++) {
    int n=scn.nextInt();
    ArrayList<Integer> nums=new ArrayList<Integer>();
    double sum=0;
    for (int j=0; j < n; j++) {
      nums.add(scn.nextInt());
      sum+=nums.get(j);
    }
    String plan="""";
    while (sum > 0) {
      sum=0;
      int maxVal=-1;
      int maxLoc=-1;
      for (int j=0; j < n; j++) {
        if (nums.get(j) > maxVal) {
          maxVal=nums.get(j);
          maxLoc=j;
        }
        sum+=nums.get(j);
      }
      if (maxVal > 0) {
        nums.set(maxLoc,maxVal - 1);
        char c=(char)(maxLoc + 65);
        plan+=c;
      }
    }
    String finalPlan="""";
    int cnt=0;
    for (int j=plan.length() - 1; j >= 0; j--) {
      if (cnt > 0 && cnt % 2 == 0) {
        finalPlan="" "" + finalPlan;
      }
      finalPlan=plan.charAt(j) + finalPlan;
      cnt++;
    }
    System.out.println(""Case #"" + i + "": ""+ finalPlan);
  }
  scn.close();
}
"
30001132,"public static void main(String[] args) throws Exception {
  File f=new File(""A-large (1).in"");
  Scanner sc=new Scanner(f);
  int t=sc.nextInt();
  for (int i=0; i < t; i++) {
    int size=sc.nextInt();
    int[] number=new int[size];
    for (int j=0; j < size; j++) {
      number[j]=sc.nextInt();
    }
    System.out.print(""Case #"" + (i + 1) + "": "");
    last(number);
  }
}
"
30001133,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  String[] l={""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""};
  int T=in.nextInt();
  for (int i=0; i < T; i++) {
    System.out.printf(""Case #%d: "",i + 1);
    int N=in.nextInt();
    int[] array=new int[N];
    for (int i1=0; i1 < N; i1++) {
      array[i1]=in.nextInt();
    }
    int[] sen=array;
    int sum=0;
    for (int j=0; j < N; j++) {
      sum+=sen[j];
    }
    while (sum > 0) {
      if (sum > 2 && sum % 2 == 0) {
        int conteo=0;
        for (int j=0; j < N; j++) {
          if (sen[j] == sum / 2) {
            conteo++;
          }
        }
        if (conteo == 2) {
          for (int j=0; j < N; j++) {
            if (sen[j] == sum / 2) {
              sen[j]--;
              System.out.print(l[j]);
            }
          }
          sum=sum - 2;
          System.out.print("" "");
          continue;
        }
      }
      if (sum == 2) {
        for (int j=0; j < N; j++) {
          if (sen[j] > 0) {
            System.out.print(l[j]);
            sen[j]--;
          }
        }
        sum=sum - 2;
        System.out.print("" "");
      }
 else {
        int mayor1=Integer.MIN_VALUE;
        int index=0;
        for (int i1=0; i1 < sen.length; i1++) {
          if (sen[i1] > mayor1) {
            mayor1=sen[i1];
            index=i1;
          }
        }
        int mayor=index;
        System.out.print(l[mayor] + "" "");
        sen[mayor]--;
        sum--;
      }
      for (int j=0; j < N; j++) {
        double p=0;
        if (sum != 0) {
          p=100 * sen[j] / sum;
        }
        if (p > 50)         System.out.println(""ERROOOOOOOOOR"");
      }
    }
    System.out.println();
  }
}
"
30001134,"public static void main(String[] args) throws IOException {
  FileReader fr=new FileReader(""A-large11.in"");
  BufferedReader br=new BufferedReader(fr);
  String s;
  int T;
  if ((s=br.readLine()) != null)   T=Integer.parseInt(s);
 else {
    System.out.println(""File has nothing to read."");
    return;
  }
  if (T < 1 || T > 100) {
    System.out.println(""Improper number of test cases."");
    return;
  }
  int N;
  int arr[], temp[];
  for (int k=0; k < T; k++) {
    if ((s=br.readLine()) != null)     N=Integer.parseInt(s);
 else {
      System.out.println(""File has nothing to read."");
      return;
    }
    arr=new int[N];
    if ((s=br.readLine()) == null) {
      System.out.println(""File has nothing to read."");
      return;
    }
    Scanner sc;
    sc=new Scanner(s);
    int p=0;
    while (sc.hasNext()) {
      arr[p]=sc.nextInt();
      p++;
    }
    int tot, max, secmax;
    tot=0;
    for (int i=0; i < N; i++)     tot+=arr[i];
    int print[];
    int printIndex;
    print=new int[2002];
    Arrays.fill(print,-1);
    printIndex=0;
    while (true) {
      int maxpos, secmaxpos;
      maxpos=0;
      max=arr[0];
      for (int i=1; i < N; i++) {
        if (arr[i] > max) {
          max=arr[i];
          maxpos=i;
        }
      }
      boolean flag, tflag;
      tflag=false;
      flag=false;
      int tcount;
      tcount=0;
      if (max == 1) {
        int count;
        count=0;
        for (int i=0; i < N; i++) {
          if (arr[i] == 1)           count++;
          if (arr[i] == 0)           tcount++;
        }
        if (tcount == N) {
          tflag=true;
          break;
        }
        if (count == 3)         flag=true;
      }
      if (!flag) {
        print[printIndex++]=maxpos;
        secmax=-1;
        secmaxpos=0;
        for (int i=0; i < N; i++) {
          if (i != maxpos && arr[i] > secmax) {
            secmax=arr[i];
            secmaxpos=i;
          }
        }
        print[printIndex++]=secmaxpos;
        arr[maxpos]--;
        arr[secmaxpos]--;
        print[printIndex++]=-2;
      }
 else {
        print[printIndex++]=maxpos;
        arr[maxpos]--;
        print[printIndex++]=-2;
        for (int i=0; i < N; i++)         if (arr[i] == 1) {
          print[printIndex++]=i;
          arr[i]--;
        }
        break;
      }
      tot=0;
      for (int i=0; i < N; i++)       tot+=arr[i];
      if (tot == 0)       break;
    }
    System.out.print(""Case #"" + (k + 1) + "": "");
    for (int j=0; j < 2000 && print[j] != -1; j++)     if (print[j] != -2)     System.out.print(((char)(print[j] + 65)));
 else     System.out.print("" "");
    System.out.println();
  }
}
"
30001135,"public static void main(String[] args){
  if (args.length == 0) {
    System.out.println(""No arguments provided"");
    return;
  }
  try {
    File file=new File(args[0]);
    Scanner input=new Scanner(file);
    FileWriter fileOut=new FileWriter(""output.txt"");
    BufferedWriter writer=new BufferedWriter(fileOut);
    int numTests=input.nextInt();
    int i;
    for (i=0; i < numTests; i++) {
      System.out.println(""\nTest #"" + i);
      int numParties=input.nextInt();
      int[] partyMembersOutside=new int[numParties];
      int totalMembers=0;
      int j;
      for (j=0; j < numParties; j++) {
        partyMembersOutside[j]=input.nextInt();
        totalMembers+=partyMembersOutside[j];
      }
      int membersInside=0;
      ArrayList<String> entries=new ArrayList<String>();
      int k;
      for (k=0; k < numParties; k++) {
        System.out.println(k);
        while (partyMembersOutside[k] > 0) {
          int m;
          boolean added=false;
          for (m=k + 1; m < numParties && !added; m++) {
            if (partyMembersOutside[m] > 0) {
              partyMembersOutside[m]--;
              partyMembersOutside[k]--;
              char charM=(char)(65 + m);
              char charK=(char)(65 + k);
              String entry="" "" + charM + charK;
              System.out.println(entry);
              entries.add(entry);
              added=true;
            }
          }
          while (!added && partyMembersOutside[k] > 0) {
            char charK=(char)(65 + k);
            partyMembersOutside[k]--;
            String entry="" "" + charK;
            entries.add(entry);
          }
        }
      }
      Collections.reverse(entries);
      writer.write(""Case #"" + (i + 1) + "":"");
      for (      String string : entries) {
        writer.write(string);
      }
      writer.write(""\n"");
    }
    writer.close();
    fileOut.close();
    input.close();
  }
 catch (  FileNotFoundException e) {
    System.out.println(""Error reading input file"");
  }
catch (  IOException e) {
    System.out.println(""Error writing output"");
  }
}
"
30001136,"public static void main(String[] args){
  A a=new A();
  try {
    BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
    BufferedWriter out=new BufferedWriter(new FileWriter(""A-large.in"".split(""\\."")[0] + ""_output.txt""));
    String s;
    if ((s=br.readLine()) != null) {
      int noLines=Integer.parseInt(s);
      if (noLines != 0) {
        for (int index=0; index < noLines; index++) {
          if ((s=br.readLine()) != null) {
            String outputString=""Case #"" + (index + 1) + "": "";
            int inputParties=Integer.parseInt(s.trim());
            String inputString=br.readLine().trim();
            String[] tokenizer=inputString.split("" "");
            HashMap<Character,Integer> hmIn=new HashMap<Character,Integer>();
            for (int i=0; i < inputParties; i++) {
              hmIn.put((char)('A' + i),Integer.parseInt(tokenizer[i]));
            }
            String output="""";
            while (hmIn.size() > 2) {
              int maxValueInMap=(Collections.max(hmIn.values()));
              for (Iterator<HashMap.Entry<Character,Integer>> it=hmIn.entrySet().iterator(); it.hasNext(); ) {
                HashMap.Entry<Character,Integer> entry=it.next();
                if (entry.getValue() == maxValueInMap) {
                  output=output + entry.getKey() + "" "";
                  if (entry.getValue() == 1) {
                    it.remove();
                    break;
                  }
 else {
                    entry.setValue(entry.getValue() - 1);
                  }
                }
              }
            }
            if (hmIn.size() == 2) {
              int key1=-1, key2=-1;
              Character key1c=' ', key2c=' ';
              for (              Character key : hmIn.keySet()) {
                if (key1 == -1) {
                  key1=hmIn.get(key);
                  key1c=key;
                }
 else {
                  key2=hmIn.get(key);
                  key2c=key;
                }
              }
              if (key1 > key2) {
                for (int i=0; i < (key1 - key2); i++)                 output+=key1c + "" "";
              }
              if (key2 > key1) {
                for (int i=0; i < (key2 - key1); i++)                 output+=key2c + "" "";
              }
              if (key1 == key2) {
                for (int i=0; i < key1; i++)                 output+=key1c + """" + key2c+ "" "";
              }
            }
            String output1=output.trim();
            outputString+=output1;
            System.out.println(outputString);
            out.write(outputString);
            out.newLine();
          }
        }
      }
    }
    out.close();
    br.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001137,"public static void main(String[] args){
  Scanner in=null;
  PrintStream out=null;
  if (TEST) {
    in=new Scanner(System.in);
    out=System.out;
  }
 else {
    try {
      in=new Scanner(new File(DOWNLOADS + FILE + "".in""));
      out=new PrintStream(new BufferedOutputStream(new FileOutputStream(DOWNLOADS + FILE + "".out"")),true);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
  int t=in.nextInt();
  for (int tc=1; tc <= t; tc++) {
    int n=in.nextInt();
    int[] p=new int[n];
    int sum=0;
    for (int i=0; i < n; i++) {
      p[i]=in.nextInt();
      sum=sum + p[i];
    }
    StringBuilder sb=new StringBuilder();
    int exit=0;
    while (sum > 0) {
      int max=0;
      int maxP1=-1;
      for (int i=0; i < p.length; i++) {
        if (p[i] > max) {
          max=p[i];
          maxP1=i;
        }
      }
      int maxP=maxP1;
      p[maxP]--;
      sum--;
      sb.append((char)(maxP + (int)'A'));
      exit++;
      if (exit == 2 || sum == 2) {
        exit=0;
        sb.append(' ');
      }
    }
    out.println(String.format(""Case #%d: %s"",tc,sb.toString()));
  }
  in.close();
  out.close();
  System.exit(0);
}
"
30001138,"public static void main(String[] args){
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  String s;
  int lineCount=0;
  int testCases=0;
  int currentTest=1;
  String parties="""";
  String partyMembers="""";
  try {
    while ((s=in.readLine()) != null && s.length() != 0) {
      if (lineCount == 0) {
        testCases=Integer.parseInt(s);
      }
 else {
        if (parties.equalsIgnoreCase("""")) {
          parties=s;
        }
 else {
          if (partyMembers.equalsIgnoreCase("""")) {
            partyMembers=s;
            System.out.print(""Case #"" + currentTest + "":"");
            int partiesInt=Integer.parseInt(parties);
            int[] partymemersInt=new int[partiesInt];
            String[] partymemersString=partyMembers.split("" "");
            for (int i=0; i < partiesInt; i++) {
              partymemersInt[i]=Integer.parseInt(partymemersString[i]);
            }
            LinkedList<String> evacuationPlan=new LinkedList<String>();
            boolean contin=true;
            while (contin) {
              int biggest=0;
              int nextBiggest=0;
              int biggestParty=0;
              int nextBiggestParty=0;
              int totalMembers=0;
              for (int i=0; i < partiesInt; i++) {
                if (partymemersInt[i] >= biggest) {
                  nextBiggest=biggest;
                  nextBiggestParty=biggestParty;
                  biggestParty=i;
                  biggest=partymemersInt[i];
                }
                totalMembers+=partymemersInt[i];
              }
              if (biggest == nextBiggest) {
                if (biggestParty > nextBiggestParty) {
                  int tmp=biggestParty;
                  biggestParty=nextBiggestParty;
                  nextBiggestParty=tmp;
                }
              }
              if (partymemersInt[biggestParty] == 0) {
                contin=false;
              }
              int evacA=-1;
              int evacB=-1;
              if (partymemersInt[biggestParty] > 0) {
                partymemersInt[biggestParty]--;
                evacA=biggestParty;
              }
              int membersAfterEvacA=0;
              for (int i=0; i < partymemersInt.length; i++) {
                membersAfterEvacA+=partymemersInt[i];
              }
              if (membersAfterEvacA != 2) {
                if (partymemersInt[nextBiggestParty] > 0) {
                  partymemersInt[nextBiggestParty]--;
                  evacB=nextBiggestParty;
                }
              }
              if (contin) {
                evacuationPlan.add(evacA + "" "" + evacB);
              }
            }
            for (            String string : evacuationPlan) {
              String[] paty=string.split("" "");
              if (paty.length > 0) {
                int patyF=Integer.parseInt(paty[0]);
                if (patyF > -1 && patyF < partyNames.length) {
                  System.out.print("" "");
                  System.out.print(partyNames[patyF]);
                }
                if (paty.length > 1) {
                  int patyB=Integer.parseInt(paty[1]);
                  if (patyB > -1 && patyB < partyNames.length) {
                    System.out.print(partyNames[patyB]);
                  }
                }
              }
            }
            System.out.println("""");
            parties="""";
            partyMembers="""";
            currentTest++;
          }
        }
      }
      lineCount++;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001139,"public static void main(String[] args){
  int T=scanner.nextInt();
  for (int t=1; t <= T; t++) {
    out.print(""Case #"" + t + "": "");
    int N=scanner.nextInt();
    final int[] counts=new int[N];
    for (int i=0; i < N; i++) {
      counts[i]=scanner.nextInt();
    }
    PriorityQueue<Integer> pq=new PriorityQueue<>(N,new Comparator<Integer>(){
      @Override public int compare(      Integer i1,      Integer i2){
        return counts[i2] - counts[i1];
      }
    }
);
    for (int i=0; i < N; i++) {
      pq.add(i);
    }
    while (!pq.isEmpty()) {
      int p1=pq.poll();
      if (counts[p1] == 1 && pq.size() == 2) {
        out.print((char)('A' + p1));
        out.print(' ');
        counts[p1]--;
        continue;
      }
      if (counts[pq.peek()] == counts[p1]) {
        int p2=pq.poll();
        out.print((char)('A' + p1));
        out.print((char)('A' + p2));
        out.print(' ');
        counts[p1]--;
        counts[p2]--;
        if (counts[p1] > 0) {
          pq.add(p1);
        }
        if (counts[p2] > 0) {
          pq.add(p2);
        }
      }
 else {
        out.print((char)('A' + p1));
        out.print(' ');
        counts[p1]--;
        if (counts[p1] > 0) {
          pq.add(p1);
        }
      }
    }
    out.println();
  }
}
"
30001140,"public static void main(String[] args){
  List<String> fileContent=null;
  try {
    fileContent=Files.readAllLines(Paths.get(inputFileName),charset);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  int noOfCase=Integer.parseInt(fileContent.get(0));
  List<String> outputLines=new ArrayList<String>();
  Path outputFiles=Paths.get(outputFileName);
  int currentReadingLine=0;
  for (int i=0; i < noOfCase; i++) {
    currentReadingLine++;
    int noOfParties=Integer.parseInt(fileContent.get(currentReadingLine));
    currentReadingLine++;
    String partiesSize[]=((String)fileContent.get(currentReadingLine)).split("" "");
    int totalNoOfSenator=0;
    int partiesSizeInt[]=new int[noOfParties];
    for (int j=0; j < noOfParties; j++) {
      int partySize=Integer.parseInt(partiesSize[j]);
      partiesSizeInt[j]=partySize;
      totalNoOfSenator+=partySize;
    }
    int counter=0;
    StringBuffer evacuationFlow=new StringBuffer();
    while (totalNoOfSenator > 0) {
      int maxParty=-1;
      int maxPartyPerson=0;
      for (int j=0; j < noOfParties; j++) {
        if (partiesSizeInt[j] > maxPartyPerson) {
          maxParty=j;
          maxPartyPerson=partiesSizeInt[j];
        }
      }
      if (maxParty != -1) {
        char senator=(char)(maxParty + 65);
        partiesSizeInt[maxParty]=partiesSizeInt[maxParty] - 1;
        totalNoOfSenator--;
        boolean overRatio=false;
        if (totalNoOfSenator >= 1) {
          for (int j=0; j < noOfParties; j++) {
            if ((partiesSizeInt[j] / totalNoOfSenator) > 0.5) {
              overRatio=true;
            }
          }
        }
        if (overRatio) {
          if (counter % 2 != 0) {
            evacuationFlow.append(' ');
          }
          evacuationFlow.append(senator);
          counter=0;
        }
 else {
          evacuationFlow.append(senator);
        }
        counter++;
        if (counter % 2 == 0) {
          evacuationFlow.append(' ');
        }
      }
    }
    String answer=""Case #"" + (i + 1) + "": ""+ evacuationFlow.toString().trim();
    System.out.println(answer);
    outputLines.add(answer);
  }
  try {
    Files.write(outputFiles,outputLines,charset);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001141,"public static void main(String[] args){
  try {
    String inputName=""A-large (2).in"";
    BufferedReader input=new BufferedReader(new FileReader(inputName));
    BufferedWriter output=new BufferedWriter(new FileWriter(""output.txt""));
    String line=input.readLine();
    int testNr=new Integer(line).intValue();
    for (int i=0; i < testNr; i++) {
      SenateEvacuation test=new SenateEvacuation();
      line=input.readLine();
      int N=new Integer(line).intValue();
      line=input.readLine();
      String[] parts=line.split("" "");
      int[] P=new int[parts.length];
      int count=0;
      for (int i2=0; i2 < N; i2++) {
        P[i2]=new Integer(parts[i2]).intValue();
        count+=P[i2];
      }
      StringBuffer sb=new StringBuffer();
      if (N == 2) {
        for (int i1=0; i1 < P[0]; i1++) {
          if (i1 > 0)           sb.append("" "");
          sb.append(""AB"");
        }
      }
 else {
        boolean first=true;
        while (count > 0) {
          if (count < 3) {
            if (!first) {
              sb.append("" "");
            }
            for (int i4=0; i4 < N; i4++) {
              if (P[i4] > 0)               sb.append((char)('A' + i4));
            }
            count=0;
          }
 else           if (count == 3) {
            if (!first) {
              sb.append("" "");
            }
 else             first=false;
            boolean found=false;
            for (int i3=0; !found && i3 < N; i3++) {
              if (P[i3] > 0) {
                sb.append((char)('A' + i3));
                P[i3]-=1;
                count-=1;
                found=true;
              }
            }
          }
 else {
            int max_index=0;
            int max=P[0];
            int max_index2=0;
            int max2=P[0];
            if (P[1] > P[0]) {
              max_index=1;
              max=P[1];
            }
 else {
              max_index2=1;
              max2=P[1];
            }
            for (int i5=2; i5 < N; i5++) {
              if (P[i5] > max) {
                max2=max;
                max_index2=max_index;
                max=P[i5];
                max_index=i5;
              }
 else               if (P[i5] > max2) {
                max2=P[i5];
                max_index2=i5;
              }
            }
            if (!first) {
              sb.append("" "");
            }
 else             first=false;
            sb.append((char)('A' + max_index));
            sb.append((char)('A' + max_index2));
            P[max_index]-=1;
            P[max_index2]-=1;
            count-=2;
          }
        }
      }
      String res=sb.toString();
      String toWrite=""Case #"" + (i + 1) + "": ""+ res;
      System.out.println(toWrite);
      output.write(toWrite + ""\n"");
    }
    output.flush();
    output.close();
    input.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001142,"public static void main(String[] args){
  String fileName=""A-large.in"";
  try (BufferedReader br=new BufferedReader(new FileReader(fileName))){
    try (BufferedWriter bw=new BufferedWriter(new FileWriter(fileName + "".out""))){
      int tests=Integer.valueOf(br.readLine());
      for (int test=1; test <= tests; ++test) {
        int n=new Scanner(br.readLine()).nextInt();
        Scanner scanner=new Scanner(br.readLine());
        int s[]=new int[n];
        for (int i=0; i < n; ++i)         s[i]=scanner.nextInt();
        bw.write(""Case #"" + test + "": "");
        while (true) {
          int max=0;
          for (          int ss : s)           max=Math.max(max,ss);
          if (max == 0)           break;
          ArrayList<Integer> pos=new ArrayList<Integer>();
          for (int i=0; i < n; ++i) {
            if (s[i] == max)             pos.add(i);
          }
          int ps=pos.size();
          if (pos.size() % 2 == 1) {
            ps--;
            int cur=pos.get(pos.size() - 1);
            s[cur]--;
            bw.write("""" + (char)('A' + cur) + "" "");
          }
          for (int i=0; i < ps; i+=2) {
            int c1=pos.get(i);
            int c2=pos.get(i + 1);
            s[c1]--;
            s[c2]--;
            bw.write("""" + (char)('A' + c1) + (char)('A' + c2)+ "" "");
          }
        }
        bw.write(""\n"");
      }
      bw.close();
    }
   }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001143,"public static void main(String[] args) throws IOException {
  BufferedReader bf=new BufferedReader(new FileReader(""input.in""));
  String input=null;
  String count=null;
  FileWriter fw=new FileWriter(""output.out"");
  count=bf.readLine();
  for (int i=0; i < Integer.parseInt(count); i++) {
    ArrayList<Integer> party=new ArrayList<Integer>();
    String a=bf.readLine();
    String b=bf.readLine();
    String[] alls=b.split("" "");
    Integer totals=0;
    for (int i1=0; i1 < alls.length; i1++) {
      party.add(Integer.parseInt(alls[i1]));
      totals+=Integer.parseInt(alls[i1]);
    }
    fw.write(""Case #"" + (i + 1) + "": "");
    while (totals > 0) {
      int maxd=0;
      int mark=-1;
      Integer max2d=0;
      int mark2=-1;
      for (int i1=0; i1 < party.size(); i1++) {
        if (party.get(i1) > maxd) {
          maxd=party.get(i1);
          mark=i1;
          continue;
        }
        if ((party.get(i1) <= maxd) && (party.get(i1) > max2d)) {
          max2d=party.get(i1);
          mark2=i1;
          continue;
        }
      }
      totals--;
      party.set(mark,party.get(mark) - 1);
      char c=65;
      c+=mark;
      String outputs="""" + c;
      String d=max2d.toString();
      Double prob=Double.parseDouble(d);
      if (prob / totals > 0.5) {
        totals--;
        party.set(mark2,party.get(mark2) - 1);
        char c2=65;
        c2+=mark2;
        outputs=outputs + c2;
      }
      fw.write(outputs + "" "");
    }
    fw.write(""\n"");
  }
  bf.close();
  fw.close();
}
"
30001144,"public static void main(String[] args) throws Exception {
  BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(bf.readLine());
  final StringBuilder[] results=new StringBuilder[T];
  for (int testcase=1; testcase <= T; testcase++) {
    int N=Integer.parseInt(bf.readLine());
    int[] counts=new int[N];
    String[] line=bf.readLine().split("" "");
    int sum=0;
    for (int i=0; i < N; i++) {
      counts[i]=Integer.parseInt(line[i]);
      sum+=counts[i];
    }
    StringBuilder output=new StringBuilder();
    while (sum != 3 && sum != 0) {
      int firstMax=0;
      int secondMax=0;
      int firstMaxIdx=-1;
      int secondMaxIdx=-1;
      for (int i=0; i < N; i++) {
        if (counts[i] > firstMax) {
          firstMax=counts[i];
          firstMaxIdx=i;
        }
      }
      counts[firstMaxIdx]--;
      for (int i=0; i < N; i++) {
        if (counts[i] > secondMax) {
          secondMax=counts[i];
          secondMaxIdx=i;
        }
      }
      counts[secondMaxIdx]--;
      char firstChar=(char)('A' + firstMaxIdx);
      char secondChar=(char)('A' + secondMaxIdx);
      sum-=2;
      output.append(firstChar + """" + secondChar+ "" "");
    }
    if (sum == 3) {
      int max=0;
      int maxIdx=-1;
      for (int i=0; i < N; i++) {
        if (counts[i] > max) {
          max=counts[i];
          maxIdx=i;
        }
      }
      counts[maxIdx]--;
      sum--;
      char maxChar=(char)('A' + maxIdx);
      output.append(maxChar + "" "");
      for (int i=0; i < N; i++) {
        if (counts[i] > 0) {
          char lastChar=(char)('A' + i);
          output.append(lastChar);
        }
      }
    }
    results[testcase - 1]=output;
  }
  for (int testcase=1; testcase <= T; testcase++) {
    System.out.println(""Case #"" + testcase + "": ""+ results[testcase - 1].toString());
  }
}
"
30001145,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int loops=in.nextInt();
  for (int loop=1; loop <= loops; ++loop) {
    int n=in.nextInt();
    int[] parties=new int[n];
    int sum=0;
    for (int i=0; i < n; i++) {
      parties[i]=in.nextInt();
      sum+=parties[i];
    }
    int[] evac1=new int[(sum / 2) + 1];
    int[] evac2=new int[(sum / 2) + 1];
    int evac=0;
    int original=sum;
    while (sum > 0) {
      int max=(parties[0] > parties[1] ? 0 : 1);
      int second=(parties[0] > parties[1] ? 1 : 0);
      for (int i=2; i < n; i++) {
        if (parties[i] > max) {
          second=max;
          max=i;
        }
 else         if (parties[i] > second) {
          second=i;
        }
      }
      if (sum % 2 == 1) {
        evac1[evac]=max;
        evac2[evac]=-1;
        parties[max]-=1;
        sum-=1;
      }
 else {
        evac1[evac]=max;
        evac2[evac]=second;
        parties[max]-=1;
        parties[second]-=1;
        sum-=2;
      }
      evac++;
    }
    StringBuilder builder=new StringBuilder();
    builder.append(String.format(""Case #%1$s:"",loop));
    for (int i=0; i < (original / 2) + (original % 2 == 1 ? 1 : 0); i++) {
      builder.append(' ');
      builder.append((char)('A' + evac1[i]));
      if (evac2[i] != -1)       builder.append((char)('A' + evac2[i]));
    }
    System.out.println(builder.toString());
  }
  in.close();
}
"
30001146,"public static void main(String args[]) throws IOException {
}
"
30001147,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=0; t < T; t++) {
    int N=in.nextInt();
    ArrayList<Integer> A=new ArrayList<Integer>();
    for (int n=0; n < N; n++) {
      A.add(in.nextInt());
    }
    String S="""";
    int count_notzeroes=N;
    while (true) {
      if (count_notzeroes == 2) {
        int x=0, y=1;
        for (int i=0; i < N; i++) {
          if (A.get(i) != 0)           x=i;
        }
        for (int i=0; i < N; i++) {
          if (A.get(i) != 0 && i != x)           y=i;
        }
        while (A.get(x) != 0 && A.get(y) != 0) {
          if (A.get(x) == A.get(y)) {
            S=S + "" "" + (char)(x + 65)+ (char)(y + 65);
            A.set(x,A.get(x) - 1);
            A.set(y,A.get(y) - 1);
          }
 else           if (A.get(x) > A.get(y)) {
            S=S + "" "" + (char)(x + 65);
            A.set(x,A.get(x) - 1);
          }
 else           if (A.get(x) < A.get(y)) {
            S=S + "" "" + (char)(y + 65);
            A.set(y,A.get(y) - 1);
          }
        }
        break;
      }
 else {
        int max_index;
        int max;
        max=A.get(0);
        max_index=0;
        for (int i=0; i < N; i++) {
          if (max < A.get(i)) {
            max=A.get(i);
            max_index=i;
          }
        }
        A.set(max_index,A.get(max_index) - 1);
        if (A.get(max_index) == 0) {
          count_notzeroes--;
        }
        S=S + "" "" + (char)(max_index + 65);
      }
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ S.substring(1));
  }
}
"
30001148,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int tc=in.nextInt();
  int temp=tc;
  while (tc-- != 0) {
    int n=in.nextInt();
    int a[]=new int[n];
    String s="""";
    for (int i=0; i < n; i++) {
      a[i]=in.nextInt();
    }
    while (true) {
      int m1=0;
      int m2=-1;
      for (int i=1; i < n; i++) {
        if (a[i] > a[m1]) {
          m1=i;
        }
      }
      for (int i=0; i < n; i++) {
        if (a[i] == a[m1] && m1 != i) {
          m2=i;
        }
      }
      s=s + (char)(65 + m1);
      a[m1]--;
      int count=0;
      for (int i=0; i < n; i++) {
        if (a[i] == 1) {
          count++;
        }
        if (a[i] != 1 && a[i] != 0) {
          count+=3;
        }
      }
      if (m2 != -1 && count == 2) {
        s=s + (char)(65 + m2);
        a[m2]--;
      }
      s=s + "" "";
      boolean flag=true;
      for (int i=0; i < n; i++) {
        if (a[i] != 0) {
          flag=false;
          break;
        }
      }
      if (flag)       break;
    }
    System.out.println(""Case #"" + (temp - tc) + "": ""+ s);
  }
  in.close();
}
"
30001149,"public static void main(String[] args) throws IOException {
  BufferedReader bf=new BufferedReader(new FileReader(""A-small-attempt2.in""));
  int t=Integer.parseInt(bf.readLine());
  PrintWriter out=new PrintWriter(new FileWriter(""smallA.txt""));
  for (int c=1; c <= t; c++) {
    int n=Integer.parseInt(bf.readLine());
    int p[]=new int[n];
    StringTokenizer st=new StringTokenizer(bf.readLine());
    out.printf(""Case #%d:"",c);
    for (int i=0; i < n; i++)     p[i]=Integer.parseInt(st.nextToken());
    int max=0;
    int maxi=0;
    int max2=0;
    int max2i=0;
    int sum=0;
    do {
      max=0;
      maxi=0;
      max2=0;
      max2i=0;
      sum=0;
      for (int i=0; i < n; i++) {
        int x=p[i];
        sum+=x;
        if (x > max) {
          max2=max;
          max2i=maxi;
          max=x;
          maxi=i;
        }
 else         if (x > max2) {
          max2=x;
          max2i=i;
        }
      }
      if (max > 0) {
        out.print("" "" + ((char)('A' + maxi)));
        max--;
        p[maxi]--;
        if (max2 > max && max2 > 0 && max2 - 1 <= (sum - 2) / 2.0 && sum != 3) {
          out.print(((char)('A' + max2i)));
          p[max2i]--;
          continue;
        }
        if (max - 1 <= (sum - 2) / 2.0 && max > 0 && sum != 3) {
          out.print(((char)('A' + maxi)));
          max--;
          p[maxi]--;
        }
      }
    }
 while (sum != 0);
    out.println();
  }
  out.flush();
  out.close();
}
"
30001150,"public static void main(String[] args) throws Exception {
  String fileName=args[0];
  ProblemA obj=new ProblemA();
  BufferedReader br=new BufferedReader(new FileReader(fileName));
  BufferedWriter bw=new BufferedWriter(new FileWriter(fileName + "".out""));
  int T=Integer.parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    int N=Integer.parseInt(br.readLine());
    int[] P=new int[N];
    String str=br.readLine();
    StringTokenizer token=new StringTokenizer(str,"" "");
    int cnt=0;
    for (int j=0; j < N; j++) {
      P[j]=Integer.parseInt(token.nextToken());
      cnt+=P[j];
    }
    StringBuffer buf=new StringBuffer();
    while (cnt > 0) {
      int max_j=-1;
      int max=0;
      for (int j=0; j < N; j++) {
        if (P[j] > max) {
          max_j=j;
          max=P[j];
        }
      }
      P[max_j]--;
      cnt--;
      buf.append((char)('A' + max_j));
      if (cnt <= 0) {
        break;
      }
      if (cnt == 2) {
        buf.append(' ');
        continue;
      }
      max_j=-1;
      max=0;
      for (int j=0; j < N; j++) {
        if (P[j] > max) {
          max_j=j;
          max=P[j];
        }
      }
      P[max_j]--;
      cnt--;
      buf.append((char)('A' + max_j));
      if (cnt > 0) {
        buf.append(' ');
      }
    }
    bw.write(""Case #"" + (i + 1) + "": ""+ buf.toString());
    bw.write(""\r\n"");
  }
  bw.close();
  br.close();
}
"
30001151,"public static void main(String args[]){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  int re[]=new int[27];
  int n=0;
  int max1=0;
  int maxf1=0;
  int max2=0;
  int maxf2=0;
  int sum=0;
  int temp='A' - 1;
  for (int i=1; i <= t; i++) {
    n=in.nextInt();
    Arrays.fill(re,0);
    max1=0;
    maxf1=0;
    max2=0;
    maxf2=0;
    sum=0;
    System.out.print(""Case #"" + i + "": "");
    for (int j=1; j <= n; j++) {
      re[j]=in.nextInt();
      sum+=re[j];
      if (max1 <= re[j]) {
        max2=max1;
        maxf2=maxf1;
        max1=re[j];
        maxf1=j;
      }
    }
    if (maxf1 == 1) {
      for (int j=2; j <= n; j++) {
        if (max2 <= re[j]) {
          max2=re[j];
          maxf2=j;
        }
      }
    }
    while (sum != 0) {
      if (sum != 3) {
        re[maxf1]--;
        max1--;
        System.out.printf(""%c"",(maxf1 + temp));
        if (max1 >= max2) {
          re[maxf1]--;
          max1--;
          System.out.printf(""%c "",(maxf1 + temp));
        }
 else {
          re[maxf2]--;
          max2--;
          System.out.printf(""%c "",(maxf2 + temp));
        }
        sum-=2;
      }
 else {
        sum--;
        re[maxf1]--;
        max1--;
        System.out.printf(""%c "",(maxf1 + temp));
      }
      for (int j=1; j <= n; j++) {
        if (max1 <= re[j] && maxf1 != j) {
          max2=max1;
          maxf2=maxf1;
          max1=re[j];
          maxf1=j;
        }
      }
    }
    System.out.println();
  }
}
"
30001152,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new File(""A-large.in""));
  PrintWriter fileOut=new PrintWriter(new FileWriter(""SenateLarge.out""));
  int T=in.nextInt();
  for (int test=1; test <= T; test++) {
    int N=in.nextInt();
    ArrayList<Integer> all=new ArrayList<Integer>();
    int total=0;
    for (int m=0; m < N; m++) {
      int num=in.nextInt();
      total+=num;
      all.add(num);
    }
    fileOut.printf(""Case #%d: "",test);
    while (total != 0) {
      int max=0;
      int secondI=0;
      boolean secondUsed=false;
      for (int i=0; i < N; i++) {
        if (all.get(i) >= all.get(max))         max=i;
        if (all.get(i) >= total / 2.0 && !secondUsed) {
          secondI=i;
          secondUsed=true;
        }
      }
      if (secondUsed && secondI != max) {
        all.set(max,all.get(max) - 1);
        char c=(char)(max + 'A');
        fileOut.print(c);
        total--;
        all.set(secondI,all.get(secondI) - 1);
        c=(char)(secondI + 'A');
        fileOut.print(c + "" "");
        total--;
      }
 else {
        all.set(max,all.get(max) - 1);
        char c=(char)(max + 'A');
        fileOut.print(c + "" "");
        total--;
      }
    }
    fileOut.println();
  }
  fileOut.close();
}
"
30001153,"public static void main(String[] args){
  Scanner keyboard=new Scanner(System.in);
  int T, N;
  int[] senates;
  T=keyboard.nextInt();
  keyboard.nextLine();
  for (int i=0; i < T; i++) {
    N=keyboard.nextInt();
    senates=new int[N];
    for (int j=0; j < N; j++)     senates[j]=keyboard.nextInt();
    System.out.print(""Case #"" + (i + 1) + "": "");
    boolean continuing=true;
    int maxid, maxid2, equals;
    while (continuing) {
      maxid=0;
      maxid2=-1;
      equals=0;
      for (int i2=1; i2 < senates.length; i2++) {
        if (senates[i2] > senates[maxid]) {
          maxid=i2;
          equals=0;
        }
 else         if (senates[i2] == senates[maxid]) {
          equals++;
          maxid2=i2;
        }
      }
      if (equals > 0 && senates[maxid] > 1) {
        System.out.print(Character.toChars(maxid + 65));
        System.out.print(Character.toChars(maxid2 + 65));
        System.out.print("" "");
        senates[maxid]-=1;
        senates[maxid2]-=1;
      }
 else       if (senates[maxid] > 1) {
        System.out.print(Character.toChars(maxid + 65));
        System.out.print(Character.toChars(maxid + 65));
        System.out.print("" "");
        senates[maxid]-=2;
      }
 else       if (equals == 2) {
        System.out.print(Character.toChars(maxid + 65));
        System.out.print("" "");
        senates[maxid]-=1;
      }
 else       if (equals > 0) {
        System.out.print(Character.toChars(maxid + 65));
        System.out.print(Character.toChars(maxid2 + 65));
        System.out.print("" "");
        senates[maxid]-=1;
        senates[maxid2]-=1;
      }
 else {
        System.out.print(Character.toChars(maxid + 65));
        System.out.print("" "");
        senates[maxid]-=1;
      }
      continuing=false;
      for (int i1=0; i1 < senates.length; i1++) {
        if (senates[i1] > 0)         continuing=true;
      }
    }
    System.out.println();
  }
  keyboard.close();
}
"
30001154,"public static void main(String[] args){
  String in=""./A-large.in"";
  String out=""./A-large.out"";
  try {
    BufferedReader br=new BufferedReader(new FileReader(in));
    FileWriter fw=new FileWriter(out);
    int T=Integer.parseInt(br.readLine());
    for (int i=0; i < T; i++) {
      System.out.print(""Case #"" + (i + 1) + "": "");
      fw.write(""Case #"" + (i + 1) + "": "");
      int N=Integer.parseInt(br.readLine());
      String[] strP=br.readLine().split("" "");
      Map<Character,Integer> P=new HashMap<>();
      int total=0;
      for (int j=0; j < N; j++) {
        P.put((char)('A' + j),Integer.parseInt(strP[j]));
        total+=Integer.parseInt(strP[j]);
      }
      while (total > 0) {
        for (int k=0; k < 2; k++) {
          for (int j=0; j < N; j++) {
            char p=(char)('A' + j);
            if (P.get(p) == 0)             continue;
            double offset=((double)(total - 1) / 2);
            boolean valid=true;
            if (k != total) {
              for (int l=0; l < N; l++) {
                if (l != j) {
                  char p1=(char)('A' + l);
                  if (P.get(p1) > offset && k == 1) {
                    valid=false;
                    break;
                  }
                }
              }
            }
            if (valid) {
              System.out.print(p);
              fw.write(p);
              total--;
              P.put(p,P.get(p) - 1);
              break;
            }
          }
        }
        System.out.print(' ');
        fw.write(' ');
      }
      System.out.print(""\n"");
      fw.write(""\n"");
    }
    fw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001155,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    System.out.print(""Case #"" + i + "":"");
    TreeMap<Integer,ArrayList<Integer>> map=new TreeMap<Integer,ArrayList<Integer>>();
    int n=in.nextInt();
    int total=0;
    for (int j=0; j < n; ++j) {
      int p=in.nextInt();
      ArrayList<Integer> tmp=map.get(p);
      if (tmp == null) {
        tmp=new ArrayList<Integer>();
        map.put(p,tmp);
      }
      tmp.add(j);
      total+=p;
    }
    while (total != 0) {
      Map.Entry<Integer,ArrayList<Integer>> entry=map.lastEntry();
      int key=entry.getKey();
      ArrayList<Integer> value=entry.getValue();
      ArrayList<Integer> tmp=map.get(key - 1);
      if (tmp == null) {
        tmp=new ArrayList<Integer>();
        map.put(key - 1,tmp);
      }
      boolean hasSingleOne=value.size() % 2 == 1;
      for (int index=0; index < value.size(); ++index) {
        System.out.print("" "" + (char)('A' + value.get(index)));
        tmp.add(value.get(index));
        total--;
        if (hasSingleOne) {
          hasSingleOne=false;
        }
 else {
          index++;
          System.out.print((char)('A' + value.get(index)));
          tmp.add(value.get(index));
          total--;
        }
      }
      map.remove(key);
    }
    System.out.print(""\n"");
  }
}
"
30001156,"public static void main(final String[] args){
  ProblemA app=new ProblemA();
  try {
    try (BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(ProblemA.INPUT_PATH))))){
      List<String> answerList=new ArrayList<String>();
      int testCaseCount=Integer.parseInt(br.readLine());
      testCaseCount=50;
      for (int testCaseIndex=0; testCaseIndex < testCaseCount; testCaseIndex++) {
        int n=Integer.parseInt(br.readLine());
        int[] elem=new int[n];
        String[] line=br.readLine().split("" "");
        for (int i=0; i < n; i++) {
          elem[i]=Integer.parseInt(line[i]);
        }
        StringBuilder sb=new StringBuilder();
        while (true) {
          int max=1;
          List<Integer> maxIndexes=new ArrayList<>();
          int lastCount=0;
          for (int i=0; i < n; i++) {
            lastCount+=elem[i];
            if (max < elem[i]) {
              max=elem[i];
              maxIndexes=new ArrayList<>();
              maxIndexes.add(i);
            }
 else             if (max == elem[i]) {
              maxIndexes.add(i);
            }
          }
          if (maxIndexes.size() == 0)           break;
          sb.append((char)(maxIndexes.get(0) + 'A'));
          elem[maxIndexes.get(0)]--;
          if (maxIndexes.size() >= 2 && (lastCount > 3 || lastCount == 2)) {
            sb.append((char)(maxIndexes.get(1) + 'A'));
            elem[maxIndexes.get(1)]--;
          }
          sb.append("" "");
        }
        String answer=sb.substring(0,sb.length() - 1);
        answerList.add(answer);
        System.out.printf(""%s: %s : %s \r\n"",testCaseIndex + 1,elem,answer);
      }
      final List<String> solve=answerList;
      final String FORMAT=""Case #{0}: {1}"";
      try (BufferedWriter bufferedWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(ProblemA.OUTPUT_PATH))))){
        for (int i=0; i < solve.size(); i++) {
          Object[] ans=new Object[2];
          ans[0]=String.valueOf(i + 1);
          ans[1]=solve.get(i);
          String write=MessageFormat.format(FORMAT,ans);
          bufferedWriter.write(write);
          bufferedWriter.newLine();
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001157,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int testCases=in.nextInt();
  for (int i=1; i <= testCases; i++) {
    int n=in.nextInt();
    String[] senators=new String[n];
    int currentParty=65;
    int totalSen=0;
    String evacuation="""";
    for (int j=0; j < n; j++) {
      int sen=in.nextInt();
      String toReturn="""";
      for (int i1=0; i1 < sen; i1++) {
        toReturn+=(char)currentParty;
      }
      senators[j]=toReturn;
      currentParty++;
      totalSen+=sen;
    }
    Arrays.sort(senators,new Comparator<String>(){
      @Override public int compare(      String s1,      String s2){
        return s2.length() - s1.length();
      }
    }
);
    senators=senators;
    if (totalSen % 2 != 0) {
      evacuation+=senators[0].charAt(0) + "" "";
      StringBuilder sb=new StringBuilder(senators[0]);
      sb.deleteCharAt(0);
      senators[0]=sb.toString();
      Arrays.sort(senators,new Comparator<String>(){
        @Override public int compare(        String s1,        String s2){
          return s2.length() - s1.length();
        }
      }
);
      senators=senators;
    }
    while (!senators[0].equals("""")) {
      evacuation+=senators[0].charAt(0);
      if (senators[1].length() != 0) {
        evacuation+=senators[1].charAt(0);
        StringBuilder sb=new StringBuilder(senators[1]);
        sb.deleteCharAt(0);
        senators[1]=sb.toString();
      }
      StringBuilder sb=new StringBuilder(senators[0]);
      sb.deleteCharAt(0);
      senators[0]=sb.toString();
      evacuation+="" "";
      Arrays.sort(senators,new Comparator<String>(){
        @Override public int compare(        String s1,        String s2){
          return s2.length() - s1.length();
        }
      }
);
      senators=senators;
    }
    System.out.println(""Case #"" + i + "": ""+ evacuation.trim());
  }
}
"
30001158,"public static void main(String[] args){
  try {
    Scanner sc=new Scanner(new File(IN_FILE));
    PrintWriter wr=new PrintWriter(OUT_FILE);
    int T=sc.nextInt();
    for (int ti=0; ti < T; ti++) {
      int N=sc.nextInt();
      for (int i=0; i < 26; i++) {
        idxToCnt[i]=0;
        idxToCh[i]=(char)('A' + i);
      }
      for (int i=0; i < N; i++) {
        idxToCnt[i]=sc.nextInt();
      }
      wr.print(""Case #"" + (ti + 1) + "": "");
      int rem=0;
      for (int i=0; i < N; i++) {
        rem+=idxToCnt[i];
      }
      for (int tsi=0; tsi < N - 1; tsi++) {
        int end=N - 1;
        int res1=tsi;
        if (true) {
          for (int i=tsi + 1; i <= end; i++) {
            if (idxToCnt[i] > idxToCnt[res1]) {
              res1=i;
            }
          }
        }
 else {
          for (int i=tsi + 1; i <= end; i++) {
            if (idxToCnt[i] >= idxToCnt[res1]) {
              res1=i;
            }
          }
        }
        int nextMax=res1;
        if (nextMax == tsi) {
          continue;
        }
 else {
          int tmpCnt=idxToCnt[tsi];
          char tmpChar=idxToCh[tsi];
          idxToCnt[tsi]=idxToCnt[nextMax];
          idxToCh[tsi]=idxToCh[nextMax];
          idxToCnt[nextMax]=tmpCnt;
          idxToCh[nextMax]=tmpChar;
        }
      }
      String res="""";
      while (true) {
        if (res.length() != 0) {
          res+="" "";
        }
        String door="""";
        door+=idxToCh[0];
        idxToCnt[0]--;
        rem--;
        if (rem == 0) {
          res+=door;
          break;
        }
        int end=N - 1;
        int res1=0;
        if (false) {
          for (int i=0 + 1; i <= end; i++) {
            if (idxToCnt[i] > idxToCnt[res1]) {
              res1=i;
            }
          }
        }
 else {
          for (int i=0 + 1; i <= end; i++) {
            if (idxToCnt[i] >= idxToCnt[res1]) {
              res1=i;
            }
          }
        }
        int nextMax=res1;
        if (nextMax != 0) {
          int tmpCnt=idxToCnt[0];
          char tmpChar=idxToCh[0];
          idxToCnt[0]=idxToCnt[nextMax];
          idxToCh[0]=idxToCh[nextMax];
          idxToCnt[nextMax]=tmpCnt;
          idxToCh[nextMax]=tmpChar;
        }
        if (idxToCnt[0] > rem - idxToCnt[0]) {
          door+=idxToCh[0];
          idxToCnt[0]--;
          rem--;
          res+=door;
          if (rem == 0) {
            break;
          }
          int end1=N - 1;
          int res2=0;
          if (false) {
            for (int i=0 + 1; i <= end1; i++) {
              if (idxToCnt[i] > idxToCnt[res2]) {
                res2=i;
              }
            }
          }
 else {
            for (int i=0 + 1; i <= end1; i++) {
              if (idxToCnt[i] >= idxToCnt[res2]) {
                res2=i;
              }
            }
          }
          int nextMax2=res2;
          if (nextMax2 != 0) {
            int tmpCnt=idxToCnt[0];
            char tmpChar=idxToCh[0];
            idxToCnt[0]=idxToCnt[nextMax2];
            idxToCh[0]=idxToCh[nextMax2];
            idxToCnt[nextMax2]=tmpCnt;
            idxToCh[nextMax2]=tmpChar;
          }
        }
 else {
          res+=door;
        }
      }
      wr.println(res);
    }
    wr.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
"
30001159,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scanner=new Scanner(new BufferedReader(new FileReader(""in.txt"")));
  PrintWriter writer=new PrintWriter(""out.txt"");
  int t=scanner.nextInt();
  for (int i=1; i <= t; i++) {
    int n=scanner.nextInt();
    HashMap<Character,Integer> map=new HashMap<>();
    for (int j=0; j < n; j++) {
      char ch='A';
      ch+=j;
      map.put(ch,scanner.nextInt());
    }
    writer.print(""Case #"" + i + "": "");
    if (map.size() == 0)     continue;
    char mxc='A';
    int mx=0;
    for (    char ch : map.keySet()) {
      if (map.get(ch) > mx) {
        mxc=ch;
        mx=map.get(mxc);
      }
    }
    if (mx == 0)     continue;
    map.remove(mxc);
    char mxc1='A';
    int mx1=0;
    for (    char ch : map.keySet()) {
      if (map.get(ch) > mx1) {
        mxc1=ch;
        mx1=map.get(mxc1);
      }
    }
    int diff=mx - mx1;
    while (diff > 0) {
      writer.print(mxc + "" "");
      diff--;
      mx--;
    }
    map.remove(mxc1);
    for (    char ch1 : map.keySet()) {
      int k=map.get(ch1);
      while (k > 0) {
        writer.print(ch1 + "" "");
        k--;
      }
    }
    while (mx != 0) {
      writer.print(mxc + """" + mxc1+ "" "");
      mx--;
    }
    writer.println();
  }
  writer.close();
  scanner.close();
}
"
30001160,"public static void main(String[] args){
  try {
    Scanner input=new Scanner(new File(args[0]));
    PrintWriter output=new PrintWriter(args[1]);
    int casenumber=input.nextInt();
    input.nextLine();
    for (int i=0; i < casenumber; i++) {
      StringBuilder result=new StringBuilder();
      int pc=input.nextInt();
      int[] pi=new int[pc];
      int total=0;
      for (int j=0; j < pc; j++) {
        pi[j]=input.nextInt();
        total+=pi[j];
      }
      while (total > 0) {
        int[] max=new int[]{0,0};
        int[] maxindex=new int[2];
        for (int j=0; j < pc; j++) {
          if (pi[j] > max[0]) {
            max[1]=max[0];
            max[0]=pi[j];
            maxindex[1]=maxindex[0];
            maxindex[0]=j;
          }
 else           if (pi[j] > max[1]) {
            max[1]=pi[j];
            maxindex[1]=j;
          }
        }
        result.append("" "");
        result.append((char)('A' + maxindex[0]));
        total--;
        pi[maxindex[0]]--;
        if (max[1] > 0 && max[1] * 2 > total) {
          result.append((char)('A' + maxindex[1]));
          total--;
          pi[maxindex[1]]--;
        }
      }
      output.println(""Case #"" + (i + 1) + "":""+ result.toString());
    }
    output.flush();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001161,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int _t=1; _t <= t; _t++) {
    int n=sc.nextInt();
    sc.nextLine();
    int[] p=new int[n];
    int total=0;
    char ich='A';
    int max=-1;
    char[] labels=new char[n];
    for (int i=0; i < n; i++) {
      p[i]=sc.nextInt();
      total+=p[i];
      labels[i]=ich;
      ich++;
      if (p[i] > max) {
        max=p[i];
      }
    }
    StringBuilder sb=new StringBuilder();
    Stack<Character> s=new Stack<>();
    while (s.size() != total) {
      for (int i=0; i < n; i++) {
        if (p[i] > 0) {
          sb.append(labels[i]);
          s.push(labels[i]);
          p[i]--;
        }
      }
    }
    if (debug) {
      System.out.println(""sb: "" + sb);
    }
    if (debug) {
      System.out.println(""s: "" + s);
    }
    StringBuilder sb3=new StringBuilder();
    while (!s.empty()) {
      if (s.size() == 3) {
        char c1=s.pop(), c2=s.pop(), c3=s.pop();
        sb3.append(c3);
        sb3.append(' ');
        sb3.append(c2);
        sb3.append(c1);
        sb3.append(' ');
      }
 else {
        char c1=s.pop(), c2=s.pop();
        sb3.append(c2);
        sb3.append(c1);
        sb3.append(' ');
      }
    }
    String result=sb3.toString();
    System.out.printf(""Case #%d: %s%n"",_t,result);
  }
}
"
30001162,"public static void main(String[] args) throws NumberFormatException, IOException {
}
"
30001163,"public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
  String filename=""A-large"";
  Scanner sc=new Scanner(new File(filename + "".in""));
  PrintWriter pw=new PrintWriter(filename + "".out"",""UTF-8"");
  while (sc.hasNext()) {
    int T=sc.nextInt();
    for (int i=1; i <= T; i++) {
      int N=sc.nextInt();
      int[] P=new int[N];
      for (int j=0; j < N; j++) {
        P[j]=sc.nextInt();
      }
      System.out.print(""Case #"" + i + "":"");
      pw.print(""Case #"" + i + "":"");
      int[] PS=Arrays.copyOf(P,P.length);
      Arrays.sort(PS);
      int max=PS[N - 1];
      int maxes;
      while (max > 0) {
        maxes=0;
        for (int j=0; j < N; j++) {
          if (PS[j] == PS[N - 1])           maxes++;
        }
        if (maxes == 2) {
          int j=0;
          int a=-1, b=-1;
          for (j=0; j < N; j++) {
            if (P[j] == max) {
              if (a == -1)               a=j;
 else               b=j;
            }
          }
          P[a]--;
          P[b]--;
          System.out.print("" "" + (char)('A' + a));
          System.out.print((char)('A' + b));
          pw.print("" "" + (char)('A' + a));
          pw.print((char)('A' + b));
        }
 else {
          for (int j=0; j < N; j++) {
            if (P[j] == max) {
              P[j]--;
              System.out.print("" "" + (char)('A' + j));
              pw.print("" "" + (char)('A' + j));
              break;
            }
          }
        }
        PS=Arrays.copyOf(P,P.length);
        Arrays.sort(PS);
        max=PS[N - 1];
      }
      System.out.println();
      pw.println();
    }
    pw.close();
  }
}
"
30001164,"public static void main(String[] args) throws Exception {
  Locale.setDefault(Locale.US);
  A r=new A();
  r.in=new Scanner(new File(A.FILE_NAME + "".in""));
  r.out=new PrintWriter(new File(A.FILE_NAME + "".out""));
  int tcn=r.in.nextInt();
  for (int tc=1; tc <= tcn; tc++) {
    int n=r.in.nextInt();
    int[] s=new int[n];
    int total=0;
    for (int i=0; i < n; i++) {
      s[i]=r.in.nextInt();
      total+=s[i];
    }
    String res="""";
    while (total > 0) {
      res+=' ';
      int a=0;
      for (int i=1; i < n; i++) {
        if (s[a] < s[i]) {
          a=i;
        }
      }
      s[a]--;
      total--;
      res+=(char)('A' + a);
      if (total == 0) {
        break;
      }
      boolean ok=true;
      int b=0;
      for (int i=1; i < n; i++) {
        if (s[b] < s[i]) {
          b=i;
        }
      }
      s[b]--;
      total--;
      for (int i=0; i < n; i++) {
        if (s[i] * 2 > total) {
          ok=false;
          break;
        }
      }
      if (ok) {
        res+=(char)('A' + b);
      }
 else {
        s[b]++;
        total++;
      }
    }
    res.trim();
    r.out.format(""Case #%d: %s\n"",tc,res);
    System.out.format(""Case #%d: %s\n"",tc,res);
  }
  r.out.close();
}
"
30001165,"public static void main(String args[]){
  Scanner scan=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int cases=scan.nextInt();
  scan.nextLine();
  for (int i=0; i < cases; i++) {
    System.out.print(""Case #"" + (i + 1) + "": "");
    parties=new int[scan.nextInt()];
    total=0;
    for (int j=0; j < parties.length; j++) {
      parties[j]=scan.nextInt();
      total+=parties[j];
    }
    while (total > 0) {
      int maxArg=0;
      int secondMax=0;
      for (int i1=0; i1 < parties.length; i1++) {
        if (parties[i1] >= parties[maxArg]) {
          secondMax=maxArg;
          maxArg=i1;
        }
 else         if (parties[i1] >= parties[secondMax]) {
          secondMax=i1;
        }
      }
      if (total == 3) {
        System.out.print((char)(65 + maxArg) + "" "");
        parties[maxArg]--;
        total--;
      }
 else       if (secondMax != maxArg && (parties[maxArg] - 1) <= ((total - 2) / 2)) {
        System.out.print((char)(65 + maxArg) + """" + (char)(65 + secondMax)+ "" "");
        parties[maxArg]--;
        parties[secondMax]--;
        total-=2;
      }
 else       if (parties[maxArg] - 2 <= ((total - 2) / 2)) {
        System.out.print((char)(65 + maxArg) + """" + (char)(65 + maxArg)+ "" "");
        parties[maxArg]-=2;
        total-=2;
      }
 else       if ((parties[maxArg] - 1) <= ((total - 1) / 2)) {
        System.out.print((char)(65 + maxArg) + "" "");
        parties[maxArg]--;
        total--;
      }
    }
    System.out.println();
  }
  scan.close();
}
"
30001166,"public static void main(String[] args){
}
"
30001167,"public static void main(String[] args) throws InterruptedException, ExecutionException {
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  in.nextLine();
  for (int i=1; i <= t; ++i) {
    int parties=in.nextInt();
    String s=in.nextLine();
    s=in.nextLine();
    String values[]=s.trim().split("" "");
    List<Integer> p=new ArrayList<Integer>(parties);
    for (int z=0; z < parties; ++z) {
      p.add(z,Integer.parseInt(values[z]));
    }
    StringBuffer sb=new StringBuffer("""");
    int max1=0;
    int max2=0;
    do {
      sb.append("" "");
      max1=Collections.max(p);
      if (max1 > 0) {
        int index1=p.indexOf(max1);
        p.set(index1,max1 - 1);
        sb.append((char)('A' + index1));
      }
      if (max1 == 1) {
        int numOfones=0;
        for (int z=0; z < p.size(); ++z) {
          if (p.get(z) == 1) {
            ++numOfones;
          }
        }
        if (numOfones > 1 && numOfones % 2 != 1) {
          continue;
        }
      }
      max2=Collections.max(p);
      if (max2 > 0) {
        int index2=p.indexOf(max2);
        p.set(index2,max2 - 1);
        sb.append((char)('A' + index2));
      }
    }
 while (max1 != 0 || max2 != 0);
    System.out.println(""Case #"" + i + "":""+ sb.toString());
  }
}
"
30001168,"public static void main(final String[] args){
  R2016_1C_A r=new R2016_1C_A();
  final File directory=new File(r.getClass().getSimpleName() + ""_cases"");
  final File inDirectory=new File(r.getClass().getSimpleName() + ""_cases"" + ""/in"");
  final File outDirectory=new File(r.getClass().getSimpleName() + ""_cases"" + ""/out"");
  if (!directory.isDirectory()) {
    directory.mkdir();
  }
  if (!outDirectory.isDirectory()) {
    outDirectory.mkdir();
  }
  if (!inDirectory.isDirectory()) {
    inDirectory.mkdir();
  }
  for (  final String in : inDirectory.list()) {
    final String fileNameCore=in.replace("".in"","""");
    final String outFileName=fileNameCore + "".out"";
    final File inFile=new File(r.getClass().getSimpleName() + ""_cases"" + ""/in""+ ""/""+ in);
    final File outFile=new File(r.getClass().getSimpleName() + ""_cases"" + ""/out""+ ""/""+ outFileName);
    try (final PrintStream ps=new PrintStream(outFile);final Scanner s=new Scanner(inFile)){
      r.t=s.nextInt();
      for (int i=0; i < r.t; i++) {
        final int n=i;
        ps.print(String.format(R2016_1C_A.CASE,n + 1));
        r.N=s.nextInt();
        r.P=new int[r.N];
        for (int i1=0; i1 < r.N; i1++) {
          r.P[i1]=s.nextInt();
        }
        r.solution=new ArrayList<>();
        int sum=0;
        for (int i3=0; i3 < r.N; i3++) {
          sum+=r.P[i3];
        }
        while (sum > 2) {
          int m=0;
          int x=0;
          int x2=0;
          for (int i1=0; i1 < r.N; i1++) {
            if (r.P[i1] >= m) {
              m=r.P[i1];
              x2=x;
              x=i1;
            }
          }
          if (r.P[x2] * 2 > sum - 1) {
            r.solution.add("""" + (char)('A' + x) + (char)('A' + x2));
            r.P[x]--;
            r.P[x2]--;
            sum-=2;
          }
 else {
            r.solution.add("""" + (char)('A' + x));
            r.P[x]--;
            sum--;
          }
        }
        String s1="""";
        for (int i2=0; i2 < r.N; i2++) {
          if (r.P[i2] != 0) {
            s1+=(char)('A' + i2);
          }
        }
        r.solution.add(s1);
        for (int i1=0; i1 < r.solution.size() - 1; i1++) {
          ps.print(r.solution.get(i1) + "" "");
        }
        ps.print(r.solution.get(r.solution.size() - 1));
        ps.println();
      }
    }
 catch (    final IOException e) {
      e.printStackTrace();
    }
  }
}
"
30001169,"public static void main(String args[]){
  Scanner in=new Scanner(System.in);
  int cases=in.nextInt();
  int n;
  int parties[]=new int[0];
  for (int i=0; i < cases; i++) {
    n=in.nextInt();
    parties=new int[n];
    System.out.println();
    System.out.print(""Case #"" + (i + 1) + "": "");
    for (int j=0; j < n; j++) {
      parties[j]=in.nextInt();
    }
    if (n == 2) {
      for (int k=0; k < parties[0]; k++) {
        System.out.print(""AB "");
      }
    }
 else {
      int winner=0;
      int runnerup=0;
      int loser=0;
      int windex=0;
      int rindex=0;
      int lindex=0;
      for (int l=0; l < n; l++) {
        if (parties[l] > winner) {
          loser=runnerup;
          lindex=rindex;
          runnerup=winner;
          rindex=windex;
          winner=parties[l];
          windex=l;
        }
 else         if (parties[l] > runnerup) {
          loser=runnerup;
          lindex=rindex;
          runnerup=parties[l];
          rindex=l;
        }
 else {
          loser=parties[l];
          lindex=l;
        }
      }
      while (parties[windex] > parties[rindex]) {
        char win=(char)('A' + windex);
        System.out.print(win + "" "");
        parties[windex]-=1;
      }
      while (parties[lindex] > 0) {
        char los=(char)('A' + lindex);
        System.out.print(los + "" "");
        parties[lindex]-=1;
      }
      while (parties[windex] > 0) {
        char win=(char)('A' + windex);
        char rin=(char)('A' + rindex);
        System.out.print(win + """" + rin+ "" "");
        parties[windex]-=1;
        parties[rindex]-=1;
      }
    }
  }
  in.close();
}
"
30001170,"public static void main(String[] args) throws FileNotFoundException {
  try (Scanner scanner=new Scanner(new File(""round1C_A.in""));PrintWriter writer=new PrintWriter(new File(""round1C_A.out""))){
    int caseCount=scanner.nextInt();
    for (int caseNo=1; caseNo <= caseCount; ++caseNo) {
      int n=scanner.nextInt();
      int[] x=new int[n];
      int sum=0;
      for (int i=0; i < n; ++i) {
        x[i]=scanner.nextInt();
        sum+=x[i];
      }
      writer.print(String.format(""Case #%d: "",caseNo));
      if (sum % 2 == 1) {
        int max=0, index=0;
        for (int i=0; i < n; ++i) {
          if (x[i] > max) {
            max=x[i];
            index=i;
          }
        }
        writer.print((char)('A' + index));
        writer.print("" "");
        x[index]--;
      }
      while (true) {
        int max=0, index=0;
        for (int i=0; i < n; ++i) {
          if (x[i] > max) {
            max=x[i];
            index=i;
          }
        }
        if (max == 0)         break;
        writer.print((char)('A' + index));
        x[index]--;
        max=0;
        index=0;
        for (int i=0; i < n; ++i) {
          if (x[i] > max) {
            max=x[i];
            index=i;
          }
        }
        if (max == 0)         break;
        writer.print((char)('A' + index));
        x[index]--;
        writer.print("" "");
      }
      writer.println();
    }
  }
 }
"
30001171,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int N=in.nextInt();
    ArrayList<Integer> senate=new ArrayList<>();
    for (int i=0; i < N; i++) {
      senate.add(i,0);
    }
    int senateSize=0;
    for (int i=0; i < N; i++) {
      int temp=in.nextInt();
      senate.set(i,temp);
      senateSize+=temp;
    }
    System.out.printf(""Case #%d: "",t);
    while (senateSize > 2) {
      int max=0;
      int maxIndex=-1;
      int second=0;
      int secondIndex=-1;
      ArrayList<Integer> ordered=new ArrayList<>(senate);
      Collections.sort(ordered,Collections.reverseOrder());
      max=ordered.get(0);
      maxIndex=senate.indexOf(max);
      second=ordered.get(1);
      secondIndex=senate.lastIndexOf(second);
      if (max == second && senateSize != 3) {
        System.out.print(Character.toChars(65 + maxIndex)[0]);
        System.out.print(Character.toChars(65 + secondIndex)[0]);
        System.out.print("" "");
        senate.set(maxIndex,senate.get(maxIndex) - 1);
        senate.set(secondIndex,senate.get(secondIndex) - 1);
        senateSize-=2;
      }
 else {
        System.out.print(Character.toChars(65 + maxIndex)[0]);
        System.out.print("" "");
        senate.set(maxIndex,senate.get(maxIndex) - 1);
        senateSize-=1;
      }
    }
    if (senateSize == 2) {
      int max=0;
      int maxIndex=-1;
      int second=0;
      int secondIndex=-1;
      ArrayList<Integer> ordered=new ArrayList<>(senate);
      Collections.sort(ordered,Collections.reverseOrder());
      max=ordered.get(0);
      maxIndex=senate.indexOf(max);
      second=ordered.get(1);
      secondIndex=senate.lastIndexOf(second);
      System.out.print(Character.toChars(65 + maxIndex)[0]);
      System.out.print(Character.toChars(65 + secondIndex)[0]);
      System.out.print("" "");
      senate.set(maxIndex,senate.get(maxIndex) - 1);
      senate.set(secondIndex,senate.get(secondIndex) - 1);
    }
    System.out.println();
  }
}
"
30001172,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int r=1; r <= t; r++) {
    int n, i;
    n=sc.nextInt();
    int ar[]=new int[n];
    char br[]=new char[n];
    char cha='A';
    int s=0;
    for (i=0; i < n; i++) {
      ar[i]=sc.nextInt();
      s+=ar[i];
      br[i]=cha++;
    }
    int N=ar.length;
    int j, pos, temp;
    for (i=0; i < N - 1; i++) {
      pos=i;
      for (j=i + 1; j < N; j++) {
        if (ar[j] < ar[pos]) {
          pos=j;
        }
      }
      char tt=' ';
      temp=ar[i];
      tt=br[i];
      ar[i]=ar[pos];
      br[i]=br[pos];
      ar[pos]=temp;
      br[pos]=tt;
    }
    System.out.print(""Case #"");
    System.out.print(r);
    System.out.print("":"");
    System.out.print("" "");
    double ss=(double)s;
    while (s > 0) {
      i=n - 1;
      if ((double)s - 2 >= (double)s / 2 || (s - 2) == 0) {
        System.out.print(br[i]);
        System.out.print(br[i - 1]);
        System.out.print("" "");
        ar[i]--;
        ar[i - 1]--;
        s=s - 2;
      }
 else {
        ar[i]--;
        s=s - 1;
        System.out.print(br[i]);
        System.out.print("" "");
      }
      for (int ii=0; ii < N - 1; ii++) {
        pos=ii;
        for (j=ii + 1; j < N; j++) {
          if (ar[j] < ar[pos]) {
            pos=j;
          }
        }
        char tt=' ';
        temp=ar[ii];
        tt=br[ii];
        ar[ii]=ar[pos];
        br[ii]=br[pos];
        ar[pos]=temp;
        br[pos]=tt;
      }
    }
    System.out.println();
  }
}
"
30001173,"public static void main(String[] args){
  int cases=Integer.parseInt(sc.nextLine());
  for (int caseNo=0; caseNo < cases; caseNo++) {
    int N=Integer.parseInt(sc.nextLine());
    int[] members=new int[N];
    int totalMembers=0;
    for (int x=0; x < N; x++) {
      members[x]=sc.nextInt();
      totalMembers+=members[x];
    }
    sc.nextLine();
    String ans="""";
    while (totalMembers > 0) {
      int maxParty=0;
      int maxMembers=Integer.MIN_VALUE;
      for (int x=0; x < N; x++) {
        if (members[x] > maxMembers) {
          maxMembers=members[x];
          maxParty=x;
        }
      }
      ans=ans + (char)(""A"".charAt(0) + maxParty);
      members[maxParty]-=1;
      totalMembers--;
      maxMembers=Integer.MIN_VALUE;
      for (int x=0; x < N; x++) {
        if (members[x] > maxMembers) {
          maxMembers=members[x];
          maxParty=x;
        }
      }
      if (members[maxParty] - 1 <= 0.5 * (totalMembers - 1) && members[maxParty] > 0 && totalMembers != 2) {
        ans=ans + (char)(""A"".charAt(0) + maxParty);
        members[maxParty]-=1;
        totalMembers--;
      }
      ans=ans + "" "";
    }
    System.out.println(""Case #"" + (caseNo + 1) + "": ""+ ans);
  }
}
"
30001174,"public static void main(String... args){
  Scanner scanner=new Scanner(System.in);
  int T=scanner.nextInt();
  for (int t=1; t <= T; t++) {
    A r=new A();
    r.N=scanner.nextInt();
    r.P=new int[r.N];
    for (int i=0; i < r.N; i++)     r.P[i]=scanner.nextInt();
    int maxP=0;
    int maxI=-1;
    int secondMaxP=0;
    int secondMaxI=-1;
    for (int i=0; i < r.N; i++) {
      if (r.P[i] > maxP) {
        maxP=r.P[i];
        maxI=i;
      }
    }
    for (int i=0; i < r.N; i++) {
      if (i == maxI)       continue;
      if (r.P[i] > secondMaxP) {
        secondMaxP=r.P[i];
        secondMaxI=i;
      }
    }
    String plan="""";
    while (maxP > secondMaxP) {
      plan+=(char)('A' + maxI);
      plan+="" "";
      maxP--;
    }
    for (int i=0; i < r.N; i++) {
      if (i == maxI || i == secondMaxI)       continue;
      while (r.P[i] > 0) {
        plan+=(char)('A' + i);
        plan+="" "";
        r.P[i]--;
      }
    }
    while (maxP > 0) {
      plan+=(char)('A' + maxI);
      plan+=(char)('A' + secondMaxI);
      plan+="" "";
      maxP--;
    }
    String solution=plan;
    System.out.println(""Case #"" + t + "": ""+ solution);
  }
}
"
30001175,"public static void main(String args[]){
  File file=new File(""C:\\tests\\inputA.txt"");
  try (BufferedReader br=new BufferedReader(new FileReader(file))){
    PrintWriter writer=new PrintWriter(""C:\\tests\\outputA.txt"",""UTF-8"");
    int count=Integer.parseInt(br.readLine());
    for (int i=0; i < count; i++) {
      String out=""Case #"" + (i + 1) + "": "";
      int n=Integer.parseInt(br.readLine());
      int[] p=new int[n];
      String[] str=br.readLine().split("" "");
      int c=0;
      for (int j=0; j < n; j++) {
        p[j]=Integer.parseInt(str[j]);
        c+=p[j];
      }
      while (c > 0) {
        int max=p[0];
        int maxi=0;
        for (int j=1; j < p.length; j++) {
          if (p[j] > max) {
            max=p[j];
            maxi=j;
          }
        }
        if (c == 3) {
          out+=chars[maxi] + "" "";
          c--;
          p[maxi]--;
          continue;
        }
        boolean find=false;
        for (int j=0; j < p.length; j++) {
          if (j != maxi && p[j] == max) {
            out+=chars[j] + chars[maxi] + "" "";
            p[j]--;
            p[maxi]--;
            c-=2;
            find=true;
            break;
          }
        }
        if (!find) {
          if (p[maxi] >= 2) {
            out+=chars[maxi] + chars[maxi] + "" "";
            c-=2;
            p[maxi]-=2;
          }
 else {
            out+=chars[maxi] + "" "";
            c--;
            p[maxi]--;
          }
        }
      }
      writer.println(out);
    }
    writer.close();
  }
 catch (  Exception e) {
    System.out.println(""Error:"" + e);
  }
}
"
30001176,"public static void main(String args[]){
}
"
30001177,"public static void main(String[] args){
  Scanner in=null;
  A a=new A();
  try {
    in=new Scanner(System.in);
    int count=in.nextInt();
    for (int test=1; test <= count; test++) {
      int N=in.nextInt();
      int[] sen=new int[N];
      int totalNum=0;
      for (int i=0; i < N; i++) {
        sen[i]=in.nextInt();
        totalNum+=sen[i];
      }
      int totalNum1=totalNum;
      StringBuilder result1=new StringBuilder();
      int start='A';
      while (totalNum1 > 0) {
        int max1=0;
        int max2=0;
        int max3=0;
        int maxSen1=0;
        int maxSen2=0;
        for (int i=0; i < N; i++) {
          if (sen[i] > max1) {
            maxSen1=i;
            max1=sen[i];
          }
        }
        sen[maxSen1]--;
        for (int i=0; i < N; i++) {
          if (sen[i] > max2) {
            maxSen2=i;
            max2=sen[i];
          }
        }
        sen[maxSen2]--;
        if (totalNum1 > 2) {
          max3=0;
          for (int i=0; i < N; i++) {
            if (sen[i] > max3) {
              max3=sen[i];
            }
          }
          if (max3 == max2) {
            char x=(char)(start + maxSen1);
            result1.append(x);
            totalNum1--;
            sen[maxSen2]++;
          }
 else {
            char x=(char)(start + maxSen1);
            result1.append(x);
            totalNum1--;
            x=(char)(start + maxSen2);
            result1.append(x);
            totalNum1--;
          }
        }
 else {
          if (max1 == max2 || maxSen1 == maxSen2) {
            char x=(char)(start + maxSen1);
            result1.append(x);
            totalNum1--;
            x=(char)(start + maxSen2);
            result1.append(x);
            totalNum1--;
          }
 else {
            char x=(char)(start + maxSen1);
            result1.append(x);
            totalNum1--;
            sen[maxSen2]++;
          }
        }
        result1.append("" "");
      }
      String result=result1.toString();
      System.out.println(""Case #"" + test + "": ""+ result);
    }
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001178,"public static void main(String[] args) throws IOException {
  BufferedReader r=new BufferedReader(new InputStreamReader(System.in));
  String s=r.readLine();
  int T=Integer.parseInt(s);
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < T; i++) {
    sb.append(""Case #"" + (i + 1) + "":"");
    s=r.readLine();
    int N=Integer.parseInt(s);
    s=r.readLine();
    String[] parts=s.split("" "");
    int[] nrs=new int[N];
    int count=0;
    for (int j=0; j < N; j++) {
      nrs[j]=Integer.parseInt(parts[j]);
      count+=nrs[j];
    }
    while (count != 0) {
      int max=0;
      char[] maxP=new char[2];
      int[] takes=new int[2];
      for (int j=0; j < N; j++) {
        if (nrs[j] > max) {
          max=nrs[j];
          takes[0]=j;
          takes[1]=-1;
          maxP[0]=(char)(((int)('A')) + j);
          maxP[1]=0;
        }
 else         if (nrs[j] == max) {
          maxP[1]=(char)(((int)('A')) + j);
          takes[1]=j;
        }
      }
      if (takes[1] != -1) {
        if (count == 3) {
          sb.append("" "" + maxP[0]);
          nrs[takes[0]]--;
          count--;
        }
 else {
          sb.append("" "" + maxP[0] + maxP[1]);
          nrs[takes[0]]--;
          nrs[takes[1]]--;
          count-=2;
        }
      }
 else {
        sb.append("" "" + maxP[0]);
        nrs[takes[0]]--;
        count--;
      }
    }
    sb.append(""\n"");
  }
  System.out.println(sb.toString());
  PrintWriter writer=new PrintWriter(""Qual1C.AAA.txt"",""UTF-8"");
  writer.println(sb.toString());
  writer.close();
}
"
30001179,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""input.txt""));
  PrintWriter file=new PrintWriter(new File(""output.txt""));
  int[] alf=new int[26];
  int a=(int)'A';
  int n;
  int max1, ind1;
  int max2, ind2;
  int Q=sc.nextInt();
  for (int t=0; t < Q; ++t) {
    System.out.print(""Case #"" + (t + 1) + "": "");
    file.print(""Case #"" + (t + 1) + "": "");
    max1=0;
    ind1=0;
    max2=0;
    ind2=0;
    for (int i=0; i < 26; ++i) {
      alf[i]=0;
    }
    n=sc.nextInt();
    for (int i=0; i < n; ++i) {
      alf[i]=sc.nextInt();
    }
    for (int i=0; i < n; ++i) {
      if (alf[i] > max1) {
        max1=alf[i];
        ind1=i;
      }
    }
    for (int i=0; i < n; ++i) {
      if (alf[i] > max2 && ind1 != i) {
        max2=alf[i];
        ind2=i;
      }
    }
    for (int i=max1; i > max2; --i) {
      System.out.print((char)(a + ind1) + "" "");
      file.print((char)(a + ind1) + "" "");
    }
    for (int i=0; i < n; ++i) {
      if (i != ind1 && i != ind2) {
        for (int k=0; k < alf[i]; ++k) {
          System.out.print((char)(a + i) + "" "");
          file.print((char)(a + i) + "" "");
        }
      }
    }
    for (int i=max2; i > 0; --i) {
      System.out.print((char)(a + ind1) + """" + (char)(a + ind2)+ "" "");
      file.print((char)(a + ind1) + """" + (char)(a + ind2)+ "" "");
    }
    System.out.println();
    file.println();
  }
  file.close();
}
"
30001180,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  final int T=Integer.parseInt(sc.nextLine());
  for (int caseCount=1; caseCount <= T; caseCount++) {
    final int N=sc.nextInt();
    int[] senates=new int[N];
    for (int i=0; i < N; i++) {
      senates[i]=sc.nextInt();
    }
    System.out.print(""Case #"" + caseCount + "": "");
    boolean done=false;
    while (true) {
      int onesLeft=0;
      for (int i=0; i < N; i++) {
        if (senates[i] > 1) {
          onesLeft=0;
          break;
        }
 else         if (senates[i] == 1) {
          onesLeft++;
        }
      }
      if (onesLeft == 2) {
        for (int i=0; i < N; i++) {
          if (senates[i] == 1) {
            System.out.print((char)(65 + i));
          }
        }
        System.out.println();
        break;
      }
      if (onesLeft == 3) {
        for (int i=0; i < N; i++) {
          if (senates[i] == 1) {
            senates[i]--;
            System.out.print((char)(65 + i) + "" "");
            break;
          }
        }
        continue;
      }
      done=true;
      int max=0;
      int maxNext=0;
      for (int i=0; i < N; i++) {
        if (senates[i] > 0) {
          done=false;
        }
        if (senates[i] >= senates[max]) {
          maxNext=max;
          max=i;
        }
      }
      if (done) {
        System.out.println();
        break;
      }
      if (senates[max] > senates[maxNext] || max == maxNext) {
        senates[max]--;
        System.out.print((char)(65 + max) + "" "");
      }
 else {
        senates[max]--;
        senates[maxNext]--;
        System.out.print((char)(65 + max));
        System.out.print((char)(65 + maxNext) + "" "");
      }
    }
  }
  sc.close();
}
"
30001181,"public static void main(String[] args) throws FileNotFoundException {
  final int INPUT_FILE_NUMBER=3;
  Scanner scanner=new Scanner(new File(""C:\\dev\\Projects\\algorithms\\TestCases\\GoogleCodeJam\\SenateEvacuation\\input"" + INPUT_FILE_NUMBER + "".txt""));
  PrintWriter printWriter=new PrintWriter(new File(""C:\\dev\\Projects\\algorithms\\TestCases\\GoogleCodeJam\\SenateEvacuation\\output"" + INPUT_FILE_NUMBER + "".txt""));
  int tc=scanner.nextInt();
  for (int t=0; t < tc; t++) {
    int n=scanner.nextInt();
    int[] a=new int[n];
    int remaining=0;
    for (int i=0; i < a.length; i++) {
      a[i]=scanner.nextInt();
      remaining+=a[i];
    }
    printWriter.write(""Case #"" + (t + 1) + "":"");
    while (remaining > 0) {
      Integer[] sorted=new Integer[a.length];
      for (int i=0; i < a.length; i++) {
        sorted[i]=a[i];
      }
      Arrays.sort(sorted,new Comparator<Integer>(){
        @Override public int compare(        Integer o1,        Integer o2){
          return o2 - o1;
        }
      }
);
      boolean okToRemove2=true;
      boolean firstRemoved=false;
      boolean secondRemoved=false;
      boolean mustRemoveSame=a[0] - a[1] > 1;
      int[] removedPos=new int[2];
      for (int i=0; i < a.length; i++) {
        if (a[i] == sorted[0] && !firstRemoved) {
          firstRemoved=true;
          removedPos[0]=i;
          if (mustRemoveSame) {
            secondRemoved=true;
            removedPos[1]=i;
          }
          int toRemove=1 + (mustRemoveSame ? 1 : 0);
          a[i]-=toRemove;
        }
 else         if (a[i] == sorted[1] && !mustRemoveSame && !secondRemoved) {
          removedPos[1]=i;
          a[i]--;
          secondRemoved=true;
        }
        if (a[i] > (remaining - 2) / 2) {
          okToRemove2=false;
        }
      }
      if (!okToRemove2) {
        a[removedPos[0]]++;
        a[removedPos[1]]++;
        boolean removed=false;
        for (int i=0; i < a.length; i++) {
          if (a[i] == sorted[0] && !removed) {
            printWriter.write("" "");
            printWriter.write((char)('A' + i));
            a[i]--;
            removed=true;
          }
          if (a[i] > (remaining - 1) / 2) {
            System.out.println(""Error test case "" + t + ""a ""+ i+ "" ""+ a[i]+ "" remaining ""+ remaining);
          }
        }
        remaining--;
      }
 else {
        remaining-=2;
        printWriter.write("" "");
        printWriter.write((char)('A' + removedPos[0]));
        printWriter.write((char)('A' + removedPos[1]));
      }
    }
    printWriter.write(""\n"");
  }
  printWriter.flush();
  printWriter.close();
}
"
30001182,"public static void main(String[] args) throws FileNotFoundException {
  Scanner file=new Scanner(new FileInputStream(input));
  Ex1 r=new Ex1();
  r.out=new PrintWriter(Ex1.output);
  int testsNo=Integer.valueOf(file.nextLine());
  for (int i=1; i <= testsNo; i++) {
    int N=Integer.valueOf(file.nextLine());
    String[] arr=file.nextLine().split("" "");
    int[] sen=new int[arr.length];
    for (int j=0; j < sen.length; j++)     sen[j]=Integer.valueOf(arr[j]);
    r.out.print(""Case #"" + i + "": "");
    int total=0;
    for (int i1=0; i1 < N; i1++)     total+=sen[i1];
    while (total > 3 || total == 2) {
      int max=0;
      for (int j=0; j < N; j++)       if (sen[max] < sen[j])       max=j;
      sen[max]--;
      total--;
      char first=(char)('A' + max);
      r.out.print(first);
      if (total == 3)       break;
      if (total > 0) {
        max=0;
        for (int j=0; j < N; j++)         if (sen[max] < sen[j])         max=j;
        char second=(char)('A' + max);
        sen[max]--;
        total--;
        r.out.print(second);
      }
      r.out.print("" "");
    }
    if (total == 3) {
      int max=0;
      for (int j=0; j < N; j++)       if (sen[max] < sen[j])       max=j;
      sen[max]--;
      char first=(char)('A' + max);
      r.out.print(first + "" "");
      max=0;
      for (int j=0; j < N; j++)       if (sen[max] < sen[j])       max=j;
      sen[max]--;
      first=(char)('A' + max);
      r.out.print(first);
      max=0;
      for (int j=0; j < N; j++)       if (sen[max] < sen[j])       max=j;
      sen[max]--;
      char second=(char)('A' + max);
      r.out.print(second);
      r.out.print("" "");
    }
    r.out.println();
  }
  r.out.close();
  file.close();
}
"
30001183,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""input.txt""));
  PrintWriter out=new PrintWriter(""output.txt"");
  int n_case=sc.nextInt();
  for (int i=1; i <= n_case; i++) {
    int n=sc.nextInt();
    int sen[]=new int[n];
    int tot=0;
    for (int j=0; j < n; j++) {
      sen[j]=sc.nextInt();
      tot+=sen[j];
    }
    int tot1=tot;
    String ris1=new String();
    int max1=-1;
    int pos1=-1;
    int max2=-1;
    int pos2=-1;
    while (tot1 > 3) {
      max1=-1;
      pos1=-1;
      max2=-1;
      pos2=-1;
      for (int i2=0; i2 < n; i2++) {
        if (sen[i2] > max1) {
          max2=max1;
          pos2=pos1;
          max1=sen[i2];
          pos1=i2;
        }
 else {
          if (sen[i2] > max2) {
            max2=sen[i2];
            pos2=i2;
          }
        }
      }
      if (pos1 != -1) {
        ris1+=Character.toChars(('A' + pos1))[0];
        sen[pos1]--;
        tot1--;
      }
      if (pos2 != -1) {
        ris1+=Character.toChars(('A' + pos2))[0];
        sen[pos2]--;
        tot1--;
      }
      ris1+="" "";
    }
    String last="""";
    for (int i1=0; i1 < n; i1++) {
      if (sen[i1] != 0 && last.length() < 2) {
        last+=Character.toChars(('A' + i1))[0];
      }
 else {
        if (last.length() == 2) {
          ris1+=Character.toChars(('A' + i1))[0] + "" "";
        }
      }
    }
    String ris=ris1 + last;
    out.println(""Case #"" + i + "": ""+ ris);
  }
  sc.close();
  out.close();
}
"
30001184,"public static void main(String args[]) throws IOException {
  Scanner in=new Scanner(new File(""input.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(new File(""output.out"")));
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int n, arr[];
    n=in.nextInt();
    arr=new int[n];
    for (int i=0; i < n; i++)     arr[i]=in.nextInt();
    pw.print(""Case #"" + t + "": "");
    int cnt=n;
    while (cnt != 0) {
      int max=-1, pos=-1;
      if (cnt == 2) {
        int tmp=0, tarr[]=new int[2], same=0;
        for (int i=0; i < n; i++)         if (arr[i] > 0) {
          tarr[tmp]=i;
          tmp++;
        }
        if (arr[tarr[0]] == arr[tarr[1]]) {
          pw.print((char)((int)'A' + tarr[0]) + """" + (char)((int)'A' + tarr[1])+ "" "");
          arr[tarr[0]]--;
          arr[tarr[1]]--;
          if (arr[tarr[0]] == 0) {
            cnt-=2;
          }
          continue;
        }
      }
      for (int i=0; i < n; i++) {
        if (arr[i] >= max) {
          max=arr[i];
          pos=i;
        }
      }
      pw.print((char)((int)'A' + pos) + "" "");
      if (max == 1) {
        cnt--;
      }
      arr[pos]--;
    }
    pw.println();
  }
  System.out.println(""DONE"");
  pw.close();
}
"
30001185,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  String[] svar=new String[T];
  for (int t=0; t < T; t++) {
    svar[t]="""";
    int N=scan.nextInt();
    int[] memb=new int[N];
    for (int n=0; n < N; n++) {
      memb[n]=scan.nextInt();
    }
    int max1=0;
    int max2;
    for (int i=0; i < N; i++) {
      if (memb[i] >= memb[max1]) {
        max1=i;
      }
    }
    if (max1 != 0) {
      max2=0;
    }
 else {
      max2=1;
    }
    for (int i=0; i < N; i++) {
      if (memb[i] >= memb[max2] && i != max1) {
        max2=i;
      }
    }
    while (memb[max1] > memb[max2]) {
      svar[t]+=(char)('A' + max1);
      svar[t]+="" "";
      memb[max1]--;
    }
    for (int i=0; i < N; i++) {
      if (i != max1 && i != max2) {
        for (int j=0; j < memb[i]; j++) {
          svar[t]+=(char)('A' + i);
          svar[t]+="" "";
        }
      }
    }
    for (int i=0; i < memb[max1]; i++) {
      svar[t]+=(char)('A' + max1);
      svar[t]+=(char)('A' + max2);
      svar[t]+="" "";
    }
  }
  for (int t=0; t < T; t++) {
    System.out.println(""Case #"" + (t + 1) + "": ""+ svar[t]);
  }
}
"
30001186,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int i=1; i <= T; i++) {
    String per="""";
    int n=sc.nextInt();
    int[] p=new int[n];
    for (int k=0; k < n; k++) {
      p[k]=sc.nextInt();
    }
    boolean ok=false;
    int last=0;
    do {
      int max=0;
      ok=false;
      for (int k=0; k < n; k++) {
        if (0 < p[k])         ok=true;
      }
      if (ok) {
        for (int k=0; k < n; k++) {
          if (p[max] < p[k]) {
            max=k;
            last=0;
          }
        }
        per=per + chr.charAt(max);
        p[max]--;
      }
      ok=false;
      for (int k=0; k < n; k++) {
        if (0 < p[k])         ok=true;
      }
      max=0;
      if (ok) {
        for (int k=0; k < n; k++) {
          if (p[max] < p[k]) {
            max=k;
            last=1;
          }
        }
        per=per + chr.charAt(max) + "" "";
        p[max]--;
      }
    }
 while (ok);
    if (last == 0) {
      String s=per.substring(0,per.length() - 4);
      String u=per.substring(per.length() - 4);
      StringBuilder ss=new StringBuilder(u);
      u=ss.reverse().toString();
      per=s + u;
    }
    per=per.trim();
    System.out.println(""Case #"" + i + "": ""+ per);
  }
}
"
30001187,"public static void main(String[] args){
  Scanner in;
  PrintStream out;
  String readString;
  try {
    in=new Scanner(System.in);
    out=new PrintStream(System.out);
    int T=in.nextInt();
    String ABCD=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    for (int t=0; t < T; t++) {
      int N=in.nextInt();
      int[] Pi=new int[N];
      int sum=0;
      for (int n=0; n < N; n++) {
        Pi[n]=in.nextInt();
        sum+=Pi[n];
      }
      out.print(""Case #"" + (t + 1) + "":"");
      while (sum > 0) {
        int max_ind=0;
        int sec_max_ind=1;
        if (Pi[0] > Pi[1]) {
          max_ind=1;
          sec_max_ind=0;
        }
        for (int i=0; i < N; i++) {
          if (Pi[max_ind] < Pi[i]) {
            sec_max_ind=max_ind;
            max_ind=i;
          }
 else           if (Pi[sec_max_ind] < Pi[i]) {
            sec_max_ind=i;
          }
        }
        if (Pi[max_ind] == Pi[sec_max_ind] && sum != 3) {
          Pi[max_ind]--;
          Pi[sec_max_ind]--;
          sum=sum - 2;
          out.print("" "" + ABCD.charAt(max_ind) + ABCD.charAt(sec_max_ind));
        }
 else         if (Pi[max_ind] == 1) {
          Pi[max_ind]--;
          sum=sum - 1;
          out.print("" "" + ABCD.charAt(max_ind));
        }
 else         if (2 * (Pi[max_ind] - 2) <= sum) {
          Pi[max_ind]=Pi[max_ind] - 2;
          sum=sum - 2;
          out.print("" "" + ABCD.charAt(max_ind) + ABCD.charAt(max_ind));
        }
 else {
          Pi[max_ind]--;
          sum=sum - 1;
          out.print("" "" + ABCD.charAt(max_ind));
        }
      }
      out.println();
    }
  }
 catch (  Exception e) {
    ;
  }
}
"
30001188,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    String ris="""";
    String v[]={""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""};
    int n=in.nextInt();
    String p[]=new String[1001];
    for (int j=0; j < 1001; j++)     p[j]="""";
    for (int j=0; j < n; j++) {
      int k=in.nextInt();
      p[k]+=v[j];
    }
    for (int j=1000; j > 0; j--) {
      if (!p[j].equals("""")) {
        if (p[j].length() % 2 != 0)         ris+=p[j].substring(p[j].length() - 1,p[j].length()) + "" "";
        for (int x=0; x < p[j].length() - 1; x+=2) {
          ris+=p[j].charAt(x) + """" + p[j].charAt(x + 1)+ "" "";
        }
        p[j - 1]+=p[j];
      }
    }
    System.out.println(""Case #"" + i + "": ""+ ris);
  }
}
"
30001189,"public static void main(String[] args){
  FileReader file=null;
  try {
    file=new FileReader(""E:\\Windows\\chrome download\\A-large.in"");
  }
 catch (  FileNotFoundException e) {
  }
  BufferedReader in=new BufferedReader(file);
  int tests=0;
  try {
    tests=Integer.parseInt(in.readLine());
  }
 catch (  IOException e) {
  }
  for (int i=1; i <= tests; i++) {
    System.out.print(""Case #"" + i + "":"");
    int n=0;
    try {
      n=Integer.parseInt(in.readLine());
    }
 catch (    IOException e) {
    }
    int[] senators=new int[n];
    int sum=0;
    String[] s=null;
    try {
      s=in.readLine().split("" "");
    }
 catch (    IOException e) {
    }
    for (int j=0; j < n; j++) {
      int senator=0;
      senator=Integer.parseInt(s[j]);
      sum+=senator;
      senators[j]=senator;
    }
    while (sum > 0) {
      int index1=0;
      for (int j=0; j < senators.length; j++) {
        if (senators[j] > senators[index1]) {
          index1=j;
        }
      }
      senators[index1]--;
      sum--;
      int index2=0;
      for (int j=0; j < senators.length; j++) {
        if (senators[j] > senators[index2] && sum != 0) {
          index2=j;
        }
      }
      senators[index2]--;
      sum--;
      int index3=0;
      boolean b=false;
      for (int j=0; j < senators.length; j++) {
        if (senators[j] > senators[index3] && sum != 0) {
          index3=j;
        }
      }
      if (senators[index3] == 0 || (sum - 1) / senators[index3] >= 1) {
        b=true;
      }
 else {
        senators[index2]++;
        sum++;
      }
      char x=(char)('a' + index1);
      char y;
      if (b) {
        y=(char)('a' + index2);
        System.out.print("" "" + x + y);
      }
 else {
        System.out.print("" "" + x);
      }
    }
    System.out.println("""");
  }
}
"
30001190,"public static void main(String[] args){
  try {
    file=new File(""codejaminput.in"");
    scan=new Scanner(file);
  }
 catch (  FileNotFoundException e) {
    System.out.println(""File 1 not found"");
  }
  try {
    writer=new PrintWriter(""output.in"");
  }
 catch (  FileNotFoundException e) {
    System.out.println(""File 2 not found"");
  }
  testCases=scan.nextInt();
  String[] alphabet={""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""};
  for (int j=1; j <= testCases; j++) {
    String output="""";
    int N=scan.nextInt();
    int[] senators=new int[N];
    for (int i=0; i < N; i++) {
      senators[i]=scan.nextInt();
    }
    boolean done=true;
    for (int i=0; i < N; i++) {
      if (senators[i] != 0)       done=false;
    }
    while (!done) {
      int highest=0;
      int highestIndex=-1;
      for (int i=0; i < N; i++) {
        if (senators[i] > highest) {
          highest=senators[i];
          highestIndex=i;
        }
      }
      boolean uneven=false;
      for (int i=0; i < N; i++) {
        if (senators[i] < highest && senators[i] != 0) {
          uneven=true;
        }
      }
      if (uneven) {
        output+=alphabet[highestIndex] + "" "";
        senators[highestIndex]-=1;
      }
 else {
        int count=0;
        int indexOne=-1;
        int indexTwo=-1;
        for (int i=0; i < N; i++) {
          if (senators[i] != 0) {
            count++;
            if (indexOne == -1)             indexOne=i;
 else             indexTwo=i;
          }
        }
        if (count % 2 == 0) {
          output+=alphabet[indexOne] + alphabet[indexTwo] + "" "";
          senators[indexOne]-=1;
          senators[indexTwo]-=1;
        }
 else {
          output+=alphabet[indexOne] + "" "";
          senators[indexOne]-=1;
        }
      }
      done=true;
      for (int i=0; i < N; i++) {
        if (senators[i] != 0)         done=false;
      }
    }
    writer.println(""Case #"" + j + "": ""+ output);
  }
  writer.close();
  scan.close();
}
"
30001191,"public static void main(String[] args) throws FileNotFoundException {
  FileReader file=new FileReader(""A-small-attempt0.in"");
  Scanner in=new Scanner(file);
  PrintWriter out=new PrintWriter(""output.txt"");
  int t=in.nextInt();
  char[] letters=""ABCDEFGHIJKLMNOPQESTUVWXYZ"".toCharArray();
  for (int i=1; i <= t; i++) {
    int n=in.nextInt();
    int[] ar=new int[n];
    int[] c=new int[n];
    for (int j=0; j < n; j++) {
      ar[j]=in.nextInt();
      c[j]=ar[j];
    }
    String output="""";
    Arrays.sort(ar);
    while (ar[n - 1] > 0) {
      if (n == 2 || ar[n - 3] == 0) {
        for (int k=0; k < c.length; k++) {
          if (c[k] == ar[n - 1]) {
            output+=letters[k];
            c[k]--;
          }
        }
        ar[n - 1]--;
        ar[n - 2]--;
        output+="" "";
      }
 else {
        for (int k=0; k < c.length; k++) {
          if (c[k] == ar[n - 1]) {
            output+=letters[k] + "" "";
            c[k]--;
            break;
          }
        }
        ar[n - 1]--;
      }
      Arrays.sort(ar);
    }
    out.println(""Case #"" + i + "": ""+ output);
  }
  in.close();
  out.close();
}
"
30001192,"public static void main(String[] args){
  try {
    Scanner scanner=(new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));
    FileOutputStream out=new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");
    int numberOfCases;
    numberOfCases=scanner.nextInt();
    scanner.nextLine();
    PrintWriter wr=new PrintWriter(out);
    for (int i=0; i < numberOfCases; i++) {
      int caseNumber=i + 1;
      int n=scanner.nextInt();
      int largestIdx=0;
      int[] p=new int[n];
      int sum=0;
      for (int i1=0; i1 < n; i1++) {
        p[i1]=scanner.nextInt();
        if (p[i1] > p[largestIdx]) {
          largestIdx=i1;
        }
        sum+=p[i1];
      }
      StringBuffer result=new StringBuffer();
      int largest=p[largestIdx];
      int idx=0;
      while (sum > 2 * largest) {
        if (idx == largestIdx) {
          idx++;
        }
        if (p[idx] > 0) {
          p[idx]--;
          sum--;
          result.append("" "" + (char)('A' + idx));
        }
 else {
          idx++;
        }
      }
      while (sum > 0) {
        if (idx == largestIdx) {
          idx++;
        }
        if (p[idx] > 0) {
          p[idx]--;
          sum-=2;
          result.append("" "" + (char)('A' + idx));
          result.append((char)('A' + largestIdx));
        }
 else {
          idx++;
        }
      }
      wr.println(""Case #"" + caseNumber + "": ""+ result);
      System.out.println(""Case #"" + caseNumber + "": ""+ result);
      if (i < numberOfCases - 1)       scanner.nextLine();
    }
    wr.close();
    out.close();
  }
 catch (  IOException e) {
    System.out.println(""Error: "" + e);
  }
}
"
30001193,"public static void main(String[] args) throws Exception {
  System.setIn(new FileInputStream(""A-small.in""));
  System.setOut(new PrintStream(""A-small.out""));
  StringTokenizer st;
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  T=Integer.parseInt(in.readLine());
  for (int c=1; c <= T; c++) {
    N=Integer.parseInt(in.readLine());
    st=new StringTokenizer(in.readLine());
    P=new int[N];
    for (int i=0; i < N; i++)     P[i]=Integer.parseInt(st.nextToken());
    buf.format(""Case #%d:"",c);
    String s;
    while (true) {
      int su=0;
      for (int i=0; i < P.length; i++) {
        su=su + P[i];
      }
      if (su == 3) {
        int m=0;
        for (int i=1; i < P.length; i++) {
          if (P[i] > P[m])           m=i;
        }
        if (P[m] == 0)         break;
        s="""" + (char)('A' + m);
        buf.format("" %s"",s);
        P[m]--;
        continue;
      }
      int m=0;
      for (int i=1; i < P.length; i++) {
        if (P[i] > P[m])         m=i;
      }
      if (P[m] == 0)       break;
      s="""" + (char)('A' + m);
      buf.format("" %s"",s);
      P[m]--;
      m=0;
      for (int i=1; i < P.length; i++) {
        if (P[i] > P[m])         m=i;
      }
      if (P[m] == 0)       break;
      s="""" + (char)('A' + m);
      P[m]--;
      buf.format(""%s"",s);
    }
    buf.format(""\n"");
  }
  System.out.print(sb.toString());
}
"
30001194,"public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
  PrintWriter writer=new PrintWriter(""/Users/alexpeptan/Desktop/Eclipse Workspace/Google Code Jam 2016/src/round1C_Problem1/1C1.out"",""UTF-8"");
  Scanner scanner=new Scanner(new File(""/Users/alexpeptan/Desktop/Eclipse Workspace/Google Code Jam 2016/src/round1C_Problem1/1C1.in""));
  int t=scanner.nextInt();
  int max=0;
  for (int k=0; k < t; k++) {
    int n=scanner.nextInt();
    char[] names=new char[n];
    for (int i=0; i < n; i++) {
      names[i]=(char)('A' + i);
    }
    int[] cnt=new int[n];
    for (int i=0; i < n; i++) {
      cnt[i]=scanner.nextInt();
    }
    for (int i=0; i < n - 1; i++) {
      for (int j=i + 1; j < n; j++) {
        if (cnt[i] > cnt[j]) {
          int aux=cnt[i];
          cnt[i]=cnt[j];
          cnt[j]=aux;
          aux=names[i];
          names[i]=names[j];
          names[j]=(char)aux;
        }
      }
    }
    writer.print(""Case #"" + (k + 1) + "":"");
    int delta=cnt[n - 1] - cnt[n - 2];
    for (int i=0; i < delta; i++) {
      writer.print("" "" + names[n - 1]);
    }
    for (int party=0; party <= n - 3; party++) {
      for (int j=0; j < cnt[party]; j++) {
        writer.print("" "" + names[party]);
      }
    }
    for (int i=0; i < cnt[n - 2]; i++) {
      writer.print("" "" + names[n - 2] + names[n - 1]);
    }
    writer.println();
  }
  writer.close();
}
"
30001195,"public static void main(String[] args){
  try {
    System.setIn(new FileInputStream(""A-large.in""));
  }
 catch (  FileNotFoundException e) {
  }
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int test_cases=in.nextInt();
  in.nextLine();
  for (int i_test=1; i_test <= test_cases; ++i_test) {
    int party_members_count[]=new int[26];
    int total_members=0;
    int num_parties=in.nextInt();
    in.nextLine();
    for (int i_party=0; i_party < num_parties; i_party++) {
      int num_members=in.nextInt();
      total_members+=num_members;
      party_members_count[i_party]=num_members;
    }
    StringBuilder buffer=new StringBuilder();
    while (total_members > 0) {
      int party_max_members_index=-1;
      int party_second_max_members_index=-1;
      for (int i_party=0; i_party < num_parties; i_party++) {
        if (party_max_members_index == -1) {
          party_max_members_index=i_party;
        }
 else {
          if (party_members_count[i_party] >= party_members_count[party_max_members_index]) {
            party_second_max_members_index=party_max_members_index;
            party_max_members_index=i_party;
          }
 else {
            if (party_second_max_members_index == -1 || party_members_count[i_party] >= party_members_count[party_second_max_members_index]) {
              party_second_max_members_index=i_party;
            }
          }
        }
      }
      if (party_members_count[party_max_members_index] / (float)total_members > 0.5) {
        System.out.println(""Error Case #"" + i_test + "": ""+ (buffer));
      }
      if (total_members >= 4) {
        if ((party_members_count[party_max_members_index] - party_members_count[party_second_max_members_index]) > 2) {
          buffer.append((char)('A' + party_max_members_index));
          buffer.append((char)('A' + party_max_members_index));
          buffer.append(' ');
          party_members_count[party_max_members_index]-=2;
        }
 else {
          buffer.append((char)('A' + party_max_members_index));
          buffer.append((char)('A' + party_second_max_members_index));
          buffer.append(' ');
          party_members_count[party_max_members_index]-=1;
          party_members_count[party_second_max_members_index]-=1;
        }
        total_members-=2;
      }
 else       if (total_members == 3) {
        buffer.append((char)('A' + party_max_members_index));
        buffer.append(' ');
        party_members_count[party_max_members_index]-=2;
        total_members-=1;
      }
 else {
        buffer.append((char)('A' + party_max_members_index));
        buffer.append((char)('A' + party_second_max_members_index));
        buffer.append(' ');
        party_members_count[party_max_members_index]-=1;
        party_members_count[party_second_max_members_index]-=1;
        total_members-=2;
      }
    }
    System.out.println(""Case #"" + i_test + "": ""+ (buffer));
  }
  in.close();
}
"
30001196,"public static void main(String[] args) throws FileNotFoundException {
  Scanner reader=new Scanner(System.in);
  HashMap<Character,Integer> map=new HashMap<Character,Integer>();
  String letters=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
  int z=0;
  PrintStream out=new PrintStream(new FileOutputStream(""output5.txt""));
  System.setOut(out);
  int num=reader.nextInt();
  int curr;
  for (curr=0; curr < num; curr++) {
    map.clear();
    int i1=0;
    System.out.print(""Case #"" + (curr + 1) + "":"");
    int n=reader.nextInt();
    int i;
    char a;
    char b;
    int sum=0;
    for (i=0; i < n; i++) {
      int value=reader.nextInt();
      map.put(letters.charAt(i),value);
      sum+=value;
    }
    int found;
    while (sum > 2) {
      found=0;
      int total=0;
      int maxValueInMap=(Collections.max(map.values()));
      for (      Entry<Character,Integer> entry : map.entrySet()) {
        if (entry.getValue() == maxValueInMap) {
          total++;
        }
      }
      for (      Entry<Character,Integer> entry : map.entrySet()) {
        if (entry.getValue() == maxValueInMap) {
          if (total != 2) {
            System.out.print("" "" + entry.getKey());
            map.put(entry.getKey(),entry.getValue() - 1);
            sum--;
            break;
          }
 else {
            found++;
            if (found == 1) {
              a=entry.getKey();
              System.out.print("" "" + a);
              map.put(entry.getKey(),entry.getValue() - 1);
              sum--;
            }
 else             if (found == 2) {
              b=entry.getKey();
              map.put(entry.getKey(),entry.getValue() - 1);
              System.out.print(b);
              sum--;
              break;
            }
          }
        }
      }
    }
    System.out.print("" "");
    for (    Entry<Character,Integer> entry : map.entrySet()) {
      if (entry.getValue() != 0) {
        System.out.print(entry.getKey());
      }
    }
    System.out.println();
  }
}
"
30001197,"public static void main(String[] args){
  try {
    Scanner scanner=new Scanner(new File(""X:\\A\\A-large.in""));
    FileWriter fw=new FileWriter(""X:\\A\\A-large.out"");
    int T=Integer.valueOf(scanner.nextInt());
    scanner.nextLine();
    for (int i=1; i <= T; i++) {
      int N=scanner.nextInt();
      scanner.nextLine();
      int[] P=new int[N];
      for (int j=0; j < N; j++) {
        P[j]=scanner.nextInt();
      }
      StringBuffer result=new StringBuffer();
      int numParties=N;
      do {
        int max1=-1, max2=-1;
        for (int j=0; j < N; j++) {
          if (j == 0 || P[j] > P[max1]) {
            max1=j;
          }
        }
        for (int j=0; j < N; j++) {
          if (j != max1 && (max2 == -1 || P[j] > P[max2])) {
            max2=j;
          }
        }
        if (numParties == 2 && P[max1] == P[max2]) {
          String party=String.valueOf((char)('A' + max1)) + String.valueOf((char)('A' + max2));
          result.append(party + "" "");
          P[max1]--;
          P[max2]--;
          if (P[max1] == 0)           numParties-=2;
        }
 else {
          result.append(String.valueOf((char)('A' + max1)) + "" "");
          P[max1]--;
          if (P[max1] == 0)           numParties--;
        }
        if (P[max1] == 0 && P[max2] == 0)         break;
      }
 while (true);
      fw.write(""Case #"" + i + "": ""+ result.toString()+ ""\n"");
      fw.flush();
    }
    fw.flush();
    fw.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001198,"public static void main(String[] args) throws NumberFormatException, IOException {
  String name=""A"";
  boolean isSmall=false;
  BufferedReader br;
  if (isSmall)   br=new BufferedReader(new FileReader(name + ""-small-attempt0.in""));
 else   br=new BufferedReader(new FileReader(name + ""-large.in""));
  PrintWriter pw;
  if (isSmall)   pw=new PrintWriter(name + ""-small.txt"",""UTF-8"");
 else   pw=new PrintWriter(name + ""-large.txt"",""UTF-8"");
  int T=Integer.parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    int N=Integer.parseInt(br.readLine());
    String[] tab=br.readLine().split("" "");
    int[] bff=new int[N];
    for (int j=0; j < N; j++) {
      bff[j]=Integer.parseInt(tab[j]);
    }
    int index1=-1;
    int index2=-1;
    for (int i1=0; i1 < N; i1++) {
      if (index1 < 0 || bff[index1] < bff[i1]) {
        index1=i1;
      }
    }
    for (int i3=0; i3 < N; i3++) {
      if ((index2 < 0 || bff[index2] < bff[i3]) && i3 != index1) {
        index2=i3;
      }
    }
    String res="""";
    for (int j=0; j < bff[index1] - bff[index2]; j++) {
      res+=((char)(65 + index1)) + "" "";
    }
    for (int j=0; j < N; j++) {
      if (j != index1 && j != index2) {
        for (int i2=0; i2 < bff[j]; i2++) {
          res+=((char)(65 + j)) + "" "";
        }
      }
    }
    for (int j=0; j < bff[index2]; j++) {
      res+="""" + ((char)(65 + index1)) + ((char)(65 + index2))+ "" "";
    }
    String a=res;
    System.out.print(""Case #"" + (i + 1) + "": ""+ a+ ""\n"");
    pw.write(""Case #"" + (i + 1) + "": ""+ a+ ""\n"");
  }
  pw.close();
}
"
30001199,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new FileReader(""A.in""));
  FileWriter fw=new FileWriter(""A.out"");
  int testCaseCount=Integer.parseInt(in.readLine());
  for (int i=0; i < testCaseCount; i++) {
    int numberOfParties=Integer.parseInt(in.readLine());
    int totalNumOfSenators=0;
    String senatorCountStr=in.readLine();
    ArrayList<Integer> senetorCount=new ArrayList<Integer>();
    String[] elements=senatorCountStr.split(""\\s+"");
    for (int j=0; j < elements.length; j++) {
      int count=Integer.parseInt(elements[j]);
      senetorCount.add(count);
      totalNumOfSenators+=count;
    }
    String runners="""";
    while (totalNumOfSenators > 0) {
      for (int j=0; j < 2; j++) {
        boolean done=false;
        for (int k=0; k < numberOfParties; k++) {
          if (done) {
            continue;
          }
          for (int l=0; l < numberOfParties; l++) {
            if (k == l) {
              continue;
            }
 else {
              if (senetorCount.get(k) <= 0 || (totalNumOfSenators > 1 && ((1 == j && senetorCount.get(l) * 2 > totalNumOfSenators - 1) || (0 == j && (senetorCount.get(l) - 1) * 2 > totalNumOfSenators - 2)))) {
              }
 else {
                boolean ok=true;
                for (int m=0; m < numberOfParties; m++) {
                  if (m == k) {
                    continue;
                  }
                  boolean spentNext=false;
                  if (totalNumOfSenators > 1) {
                    if ((1 == j && senetorCount.get(m) * 2 <= totalNumOfSenators - 1)) {
                    }
 else                     if (0 == j && (!spentNext || (senetorCount.get(m)) * 2 <= totalNumOfSenators - 1)) {
                      if ((senetorCount.get(m)) * 2 <= totalNumOfSenators - 1) {
                      }
 else                       if ((senetorCount.get(m) - 1) * 2 <= totalNumOfSenators - 2) {
                        spentNext=true;
                      }
                    }
 else {
                      ok=false;
                      break;
                    }
                  }
                }
                if (ok) {
                  runners+=String.valueOf(alphabet[k]);
                  senetorCount.set(k,senetorCount.get(k) - 1);
                  totalNumOfSenators--;
                  done=true;
                }
              }
              break;
            }
          }
        }
      }
      if (!runners.isEmpty()) {
        runners+="" "";
      }
    }
    fw.write(""Case #"" + (i + 1) + "": ""+ runners+ ""\n"");
  }
  in.close();
  fw.close();
}
"
30001200,"public static void main(String[] args) throws IOException {
  scanner=new Scanner(new BufferedReader(new FileReader(new File(name + "".in""))));
  writer=new PrintWriter(new FileWriter(new File(name + "".out"")));
  int t=scanner.nextInt();
  for (int i=1; i <= t; ++i) {
    writer.print(""Case #"" + i + "": "");
    int max=scanner.nextInt();
    int[] count=new int[14];
    int total=0;
    int[] save=new int[3];
    for (int i1=0; i1 < max; i1++) {
      count[i1]=scanner.nextInt();
      total+=count[i1];
    }
    while (total > 0) {
      int m=-1;
      int s=0;
      for (int i3=0; i3 < max && s <= 2; i3++) {
        if (count[i3] > m) {
          m=count[i3];
          s=0;
          save[s]=i3;
          s++;
        }
 else         if (count[i3] == m) {
          save[s]=i3;
          s++;
        }
      }
      if (s > 2) {
        s=1;
      }
      for (int i2=0; i2 < s; i2++) {
        writer.print((char)('A' + save[i2]));
        count[save[i2]]--;
        total--;
      }
      writer.print(' ');
    }
    writer.println();
  }
  writer.close();
  scanner.close();
}
"
30001201,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  for (int i=0; i < t; i++) {
    int n=s.nextInt();
    int[] store=new int[n];
    int sum=0;
    for (int j=0; j < n; j++) {
      store[j]=s.nextInt();
      sum=sum + store[j];
    }
    System.out.print(""Case #"");
    System.out.print(i + 1);
    System.out.print("": "");
    while (sum > 3) {
      int max1=0;
      int max2=0;
      int index=-1;
      int index2=-1;
      for (int j=0; j < n; j++) {
        if (store[j] > max1) {
          max1=store[j];
          index=j;
        }
      }
      for (int j=0; j < n; j++) {
        if (store[j] > max2 && index != j) {
          max2=store[j];
          index2=j;
        }
      }
      store[index]=store[index] - 1;
      store[index2]=store[index2] - 1;
      int dummy1=65 + index;
      int dummy2=65 + index2;
      System.out.print((char)(dummy1));
      System.out.print((char)(dummy2));
      System.out.print("" "");
      sum=sum - 2;
    }
    if (sum == 2) {
      int max1=0;
      int max2=0;
      int index=-1;
      int index2=-1;
      for (int j=0; j < n; j++) {
        if (store[j] > max1) {
          max1=store[j];
          index=j;
        }
      }
      for (int j=0; j < n; j++) {
        if (store[j] > max2 && index != j) {
          max2=store[j];
          index2=j;
        }
      }
      store[index]=store[index] - 1;
      store[index2]=store[index2] - 1;
      int dummy1=65 + index;
      int dummy2=65 + index2;
      System.out.print((char)(dummy1));
      System.out.print((char)(dummy2));
      System.out.print("" "");
    }
 else {
      int max1=0;
      int max2=0;
      int index=-1;
      int index2=-1;
      for (int j=0; j < n; j++) {
        if (store[j] > max1) {
          max1=store[j];
          index=j;
        }
      }
      store[index]=store[index] - 1;
      int dummy1=65 + index;
      System.out.print((char)(dummy1));
      System.out.print("" "");
      max1=0;
      max2=0;
      index=-1;
      index2=-1;
      for (int j=0; j < n; j++) {
        if (store[j] > max1) {
          max1=store[j];
          index=j;
        }
      }
      for (int j=0; j < n; j++) {
        if (store[j] > max2 && index != j) {
          max2=store[j];
          index2=j;
        }
      }
      store[index]=store[index] - 1;
      store[index2]=store[index2] - 1;
      dummy1=65 + index;
      int dummy2=65 + index2;
      System.out.print((char)(dummy1));
      System.out.print((char)(dummy2));
    }
    System.out.println();
  }
}
"
30001202,"public static void main(String[] args){
  A1C r=new A1C();
  try {
    r.in=new Scanner(new FileInputStream(new File(""A-large"" + "".in"")));
    r.out=new PrintWriter(new File(""A-large"" + "".out""));
    int tests=r.in.nextInt();
    for (int i=1; i <= tests; i++) {
      int n=r.in.nextInt();
      int[] quantity=new int[n];
      int maxInd=0;
      int min=Integer.MAX_VALUE;
      HashMap<Integer,ArrayList<Integer>> aux=new HashMap<>();
      int max=0;
      for (int j=0; j < n; j++) {
        quantity[j]=r.in.nextInt();
        if (quantity[j] >= quantity[maxInd]) {
          maxInd=j;
        }
        min=Math.min(quantity[j],min);
        max=Math.max(quantity[j],max);
        if (!aux.containsKey(quantity[j])) {
          aux.put(quantity[j],new ArrayList<>());
        }
        aux.get(quantity[j]).add(j);
      }
      int[] arCopy=Arrays.copyOf(quantity,quantity.length);
      Arrays.sort(arCopy);
      r.out.print(""Case #"" + i + "": "");
      int ind=arCopy.length - 1;
      while (aux.size() > 1) {
        int curMax=arCopy[ind];
        while (arCopy[ind - 1] == curMax) {
          ind--;
        }
        int nextMax=arCopy[ind - 1];
        int toDel=curMax - nextMax;
        for (int j=0; j < toDel; j++) {
          for (          int sen : aux.get(curMax)) {
            r.out.print(((char)('A' + sen)) + "" "");
            quantity[sen]--;
          }
        }
        aux.get(nextMax).addAll(aux.get(curMax));
        aux.remove(curMax);
        ind--;
      }
      ind=n - 1;
      while (ind > 1) {
        for (int j=0; j < quantity[ind]; j++) {
          r.out.print(((char)('A' + ind)) + "" "");
        }
        quantity[ind]=0;
        ind--;
      }
      for (int j=0; j < quantity[ind]; j++) {
        r.out.print(""AB"" + "" "");
      }
      r.out.println();
    }
    r.out.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001203,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(new File(""/Users/vaibhav/Documents/workspace/test/data/input.txt"")));
  int n=Integer.parseInt(br.readLine());
  char[] alpha=new char[]{'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
  for (int i=0; i < n; i++) {
    int[] list=new int[Integer.parseInt(br.readLine())];
    String[] nums=br.readLine().split("" "");
    for (int j=0; j < nums.length; j++) {
      list[j]=Integer.parseInt(nums[j]);
    }
    System.out.print(""Case #"" + (i + 1) + "": "");
    while (true) {
      StringBuffer out=new StringBuffer();
      int index=0;
      for (int j=1; j < list.length; j++) {
        if (list[index] < list[j]) {
          index=j;
        }
      }
      if (list[index] < 1) {
        System.out.println();
        break;
      }
      list[index]--;
      out.append(alpha[index]);
      index=0;
      for (int j=1; j < list.length; j++) {
        if (list[index] < list[j]) {
          index=j;
        }
      }
      if (list[index] < 1) {
        System.out.println(out + "" "");
        break;
      }
      if (list[index] == 1) {
        int sum=0;
        for (int j=0; j < list.length; j++) {
          sum=sum + list[j];
        }
        if (sum == 2) {
          System.out.print(out + "" "");
          continue;
        }
      }
      list[index]--;
      out.append(alpha[index]);
      System.out.print(out + "" "");
    }
  }
  br.close();
}
"
30001204,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  in=new Scanner(new File(""A-large.in""));
  int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    int N=in.nextInt();
    int[] P=new int[N];
    int total=0;
    for (int j=0; j < N; j++) {
      P[j]=in.nextInt();
      total+=P[j];
    }
    StringBuilder sb=new StringBuilder();
    while (total > 0) {
      int max1=0;
      int max2=0;
      int max1Idx=0;
      int max2Idx=0;
      for (int k=0; k < N; k++) {
        if (P[k] > max1) {
          max2=max1;
          max1=P[k];
          max2Idx=max1Idx;
          max1Idx=k;
        }
 else         if (P[k] > max2) {
          max2=P[k];
          max2Idx=k;
        }
      }
      sb.append(' ');
      if (P[max1Idx] > 1 && max2 * 2 <= total - 2) {
        P[max1Idx]-=2;
        total-=2;
        sb.append((char)('A' + max1Idx));
        sb.append((char)('A' + max1Idx));
      }
 else       if (max2 * 2 <= total - 1) {
        P[max1Idx]--;
        total--;
        sb.append((char)('A' + max1Idx));
      }
 else {
        P[max1Idx]--;
        P[max2Idx]--;
        total-=2;
        sb.append((char)('A' + max1Idx));
        sb.append((char)('A' + max2Idx));
      }
    }
    System.out.printf(""Case #%d:%s\n"",i,sb.toString());
  }
}
"
30001205,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int nCase=scanner.nextInt();
  for (int nc=1; nc <= nCase; nc++) {
    int N=scanner.nextInt();
    int total=0;
    int[] P=new int[N];
    for (int i=0; i < N; i++) {
      total+=P[i]=scanner.nextInt();
    }
    StringBuilder output=new StringBuilder(""Case #"" + nc + "":"");
    while (total > 0) {
      output.append(' ');
      if (total == 2) {
        for (int i=0; i < N; i++) {
          if (P[i] > 0)           output.append((char)('A' + i));
        }
        total-=2;
      }
 else {
        int first=-1;
        int tempFirst=0;
        for (int i=0; i < N; i++) {
          if (P[i] > tempFirst) {
            first=i;
            tempFirst=P[i];
          }
        }
        P[first]--;
        total--;
        output.append((char)('A' + first));
        int maxAllowed=total / 2;
        for (int i=0; i < N; i++) {
          if (P[i] > maxAllowed) {
            P[i]--;
            total--;
            output.append((char)('A' + i));
            break;
          }
        }
      }
    }
    output.append('\n');
    System.out.println(output.toString());
  }
}
"
30001206,"public static void main(String[] args) throws FileNotFoundException {
  FileInputStream fin=new FileInputStream(""src/a.in"");
  PrintStream fout=new PrintStream(new FileOutputStream(""src/a.out""));
  System.setIn(fin);
  System.setOut(fout);
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int n=in.nextInt();
    int[][] p=new int[26][2];
    int sum=0;
    for (int j=0; j < n; j++) {
      p[j][1]=in.nextInt();
      p[j][0]=65 + j;
      sum+=p[j][1];
    }
    for (int j=0; j < n; j++) {
      int max=p[j][1];
      int maxp=j;
      for (int k=j + 1; k < n; k++) {
        if (max < p[k][1]) {
          max=p[k][1];
          maxp=k;
        }
      }
      int bv=p[j][1];
      int bp=p[j][0];
      p[j][1]=max;
      p[j][0]=p[maxp][0];
      p[maxp][0]=bp;
      p[maxp][1]=bv;
    }
    System.out.print(""Case #"" + i + "":"");
    int ave=sum / n;
    int party=0;
    while (sum != 0) {
      party=0;
      boolean change=false;
      for (int j=0; j < n; j++) {
        if (p[j][1] > ave) {
          p[j][1]--;
          sum--;
          char b=(char)p[j][0];
          System.out.print("" "" + b);
          change=true;
        }
        if (p[j][1] != 0) {
          party++;
        }
      }
      ave=sum / party;
      if (change == false) {
        for (int j=0; j < n - 2; j++) {
          while (p[j][1] != 0) {
            p[j][1]--;
            char b=(char)p[j][0];
            System.out.print("" "" + b);
          }
        }
        while (p[n - 1][1] != 0) {
          p[n - 1][1]--;
          char b1=(char)p[n - 1][0];
          char b2=(char)p[n - 2][0];
          System.out.print("" "" + b1 + b2);
        }
        break;
      }
    }
    System.out.println("""");
  }
}
"
30001207,"public roundOne(int val,char c){
  this.val=val;
  this.c=c;
}
"
30001208,"public static void main(String[] args){
  int numOfCases;
  File file=new File(System.getProperty(""user.dir"") + ""/"" + ""TestCase"");
  try {
    Scanner sc=new Scanner(file);
    numOfCases=sc.nextInt();
    for (int num=1; num <= numOfCases; num++) {
      int[] s=new int[1000];
      int n;
      int total;
      n=sc.nextInt();
      total=n;
      for (int i=0; i < n; i++) {
        s[i]=sc.nextInt();
      }
      int indx=0;
      int indx2=0;
      int temp1=-1;
      int temp2=-1;
      System.out.print(""Case #"" + num + "": "");
      while (true) {
        int max=0;
        if (temp1 == -1) {
          indx=0;
          indx2=0;
        }
        for (int i=0; i < n; i++) {
          if (s[i] >= max) {
            max=s[i];
            indx=i;
          }
        }
        s[indx]--;
        int t;
        boolean not=false;
        total=n;
        for (t=0; t < n; t++) {
          if (s[t] != 0) {
            not=true;
          }
 else           total--;
        }
        if (!not) {
          System.out.print((char)(indx + 'A') + "" "");
          if (temp1 != -1) {
            System.out.print((char)(temp1 + 'A'));
            System.out.print((char)(temp2 + 'A'));
          }
          break;
        }
        if (total == 2) {
          int a=0, b=0;
          for (int i=0; i < n; i++) {
            if (s[i] > 0 && a == 0) {
              a=s[i];
            }
 else {
              b=s[i];
            }
          }
          if (a == b) {
            System.out.print("" "");
            continue;
          }
        }
        max=0;
        for (int i=0; i < n; i++) {
          if (s[i] >= max) {
            max=s[i];
            indx2=i;
          }
        }
        s[indx2]--;
        not=false;
        total=n;
        for (t=0; t < n; t++) {
          if (s[t] != 0) {
            not=true;
          }
 else           total--;
        }
        if (total != 1) {
          System.out.print((char)(indx + 'A'));
          System.out.print((char)(indx2 + 'A') + "" "");
        }
 else {
          temp1=indx;
          temp2=indx2;
        }
        if (!not)         break;
      }
      System.out.println("""");
    }
    sc.close();
  }
 catch (  Exception e) {
    System.out.println(e);
  }
}
"
30001209,"public static void main(String[] args) throws IOException {
  in=new Scanner(new BufferedReader(new InputStreamReader(USE_FILE ? new FileInputStream(FILE_NAME + "".in"") : System.in)));
  out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(USE_FILE ? new FileOutputStream(FILE_NAME + "".out"") : System.out)));
  int testCount=in.nextInt();
  for (int test=0; test < testCount; test++) {
    int N=in.nextInt();
    int[] a=new int[N];
    for (int i=0; i < N; i++) {
      a[i]=in.nextInt();
    }
    String res="""";
    int max=0;
    int nz=0;
    int z1=-1;
    int z2=-1;
    while (true) {
      for (int i=0; i < a.length; i++) {
        if (a[i] > a[max]) {
          max=i;
        }
        if (a[i] > 0) {
          nz++;
          z2=z1;
          z1=i;
        }
      }
      if (nz == 0) {
        break;
      }
      if (nz == 1 || nz > 2) {
        res+=(char)('A' + max) + "" "";
        a[max]--;
      }
      if (nz == 2) {
        if (a[z1] == a[z2]) {
          res+=(char)('A' + z1) + """" + (char)('A' + z2)+ "" "";
          a[z1]--;
          a[z2]--;
        }
 else {
          res+=(char)('A' + max) + "" "";
          a[max]--;
        }
      }
      max=0;
      nz=0;
      z1=-1;
      z2=-1;
    }
    out.println(""Case #"" + (test + 1) + "": ""+ res.trim());
  }
  in.close();
  out.close();
}
"
30001210,"public static void main(String[] args) throws Exception {
  BufferedWriter bw=new BufferedWriter(new FileWriter(""A-large.out""));
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  br.readLine();
  String line;
  int testCase=1;
  while ((line=br.readLine()) != null) {
    if (line.length() == 0) {
      break;
    }
    if ((line=br.readLine()) == null || line.length() == 0) {
      break;
    }
    bw.write(""Case #"" + (testCase++) + "":"");
    String[] start=line.split("" "");
    int[] senators=new int[start.length];
    int senatorsLeft=0;
    int partiesLeft=0;
    for (int i=0; i < start.length; i++) {
      senators[i]=Integer.parseInt(start[i]);
      senatorsLeft+=senators[i];
      partiesLeft++;
    }
    while (senatorsLeft > 0) {
      if (partiesLeft > 2) {
        int maxVal=0, maxInd=0;
        for (int i=0; i < senators.length; i++) {
          if (senators[i] > maxVal) {
            maxInd=i;
            maxVal=senators[i];
          }
        }
        bw.write("" "" + chars[maxInd]);
        senators[maxInd]--;
        if (senators[maxInd] == 0) {
          partiesLeft--;
        }
      }
 else {
        int firstInd=-1, secondInd=-1;
        for (int i=0; i < senators.length; i++) {
          if (senators[i] > 0) {
            if (firstInd == -1) {
              firstInd=i;
            }
 else {
              secondInd=i;
              break;
            }
          }
        }
        if (senatorsLeft % 2 > 0) {
          if (senators[firstInd] == senators[secondInd]) {
            for (int j=senators[firstInd]; j > 0; j--) {
              bw.write("" "" + chars[firstInd] + chars[secondInd]);
            }
          }
 else           if (senators[firstInd] > senators[secondInd]) {
            bw.write("" "");
            for (int j=senators[firstInd] - senators[secondInd]; j > 0; j--) {
              bw.write(chars[firstInd]);
            }
          }
 else {
            bw.write("" "");
            for (int j=senators[firstInd] - senators[secondInd]; j > 0; j--) {
              bw.write(chars[secondInd]);
            }
          }
        }
 else {
          for (int j=senators[firstInd]; j > 0; j--) {
            bw.write("" "" + chars[firstInd] + chars[secondInd]);
          }
        }
        senatorsLeft=0;
        partiesLeft=0;
      }
    }
    bw.write(""\n"");
  }
  br.close();
  bw.close();
}
"
30001211,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws FileNotFoundException, IOException {
  String problem=""A"";
  String input=problem + ""-large.in"";
  Scanner in=new Scanner(new File(rutaDatos + ""input\\"" + input));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(rutaDatos + ""output\\"" + input+ "".out.txt"")));
  int T=in.nextInt();
  for (int i=0; i < T; i++) {
    String answer=""Case #"" + (i + 1) + "":"";
    int ns[]=new int[26];
    int np=in.nextInt();
    for (int j=0; j < np; j++)     ns[j]=in.nextInt();
    while (true) {
      int may=0;
      int ts=0;
      for (int j=0; j < 26; j++) {
        if (ns[j] > ns[may])         may=j;
        ts+=ns[j];
      }
      int may2=0;
      for (int j=0; j < 26; j++)       if (ns[j] - (j == may ? 1 : 0) >= ns[may2] - (may2 == may ? 1 : 0))       may2=j;
      if (ts == 0)       break;
      ns[may]--;
      answer=answer + "" "" + (char)(may + 'A');
      ts--;
      if (ts == 0)       break;
      if (ts == 2)       continue;
      answer=answer + (char)(may2 + 'A');
      ns[may2]--;
    }
    System.out.println(answer);
    out.println(answer);
  }
  out.close();
}
"
30001212,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int z=1; z <= t; z++) {
    System.out.print(""Case #"" + z + "": "");
    int N=sc.nextInt();
    int count[]=new int[N];
    int people=0;
    for (int i=0; i < N; i++) {
      count[i]=sc.nextInt();
      people+=count[i];
    }
    boolean flag=false;
    while (!flag) {
      flag=true;
      String maxpeople="""";
      int max=0;
      for (int i=0; i < N; i++) {
        if (count[i] == 0) {
        }
 else {
          flag=false;
          if (count[i] > max) {
            max=count[i];
            maxpeople=i + "","";
          }
 else           if (count[i] == max) {
            maxpeople=maxpeople + i + "","";
          }
        }
      }
      if (!flag) {
        String[] maxindexes=maxpeople.split("","");
        int r=maxindexes.length % 2 == 0 ? 2 : 1;
        for (int i=0; i < r; i++) {
          int index=Integer.parseInt(maxindexes[i]);
          System.out.print((char)(index + 'A'));
          count[index]=count[index] - 1;
        }
        System.out.print("" "");
      }
    }
    System.out.println("""");
  }
}
"
30001213,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new File(""A-large.in""));
    PrintWriter out=new PrintWriter(""A-large.out"");
    int tests=in.nextInt();
    for (int test=1; test <= tests; test++) {
      String answer=""Case #"" + test + "": "";
      int n=in.nextInt();
      int[] ps=new int[n];
      for (int i=0; i < n; i++) {
        int temp=in.nextInt();
        ps[i]=temp;
      }
      int greatest=1;
      int great=0;
      if (ps[0] > ps[1]) {
        greatest=0;
        great=1;
      }
      for (int i=2; i < n; i++) {
        if (ps[greatest] < ps[i]) {
          great=greatest;
          greatest=i;
        }
 else         if (ps[great] < ps[i])         great=i;
      }
      while (ps[great] + 1 < ps[greatest]) {
        answer+=((char)('A' + greatest)) + """" + ((char)('A' + greatest))+ "" "";
        ps[greatest]-=2;
      }
      if (ps[great] < ps[greatest]) {
        answer+=((char)('A' + greatest)) + "" "";
        ps[greatest]--;
      }
      for (int i=0; i < n; i++) {
        if (i != greatest && i != great) {
          while (ps[i] > 1) {
            answer+=((char)('A' + i)) + """" + ((char)('A' + i))+ "" "";
            ps[i]-=2;
          }
          if (ps[i] == 1) {
            answer+=((char)('A' + i)) + "" "";
            ps[i]-=1;
          }
        }
      }
      for (int i=0; i < ps[greatest]; i++)       answer+=((char)('A' + greatest)) + """" + ((char)('A' + great))+ "" "";
      out.println(answer);
    }
    in.close();
    out.close();
  }
 catch (  FileNotFoundException ex) {
    System.out.println(""ERROR"");
  }
}
"
30001214,"public static void main(String[] args) throws FileNotFoundException {
  PrintWriter out=new PrintWriter(new File(""Senate.out""));
  Scanner s=new Scanner(new File(""A-large.in""));
  int t=s.nextInt();
  for (int tests=0; tests < t; ++tests) {
    out.print(""Case #"" + (tests + 1) + "": "");
    int n=s.nextInt();
    int total=0;
    int senate[]=new int[n];
    for (int i=0; i < n; ++i) {
      senate[i]=s.nextInt();
      total+=senate[i];
    }
    boolean formatstarted=false;
    while (total != 0) {
      if (formatstarted)       out.print("" "");
      int total1=total;
      int highest=-1;
      int next=-1;
      int temp=0;
      boolean onlyone=false;
      boolean usenext=true;
      int check=-1;
      for (int i=0; i < n; ++i) {
        if (senate[i] > temp) {
          highest=i;
          temp=senate[i];
        }
      }
      --senate[highest];
      --total1;
      temp=0;
      for (int i=0; i < n; ++i) {
        if (senate[i] > temp) {
          next=i;
          temp=senate[i];
        }
      }
      out.print((char)(highest + 'A'));
      if (next >= 0) {
        --senate[next];
        --total1;
        temp=0;
        for (int i=0; i < n; ++i) {
          if (senate[i] > 0 && !onlyone) {
            temp=1;
            onlyone=true;
            usenext=false;
          }
 else           if (senate[i] > 0 && onlyone) {
            usenext=true;
            break;
          }
        }
        if (usenext && next >= 0) {
          out.print((char)(next + 'A'));
        }
 else         if (!usenext && next >= 0) {
          ++senate[next];
          ++total1;
        }
      }
      total=total1;
      formatstarted=true;
    }
    out.println();
  }
  out.close();
}
"
30001215,"public static void main(String[] args) throws java.lang.Exception {
  Scanner in=new Scanner(System.in);
  int testcases;
  int hash;
  testcases=in.nextInt();
  hash=testcases + 1;
  while (testcases > 0) {
    int n;
    n=in.nextInt();
    int arr[]=new int[n];
    String result="""";
    for (int i=0; i < n; i++) {
      arr[i]=in.nextInt();
    }
    while (arr[0] != 0) {
      int m1=-1;
      int m2=-1;
      int t1=0;
      int t2=0;
      for (int i=0; i < n; i++) {
        if (arr[i] > m1) {
          m1=arr[i];
          t1=i;
        }
      }
      for (int i=0; i < t1; i++) {
        if (arr[i] == m1) {
          m2=m1;
          t2=i;
        }
      }
      if (m1 == 3) {
        int temp1=arr[t1] - (m1 / 2);
        arr[t1]=(m1 / 2);
        while (temp1 != 0) {
          if (t1 == 0) {
            result=result + ""A"";
          }
 else           if (t1 == 1)           result=result + ""B"";
 else           result=result + ""C"";
          temp1--;
        }
        result=result + "" "";
      }
 else {
        if (m1 != -1 && m2 != -1) {
          int temp1=arr[t1] - (m1 / 2);
          arr[t1]=(m1 / 2);
          int temp2=arr[t2] - (m2 / 2);
          arr[t2]=(m2 / 2);
          while (temp1 != 0) {
            if (t1 == 0) {
              result=result + ""A"";
            }
 else             if (t1 == 1)             result=result + ""B"";
 else             result=result + ""C"";
            temp1--;
          }
          while (temp2 != 0) {
            if (t2 == 0) {
              result=result + ""A"";
            }
 else             if (t2 == 1)             result=result + ""B"";
 else             result=result + ""C"";
            temp1--;
          }
          result=result + "" "";
        }
 else {
          int temp1=arr[t1] - (m1 / 2);
          arr[t1]=(m1 / 2);
          while (temp1 != 0) {
            if (t1 == 0) {
              result=result + ""A"";
            }
 else             if (t1 == 1)             result=result + ""B"";
 else             result=result + ""C"";
            temp1--;
          }
          result=result + "" "";
        }
      }
    }
    System.out.println(""Case #"" + (hash - testcases) + "":  ""+ result);
    testcases--;
  }
}
"
30001216,"public static void main(String[] args){
  Scanner reader=new Scanner(System.in);
  int t=reader.nextInt();
  reader.nextLine();
  for (int i=1; i <= t; i++) {
    int n=reader.nextInt();
    int[] p=new int[n];
    int sum=0;
    for (int j=0; j < n; j++) {
      p[j]=reader.nextInt();
      sum+=p[j];
    }
    String sol="""";
    int acc=0;
    while (acc < sum) {
      int maxP=0, maxPI=0;
      for (int k=0; k < n; k++) {
        if (p[k] > maxP) {
          maxP=p[k];
          maxPI=k;
        }
      }
      p[maxPI]--;
      acc++;
      char e=(char)(maxPI + 65);
      sol+="" "" + e;
      int l=0, m=0;
      for (int k=0; k < n; k++) {
        if (p[k] == maxP) {
          l++;
          m=k;
        }
      }
      if (l == 1) {
        p[m]--;
        acc++;
        char f=(char)(m + 65);
        sol+=f;
      }
    }
    System.out.println(""Case #"" + i + "":""+ sol);
  }
}
"
30001217,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int nT=Integer.parseInt(in.readLine());
  for (int t=1; t <= nT; t++) {
    System.out.printf(""Case #%d: "",t);
    int p=Integer.parseInt(in.readLine());
    int[] a=new int[p];
    StringTokenizer st=new StringTokenizer(in.readLine());
    for (int i=0; i < p; i++)     a[i]=Integer.parseInt(st.nextToken());
    StringBuilder ans=new StringBuilder();
    int max=0;
    int max1=0;
    for (    int n : a)     max1=Math.max(max1,n);
    while ((max=max1) != 0) {
      for (int i=0; i < p; i++)       if (a[i] == max) {
        a[i]--;
        ans.append((char)(i + 'A'));
      }
    }
    ans.reverse();
    for (int i=2; i < ans.length(); i+=3)     ans.insert(i,' ');
    ans.reverse();
    System.out.println(ans.toString());
  }
}
"
30001218,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""A-large.out""));
  int t, total, tc, n, i, arr[], M, c, twice;
  String inp[], character="""";
  t=Integer.parseInt(br.readLine().trim());
  for (tc=1; tc <= t; tc++) {
    total=0;
    character="""";
    n=Integer.parseInt(br.readLine().trim());
    arr=new int[n];
    inp=br.readLine().trim().split("" "");
    for (i=0; i < n; i++) {
      arr[i]=Integer.parseInt(inp[i]);
      total+=arr[i];
    }
    while (total > 0) {
      character+="" "";
      int M1, i1;
      for (M1=0, i1=1; i1 < arr.length; i1++)       if (arr[M1] < arr[i1])       M1=i1;
      M=arr[M1];
      int i2, c1;
      for (i2=c1=0; i2 < arr.length; i2++)       if (arr[i2] == M)       c1++;
      c=c1;
      if (c == 2) {
        twice=2;
        for (i=0; i < n && twice > 0; i++) {
          if (arr[i] == M && twice > 0) {
            character+=(char)(65 + i) + """";
            arr[i]--;
            total--;
          }
        }
      }
 else {
        for (i=0; i < n; i++) {
          if (arr[i] == M) {
            character+=(char)(65 + i) + """";
            arr[i]--;
            total--;
            break;
          }
        }
      }
    }
    pw.println(""Case #"" + tc + "":""+ character);
  }
  pw.flush();
  pw.close();
}
"
30001219,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  String huruf[]={""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""};
  int a=scan.nextInt();
  for (int i=0; i < a; i++) {
    int b=scan.nextInt();
    int sum=0;
    int max=0;
    int maxindex=0;
    int x[]=new int[b];
    for (int j=0; j < b; j++) {
      x[j]=scan.nextInt();
      sum=sum + x[j];
      if (max < x[j]) {
        max=x[j];
        maxindex=j;
      }
    }
    System.out.print(""Case #"" + (i + 1) + "": "");
    int maxdua=0;
    int maxdin=0;
    for (int j=0; j < b; j++) {
      if ((maxdua < x[j]) && (j != maxindex)) {
        maxdua=x[j];
        maxdin=j;
      }
    }
    int hahaha=max - maxdua;
    for (int j=0; j < hahaha; j++) {
      System.out.print(huruf[maxindex] + "" "");
      max--;
    }
    for (int j=0; j < b; j++) {
      if ((j != maxdin) && (j != maxindex)) {
        for (int k=0; k < x[j]; k++) {
          System.out.print(huruf[j] + "" "");
        }
      }
    }
    for (int j=0; j < max; j++) {
      System.out.print(huruf[maxindex] + huruf[maxdin] + "" "");
    }
    System.out.println();
  }
}
"
30001220,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""A-large.in""));
  int t=sc.nextInt();
  int count=1;
  while (t-- > 0) {
    int numParties=sc.nextInt();
    int[] partieMembers=new int[numParties];
    int numSenators=0;
    for (int i=0; i < numParties; i++) {
      partieMembers[i]=sc.nextInt();
      numSenators+=partieMembers[i];
    }
    System.out.print(""Case #"" + count + "": "");
    if (numParties == 2) {
      if (partieMembers[0] == partieMembers[1] + 2) {
        System.out.print(""AA "");
        numSenators-=2;
      }
 else       if (partieMembers[0] + 2 == partieMembers[1]) {
        System.out.print(""BB "");
        numSenators-=2;
      }
 else       if (partieMembers[0] == partieMembers[1] + 1) {
        System.out.print(""A "");
        numSenators--;
      }
 else       if (partieMembers[0] + 1 == partieMembers[1]) {
        System.out.print(""B "");
        numSenators--;
      }
 else       if (partieMembers[0] == partieMembers[1]) {
      }
      for (int i=0; i < numSenators / 2; i++) {
        System.out.print(""AB "");
      }
    }
 else {
      for (int i=0; i < numSenators - 2; i++) {
        int biggestPartie1=0;
        int members=0;
        for (int i1=0; i1 < partieMembers.length; i1++) {
          if (members < partieMembers[i1]) {
            members=partieMembers[i1];
            biggestPartie1=i1;
          }
        }
        int biggestPartie=biggestPartie1;
        partieMembers[biggestPartie]--;
        char evac=(char)(65 + biggestPartie);
        System.out.print(evac + "" "");
      }
      String evac="""";
      for (int i=0; i < numParties; i++) {
        if (partieMembers[i] > 0) {
          evac+=(char)(65 + i);
        }
      }
      System.out.print(evac);
    }
    System.out.println("""");
    count++;
  }
  sc.close();
}
"
30001221,"public static void main(String args[]){
  Scanner s=new Scanner(System.in);
  int T=s.nextInt();
  for (int i=1; i <= T; i++) {
    int n=s.nextInt();
    int enteros[]=new int[n];
    for (int j=0; j < n; j++) {
      enteros[j]=s.nextInt();
    }
    System.out.print(""Case #"" + i + "":"");
    while (true) {
      int nocero=0;
      int max=0;
      int pos=-1;
      for (int j=0; j < n; j++) {
        if (enteros[j] > 0)         nocero++;
        if (enteros[j] > max) {
          pos=j;
          max=enteros[j];
        }
      }
      if (max == 0) {
        break;
      }
      int segundo=0;
      int pos2=-1;
      for (int j=0; j < n; j++) {
        if (enteros[j] > segundo & j != pos) {
          pos2=j;
          segundo=enteros[j];
        }
      }
      if (max == segundo && nocero != 3) {
        enteros[pos]--;
        enteros[pos2]--;
        System.out.print("" "" + ((char)((int)('A') + pos)) + ((char)((int)('A') + pos2)));
      }
 else {
        enteros[pos]--;
        System.out.print("" "" + ((char)((int)('A') + pos)));
      }
    }
    System.out.println();
  }
}
"
30001222,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    System.out.printf(""case #%d:"",t);
    int N=in.nextInt();
    int[] arr=new int[N];
    int sum=0;
    for (int i=0; i < N; i++) {
      int tmp=in.nextInt();
      arr[i]=tmp;
      sum+=tmp;
    }
    StringBuilder sb=new StringBuilder();
    while (true) {
      int max=-1, maxi=-1;
      int sec=-2, seci=-2;
      int left=0;
      for (int i=0; i < N; i++) {
        if (arr[i] > 0)         left++;
        if (arr[i] > max) {
          sec=max;
          seci=maxi;
          max=arr[i];
          maxi=i;
        }
 else         if (arr[i] > sec) {
          sec=arr[i];
          seci=i;
        }
      }
      char a='A';
      a+=maxi;
      char b='A';
      b+=seci;
      if (left == 2) {
        while (max - sec > 1) {
          sb.append("" "").append(a).append(a);
          max=max - 2;
        }
        if (max != sec) {
          sb.append("" "").append(a);
          max=max - 1;
        }
        while (max != 0) {
          sb.append("" "").append(a).append(b);
          max=max - 1;
          sec=sec - 1;
        }
        break;
      }
 else {
        sb.append("" "").append(a);
        arr[maxi]--;
      }
    }
    System.out.println(sb.toString());
  }
}
"
30001223,"public static void main(String[] args) throws Exception {
  Round1CProblemA r=(new Round1CProblemA());
  Scanner sc=new Scanner(new FileReader(""input.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""output.txt""));
  int T=sc.nextInt();
  for (int t=0; t < T; t++) {
    System.out.println(""Now case "" + (t + 1));
    int N=sc.nextInt();
    int[] P=new int[N];
    for (int i=0; i < N; i++) {
      P[i]=sc.nextInt();
    }
    int pe=0;
    for (int i=0; i < N; i++) {
      pe=pe + P[i];
    }
    String alp=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    String ans="""";
    while (pe > 0) {
      int maxp=0;
      for (int i=1; i < P.length; i++) {
        if (P[i] > P[maxp])         maxp=i;
      }
      P[maxp]=P[maxp] - 1;
      pe=pe - 1;
      ans=ans + alp.charAt(maxp);
      if (pe == 2) {
      }
 else {
        for (int i=1; i < P.length; i++) {
          if (P[i] > P[maxp])           maxp=i;
        }
        P[maxp]=P[maxp] - 1;
        pe=pe - 1;
        ans=ans + alp.charAt(maxp);
      }
      ans=ans + "" "";
    }
    pw.print(""Case #"" + (t + 1) + "": ""+ ans);
    pw.println();
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30001224,"public static void main(String arg[]){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int j=1; j <= t; j++) {
    int p=in.nextInt();
    int arr[]=new int[p];
    int count=0;
    int max1=0;
    int max2=0;
    int loc1=-1;
    int loc2=-1;
    for (int i=0; i < p; i++) {
      arr[i]=in.nextInt();
      count+=arr[i];
    }
    System.out.print(""Case #"" + j + "":"");
    while (count > 0) {
      max1=0;
      max2=0;
      loc1=-1;
      loc2=-1;
      for (int i=0; i < p; i++) {
        if (arr[i] > max1) {
          max2=max1;
          loc2=loc1;
          max1=arr[i];
          loc1=i;
        }
 else         if (arr[i] > max2) {
          max2=arr[i];
          loc2=i;
        }
      }
      if ((max2 < (count - 2) / 2 && count != 1 && count != 3) || ((max2 == (count - 2) / 2 || max2 == max1) && count != 1 && count != 3)) {
        System.out.printf("" %c%c"",(loc1 + 65),(loc2 + 65));
        count-=2;
        arr[loc1]-=1;
        arr[loc2]-=1;
      }
 else       if ((count != 1) && count != 3) {
        System.out.printf("" %c%c"",(loc1 + 65),(loc1 + 65));
        count-=2;
        arr[loc1]-=2;
      }
 else {
        System.out.printf("" %c"",(loc1 + 65));
        arr[loc1]-=1;
        count-=1;
      }
    }
    System.out.println();
  }
}
"
30001225,"public static void main(String args[]) throws Exception {
  Locale.setDefault(Locale.US);
  Scanner in=new Scanner(new File(INPUT_FILE));
  BufferedWriter out=new BufferedWriter(new FileWriter(new File(OUTPUT_FILE)));
  int T=in.nextInt();
  in.nextLine();
  for (int t=1; t <= T; t++) {
    String result="""";
    int N=in.nextInt();
    int[] P=new int[N];
    for (int i=0; i < N; i++) {
      P[i]=in.nextInt();
    }
    int num=0;
    for (int i=0; i < N; i++) {
      num+=P[i];
    }
    int max1=0;
    for (int i=0; i < N; i++) {
      if (P[max1] < P[i]) {
        max1=i;
      }
    }
    int max2=0;
    for (int i=0; i < N; i++) {
      if (i != max1 && (max1 == max2 || P[max2] < P[i])) {
        max2=i;
      }
    }
    while (P[max1] > P[max2]) {
      result+=(char)('A' + max1);
      P[max1]--;
      num--;
      if (P[max1] > P[max2]) {
        result+=(char)('A' + max1);
        P[max1]--;
        num--;
      }
      result+="" "";
    }
    for (int i=0; i < N; i++) {
      if (i != max1 && i != max2) {
        while (P[i] > 0) {
          result+=(char)('A' + i);
          P[i]--;
          num--;
          if (P[i] > 0) {
            result+=(char)('A' + i);
            P[i]--;
            num--;
          }
          result+="" "";
        }
      }
    }
    while (P[max1] > 0) {
      result+=(char)('A' + max1);
      P[max1]--;
      num--;
      if (P[max2] > 0) {
        result+=(char)('A' + max2);
        P[max2]--;
        num--;
      }
      result+="" "";
    }
    System.out.println(""Case #"" + t + "": ""+ result);
    out.append(""Case #"" + t + "": ""+ result);
    out.newLine();
  }
  in.close();
  out.close();
}
"
30001226,"public static void main(String args[]) throws FileNotFoundException {
  String inFile=""A-large.in"";
  String outFile=""A-large.out"";
  File file=new File(inFile);
  Scanner scan=new Scanner(file);
  PrintWriter writer=new PrintWriter(outFile);
  int t=scan.nextInt();
  for (int i=0; i < t; i++) {
    int n=scan.nextInt();
    int[][] p=new int[2][n];
    int s=0;
    for (int u=0; u < n; u++) {
      p[0][u]=u;
      p[1][u]=scan.nextInt();
      s+=p[1][u];
    }
    for (int u=0; u < n - 1; u++) {
      int minIndex=u;
      for (int v=u + 1; v < n; v++)       if (p[1][v] < p[1][minIndex])       minIndex=v;
      if (minIndex != u) {
        int tmp=p[1][u];
        p[1][u]=p[1][minIndex];
        p[1][minIndex]=tmp;
        tmp=p[0][u];
        p[0][u]=p[0][minIndex];
        p[0][minIndex]=tmp;
      }
    }
    int u=p[1].length - 2;
    String str="""";
    while (u >= 0) {
      while (p[1][n - 1] > p[1][u]) {
        for (int v=n - 1; v > u; v--) {
          char ch=(char)('A' + p[0][v]);
          str=str + ch + "" "";
          p[1][v]--;
          s--;
        }
      }
      u=u - 1;
    }
    if (n > 2) {
      while (p[1][2] > 0) {
        for (int v=n - 1; v >= 2; v--) {
          char ch=(char)('A' + p[0][v]);
          str=str + ch + "" "";
          p[1][v]--;
          s--;
        }
      }
    }
    while (p[1][0] > 0) {
      char ch1=(char)('A' + p[0][0]);
      char ch2=(char)('A' + p[0][1]);
      str=str + ch1 + ch2+ "" "";
      p[1][0]--;
      p[1][1]--;
    }
    writer.printf(""Case #%d: %s"",i + 1,str);
    writer.println();
  }
  writer.close();
}
"
30001227,"public static void main(String[] args) throws Exception {
  try (Scanner in=new Scanner(new BufferedReader(new FileReader(IN_FILE)))){
    int numCases=in.nextInt();
    for (int i=0; i < numCases; i++) {
      int numParties=in.nextInt();
      int[] counts=new int[numParties];
      for (int j=0; j < numParties; j++) {
        counts[j]=in.nextInt();
      }
      StringBuilder result1=new StringBuilder();
      int totalCount=Arrays.stream(counts).sum();
      int numRemoved=0;
      while (numRemoved < totalCount) {
        if (result1.length() > 0) {
          result1.append("" "");
        }
        Integer maxVal=null;
        Integer secondMax=null;
        Integer ix11=null;
        Integer ix21=null;
        for (int i1=0; i1 < counts.length; i1++) {
          if (maxVal == null || counts[i1] > maxVal) {
            if (maxVal != null && (secondMax == null || maxVal > secondMax)) {
              secondMax=maxVal;
              ix21=ix11;
            }
            maxVal=counts[i1];
            ix11=i1;
          }
 else           if (secondMax == null || counts[i1] > secondMax) {
            secondMax=counts[i1];
            ix21=i1;
          }
        }
        assert(ix11 == null || ix11 != ix21);
        Integer[] maxIxs=new Integer[]{ix11,ix21};
        int ix1=maxIxs[0];
        int ix2=maxIxs[1];
        if (counts[ix1] == counts[ix2] && !(counts[ix1] == 1 && totalCount - numRemoved == 3)) {
          result1.append((char)('A' + ix1));
          result1.append((char)('A' + ix2));
          counts[ix1]--;
          counts[ix2]--;
          numRemoved+=2;
        }
 else {
          result1.append((char)('A' + ix1));
          counts[ix1]--;
          numRemoved++;
        }
      }
      String result=result1.toString();
      String resultStr=result;
      System.out.println(String.format(""Case #%s: %s"",i + 1,resultStr));
    }
  }
 }
"
30001228,"Solution(char a,int k){
  alpha=a;
  no=k;
}
"
30001229,"public static void main(String[] args) throws IOException, URISyntaxException {
  int caseNum=0;
  List<String> lines=new ArrayList<>();
  String result=new String();
  int parties=0;
  for (  String line : Files.readAllLines(Paths.get(ClassLoader.getSystemResource(""A-large.in"").toURI()))) {
    if (caseNum == 0) {
      ++caseNum;
      continue;
    }
    if (parties == 0) {
      parties=Integer.valueOf(line);
      continue;
    }
    String[] nesto=line.split("" "");
    int[] members=new int[nesto.length];
    for (int i=0; i < nesto.length; i++) {
      members[i]=Integer.valueOf(nesto[i]);
    }
    boolean evacuated=false;
    int f=-1, fi=-1, s=-1, si=-1, sum=0;
    int[] sorted;
    while (!evacuated) {
      sorted=Arrays.copyOf(members,members.length);
      Arrays.sort(sorted);
      f=sorted[sorted.length - 1];
      s=sorted[sorted.length - 2];
      if (f == 0) {
        evacuated=true;
        break;
      }
      for (int i=0; i < members.length; i++) {
        sum+=members[i];
        if (f == members[i] && fi == -1) {
          fi=i;
        }
        if (si == -1 && s == members[i] && i != fi) {
          si=i;
        }
      }
      if (sum == 3) {
        result+=(String.valueOf((char)(fi + 65)) + "" "");
        members[fi]--;
      }
 else {
        result+=String.valueOf((char)(fi + 65)) + String.valueOf((char)(si + 65)) + "" "";
        members[fi]--;
        if (si != -1) {
          members[si]--;
        }
      }
      s=-1;
      f=-1;
      si=-1;
      fi=-1;
      sum=0;
    }
    lines.add(String.format(""Case #%s: %s"",caseNum++,result.trim()));
    result=new String();
    parties=0;
  }
  Files.write(Paths.get(""src\\a.out""),lines,StandardOpenOption.CREATE,StandardOpenOption.TRUNCATE_EXISTING);
}
"
30001230,"public static void main(String[] args){
  int ind, tmp, n, child;
  Scanner in=new Scanner(System.in);
  int numRuns=in.nextInt();
  for (int run=1; run <= numRuns; run++) {
    n=in.nextInt();
    int[] count=new int[n];
    int[] heap=new int[n];
    int total=0;
    for (int i=0; i < n; i++) {
      count[i]=in.nextInt();
      total+=count[i];
      heap[i]=i;
      ind=i;
      while (count[heap[ind]] > count[heap[(ind - 1) / 2]]) {
        heap[ind]=heap[(ind - 1) / 2];
        ind=(ind - 1) / 2;
        heap[ind]=i;
      }
    }
    String solution="""";
    for (int i=0; i < total; i++) {
      tmp=heap[0];
      solution+=(char)('A' + heap[0]);
      count[heap[0]]--;
      ind=0;
      while (true) {
        child=ind * 2 + 1;
        if (child + 1 < n && count[heap[child]] < count[heap[child + 1]])         child++;
        if (child < n && count[heap[child]] > count[heap[ind]]) {
          heap[ind]=heap[child];
          heap[child]=tmp;
          ind=child;
        }
 else         break;
      }
      if (2 * count[heap[0]] <= (total - 1 - i))       solution+="" "";
    }
    System.out.println(""Case #"" + run + "": ""+ solution.trim());
  }
}
"
30001231,"@SuppressWarnings(""resource"") public static void main(String[] args) throws FileNotFoundException {
  System.out.println(""Enter no. of test cases."");
  FileInputStream fis=new FileInputStream(""A3.txt"");
  Scanner in=new Scanner(fis);
  int t=in.nextInt();
  for (int i=1; i <= t; i++) {
    int N=in.nextInt();
    ArrayList<Integer> tp=new ArrayList<Integer>();
    int sum=0;
    for (int j=0; j < N; j++) {
      int nt=in.nextInt();
      tp.add(nt);
      sum+=nt;
    }
    StringBuilder sb=new StringBuilder();
    while (sum > 0) {
      int max1=0;
      int imax1=-1;
      for (int k=0; k < N; k++) {
        if (tp.get(k) > max1) {
          max1=tp.get(k);
          imax1=k;
        }
      }
      int max2=0;
      int imax2=-1;
      for (int k=0; k < N; k++) {
        if (tp.get(k) > max2 && (max2 <= max1 && k != imax1)) {
          max2=tp.get(k);
          imax2=k;
        }
      }
      int k=0;
      for (k=0; k < N; k++) {
        if ((k == imax1 || k == imax2) && (2 * (tp.get(k) - 1) > sum - 2))         break;
 else         if (k != imax1 && k != imax2 && (2 * tp.get(k) > (sum - 2)))         break;
      }
      if (k == N) {
        char c=(char)('A' + imax1);
        char d=(char)('A' + imax2);
        sb.append(c);
        sb.append(d);
        sb.append("" "");
        sum-=2;
        tp.set(imax1,tp.get(imax1) - 1);
        tp.set(imax2,tp.get(imax2) - 1);
      }
 else {
        char c=(char)('A' + imax1);
        sb.append(c);
        sb.append("" "");
        sum-=1;
        tp.set(imax1,tp.get(imax1) - 1);
      }
    }
    System.out.println(""Case #"" + i + "": ""+ sb.toString());
  }
}
"
30001232,"String next(){
  while (!tokenizer.hasMoreTokens())   tokenizer=new StringTokenizer(nextLine());
  return tokenizer.nextToken();
}
"
30001233,"public static void main(String args[]) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""C:\\Users\\manas\\Downloads\\A-large (1).in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""C:\\Users\\manas\\Documents\\google code jams\\first_big.txt""));
  int t=Integer.parseInt(br.readLine());
  int a=1;
  while (t > 0) {
    int n=Integer.parseInt(br.readLine());
    String[] p=br.readLine().split("" "");
    ArrayList<Integer> vals=new ArrayList<Integer>();
    String[] alpha={""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""};
    HashMap<Integer,Integer> count=new HashMap<Integer,Integer>();
    for (int i=0; i < p.length; i++) {
      vals.add(Integer.parseInt(p[i]));
      count.put(i,vals.get(i));
    }
    int parties_done=0;
    System.out.print(""Case #"" + a + "": "");
    bw.write(""Case #"" + a + "": "");
    a++;
    while (parties_done != n) {
      int frst_max=0;
      int second_max=0;
      int first_pos=-1;
      int second_pos=-1;
      for (int i=0; i < vals.size(); i++) {
        if (vals.get(i) > frst_max) {
          frst_max=vals.get(i);
          first_pos=i;
        }
      }
      vals.set(first_pos,vals.get(first_pos) - 1);
      for (int i=0; i < vals.size(); i++) {
        if (vals.get(i) > second_max) {
          second_max=vals.get(i);
          second_pos=i;
        }
      }
      vals.set(second_pos,vals.get(second_pos) - 1);
      if (n - parties_done == 3) {
        System.out.print(alpha[first_pos] + "" "");
        bw.write(alpha[first_pos] + "" "");
        vals.set(second_pos,vals.get(second_pos) + 1);
      }
 else {
        if (second_pos == -1) {
          System.out.print(alpha[first_pos] + "" "");
          bw.write(alpha[first_pos] + "" "");
        }
 else {
          System.out.print(alpha[first_pos] + alpha[second_pos] + "" "");
          bw.write(alpha[first_pos] + alpha[second_pos] + "" "");
        }
      }
      int c=0;
      for (int i=0; i < vals.size(); i++) {
        if (vals.get(i) == 0)         c++;
      }
      parties_done=c;
    }
    System.out.println();
    bw.newLine();
    t--;
  }
  bw.close();
}
"
30001234,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""in.txt""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""es1.txt""));
  int T, N=0;
  String l;
  T=Integer.valueOf(br.readLine());
  for (int i=0; i < T; i++) {
    bw.write(""Case #"" + (i + 1) + "": "");
    N=Integer.valueOf(br.readLine());
    int[] A=new int[N];
    l=br.readLine();
    for (int k=0; k < N; k++)     A[k]=Integer.valueOf(l.split("" "")[k]);
    int max=0;
    while (true) {
      max=0;
      int secondmax=0;
      int two=0;
      for (int j=0; j < N; j++) {
        if (A[j] > A[max])         max=j;
        if (diffz(A) != 3)         if (A[j] == A[max] && j != max) {
          two=1;
          secondmax=j;
        }
      }
      if (A[max] == 0)       break;
      A[max]--;
      if (two == 1) {
        A[secondmax]--;
        int i1=secondmax + 1;
        String b=i1 > 0 && i1 < 27 ? String.valueOf((char)(i1 + 64)) : null;
        bw.write(b);
        System.out.print(b);
      }
      int i1=max + 1;
      String a=i1 > 0 && i1 < 27 ? String.valueOf((char)(i1 + 64)) : null;
      bw.write(a + "" "");
      System.out.print(a + "" "");
    }
    System.out.println();
    bw.newLine();
  }
  br.close();
  bw.close();
}
"
30001235,"char digittochar(int i){
  char c;
  c=(char)(i + 65);
  return c;
}
"
30001236,"public A() throws FileNotFoundException {
}
"
30001237,"public static void main(String[] args) throws IOException {
  final Scanner sc=new Scanner(new FileReader(""Ain.in""));
  final BufferedWriter w=new BufferedWriter(new FileWriter(""Aout.txt""));
  String[] a={""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""};
  final int testNumber=sc.nextInt();
  for (int test=1; test <= testNumber; test++) {
    int N=sc.nextInt();
    String ans="""";
    int[] num=new int[N];
    int sum=0;
    int count=0;
    HashMap<Integer,ArrayList<String>> map=new HashMap<>();
    for (int i=0; i < num.length; i++) {
      num[i]=sc.nextInt();
      if (map.get(num[i]) != null) {
        map.get(num[i]).add(a[i]);
      }
 else {
        ArrayList<String> al=new ArrayList<>();
        al.add(a[i]);
        map.put(num[i],al);
      }
      sum+=num[i];
    }
    while (true) {
      Arrays.sort(num);
      int last=num.length - 1;
      if (num[last] > 0) {
        String add=map.get(num[last]).get(map.get(num[last]).size() - 1);
        ans+=add;
        count++;
        map.get(num[last]).remove(add);
        num[last]--;
        if ((num[last] == 0) && (num[last - 1] == 0)) {
          break;
        }
        if ((sum - count) == 2) {
          ans+="" "";
          if (map.get(num[last]) != null) {
            map.get(num[last]).add(add);
          }
 else {
            ArrayList<String> al=new ArrayList<>();
            al.add(add);
            map.put(num[last],al);
          }
        }
 else {
          if (num[last] >= num[last - 1]) {
            ans+=add + "" "";
            count++;
            if (map.get(num[last] - 1) != null) {
              map.get(num[last] - 1).add(add);
            }
 else {
              ArrayList<String> al=new ArrayList<>();
              al.add(add);
              map.put(num[last] - 1,al);
            }
            num[last]--;
          }
 else {
            if (map.get(num[last]) != null) {
              map.get(num[last]).add(add);
            }
 else {
              ArrayList<String> al=new ArrayList<>();
              al.add(add);
              map.put(num[last],al);
            }
            String two=map.get(num[last - 1]).get(map.get(num[last - 1]).size() - 1);
            map.get(num[last - 1]).remove(two);
            ans+=two + "" "";
            count++;
            if (map.get(num[last - 1] - 1) != null) {
              map.get(num[last - 1] - 1).add(two);
            }
 else {
              ArrayList<String> al=new ArrayList<>();
              al.add(two);
              map.put(num[last - 1] - 1,al);
            }
            num[last - 1]--;
          }
        }
      }
 else {
        break;
      }
    }
    w.write(""Case #"" + test + "": ""+ ans.trim()+ ""\n"");
    System.out.println(""Case #"" + test + "": ""+ ans);
  }
  sc.close();
  w.flush();
  w.close();
}
"
30001238,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int T=in.nextInt();
  String pts=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
  int N;
  int[] P;
  for (int t=1; t <= T; ++t) {
    System.out.print(""Case #"" + t + "":"");
    N=in.nextInt();
    P=new int[N];
    for (int n=0; n < N; n++) {
      P[n]=in.nextInt();
    }
    Boolean done=false;
    while (!done) {
      int max1=-1;
      int max2=-1;
      int ind=-1;
      int ind2=-1;
      int sum=0;
      for (int n=0; n < N; n++) {
        if (P[n] > max1) {
          max1=P[n];
          ind=n;
        }
        sum+=P[n];
      }
      for (int n=0; n < N; n++) {
        if (n != ind && P[n] > max2) {
          max2=P[n];
          ind2=n;
        }
      }
      if (sum == 0) {
        done=true;
        break;
      }
 else       if ((sum % 2 != 0) || sum == 1) {
        P[ind]--;
        System.out.print("" "" + pts.charAt(ind));
      }
 else       if (max1 == max2) {
        P[ind]--;
        P[ind2]--;
        System.out.print("" "" + pts.charAt(ind) + pts.charAt(ind2));
      }
 else {
        P[ind]=P[ind] - 2;
        System.out.print("" "" + pts.charAt(ind) + pts.charAt(ind));
      }
    }
    System.out.print('\n');
  }
  in.close();
}
"
30001239,"public static void main(String args[]) throws IOException {
  FileReader fileReader=new FileReader(""/home/parikh/Downloads/A-largeC.in"");
  BufferedReader obj=new BufferedReader(fileReader);
  PrintWriter write=new PrintWriter(new File(""/home/parikh/output.txt""));
  String l=obj.readLine();
  int t=Integer.parseInt(l);
  for (int k=1; k <= t; k++) {
    String inp=obj.readLine();
    int n=Integer.parseInt(inp);
    int arr[]=new int[n];
    inp=obj.readLine();
    String sp[]=inp.split("" "");
    int sum=0;
    for (int i=0; i < n; i++) {
      arr[i]=Integer.parseInt(sp[i]);
      sum+=arr[i];
    }
    StringBuilder str=new StringBuilder("""");
    while (true) {
      int m1=-1;
      int m2=-1;
      int max=-1;
      for (int j=0; j < n; j++) {
        if (arr[j] > max) {
          max=arr[j];
          m1=j;
        }
      }
      arr[m1]--;
      str.append((char)(m1 + 'A'));
      if (sum % 2 == 1) {
        sum-=1;
        str.append("" "");
        continue;
      }
      max=-1;
      for (int j=0; j < n; j++) {
        if (j != m1 && arr[j] > max) {
          max=arr[j];
          m2=j;
        }
      }
      arr[m2]--;
      str.append((char)(m2 + 'A'));
      str.append("" "");
      sum-=2;
      if (sum == 0)       break;
    }
    System.out.println(str);
    write.println(""Case #"" + k + "": ""+ str.toString());
  }
  write.close();
}
"
30001240,"public static void main(String[] args) throws FileNotFoundException {
  Scanner s=new Scanner(new File(""in.txt""));
  int numCases=Integer.parseInt(s.nextLine());
  long time=System.currentTimeMillis();
  for (int i=0; i < numCases; i++) {
    int numParties=Integer.parseInt(s.nextLine());
    String[] members=s.nextLine().split("" "");
    Evacuation e=new Evacuation();
    for (int j=0; j < numParties; j++) {
      char c=(char)('A' + j);
      e.senate.add(new Party(new StringBuilder().append(c).toString(),Integer.parseInt(members[j])));
    }
    System.out.print(""Case #"" + (i + 1) + "": ""+ e.evacuate());
    System.out.println();
  }
  System.out.println(""Time: "" + (System.currentTimeMillis() - time));
  s.close();
}
"
30001241,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int nocase=sc.nextInt();
  sc.nextLine();
  for (int ind=1; ind <= nocase; ind++) {
    N=sc.nextInt();
    arr=new int[N];
    int total=0;
    for (int i=0; i < N; i++)     arr[i]=sc.nextInt();
    for (int i=0; i < N; i++)     total+=arr[i];
    StringBuffer sb=new StringBuffer();
    while (total > 2) {
      int max_ind=0;
      for (int i=1; i < N; i++)       if (arr[i] > arr[max_ind])       max_ind=i;
      arr[max_ind]--;
      total--;
      sb.append((char)('A' + max_ind));
      if (total == 2) {
        sb.append(' ');
        break;
      }
      for (int i=0; i < N; i++) {
        if (arr[i] >= (total + 0.0) / 2.0) {
          arr[i]--;
          total--;
          sb.append((char)('A' + i));
          break;
        }
      }
      sb.append(' ');
    }
    for (int i=0; i < N; i++)     if (arr[i] > 0)     sb.append((char)('A' + i));
    String soln=sb.toString();
    System.out.printf(""Case #%d: %s\n"",ind,soln);
  }
}
"
30001242,"public static void main(String[] args){
  File a=new File(""A-small-attempt2.in"");
  Scanner input=null;
  try {
    input=new Scanner(a);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  File b=new File(""A-output.txt"");
  FileWriter fw=null;
  try {
    fw=new FileWriter(b);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int number=input.nextInt();
  input.nextLine();
  int cases=number;
  while (number > 0) {
    int parties=input.nextInt();
    int[] partySizes=new int[parties];
    int totalMembers=0;
    for (int i=0; i < parties; i++) {
      partySizes[i]=input.nextInt();
      totalMembers+=partySizes[i];
    }
    String result="""";
    while (totalMembers > 0) {
      int max=-1;
      int maxIndex=-1;
      int otherIndex=-1;
      int thirdIndex=-1;
      for (int i=0; i < parties; i++) {
        if (partySizes[i] > max) {
          max=partySizes[i];
          maxIndex=i;
        }
 else         if (partySizes[i] == max) {
          if (otherIndex != -1 && max == 1) {
            otherIndex=-1;
          }
 else {
            otherIndex=i;
          }
        }
      }
      if (otherIndex != -1) {
        partySizes[maxIndex]-=1;
        partySizes[otherIndex]-=1;
        result=result + (char)(65 + maxIndex) + (char)(65 + otherIndex)+ "" "";
        totalMembers-=2;
      }
 else {
        partySizes[maxIndex]-=1;
        result=result + (char)(65 + maxIndex) + "" "";
        totalMembers-=1;
      }
    }
    char f=(char)65;
    try {
      fw.write(""Case #"" + (cases - number + 1) + "": ""+ result+ ""\n"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    number--;
  }
  try {
    fw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001243,"public static void main(String[] args) throws IOException {
  String name=""A-large"";
  Scanner in=new Scanner(new File(""/Users/YunJoonSoh/"" + name + "".in""));
  FileWriter fstream=new FileWriter(""/Users/YunJoonSoh/"" + name + "".out"");
  BufferedWriter out=new BufferedWriter(fstream);
  int T=Integer.parseInt(in.nextLine());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(in.nextLine());
    int[] S=new int[N];
    for (int i=0; i < N; i++) {
      S[i]=in.nextInt();
    }
    in.nextLine();
    String ret="""";
    int sum=0;
    for (int i=0; i < N; i++) {
      sum+=S[i];
    }
    int MAX_PARTY=0;
    while (sum > 0) {
      for (int j=0; j < N; j++) {
        if (S[MAX_PARTY] < S[j]) {
          MAX_PARTY=j;
        }
        if (S[j] * 2 > sum)         System.out.println(""MAJORITY"");
      }
      S[MAX_PARTY]--;
      sum--;
      int MAX_PARTY_2=0;
      for (int j=0; j < N; j++) {
        if (S[MAX_PARTY_2] < S[j]) {
          MAX_PARTY_2=j;
        }
      }
      if ((S[MAX_PARTY_2]) * 2 > sum) {
        ret+=(char)(MAX_PARTY + 'A') + """" + (char)(MAX_PARTY_2 + 'A')+ "" "";
        S[MAX_PARTY_2]--;
        sum--;
      }
 else {
        ret+=(char)(MAX_PARTY + 'A') + "" "";
      }
    }
    for (int i=0; i < N; i++) {
      if (S[i] != 0)       System.out.println(""NOT EVACUATED"");
    }
    StringBuilder s=new StringBuilder();
    s.append(""Case #"");
    s.append(t);
    s.append("": "");
    s.append(ret);
    s.append(""\n"");
    out.write(s.toString());
    System.out.println(s.toString());
  }
  out.close();
  in.close();
}
"
30001244,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(in.readLine());
  for (int i=0; i < T; i++) {
    System.out.print(""Case #"" + (i + 1) + "": "");
    int part=Integer.parseInt(in.readLine());
    String[] mem=in.readLine().split("" "");
    int totalmembers=0;
    for (int j=0; j < part; j++) {
      totalmembers+=Integer.parseInt(mem[j]);
    }
    while (totalmembers != 0) {
      int max=0;
      int num1=0;
      String ans="""";
      for (int j=0; j < part; j++) {
        if (max < Integer.parseInt(mem[j])) {
          max=Integer.parseInt(mem[j]);
          num1=j;
        }
      }
      ans="""" + (char)(65 + num1);
      mem[num1]=Integer.toString(Integer.parseInt(mem[num1]) - 1);
      totalmembers-=1;
      for (int j=0; j < part; j++) {
        double p=totalmembers;
        if (Double.parseDouble(mem[j]) / p > 0.5) {
          ans+=(char)(65 + j);
          mem[j]=Integer.toString(Integer.parseInt(mem[j]) - 1);
          totalmembers-=1;
          break;
        }
      }
      System.out.print(ans + "" "");
    }
    System.out.println();
  }
}
"
30001245,"public static void main(String[] args) throws IOException {
  File f=new File(""A-small-attempt0.inahawaa"");
  FileWriter fw=new FileWriter(f);
  InputStream ips=new FileInputStream(""A-small-attempt0.in"");
  InputStreamReader ipsr=new InputStreamReader(ips);
  BufferedReader br=new BufferedReader(ipsr);
  String ligne=br.readLine();
  String out;
  int hhh=0;
  while ((ligne=br.readLine()) != null) {
    ligne=br.readLine();
    try {
      hhh++;
      String s=ligne;
      String[] elements=s.split("" "");
      Vector<Integer> output=new Vector<Integer>();
      Vector<Character> outputL=new Vector<Character>();
      String letters=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
      for (int i=0; i < elements.length; i++) {
        output.add(Integer.parseInt(elements[i]));
        outputL.add(letters.charAt(i));
        System.out.println(output.elementAt(i) + ""  "" + outputL.elementAt(i));
      }
      boolean estnull=true;
      for (int z=0; z < output.size(); z++) {
        System.out.print(output.elementAt(z));
        if (output.elementAt(z) != 0) {
          estnull=false;
          break;
        }
      }
      String ch="""";
      while (!estnull) {
        ch=ch + "" "";
        int maxIndex=0;
        for (int i=1; i < output.size(); i++) {
          int newnumber=output.elementAt(i);
          if (newnumber > output.elementAt(maxIndex)) {
            maxIndex=i;
          }
        }
        int maxIndex2=0;
        int k=output.elementAt(maxIndex);
        int occ=Collections.frequency(output,k);
        if (occ != output.size()) {
          while (output.elementAt(maxIndex2) == output.elementAt(maxIndex)) {
            maxIndex2++;
          }
          for (int i=maxIndex2 + 1; i < output.size(); i++) {
            if (output.elementAt(i) != k) {
              int newnumber=output.elementAt(i);
              if (newnumber > output.elementAt(maxIndex2)) {
                maxIndex2=i;
              }
            }
          }
        }
        if (occ == 1 && occ != output.size()) {
          int dif=output.elementAt(maxIndex) - output.elementAt(maxIndex2);
          if (dif == 1) {
            ch=ch + outputL.elementAt(maxIndex);
            System.out.println(outputL.elementAt(maxIndex));
            output.set(maxIndex,output.elementAt(maxIndex) - 1);
          }
 else           if (dif >= 2) {
            ch=ch + outputL.elementAt(maxIndex) + outputL.elementAt(maxIndex);
            System.out.print(outputL.elementAt(maxIndex));
            System.out.println(outputL.elementAt(maxIndex));
            output.set(maxIndex,output.elementAt(maxIndex) - 2);
          }
        }
 else         if (occ >= 2 && occ != output.size()) {
          ch=ch + outputL.elementAt(maxIndex);
          System.out.print(outputL.elementAt(maxIndex));
          output.set(maxIndex,output.elementAt(maxIndex) - 1);
          int y=maxIndex;
          while (y < output.size()) {
            y++;
            if (output.elementAt(y) == k) {
              ch=ch + outputL.elementAt(y);
              System.out.println(outputL.elementAt(y));
              output.set(y,output.elementAt(y) - 1);
              break;
            }
          }
        }
 else         if (occ > 2 && occ == output.size()) {
          ch=ch + outputL.elementAt(maxIndex);
          System.out.println(outputL.elementAt(maxIndex));
          output.set(maxIndex,output.elementAt(maxIndex) - 1);
        }
 else         if (occ == 2 && occ == output.size()) {
          ch=ch + outputL.elementAt(maxIndex);
          System.out.print(outputL.elementAt(maxIndex));
          output.set(maxIndex,output.elementAt(maxIndex) - 1);
          int y=maxIndex;
          while (y < output.size()) {
            y++;
            if (output.elementAt(y) == k) {
              ch=ch + outputL.elementAt(y);
              System.out.println(outputL.elementAt(y));
              output.set(y,output.elementAt(y) - 1);
              break;
            }
          }
        }
 else         if (occ != output.size()) {
          ch=ch + outputL.elementAt(maxIndex);
          System.out.println(outputL.elementAt(maxIndex));
          output.set(maxIndex,output.elementAt(maxIndex) - 1);
        }
        System.out.println(""ahawaaaaa  "" + ch);
        estnull=true;
        for (int z=0; z < output.size(); z++) {
          System.out.print(output.elementAt(z));
          if (output.elementAt(z) != 0) {
            estnull=false;
          }
        }
        System.out.println();
      }
      fw.write(""Case #"" + hhh + "": ""+ ch+ ""\r\n"");
    }
 catch (    Exception e) {
    }
  }
  br.close();
  fw.close();
}
"
30001246,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int t, n, m, j, l, i, k, p, c, r, tt, arr[];
  long ff, ll;
  String s[];
  char sf[], sl[];
  StringBuilder sb;
  t=Integer.parseInt(br.readLine());
  for (tt=1; tt <= t; tt++) {
    sb=new StringBuilder(""Case #"" + tt + "": "");
    n=Integer.parseInt(br.readLine());
    arr=new int[n];
    s=br.readLine().split("" "");
    for (i=0; i < n; i++) {
      arr[i]=Integer.parseInt(s[i]);
    }
    c=0;
    for (i=1000; i > 1; i--) {
      for (j=0; j < n; j++) {
        if (arr[j] == i) {
          c++;
          if (c % 2 == 1)           sb.append((char)(j + 65));
 else           sb.append(((char)(j + 65)) + "" "");
          arr[j]--;
        }
      }
    }
    if (c % 2 == 1) {
      sb.append("" "");
    }
    c=0;
    for (j=0; j < n; j++)     if (arr[j] > 0)     c++;
    if (c % 2 == 1) {
      for (i=1; i <= 1; i++) {
        c=0;
        for (j=0; j < n; j++) {
          if (arr[j] == 1) {
            c=1;
            sb.append((char)(j + 65) + "" "");
            arr[j]--;
          }
          if (c == 1)           break;
        }
        if (c == 1)         break;
      }
    }
    for (i=1; i <= 1; i++) {
      c=0;
      for (j=0; j < n; j++) {
        if (arr[j] == i) {
          c++;
          if (c % 2 == 1)           sb.append((char)(j + 65));
 else           sb.append(((char)(j + 65)) + "" "");
          arr[j]--;
        }
      }
    }
    sb.append(""\n"");
    System.out.print(sb);
  }
}
"
30001247,"public static void main(String[] args) throws IOException {
  String pb=""A"";
  sc=new Scanner(new FileReader(new File(pb + "".in"")));
  PrintWriter out=new PrintWriter(new File(pb + "".out""));
  int TC=sc.nextInt();
  sc.nextLine();
  for (int tc=1; tc <= TC; tc++) {
    if (tc != 1)     resultat.append(""\n"");
    resultat.append(""Case #"" + tc + "": "");
    int N=sc.nextInt();
    long[] P=new long[N];
    long sum=0;
    long count=0;
    for (int i=0; i < P.length; i++) {
      P[i]=sc.nextLong();
      sum+=P[i];
      if (P[i] > 0)       count++;
    }
    String res="""";
    while (true) {
      long Max=0;
      int i1=-1;
      if (count == 2 && sum > 2) {
        ArrayList<Integer> ind=new ArrayList<>();
        for (int i=0; i < P.length; i++) {
          if (P[i] != 0)           ind.add(i);
        }
        res+=lettres.charAt(ind.get(0)) + """" + lettres.charAt(ind.get(1))+ "" "";
        P[ind.get(0)]--;
        P[ind.get(1)]--;
        sum-=2;
        continue;
      }
      if (sum == 2) {
        ArrayList<Integer> ind=new ArrayList<>();
        for (int i=0; i < P.length; i++) {
          if (P[i] != 0)           ind.add(i);
        }
        res+=lettres.charAt(ind.get(0)) + """" + lettres.charAt(ind.get(1));
        break;
      }
 else {
        for (int i=0; i < P.length; i++) {
          if (P[i] > Max) {
            Max=P[i];
            i1=i;
          }
        }
        if (i1 == -1)         break;
 else {
          res+=lettres.charAt(i1) + "" "";
          P[i1]--;
          sum--;
        }
      }
    }
    resultat.append(res.trim());
  }
  out.print(resultat);
  System.out.println(resultat);
  out.close();
  sc.close();
}
"
30001248,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int itt=1; itt <= T; itt++) {
    int N=sc.nextInt();
    int[] senators=new int[N];
    int total=0;
    for (int i=0; i < N; i++) {
      senators[i]=sc.nextInt();
      total+=senators[i];
    }
    StringBuilder sb=new StringBuilder();
    sb.append(""Case #"" + itt + "":"");
    while (total > 0) {
      String evac="""";
      int max=0;
      int index=-1;
      for (int i=0; i < N; i++) {
        if (senators[i] > max) {
          max=senators[i];
          index=i;
        }
      }
      total--;
      senators[index]--;
      evac+=(char)(index + (int)'A');
      if (total > 0) {
        int majority=((total - 1) / 2) + 1;
        max=0;
        index=-1;
        int count=0;
        for (int i=0; i < N; i++) {
          if (senators[i] > max) {
            max=senators[i];
            index=i;
          }
          if (majority == senators[i])           count++;
        }
        if (count < 2) {
          total--;
          senators[index]--;
          evac+=(char)(index + (int)'A');
        }
      }
      sb.append("" "" + evac);
    }
    System.out.println(sb);
  }
}
"
30001249,"public static void main(String[] args) throws FileNotFoundException {
  if (args.length == 1 && args[0].equals(""test"")) {
    String path=""C:\\codejam\\"";
    String filename=""A-small-attempt0.in"";
    System.setIn(new FileInputStream(new File(path + filename)));
    String outputName=filename.split(""\\."")[0] + "".out"";
    System.setOut(new PrintStream(new File(path + outputName)));
  }
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int tests=in.nextInt();
  for (int test=1; test <= tests; ++test) {
    StringBuilder result=new StringBuilder();
    int n=in.nextInt();
    int[] arr=new int[n];
    for (int i=0; i < n; i++)     arr[i]=in.nextInt();
    int max1=0;
    int pos1=0;
    int max2=0;
    int pos2=0;
    for (int i=0; i < n; i++) {
      if (arr[i] > max1) {
        max2=max1;
        pos2=pos1;
        max1=arr[i];
        pos1=i;
      }
 else       if (arr[i] > max2) {
        max2=arr[i];
        pos2=i;
      }
    }
    while (max1 > max2) {
      result.append((char)('A' + pos1) + "" "");
      max1--;
    }
    while (max2 > max1) {
      result.append((char)('A' + pos2) + "" "");
      max2--;
    }
    for (int i=0; i < n; i++) {
      if (i == pos1 || i == pos2)       continue;
      while (arr[i] > 0) {
        result.append((char)('A' + i) + "" "");
        arr[i]--;
      }
    }
    String finalString="""" + (char)('A' + pos1) + (char)('A' + pos2)+ "" "";
    for (int i=0; i < max1; i++)     result.append(finalString);
    System.out.println(""Case #"" + test + "": ""+ result);
  }
}
"
30001250,"public static void main(String[] args) throws NumberFormatException, IOException {
  File file=new File(""input2"");
  BufferedReader br=new BufferedReader(new FileReader(file));
  int tcs=Integer.parseInt(br.readLine());
  while (tcs-- > 0) {
    Map<Integer,Character> alphabets=new HashMap<Integer,Character>();
    alphabets.put(1,'A');
    alphabets.put(2,'B');
    alphabets.put(3,'C');
    alphabets.put(4,'D');
    alphabets.put(5,'E');
    alphabets.put(6,'F');
    alphabets.put(7,'G');
    alphabets.put(8,'H');
    alphabets.put(9,'I');
    alphabets.put(10,'J');
    alphabets.put(11,'K');
    alphabets.put(12,'L');
    alphabets.put(13,'M');
    alphabets.put(14,'N');
    alphabets.put(15,'O');
    alphabets.put(16,'P');
    alphabets.put(17,'Q');
    alphabets.put(18,'R');
    alphabets.put(19,'S');
    alphabets.put(20,'T');
    alphabets.put(21,'U');
    alphabets.put(22,'V');
    alphabets.put(23,'W');
    alphabets.put(24,'X');
    alphabets.put(25,'Y');
    alphabets.put(26,'Z');
    int n=Integer.parseInt(br.readLine());
    List<Long> senators=new ArrayList<Long>();
    String s[]=br.readLine().split("" "");
    for (int i=0; i < s.length; i++) {
      senators.add(Long.parseLong(s[i]));
    }
    while (!(Collections.frequency(senators,(long)0) == senators.size())) {
      String x="""";
      for (int i=0; i < 2; i++) {
        int index=senators.indexOf(Collections.max(senators));
        if (senators.get(index) == 0) {
          break;
        }
        if (Collections.frequency(senators,(long)1) > 2 && Collections.frequency(senators,(long)1) % 2 > 0) {
          senators.set(index,senators.get(index) - 1);
          x="""" + alphabets.get(index + 1);
          break;
        }
        senators.set(index,senators.get(index) - 1);
        x=x + alphabets.get(index + 1);
      }
      System.out.print(x);
      System.out.print("" "");
    }
    System.out.println();
  }
}
"
30001251,"public static void main(String args[]) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(in));
  int T=parseInt(br.readLine());
  for (int z=0; z < T; z++) {
    int N=parseInt(br.readLine());
    int[] P=new int[N];
    String[] ss=br.readLine().trim().split(""\\s+"");
    for (int i=0; i < N; i++)     P[i]=parseInt(ss[i]);
    int first=0;
    int second=-1;
    for (int i=1; i < N; i++) {
      if (P[first] < P[i]) {
        first=i;
      }
    }
    for (int i=0; i < N; i++) {
      if (first == i)       continue;
      if (second == -1 || P[second] < P[i]) {
        second=i;
      }
    }
    StringBuilder sb=new StringBuilder();
    while (P[first] > P[second]) {
      if (P[first] == P[second] + 1) {
        sb.append((char)(first + 'A'));
        sb.append("" "");
        P[first]--;
      }
 else {
        sb.append((char)(first + 'A'));
        sb.append((char)(first + 'A'));
        sb.append("" "");
        P[first]-=2;
      }
    }
    for (int i=0; i < N; i++) {
      if (i == first || i == second)       continue;
      while (P[i] > 0) {
        if (P[i] >= 2) {
          sb.append((char)(i + 'A'));
          sb.append((char)(i + 'A'));
          sb.append("" "");
          P[i]-=2;
        }
 else {
          sb.append((char)(i + 'A'));
          sb.append("" "");
          P[i]--;
        }
      }
    }
    while (P[first] > 0) {
      sb.append((char)(first + 'A'));
      sb.append((char)(second + 'A'));
      sb.append("" "");
      P[first]--;
      P[second]--;
    }
    out.println(""Case #"" + (z + 1) + "": ""+ sb.toString().trim());
  }
}
"
30001252,"public static void main(String[] args){
  Scanner reader=new Scanner(System.in);
  int g=reader.nextInt();
  for (int k=0; k < g; k++) {
    int N=reader.nextInt();
    int[] t=new int[N];
    int tot=0;
    for (int i=0; i < N; i++) {
      t[i]=reader.nextInt();
      tot+=t[i];
    }
    System.out.print(""Case #"" + (k + 1) + "":"");
    while (tot != 0) {
      String answ="""";
      int max=0;
      int mindex=0;
      for (int i=0; i < N; i++) {
        if (max < t[i]) {
          max=t[i];
          mindex=i;
        }
      }
      t[mindex]--;
      tot--;
      answ+=(char)(((int)'A') + mindex);
      max=0;
      mindex=0;
      for (int i=0; i < N; i++) {
        if (max < t[i]) {
          max=t[i];
          mindex=i;
        }
      }
      if (tot == 1) {
        tot--;
        answ+=(char)(((int)'A') + mindex);
      }
 else       if (max != 0 && tot != 2) {
        tot--;
        answ+=(char)(((int)'A') + mindex);
        t[mindex]--;
      }
      System.out.print("" "" + answ);
    }
    System.out.println();
  }
  reader.close();
}
"
30001253,"public static void main(String[] args) throws IOException {
  File file=new File(""src/input.in"");
  File of=new File(""src/out.txt"");
  FileWriter fw=new FileWriter(of,true);
  PrintWriter pw=new PrintWriter(fw);
  Scanner sc=new Scanner(file);
  int iter=sc.nextInt();
  for (int i=0; i < iter; i++) {
    int num=sc.nextInt();
    ArrayList<Integer> pnum=new ArrayList<Integer>();
    String res=""Case #"" + (i + 1) + "": "";
    for (int j=0; j < num; j++) {
      pnum.add(sc.nextInt());
    }
    int total=0;
    System.out.print(""["");
    for (int j=0; j < pnum.size(); j++) {
      total+=pnum.get(j);
      System.out.print(pnum.get(j) + "", "");
    }
    System.out.println(""]"");
    while (total > 0) {
      System.out.println(total);
      int firstVal=Collections.max(pnum);
      System.out.print(firstVal + "", "");
      int firstIndex=pnum.indexOf(firstVal);
      System.out.println(firstIndex);
      pnum.set(firstIndex,pnum.get(firstIndex) - 1);
      total-=1;
      int secondVal=Collections.max(pnum);
      System.out.print(secondVal + "", "");
      int secondIndex=-1;
      if (secondVal > (double)total / 2) {
        secondIndex=pnum.indexOf(secondVal);
        pnum.set(secondIndex,pnum.get(secondIndex) - 1);
        total-=1;
      }
      System.out.println(secondIndex);
      res+=(char)('A' + firstIndex);
      if (secondIndex != -1) {
        res+=(char)('A' + secondIndex);
      }
      res+="" "";
    }
    pw.println(res);
    System.out.println(res);
  }
  sc.close();
  pw.close();
}
"
30001254,"static char giveMeTheOppositePlease(char c){
  if (c == '-')   return '+';
  return '-';
}
"
30001255,"public static void main(String args[]){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  int is=1;
  while ((t--) > 0) {
    int sum=0;
    int n=s.nextInt();
    int a[]=new int[n];
    System.out.print(""Case #"" + is + "":"");
    is++;
    for (int i=0; i < n; i++) {
      a[i]=s.nextInt();
      sum=sum + a[i];
    }
    while (sum != 0 || sum > 0) {
      int l1=0;
      int l2=0;
      for (int i=0; i < n; i++) {
        if (a[i] >= a[l1]) {
          l2=l1;
          l1=i;
        }
 else         if (a[i] >= a[l2]) {
          l2=i;
        }
      }
      if (a[l1] == a[l2] && a[l2] - 2 >= 0) {
        char ac=(char)(65 + l1);
        char b=(char)(65 + l2);
        System.out.print("" "" + b + ac);
        a[l1]--;
        a[l2]--;
        sum=sum - 2;
      }
 else       if (a[l1] == 1 && a[l2] == 1 && sum % 2 != 0) {
        char ac=(char)(65 + l1);
        System.out.print("" "" + ac);
        a[l1]--;
        sum=sum - 1;
      }
 else       if ((a[l1] == 1) && (a[l2] == 1) && sum % 2 == 0) {
        char ac=(char)(65 + l1);
        char b=(char)(65 + l2);
        System.out.print("" "" + b + ac);
        a[l1]--;
        a[l2]--;
        sum=sum - 2;
      }
 else       if (a[l1] - 2 >= 1) {
        char ac=(char)(65 + l1);
        System.out.print("" "" + ac + ac);
        a[l1]=a[l1] - 2;
        sum=sum - 2;
      }
 else       if (a[l1] == 2) {
        char ac=(char)(65 + l1);
        System.out.print("" "" + ac);
        sum=sum - 1;
        a[l1]--;
      }
    }
    System.out.println();
  }
}
"
30001256,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(System.in);
  PrintWriter writer=new PrintWriter(""out.txt"");
  int T=sc.nextInt();
  for (int i=0; i < T; i++) {
    int N=sc.nextInt();
    Map<Integer,Integer> c=new HashMap<>();
    for (int j=0; j < N; j++) {
      c.put(j,sc.nextInt());
    }
    StringBuilder sb=new StringBuilder();
    while (true) {
      int m1=-1, m2=-1;
      int m1v=0, m2v=0;
      for (      Map.Entry<Integer,Integer> entry : c.entrySet()) {
        if (entry.getValue() > m1v) {
          if (c.containsKey(m2)) {
            c.put(m2,c.get(m2) + 1);
          }
          m2v=m1v;
          m2=m1;
          m1v=entry.getValue();
          m1=entry.getKey();
          entry.setValue(entry.getValue() - 1);
        }
 else         if (entry.getValue() > m2v) {
          if (c.containsKey(m2)) {
            c.put(m2,c.get(m2) + 1);
          }
          m2=entry.getKey();
          m2v=entry.getKey();
          entry.setValue(entry.getValue() - 1);
        }
      }
      if (c.containsKey(m2) && c.containsKey(m1)) {
        int c1=c.get(m1);
        int c2=c.get(m2);
        if (c1 > c2) {
          c.put(m2,c.get(m2) + 1);
          m2=m1;
          m2v=m1v;
          c.put(m1,c.get(m1) - 1);
        }
      }
      if (c.containsKey(m1)) {
        sb.append((char)('A' + m1));
      }
      if (c.containsKey(m2)) {
        sb.append((char)('A' + m2));
      }
      sb.append("" "");
      boolean cont=false;
      for (      Map.Entry<Integer,Integer> entry : c.entrySet()) {
        if (entry.getValue() > 0) {
          cont=true;
          break;
        }
      }
      if (!cont) {
        break;
      }
    }
    String re=sb.toString();
    String[] sp=re.split("" "");
    if (sp.length > 1 && sp[sp.length - 1].length() < 2) {
      String aa=sp[sp.length - 1];
      sp[sp.length - 1]=sp[sp.length - 2];
      sp[sp.length - 2]=aa;
      sb=new StringBuilder();
      for (      String s : sp) {
        sb.append(s).append("" "");
      }
    }
    writer.println(""Case #"" + (i + 1) + "": ""+ sb.toString());
  }
  writer.flush();
  writer.close();
}
"
30001257,"public static void main(String[] args) throws Exception {
  out=new PrintWriter(new FileWriter(""outA.txt""));
  int testCases=Integer.parseInt(next());
  for (int r=1; r <= testCases; r++) {
    int n=Integer.parseInt(next());
    int[] p=new int[n];
    int t=0;
    for (int i=0; i < n; i++) {
      p[i]=Integer.parseInt(next());
      t+=p[i];
    }
    out.printf(""Case #%d: "",r);
    if (t % 2 == 1) {
      int max=0;
      for (int i=1; i < n; i++)       if (p[i] > p[max])       max=i;
      p[max]--;
      t--;
      out.print((char)(max + 'A') + "" "");
    }
    while (t > 0) {
      int max=0;
      int max2=-1;
      for (int i=1; i < n; i++)       if (p[i] > p[max])       max=i;
 else       if (p[i] == p[max])       max2=i;
      if (max2 != -1) {
        out.print((char)(max + 'A') + """" + (char)(max2 + 'A')+ "" "");
        p[max]--;
        p[max2]--;
        t-=2;
      }
 else {
        if (p[max] == 1) {
          out.print((char)(max + 'A') + "" "");
          p[max]--;
          t--;
        }
 else {
          out.print((char)(max + 'A') + """" + (char)(max + 'A')+ "" "");
          p[max]-=2;
          t-=2;
        }
      }
    }
    out.println();
  }
  out.close();
}
"
30001258,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int numberOfCases=in.nextInt();
  for (int i=1; i <= numberOfCases; i++) {
    int party=in.nextInt();
    int[] parties=new int[party];
    for (int j=0; j < party; j++) {
      parties[j]=in.nextInt();
    }
    escape(i,parties);
  }
}
"
30001259,"public static void main(String[] args) throws Exception {
  Scanner scanner=new Scanner(new FileInputStream(""C:\\Users\\Stefan\\Downloads\\A-large.in""));
  PrintStream output=new PrintStream(""C:\\Users\\Stefan\\Downloads\\A-large.out"");
  int T=scanner.nextInt();
  for (int t=1; t <= T; ++t) {
    int N=scanner.nextInt();
    int[] parties=new int[N];
    int senatorsCount=0;
    for (int n=0; n < N; ++n)     senatorsCount+=(parties[n]=scanner.nextInt());
    output.print(""Case #"" + t + "":"");
    while (senatorsCount > 0) {
      int maxC1=0;
      int maxC2=0;
      int maxI1=0;
      int maxI2=0;
      for (int party=0; party < N; ++party)       if (parties[party] > maxC1) {
        maxC2=maxC1;
        maxI2=maxI1;
        maxC1=parties[party];
        maxI1=party;
      }
 else       if (parties[party] == maxC1 || parties[party] > maxC2) {
        maxC2=parties[party];
        maxI2=party;
      }
      output.print("" "" + ALPHABET[maxI1]);
      --maxC1;
      --parties[maxI1];
      --senatorsCount;
      if (maxC1 > maxC2) {
        output.print(ALPHABET[maxI1]);
        --maxC1;
        --parties[maxI1];
        --senatorsCount;
      }
 else       if (senatorsCount == 1 || 2 * maxC2 > senatorsCount) {
        output.print(ALPHABET[maxI2]);
        --maxC2;
        --parties[maxI2];
        --senatorsCount;
      }
    }
    output.println();
  }
  output.close();
  System.out.println(""finished"");
}
"
30001260,"public static void main(String[] args) throws IOException {
  Scanner scanner=new Scanner(System.in);
  int t=scanner.nextInt();
  for (int x=1; x <= t; ++x) {
    int n=scanner.nextInt();
    int[] p=new int[n];
    for (int i=0; i < n; ++i) {
      p[i]=scanner.nextInt();
    }
    System.out.print(""Case #"" + x + "":"");
    if (n == 2) {
      for (int i=0; i < p[0]; ++i) {
        System.out.print("" AB"");
      }
      System.out.println();
    }
 else {
      int count1=0;
      for (int i3=0; i3 < p.length; ++i3)       if (p[i3] != 0)       ++count1;
      int count=count1;
      while (count > 2) {
        int max=0;
        int index1=-1;
        for (int i3=0; i3 < p.length; ++i3) {
          if (p[i3] > max) {
            max=p[i3];
            index1=i3;
          }
        }
        int index=index1;
        --p[index];
        System.out.print("" "" + (char)('A' + index));
        int count2=0;
        for (int i=0; i < p.length; ++i)         if (p[i] != 0)         ++count2;
        count=count2;
      }
      int i1=-1, i2=-1;
      for (int i=0; i < p.length; ++i) {
        if (p[i] != 0) {
          if (i1 == -1)           i1=i;
 else           i2=i;
        }
      }
      System.out.println("" "" + (char)('A' + i1) + (char)('A' + i2));
    }
  }
}
"
30001261,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""AL.in""));
  int tc=in.nextInt();
  PrintWriter out=new PrintWriter(""AL.out"");
  for (int cc=1; cc <= tc; cc++) {
    int n=in.nextInt();
    int[] f=new int[n];
    int sum=0;
    for (int i=0; i < n; i++) {
      f[i]=in.nextInt();
      sum+=f[i];
    }
    StringBuilder result=new StringBuilder();
    while (sum > 0) {
      int max=0;
      TreeSet<Integer> nz=new TreeSet<>();
      for (int i=0; i < n; i++) {
        if (f[i] > f[max]) {
          max=i;
        }
        if (f[i] > 0) {
          nz.add(i);
        }
      }
      System.out.println(Arrays.toString(f));
      if (f[max] * 2 == sum && nz.size() == 2) {
        int a=nz.pollFirst();
        int b=nz.pollFirst();
        f[a]--;
        f[b]--;
        result.append((char)('A' + a) + """" + (char)('A' + b)+ "" "");
        sum-=2;
      }
 else {
        f[max]--;
        result.append((char)('A' + max) + "" "");
        sum-=1;
      }
    }
    System.out.printf(""Case #%d: %s\n"",cc,result.toString().trim());
    out.printf(""Case #%d: %s\n"",cc,result.toString().trim());
  }
  out.close();
}
"
30001262,"public static void main(String[] args){
  Scanner scanner=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int testcases=scanner.nextInt();
  for (int testcase=1; testcase <= testcases; testcase++) {
    int totalSize=scanner.nextInt();
    int[] array=new int[totalSize];
    for (int i=0; i < totalSize; i++) {
      array[i]=scanner.nextInt();
    }
    boolean done=false;
    String answer="""";
    while (!done) {
      int maxPeople=0;
      int firstIndex=-1;
      int secondIndex=-1;
      int countones=0;
      for (int i=0; i < totalSize; i++) {
        if (array[i] > maxPeople) {
          firstIndex=i;
          secondIndex=-1;
          maxPeople=array[i];
        }
 else         if (array[i] == maxPeople) {
          secondIndex=i;
        }
        if (array[i] == 1) {
          countones++;
        }
      }
      if (maxPeople == 0) {
        done=true;
      }
 else {
        if (maxPeople <= 2 && countones % 2 == 1) {
          answer=answer + (char)(65 + firstIndex) + "" "";
          array[firstIndex]-=1;
        }
 else         if (secondIndex == -1) {
          answer=answer + (char)(65 + firstIndex) + (char)(65 + firstIndex)+ "" "";
          array[firstIndex]-=2;
        }
 else {
          answer=answer + (char)(65 + firstIndex) + (char)(65 + secondIndex)+ "" "";
          array[firstIndex]-=1;
          array[secondIndex]-=1;
        }
      }
    }
    answer=answer.substring(0,answer.length() - 1);
    System.out.println(""Case #"" + testcase + "": ""+ answer);
  }
  scanner.close();
}
"
30001263,"public static void main(String[] args) throws IOException {
  if (SUBMIT) {
    in=new BufferedReader(new FileReader(NAME + "".in""));
    out=new PrintWriter(NAME + "".out"");
  }
 else {
    in=new BufferedReader(new FileReader(""testA.in""));
    out=new PrintWriter(""testA.out"");
  }
  String line=in.readLine();
  int totalCases=Integer.parseInt(line);
  for (int caseNum=1; caseNum <= totalCases; caseNum++) {
    out.print(""Case #"" + caseNum + "": "");
    in.readLine();
    LinkedHashMap<String,Integer> map=new LinkedHashMap<String,Integer>();
    String test=in.readLine();
    String[] number=test.split("" "");
    for (int k=0; k < number.length; k++) {
      map.put("""" + alpha.charAt(k),Integer.parseInt(number[k]));
    }
    String result="""";
    while (true) {
      int current=-1;
      String equalKey="""";
      String bigKey="""";
      String currentKey="""";
      boolean zeroFOund=false;
      Iterator it=map.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry pair=(Map.Entry)it.next();
        int val=(int)pair.getValue();
        if (val == 0) {
          zeroFOund=true;
          continue;
        }
 else {
          zeroFOund=false;
        }
        if (current < val) {
          current=val;
          currentKey=(String)pair.getKey();
          equalKey="""";
          bigKey=(String)pair.getKey();
        }
 else         if (current == val) {
          equalKey=currentKey + (String)pair.getKey();
        }
        System.out.println(pair.getKey() + "" = "" + pair.getValue());
      }
      if (equalKey.length() > 0) {
        for (int i=0; i < 2; i++) {
          String key="""" + equalKey.charAt(i);
          int value=map.get(key);
          value=value - 1;
          map.put(key,value);
          result=result + key;
        }
        result=result + "" "";
      }
 else       if (bigKey.length() > 0) {
        int value=map.get(bigKey);
        if (value >= 2) {
          value=value - 2;
          result=result + bigKey + bigKey+ "" "";
        }
 else {
          value=value - 1;
          result=bigKey + "" "" + result;
        }
        map.put(bigKey,value);
      }
      if (zeroFOund) {
        break;
      }
    }
    System.out.println(result);
    out.print(result);
    out.println();
  }
  out.close();
  System.exit(0);
}
"
30001264,"public static void main(String[] args){
  Scanner sc=null;
  PrintWriter w=null;
  try {
    w=new PrintWriter(new BufferedWriter(new FileWriter(""out-C-A.txt"",false)));
    sc=new Scanner(new File(""A-large.in""));
    sc.useDelimiter("" |\n"");
    int T=sc.nextInt();
    for (int z=0; z < T; z++) {
      N=sc.nextInt();
      Ns=new int[N];
      for (int i=0; i < N; i++) {
        Ns[i]=sc.nextInt();
      }
      String res="""";
      HashMap<Integer,Integer> map=new HashMap<>();
      int count=0;
      for (int i=0; i < N; i++) {
        map.put(i,Ns[i]);
        count+=Ns[i];
      }
      while (true) {
        int maxValue=Collections.max(map.values());
        if (count > 0 && ((double)maxValue / count) > 0.5) {
          System.out.println(""bingo!"");
          System.out.println(((double)maxValue / count));
          System.out.println(count);
        }
        if (maxValue == 0)         break;
        int key1=0;
        int key2=0;
        int co=0;
        for (        Map.Entry<Integer,Integer> en : map.entrySet()) {
          if (en.getValue() == maxValue) {
            co++;
            if (co == 1)             key1=en.getKey();
            if (co == 2) {
              key2=en.getKey();
              break;
            }
          }
        }
        if (count == 3) {
          char c1=(char)(key1 + A);
          res+=String.valueOf(c1) + "" "";
          map.put(key1,map.get(key1) - 1);
          count--;
          continue;
        }
        if (co == 1) {
          HashMap<Integer,Integer> map1=new HashMap<>(map);
          map1.remove(key1);
          int nextMaxValue=(Integer)Collections.max(map1.values());
          int time=maxValue - nextMaxValue;
          while (time > 0) {
            if (time == 1) {
              char c1=(char)(key1 + A);
              res+=String.valueOf(c1) + "" "";
              map.put(key1,map.get(key1) - 1);
              time--;
              count--;
            }
 else {
              char c1=(char)(key1 + A);
              char c2=(char)(key1 + A);
              res+=String.valueOf(c1) + String.valueOf(c2) + "" "";
              map.put(key1,map.get(key1) - 2);
              time-=2;
              count-=2;
            }
          }
        }
 else {
          char c1=(char)(key1 + A);
          char c2=(char)(key2 + A);
          res+=String.valueOf(c1) + String.valueOf(c2) + "" "";
          map.put(key1,map.get(key1) - 1);
          map.put(key2,map.get(key2) - 1);
          count-=2;
        }
      }
      String ress=res.substring(0,res.length() - 1);
      System.out.println(""Case #"" + (z + 1) + "": ""+ ress);
      w.println(""Case #"" + (z + 1) + "": ""+ ress);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    sc.close();
    w.close();
  }
}
"
30001265,"public static void main(String[] args){
  File file=new File(""A-large.in"");
  File outfile=new File(""output.txt"");
  if (!file.exists()) {
    System.err.println(""File doesn't exist!"");
    return;
  }
  int T;
  int N;
  int[] parties;
  int total;
  try {
    BufferedReader fin=new BufferedReader(new InputStreamReader(new FileInputStream(file)));
    BufferedWriter fout=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outfile)));
    String line=fin.readLine();
    T=Integer.parseInt(line.trim());
    for (int caseNum=0; caseNum < T; ++caseNum) {
      line=fin.readLine();
      N=Integer.parseInt(line);
      parties=new int[N];
      total=0;
      line=fin.readLine();
      String[] partyMembers=line.split("" "");
      for (int i=0; i < N; ++i) {
        parties[i]=Integer.parseInt(partyMembers[i]);
        total+=parties[i];
      }
      String output="""";
      int max1=0;
      for (int i=0; i < N; ++i) {
        if (parties[i] > parties[max1])         max1=i;
      }
      int max2=0;
      if (max1 == 0)       max2=1;
      for (int i=0; i < N; ++i) {
        if (i != max1 && parties[i] > parties[max2])         max2=i;
      }
      while (parties[max1] > parties[max2]) {
        String thisOut="""" + (char)(max1 + 65);
        --parties[max1];
        --total;
        if (parties[max1] > parties[max2]) {
          thisOut+=(char)(max1 + 65);
          --parties[max1];
          --total;
        }
        output+=thisOut + "" "";
      }
      int totalNotMax=total;
      totalNotMax-=2 * parties[max1];
      while (totalNotMax > 0) {
        String thisOut="""";
        for (int i=0; i < N; ++i) {
          if (i != max1 && i != max2 && parties[i] > 0) {
            thisOut+=(char)(i + 65);
            --parties[i];
            --total;
            --totalNotMax;
            break;
          }
        }
        for (int i=0; i < N; ++i) {
          if (i != max1 && i != max2 && parties[i] > 0) {
            thisOut+=(char)(i + 65);
            --parties[i];
            --total;
            --totalNotMax;
            break;
          }
        }
        output+=thisOut + "" "";
      }
      while (total > 0) {
        String thisOut="""";
        thisOut+=(char)(max1 + 65);
        thisOut+=(char)(max2 + 65);
        --parties[max1];
        --parties[max2];
        total-=2;
        output+=thisOut + "" "";
      }
      System.out.println(""Case #"" + (caseNum + 1) + "": ""+ output.trim());
      fout.write(""Case #"" + (caseNum + 1) + "": ""+ output.trim()+ ""\n"");
    }
    fin.close();
    fout.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001266,"public static void main(String args[]) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""E:/gcj16/senate.txt""));
  PrintWriter pw=new PrintWriter(""E:/gcj16/senate_out.txt"");
  int tc=Integer.parseInt(br.readLine()) + 1;
  int i=0, j=0, k=0, l=0, min=0, max=1001, i1=0, n=0;
  int[] ax=null;
  int count=0;
  StringTokenizer st=null;
  String temp="""", op="""";
  for (i1=1; i1 < tc; i1++) {
    ax=new int[26];
    count=0;
    n=Integer.parseInt(br.readLine());
    st=new StringTokenizer(br.readLine());
    for (i=0; i < n; i++) {
      ax[i]=Integer.parseInt(st.nextToken());
      count+=ax[i];
    }
    op="""";
    while (count > 0) {
      max=-1;
      for (i=0; i < n; i++)       if (ax[i] > max)       max=ax[i];
      j=count != 3 ? 2 : 1;
      for (i=0; i < n && j > 0; i++)       if (ax[i] == max) {
        j--;
        count--;
        ax[i]--;
        op+=("""" + ((char)(65 + i)));
      }
      op+="" "";
    }
    System.out.println(""Case #"" + i1 + "": ""+ op.trim());
    pw.println(""Case #"" + i1 + "": ""+ op.trim());
  }
  pw.close();
}
"
30001267,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int cases=input.nextInt();
  for (int c=1; c <= cases; c++) {
    String ans="""";
    int parties=input.nextInt();
    int sens[]=new int[parties];
    int total=0;
    for (int p=0; p < parties; p++) {
      sens[p]=input.nextInt();
      total+=sens[p];
    }
    while (total > 3) {
      int largest=0;
      int second=0;
      for (int i=0; i < sens.length; i++) {
        if (sens[i] > sens[largest]) {
          largest=i;
          second=-1;
        }
 else         if (sens[i] == sens[largest] && i != 0) {
          second=i;
        }
      }
      ans+="" "" + (char)(65 + largest);
      if (second == -1) {
        ans+=(char)(65 + largest);
        sens[largest]-=2;
      }
 else {
        ans+=(char)(65 + second);
        sens[second]-=1;
        sens[largest]-=1;
      }
      total-=2;
    }
    if (total == 3) {
      int place=-1;
      for (int i=0; i < sens.length; i++)       if (sens[i] == 1) {
        place=i;
        sens[i]=0;
        break;
      }
      ans+="" "" + (char)(65 + place);
      int left1=-1;
      int left2=-1;
      for (int i=0; i < sens.length; i++) {
        if (sens[i] == 1 && left1 == -1) {
          left1=i;
        }
 else         if (sens[i] == 1) {
          left2=i;
          break;
        }
      }
      ans+="" "" + (char)(65 + left1);
      if (left2 != -1)       ans+=(char)(65 + left2);
    }
    if (total <= 2) {
      int left1=-1;
      int left2=-1;
      for (int i=0; i < sens.length; i++) {
        if (sens[i] == 1 && left1 == -1) {
          left1=i;
        }
 else         if (sens[i] == 1) {
          left2=i;
          break;
        }
      }
      ans+="" "" + (char)(65 + left1);
      if (left2 != -1)       ans+=(char)(65 + left2);
    }
    System.out.println(""Case #"" + c + "":""+ ans);
  }
}
"
30001268,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""cur/SenateEvacuationLarge.in""));
  PrintWriter pout=new PrintWriter(""cur/SenateEvacuationLarge.out"");
  int i, j, t, z, n;
  t=sc.nextInt();
  for (z=1; z <= t; z++) {
    pout.print(""Case #"" + z + "": "");
    n=sc.nextInt();
    int a[]=new int[n];
    for (i=0; i < n; i++)     a[i]=sc.nextInt();
    int len=n;
    while (len > 0) {
      int max1=0, max2=1;
      for (i=1; i < n; i++) {
        if (a[max1] < a[i]) {
          max2=max1;
          max1=i;
        }
 else         if (a[max2] < a[i])         max2=i;
      }
      if (len == 3 && a[max1] == 1) {
        pout.print((char)(max1 + 65) + "" "");
        a[max1]--;
      }
 else {
        if (a[max1] == a[max2]) {
          pout.print((char)(max1 + 65) + """" + (char)(max2 + 65)+ "" "");
          a[max1]--;
          a[max2]--;
        }
 else {
          pout.print((char)(max1 + 65) + """" + (char)(max1 + 65)+ "" "");
          a[max1]-=2;
        }
      }
      if (a[max1] == 0)       len--;
      if (a[max2] == 0)       len--;
    }
    pout.println("""");
  }
  pout.close();
}
"
30001269,"public static void main(String[] args){
  BufferedReader input=null;
  BufferedWriter output=null;
  Date d1=new Date();
  try {
    input=new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
    output=new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
    String line1=null;
    String line2=null;
    int expectedCases=0;
    int actualCase=-1;
    line1=input.readLine();
    expectedCases=Integer.parseInt(line1);
    for (actualCase=1; actualCase <= expectedCases; actualCase++) {
      line1=input.readLine();
      line2=input.readLine();
      Scanner sc=new Scanner(line1);
      int partynum=sc.nextInt();
      Scanner sc1=new Scanner(line2);
      int[] parties1=new int[partynum];
      for (int i2=0; i2 < partynum; i2++) {
        parties1[i2]=sc1.nextInt();
      }
      int[] parties=parties1;
      int result2=0;
      for (      int i1 : parties) {
        result2+=i1;
      }
      int totalcount=result2;
      StringBuffer sb=new StringBuffer(2 * partynum);
      while (totalcount > 0) {
        int[] result1=new int[2];
        int[] maxvalues=new int[2];
        result1[0]=-1;
        result1[1]=-1;
        maxvalues[0]=-1;
        maxvalues[1]=-1;
        for (int i=0; i < parties.length; i++) {
          if (parties[i] > maxvalues[0]) {
            result1[1]=result1[0];
            maxvalues[1]=maxvalues[0];
            result1[0]=i;
            maxvalues[0]=parties[i];
          }
 else {
            if (parties[i] > maxvalues[1]) {
              result1[1]=i;
              maxvalues[1]=parties[i];
            }
          }
        }
        int[] x=result1;
        if ((totalcount == 3) || ((x[1] == -1) && (parties[x[0]] == 1))) {
          sb.append(PL[x[0]]);
          parties[x[0]]--;
          totalcount--;
        }
 else {
          if ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {
            sb.append(PL[x[0]]);
            sb.append(PL[x[0]]);
            parties[x[0]]-=2;
            totalcount-=2;
          }
 else {
            sb.append(PL[x[0]]);
            parties[x[0]]--;
            sb.append(PL[x[1]]);
            parties[x[1]]--;
            totalcount-=2;
          }
        }
        sb.append("" "");
      }
      String result=sb.toString().trim();
      output.write(""Case #"" + actualCase + "": ""+ result+ ""\n"");
      System.out.println(""Case #"" + actualCase + "": ""+ result);
    }
    input.close();
    output.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
  }
}
"
30001270,"public static void main(String[] args) throws IOException {
  String FILENAME_IN=""@Generic.in"";
  FILENAME_IN=""A-large.in.txt"";
  in=new BufferedReader(new FileReader(FILENAME_IN));
  out=new PrintWriter(new BufferedWriter(new FileWriter(""@Generic.out"")));
  int TC=Integer.parseInt(in.readLine());
  for (int tc=1; tc <= TC; tc++) {
    out.print(""Case #"" + tc + "": "");
    String res="""";
    long n=Integer.parseInt(in.readLine());
    int[] senastors=new int[(int)n];
    String[] str=in.readLine().split("" "");
    for (int i=0; i < str.length; i++) {
      senastors[i]=Integer.valueOf(str[i]);
    }
    int indiceMax=0;
    int max=indiceMax;
    int modulo=0;
    int several_max=0;
    do {
      max=senastors[indiceMax];
      for (int j=0; j < senastors.length; j++) {
        if (senastors[j] == max)         several_max++;
        if (senastors[j] > max) {
          max=senastors[j];
          indiceMax=j;
        }
      }
      senastors[indiceMax]--;
      if (max != 0)       res+=(char)('A' + indiceMax);
      modulo++;
      several_max=0;
    }
 while (max != 0);
    int counterModulo=0;
    if (res.length() % 2 == 0) {
      counterModulo=0;
    }
 else     counterModulo=1;
    String finalresult="""";
    for (    char oneres : res.toCharArray()) {
      if (counterModulo % 2 != 0)       finalresult+=oneres + "" "";
 else       finalresult+=oneres;
      counterModulo++;
    }
    out.print(finalresult);
    out.println();
  }
  in.close();
  out.close();
}
"
30001271,"/** 
 * Default constructor.
 * @param scanner Scanner instance that allows to parse problem input. 
 */
private SenateEvacuationSolver(final Scanner scanner){
  this.scanner=scanner;
}
"
30001272,"public static void main(String[] args) throws Exception {
  String in=""d:/A-large (1).in"";
  String out=""d:/a.out"";
  BufferedReader reader=new BufferedReader(new FileReader(in));
  BufferedWriter write=new BufferedWriter(new FileWriter(out));
  String line=reader.readLine();
  int T=Integer.parseInt(line);
  for (int i=0; i < T; i++) {
    int N=Integer.parseInt(reader.readLine());
    String[] nums=reader.readLine().split("" "");
    String string="""";
    List<StringBuilder> list=new ArrayList<StringBuilder>();
    int sum=0;
    for (int j=0; j < nums.length; j++) {
      int n=Integer.parseInt(nums[j]);
      sum+=n;
      StringBuilder line1=new StringBuilder();
      for (int i1=0; i1 < n; i1++) {
        line1.append((char)('A' + j));
      }
      list.add(line1);
    }
    int index=0;
    while (sum-- > 0) {
      for (      StringBuilder builder : list) {
        try {
          string+=builder.charAt(index);
        }
 catch (        Exception e) {
        }
      }
      index++;
    }
    StringBuilder stringBuilder=new StringBuilder(string);
    StringBuilder reverse=stringBuilder.reverse();
    string="""";
    if (reverse.length() % 2 == 0) {
      for (int p=0; p < reverse.length() - 2; p+=2) {
        string=string + reverse.charAt(p) + reverse.charAt(p + 1)+ "" "";
      }
    }
 else {
      for (int p=0; p < reverse.length() - 3; p+=2) {
        string=string + reverse.charAt(p) + reverse.charAt(p + 1)+ "" "";
      }
      string=string + reverse.charAt(reverse.length() - 3) + "" "";
    }
    string=string + reverse.substring(reverse.length() - 2);
    String solve=string;
    write.write(""Case #"" + (i + 1) + "": ""+ solve+ ""\r\n"");
  }
  reader.close();
  write.close();
}
"
30001273,"public static void main(String[] args) throws FileNotFoundException {
  System.setOut(new PrintStream(""C.out""));
  Scanner s=new Scanner(System.in);
  int tests=s.nextInt();
  for (int test=1; test <= tests; test++) {
    String answer="""";
    int n=s.nextInt();
    int[] data=new int[n];
    int sum=0;
    for (int i=0; i < n; i++) {
      data[i]=s.nextInt();
      sum+=data[i];
    }
    int[] current=new int[n];
    for (int i=0; i < sum; i++) {
      int pos=-1;
      int min=Integer.MAX_VALUE;
      for (int i1=0; i1 < data.length; i1++) {
        if (current[i1] < min && current[i1] < data[i1]) {
          min=current[i1];
          pos=i1;
        }
      }
      int c=pos;
      current[c]++;
      if (i > 0 && i % 2 == 0) {
        answer="" "" + answer;
      }
      answer=(char)('A' + c) + answer;
    }
    System.err.println(""Case #"" + test + "": ""+ answer);
    System.out.println(""Case #"" + test + "": ""+ answer);
  }
}
"
30001274,"public static void main(String[] args) throws NumberFormatException, IOException {
  int t, c=1, n, i, j, a[][], sum=0;
  String out="""";
  Scanner sc=new Scanner(System.in);
  t=sc.nextInt();
  while (t != 0) {
    out="""";
    sum=0;
    n=sc.nextInt();
    a=new int[n][2];
    for (i=0; i < n; i++) {
      a[i][0]=sc.nextInt();
      sum=sum + a[i][0];
      a[i][1]=i + 65;
    }
    while (sum > 0) {
      int l=a.length, temp;
      for (i=0; i < l; i++) {
        for (j=0; j < l - 1; j++) {
          if (a[j][0] < a[j + 1][0]) {
            temp=a[j][0];
            a[j][0]=a[j + 1][0];
            a[j + 1][0]=temp;
            temp=a[j][1];
            a[j][1]=a[j + 1][1];
            a[j + 1][1]=temp;
          }
        }
      }
      if (a[0][0] > a[1][0] && a[1][0] != 0) {
        out=out + (char)(a[0][1]) + (char)(a[0][1])+ "" "";
        a[0][0]--;
        a[0][0]--;
        sum=sum - 2;
      }
 else       if (a[0][0] == a[1][0] && a[0][0] == 1 && sum == 2) {
        out=out + (char)(a[0][1]) + (char)(a[1][1])+ "" "";
        a[0][0]--;
        a[1][0]--;
        sum=sum - 2;
      }
 else       if (a[0][0] == a[1][0] && a[0][0] == 1) {
        out=out + (char)(a[0][1]) + "" "";
        a[0][0]--;
        sum=sum - 1;
      }
 else {
        out=out + (char)(a[0][1]) + """"+ (char)(a[1][1])+ "" "";
        a[0][0]--;
        a[1][0]--;
        sum=sum - 2;
      }
    }
    System.out.println(""Case #"" + c + "": ""+ out);
    c++;
    t--;
  }
}
"
30001275,"public static void main(String[] args) throws IOException {
  String filename=""src/A-large"";
  System.setIn(new FileInputStream(new File(filename + "".in"")));
  Scanner sc=new Scanner(System.in);
  int tc=sc.nextInt();
  FileWriter fw=new FileWriter(filename + "".out"");
  for (int t=0; t < tc; t++) {
    int n=sc.nextInt();
    int[] parties=new int[n];
    int max=0;
    int maxIdx=-1;
    int rest=0;
    for (int i=0; i < n; i++) {
      rest+=parties[i]=sc.nextInt();
      if (parties[i] > max) {
        max=parties[i];
        maxIdx=i;
      }
    }
    StringBuilder result=new StringBuilder();
    if (rest % 2 == 1) {
      parties[maxIdx]--;
      rest--;
      result.append((char)('A' + maxIdx));
      result.append(' ');
    }
    while (rest > 0) {
      for (int i=0; i < 2; i++) {
        max=0;
        maxIdx=-1;
        for (int j=0; j < n; j++) {
          if (parties[j] > max) {
            max=parties[j];
            maxIdx=j;
          }
        }
        parties[maxIdx]--;
        rest--;
        result.append((char)('A' + maxIdx));
      }
      result.append(' ');
    }
    String output=""Case #"" + (t + 1) + "": ""+ result.toString().trim();
    System.out.println(output);
    fw.write(output);
    fw.write(""\n"");
    fw.flush();
  }
}
"
30001276,"public static void main(String[] args){
  T=sc.nextInt();
  for (int c=0; c < T; c++) {
    System.out.print(""Case #"" + (c + 1) + "":"");
    int len=sc.nextInt();
    P=new int[len];
    int tot=0;
    for (int i=0; i < len; i++) {
      P[i]=sc.nextInt();
      tot+=P[i];
    }
    int last=0;
    for (int i=0; i < tot - 2; ) {
      int max=-1;
      int id=-1;
      int max2=-1;
      int id2=-1;
      for (int j=0; j < len; j++) {
        if (P[j] > max) {
          id=j;
          max=P[j];
        }
      }
      P[id]--;
      for (int j=0; j < len; j++) {
        if (P[j] > max2) {
          id2=j;
          max2=P[j];
        }
      }
      int total=(tot - i - 1) / 2;
      if (P[id2] > total && P[id] > total) {
        System.out.println(""D:"");
      }
      if (P[id2] > total) {
        char i1=(char)('A' + id);
        char i2=(char)('A' + id2);
        P[id2]--;
        System.out.print("" "" + i1 + """"+ i2);
        i+=2;
      }
 else {
        char resp=(char)('A' + id);
        System.out.print("" "" + resp);
        i++;
      }
    }
    char id1='-';
    char id2='A';
    for (int j=0; j < len; j++) {
      if (P[j] > 0) {
        if (id1 == '-') {
          id1=(char)('A' + j);
        }
 else {
          id2=(char)('A' + j);
        }
      }
    }
    System.out.println("" "" + id1 + """"+ id2);
  }
}
"
30001277,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(System.in);
  PrintStream ot=new PrintStream(new FileOutputStream(""Out1C_A.txt""));
  System.setOut(ot);
  int t=sc.nextInt(), t1=t;
  while (t-- > 0) {
    int n=sc.nextInt(), lg=-1, p1=-1, p2=-1, c=0, p3=-1;
    int a[]=new int[n];
    for (int i=0; i < n; i++) {
      a[i]=sc.nextInt();
      if (a[i] > lg) {
        lg=a[p1=i];
        p2=p3=-1;
      }
 else       if (p2 == -1 && a[i] == lg)       p2=i;
 else       if (p3 == -1 && a[i] == lg)       p3=i;
      c+=a[i];
    }
    String s1=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    System.out.print(""Case #"" + (t1 - t) + "": "");
    do {
      if (c != 1) {
        if (p3 != -1) {
          System.out.print(s1.charAt(p1) + "" "");
          a[p1]--;
          c--;
        }
 else         if (p2 != -1 && a[p1] == a[p2]) {
          System.out.print(s1.charAt(p1) + """" + s1.charAt(p2)+ "" "");
          a[p1]--;
          a[p2]--;
          c-=2;
        }
 else {
          System.out.print(s1.charAt(p1) + """" + s1.charAt(p1)+ "" "");
          a[p1]-=2;
          c-=2;
        }
      }
 else {
        System.out.print(s1.charAt(p1) + "" "");
        a[p1]--;
        c--;
      }
      lg=p1=p2=p3=-1;
      for (int i=0; i < n; i++) {
        if (a[i] > lg)         lg=a[p1=i];
 else         if (p2 == -1 && a[i] == lg)         p2=i;
 else         if (p3 == -1 && a[i] == lg)         p3=i;
      }
    }
 while (c != 0);
    System.out.println();
  }
}
"
30001278,"public static void main(String args[]){
  try {
    Scanner fr=new Scanner(new File(""A-large.in""));
    int inp=fr.nextInt();
    for (int i=0; i < inp; i++) {
      int n=fr.nextInt();
      int arr[]=new int[n];
      for (int j=0; j < n; j++) {
        arr[j]=fr.nextInt();
      }
      System.out.print(""Case #"" + (i + 1) + "": "");
      func(arr);
    }
  }
 catch (  Exception e) {
  }
}
"
30001279,"public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
  Scanner sc=new Scanner(new File(""in.txt""));
  writer=new PrintWriter(""out.txt"",""UTF-8"");
  int T=sc.nextInt();
  for (int t=0; t < T; t++) {
    int n=sc.nextInt();
    int[] s=new int[n];
    int count=0;
    for (int i=0; i < n; i++) {
      s[i]=sc.nextInt();
      count+=s[i];
    }
    System.out.println(Arrays.toString(s));
    String evac="""";
    while (count > 0) {
      ArrayList<Integer> candidate=new ArrayList<>();
      top:       for (int i=0; i < n; i++) {
        for (int k=0; k < n; k++) {
          boolean ij=false;
          boolean ik=false;
          if (s[i] > 0) {
            s[i]--;
            count--;
            ij=true;
          }
          if (s[k] > 0) {
            s[k]--;
            count--;
            ik=true;
          }
          if (!ij && !ik)           continue;
          boolean flag=true;
          for (int j=0; j < n; j++) {
            if (s[j] > count / 2) {
              flag=false;
              break;
            }
          }
          if (flag) {
            if (ij) {
              candidate.add(i);
            }
            if (ik)             candidate.add(k);
            break top;
          }
 else {
            if (ij) {
              s[i]++;
              count++;
            }
            if (ik) {
              s[k]++;
              count++;
            }
          }
        }
      }
      for (      int i : candidate) {
        evac+=(char)(65 + i);
      }
      evac+="" "";
    }
    evac=evac.substring(0,evac.length() - 1);
    String s1=""Case #"" + (t + 1) + "": ""+ evac;
    writer.println(s1);
    System.out.println(s1);
  }
  writer.close();
}
"
30001280,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""C://Users/Brijesh/Downloads/A-large.in""));
  StringTokenizer st;
  int t=Integer.parseInt(br.readLine());
  for (int i=1; i <= t; i++) {
    int n=Integer.parseInt(br.readLine());
    int[] arr=new int[n];
    st=new StringTokenizer(br.readLine());
    int sum=0;
    for (int j=0; j < n; j++) {
      arr[j]=Integer.parseInt(st.nextToken());
      sum+=arr[j];
    }
    String str="""";
    while (sum > 0) {
      Vector<Integer> v=new Vector<Integer>();
      int max=0, oldmax=0;
      for (int j=0; j < n; j++) {
        if (arr[j] > max) {
          oldmax=max;
          max=arr[j];
          v.clear();
          v.add(j);
        }
 else         if (arr[j] == max)         v.add(j);
 else         if (arr[j] > oldmax)         oldmax=arr[j];
      }
      if (v.size() % 2 == 0) {
        for (int k=1; k <= max - oldmax; k++) {
          for (int j=0; j < v.size(); j+=2) {
            char a=(char)(v.elementAt(j) + 65);
            char b=(char)(v.elementAt(j + 1) + 65);
            arr[v.elementAt(j)]--;
            arr[v.elementAt(j + 1)]--;
            str+=a;
            str+=b;
            str+="" "";
            sum-=2;
          }
        }
      }
 else {
        for (int k=1; k <= max - oldmax; k++) {
          char c=(char)(v.elementAt(0) + 65);
          str+=c;
          str+="" "";
          sum--;
          arr[v.elementAt(0)]--;
          for (int j=1; j < v.size(); j+=2) {
            char a=(char)(v.elementAt(j) + 65);
            char b=(char)(v.elementAt(j + 1) + 65);
            arr[v.elementAt(j)]--;
            arr[v.elementAt(j + 1)]--;
            str+=a;
            str+=b;
            str+="" "";
            sum-=2;
          }
        }
      }
    }
    System.out.println(""Case #"" + i + "": ""+ str.trim());
  }
}
"
30001281,"public static void main(String[] arg){
  try {
    File file=new File(""E:\\A-large (2).in"");
    scan=new Scanner(file);
    out=new PrintWriter(""E:\\data.out"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  int c=scan.nextInt();
  for (int i=0; i < c; i++) {
    out.print(""Case #"" + (i + 1) + "": "");
    int n=scan.nextInt();
    int[] A=new int[n];
    for (int i4=0; i4 < n; i4++)     A[i4]=scan.nextInt();
    if (n == 2) {
      if (A[0] > A[1]) {
        for (int i5=0; i5 < A[0] - A[1]; i5++)         out.print(""A "");
      }
 else       if (A[0] < A[1]) {
        for (int i3=0; i3 < A[1] - A[0]; i3++)         out.print(""B "");
      }
      int min=A[0] > A[1] ? A[1] : A[0];
      for (int i2=0; i2 < min; i2++)       out.print(""AB "");
    }
 else {
      while (true) {
        int max=0;
        for (int i1=1; i1 < n; i1++) {
          if (A[max] < A[i1])           max=i1;
        }
        if (max == n - 2 && A[n - 2] == 1 && A[n - 1] == 1) {
          out.print((char)(n - 2 + 'A') + """" + (char)(n - 1 + 'A'));
          break;
        }
        out.print((char)(max + 'A') + "" "");
        A[max]--;
      }
    }
    out.println();
  }
  scan.close();
  out.close();
}
"
30001282,"public static void main(String[] args) throws java.lang.Exception {
  BufferedReader in=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter out=new PrintWriter(""output.txt"");
  int x1, t, i, n, sum, new_sum, max1, max2;
  boolean found;
  String str=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
  t=Integer.parseInt(in.readLine());
  for (x1=0; x1 < t; x1++) {
    n=Integer.parseInt(in.readLine());
    int[][] a=new int[n][2];
    StringTokenizer st=new StringTokenizer(in.readLine());
    sum=0;
    for (i=0; i < n; i++) {
      a[i][0]=Integer.parseInt(st.nextToken());
      a[i][1]=i;
      sum+=a[i][0];
    }
    out.print(""Case #"" + (x1 + 1) + "":"");
    while (sum > 0) {
      Arrays.sort(a,new Comparator<int[]>(){
        public int compare(        int[] c1,        int[] c2){
          int t2=c1[0] - c2[0];
          return t2;
        }
      }
);
      max1=a[n - 1][0];
      max2=a[n - 2][0];
      new_sum=sum - 2;
      found=true;
      if (new_sum > 0) {
        for (i=0; i < n - 2; i++) {
          if (a[i][0] / new_sum > 0.5) {
            found=false;
          }
        }
      }
      if (found) {
        out.print("" "" + str.charAt(a[n - 1][1]) + str.charAt(a[n - 2][1]));
        a[n - 1][0]--;
        a[n - 2][0]--;
        sum-=2;
      }
 else {
        out.print("" "" + str.charAt(a[n - 1][1]));
        a[n - 1][0]--;
        sum-=1;
      }
    }
    out.println();
  }
  out.flush();
  out.close();
}
"
30001283,"public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    int n=sc.nextInt();
    int[] p=new int[n];
    for (int i=0; i < n; i++) {
      p[i]=sc.nextInt();
    }
    int maxid1=-1;
    int max1=0;
    int maxid2=-1;
    int max2=0;
    for (int i=0; i < n; i++) {
      if (p[i] > max1) {
        max2=max1;
        maxid2=maxid1;
        max1=p[i];
        maxid1=i;
      }
 else       if (p[i] > max2) {
        max2=p[i];
        maxid2=i;
      }
    }
    StringBuilder out=new StringBuilder();
    if (max1 != max2) {
      for (int i=0; i < max1 - max2; i++) {
        out.append((char)('A' + maxid1));
        out.append(' ');
      }
    }
    for (int i=0; i < n; i++) {
      if (i == maxid1 || i == maxid2)       continue;
      for (int j=0; j < p[i]; j++) {
        out.append((char)('A' + i));
        out.append(' ');
      }
    }
    for (int i=0; i < max2; i++) {
      out.append((char)('A' + maxid1));
      out.append((char)('A' + maxid2));
      out.append(' ');
    }
    System.out.println(""Case #"" + t + "": ""+ out.toString());
  }
}
"
30001284,"public static void main(String[] args){
  long time=System.currentTimeMillis();
  Scanner sc=new Scanner(new BufferedInputStream(System.in));
  int t=sc.nextInt();
  for (int i=0; i < t; i++) {
    int n=sc.nextInt();
    int[] result=new int[n];
    for (int i5=0; i5 < n; i5++) {
      result[i5]=sc.nextInt();
    }
    int[] counts=result;
    int missing=-1;
    int maxInd1=missing == 0 ? 1 : 0;
    for (int i3=1; i3 < counts.length; i3++) {
      if (i3 != missing) {
        if (counts[i3] > counts[maxInd1]) {
          maxInd1=i3;
        }
      }
    }
    int maxInd=maxInd1;
    int maxInd2=maxInd == 0 ? 1 : 0;
    for (int i4=1; i4 < counts.length; i4++) {
      if (i4 != maxInd) {
        if (counts[i4] > counts[maxInd2]) {
          maxInd2=i4;
        }
      }
    }
    int secondInd=maxInd2;
    StringBuilder sb=new StringBuilder();
    int count=counts[maxInd] - counts[secondInd];
    String s1="" "" + (char)('A' + maxInd) + (char)('A' + maxInd);
    for (int i1=0; i1 < count / 2; i1++) {
      sb.append(s1);
    }
    if (count % 2 == 1) {
      sb.append(' ').append((char)('A' + maxInd));
    }
    counts[maxInd]=counts[secondInd];
    for (int j=0; j < n; j++) {
      if (j != maxInd && j != secondInd) {
        int count1=counts[j];
        String s2="" "" + (char)('A' + j) + (char)('A' + j);
        for (int i2=0; i2 < count1 / 2; i2++) {
          sb.append(s2);
        }
        if (count1 % 2 == 1) {
          sb.append(' ').append((char)('A' + j));
        }
      }
    }
    String s="" "" + (char)('A' + maxInd) + (char)('A' + secondInd);
    for (int j=0; j < counts[maxInd]; j++) {
      sb.append(s);
    }
    System.out.println(""Case #"" + (i + 1) + "":""+ sb.toString());
  }
  sc.close();
  System.err.println(System.currentTimeMillis() - time);
}
"
30001285,"public static void main(String[] args) throws Exception {
  Senate object=new Senate();
  String className=object.getClass().getSimpleName();
  FileReader fileReader=new FileReader(new File(className.toLowerCase() + "".in""));
  StreamTokenizer st=new StreamTokenizer(new BufferedReader(fileReader));
  FileWriter wr=new FileWriter(className.toLowerCase() + "".out"");
  st.nextToken();
  int testCases=(int)st.nval;
  for (int tc=1; tc <= testCases; tc++) {
    System.out.println(""At test "" + tc + ""/""+ testCases);
    st.nextToken();
    int N=(int)st.nval;
    int[] P=new int[N];
    for (int i=0; i < N; i++) {
      st.nextToken();
      P[i]=(int)st.nval;
    }
    List<String> output=new ArrayList<>();
    Map<Character,Integer> count=new HashMap<>();
    for (int i=0; i < P.length; i++) {
      count.put((char)('A' + i),P[i]);
    }
    while (count.size() > 0) {
      int maxOccurs=0;
      List<Character> occurs=new ArrayList<>();
      for (      Character ch : count.keySet())       maxOccurs=Math.max(maxOccurs,count.get(ch));
      for (      Character ch : count.keySet())       if (count.get(ch) == maxOccurs)       occurs.add(ch);
      if ((occurs.size() % 2) == 1) {
        char ch=occurs.get(0);
        count.put(ch,maxOccurs - 1);
        if (maxOccurs - 1 == 0) {
          count.remove(ch);
        }
        output.add("""" + ch);
      }
 else {
        char ch1=occurs.get(0);
        char ch2=occurs.get(1);
        count.put(ch1,maxOccurs - 1);
        count.put(ch2,maxOccurs - 1);
        if (maxOccurs - 1 == 0) {
          count.remove(ch1);
          count.remove(ch2);
        }
        output.add("""" + ch1 + """"+ ch2);
      }
    }
    List<String> result=output;
    StringBuilder sb=new StringBuilder();
    for (    String str : result) {
      sb.append(str + "" "");
    }
    wr.write(""Case #"" + tc + "": ""+ sb.toString().trim()+ ""\r\n"");
  }
  wr.close();
}
"
30001286,"public static void main(String[] args){
  Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  int t=in.nextInt();
  String str=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
  for (int i=1; i <= t; ++i) {
    int N=in.nextInt();
    ArrayList<Integer> p=new ArrayList<Integer>();
    int sum=0;
    for (int j=0; j < N; j++) {
      int temp=in.nextInt();
      p.add(temp);
      sum+=temp;
    }
    System.out.print(""Case #"" + i + "": "");
    while (sum > 0) {
      int index=0;
      int max=0;
      for (int k=0; k < p.size(); k++) {
        if (p.get(k) > max) {
          max=p.get(k);
          index=k;
        }
      }
      System.out.print(str.charAt(index));
      sum--;
      p.set(index,p.get(index) - 1);
      if (sum != 2) {
        max=0;
        for (int k=0; k < p.size(); k++) {
          if (p.get(k) > max) {
            max=p.get(k);
            index=k;
          }
        }
        System.out.print(str.charAt(index));
        sum--;
        p.set(index,p.get(index) - 1);
      }
      System.out.print("" "");
    }
    System.out.print(""\n"");
  }
}
"
30001287,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(in.readLine());
  for (int i=0; i < T; i++) {
    System.out.print(""Case #"" + (i + 1) + "": "");
    int parties=Integer.parseInt(in.readLine());
    String[] Members=in.readLine().split("" "");
    int total=0;
    for (int j=0; j < parties; j++) {
      total+=Integer.parseInt(Members[j]);
    }
    while (total != 0) {
      int first=0;
      int second=-1;
      int num1=0;
      int num2=0;
      String ans="""";
      for (int j=0; j < parties; j++) {
        if (first < Integer.parseInt(Members[j])) {
          second=first;
          first=Integer.parseInt(Members[j]);
          num2=num1;
          num1=j;
        }
 else {
          if (second < Integer.parseInt(Members[j])) {
            second=Integer.parseInt(Members[j]);
            num2=j;
          }
        }
      }
      ans="""" + (char)(65 + num1);
      Members[num1]=Integer.toString(Integer.parseInt(Members[num1]) - 1);
      total-=1;
      String ans2="""";
      for (int j=0; j < parties; j++) {
        double p=total;
        if (Double.parseDouble(Members[j]) / p > 0.5) {
          ans+=(char)(65 + j);
          Members[j]=Integer.toString(Integer.parseInt(Members[j]) - 1);
          total-=1;
          break;
        }
      }
      System.out.print(ans + "" "");
    }
    System.out.println();
  }
}
"
30001288,"public static void main(String[] args) throws IOException {
  String name=""gcj2016/r1/A-large"";
  Scanner s=new Scanner(new File(name + "".in""));
  int count=s.nextInt();
  out=new PrintWriter(new BufferedWriter(new FileWriter(name + "".out"")));
  for (int cc=1; cc <= count; cc++) {
    out.print(""Case #"" + cc + "": "");
    int n=s.nextInt();
    int[] a=new int[26];
    int sum=0;
    for (int i=0; i < n; i++) {
      a[i]=s.nextInt();
      sum+=a[i];
    }
    int sum1=sum;
    while (sum1 > 2) {
      if (sum1 % 2 == 0) {
        int h=sum1 / 2;
        for (int i=0; i < 26; i++) {
          if (a[i] == h) {
            a[i]--;
            sum1--;
            out.print((char)('A' + i));
          }
        }
        if (sum1 < h * 2) {
          out.print("" "");
          continue;
        }
      }
      int max=0;
      int maxi=0;
      char maxc='A';
      for (int i=0; i < 26; i++) {
        if (max < a[i]) {
          max=a[i];
          maxi=i;
          maxc=(char)('A' + i);
        }
      }
      a[maxi]--;
      sum1--;
      out.print(maxc);
      out.print("" "");
    }
    for (int i=0; i < 26; i++) {
      if (a[i] > 0)       out.print((char)('A' + i));
    }
    out.println();
  }
  out.close();
}
"
30001289,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""Round22015/A_l.in""));
  System.setOut(new PrintStream(""src/Round22015/A_l.out""));
  int T=Integer.parseInt(br.readLine());
  for (int t=1; t <= T; t++) {
    System.out.print(String.format(""Case #%d: "",t));
    String tmp[]=br.readLine().trim().split(""\\s+"");
    int R=Integer.parseInt(tmp[0]);
    int C=Integer.parseInt(tmp[1]);
    String map[]=new String[R];
    for (int i=0; i < R; i++) {
      map[i]=br.readLine();
    }
    int ans=0;
    boolean isPosible=true;
    boolean chkR[][]=new boolean[R][C];
    boolean chkL[][]=new boolean[R][C];
    boolean chkU[][]=new boolean[R][C];
    boolean chkD[][]=new boolean[R][C];
    for (int k=Math.max(R,C) + 1; k > 0; k--) {
      for (int i=0; i < R; i++) {
        for (int j=0; j < C; j++) {
          if (map[i].charAt(j) != '.') {
            if (i > 0)             chkD[i - 1][j]=true;
            if (i < R - 1)             chkU[i + 1][j]=true;
            if (j > 0)             chkR[i][j - 1]=true;
            if (j < C - 1)             chkL[i][j + 1]=true;
          }
          if (i > 0 && chkU[i - 1][j]) {
            chkU[i][j]=true;
          }
          if (j > 0 && chkL[i][j - 1]) {
            chkL[i][j]=true;
          }
          if (i < R - 1 && chkD[i + 1][j]) {
            chkD[i][j]=true;
          }
          if (j < C - 1 && chkR[i][j + 1]) {
            chkR[i][j]=true;
          }
        }
      }
    }
    for (int i=0; i < R; i++) {
      for (int j=0; j < C; j++) {
        if (map[i].charAt(j) != '.' && !chkL[i][j] && !chkR[i][j] && !chkU[i][j] && !chkD[i][j]) {
          isPosible=false;
        }
      }
    }
    if (!isPosible) {
      System.out.println(""IMPOSSIBLE "");
    }
 else {
      for (int r=0; r < R; r++) {
        for (int c=0; c < C; c++) {
          char a=map[r].charAt(c);
          if (a == '<' && !chkL[r][c])           ans++;
          if (a == '>' && !chkR[r][c])           ans++;
          if (a == 'v' && !chkD[r][c])           ans++;
          if (a == '^' && !chkU[r][c])           ans++;
        }
      }
      System.out.println(ans);
    }
  }
}
"
30001290,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(new File(""Pegman.out""));
  int[] dr={0,1,0,-1};
  int[] dc={1,0,-1,0};
  String lookup="">v<^"";
  int loops=in.nextInt();
  for (int loop=0; loop < loops; loop++) {
    int r=in.nextInt();
    int c=in.nextInt();
    in.nextLine();
    char[][] arr=new char[r][];
    for (int i=0; i < r; i++) {
      arr[i]=in.nextLine().toCharArray();
    }
    int ans=0;
    big:     for (int i=0; i < r; i++) {
      out:       for (int j=0; j < c; j++) {
        if (arr[i][j] != '.') {
          int d=lookup.indexOf(arr[i][j]);
          int a=i + dr[d];
          int b=j + dc[d];
          while (a >= 0 && b >= 0 && a < r && b < c) {
            if (arr[a][b] != '.')             continue out;
            a+=dr[d];
            b+=dc[d];
          }
          ans++;
          for (d=0; d < 4; d++) {
            a=i + dr[d];
            b=j + dc[d];
            while (a >= 0 && b >= 0 && a < r && b < c) {
              if (arr[a][b] != '.')               continue out;
              a+=dr[d];
              b+=dc[d];
            }
          }
          ans=-1;
          break big;
        }
      }
    }
    out.printf(""Case #%d: %s%n"",loop + 1,ans >= 0 ? ans : ""IMPOSSIBLE"");
  }
  out.close();
  in.close();
}
"
30001291,"public static void main(String[] args) throws FileNotFoundException {
  Scanner cin=new Scanner(new File(""A-small-attempt0.in""));
  PrintStream cout=new PrintStream(""A-small-attempt0.out"");
  int _case=0;
  int[] dx={0,0,1,-1};
  int[] dy={1,-1,0,0};
  for (int T=cin.nextInt(); T > 0; T--) {
    _case++;
    r=cin.nextInt();
    c=cin.nextInt();
    char[][] a=new char[r][];
    for (int i=0; i < r; i++)     a[i]=cin.next().toCharArray();
    int ans=0;
    for (int i=0; i < r; i++)     for (int j=0; j < c; j++) {
      if (a[i][j] != '.') {
        boolean good=false;
        int dir=0;
        if (a[i][j] == '>')         dir=0;
 else         if (a[i][j] == '<')         dir=1;
 else         if (a[i][j] == 'v')         dir=2;
 else         dir=3;
        for (int x=i + dx[dir], y=j + dy[dir]; x >= 0 && x < r && y >= 0 && y < c; x+=dx[dir], y+=dy[dir]) {
          if (a[x][y] != '.') {
            good=true;
            break;
          }
        }
        if (good)         continue;
 else {
          boolean found=false;
          for (int k=0; k < 4; k++) {
            for (int x=i + dx[k], y=j + dy[k]; x >= 0 && x < r && y >= 0 && y < c; x+=dx[k], y+=dy[k])             if (a[x][y] != '.') {
              found=true;
              break;
            }
          }
          if (!found) {
            ans=Integer.MAX_VALUE;
          }
 else {
            ans++;
          }
        }
      }
    }
    if (ans == Integer.MAX_VALUE)     cout.printf(""Case #%d: IMPOSSIBLE%n"",_case);
 else     cout.printf(""Case #%d: %d%n"",_case,ans);
  }
  cin.close();
  cout.close();
}
"
30001292,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int nCase=scanner.nextInt();
  for (int nc=1; nc <= nCase; nc++) {
    int R=scanner.nextInt();
    int C=scanner.nextInt();
    scanner.nextLine();
    char[][] map=new char[R][C];
    for (int i=0; i < R; i++) {
      String in=scanner.nextLine();
      for (int j=0; j < C; j++) switch (in.charAt(j)) {
case '.':
        map[i][j]=0;
      break;
case '^':
    map[i][j]=1;
  break;
case '>':
map[i][j]=2;
break;
case 'v':
map[i][j]=3;
break;
case '<':
map[i][j]=4;
break;
}
}
int ans=0;
for (int i=0; i < R && ans >= 0; i++) for (int j=0; j < C; j++) if (map[i][j] > 0) {
int R1=map.length;
int C1=map[0].length;
int oldDir=map[i][j];
int ans1=-1;
for (int dir=1; dir <= 4 && ans1 != 0; dir++) {
int nx=i + dx[dir];
int ny=j + dy[dir];
while (0 <= nx && nx < R1 && 0 <= ny && ny < C1) {
if (map[nx][ny] > 0) {
if (dir == oldDir) {
ans1=0;
break;
}
 else {
ans1=1;
break;
}
}
nx=nx + dx[dir];
ny=ny + dy[dir];
}
}
int need=ans1;
if (need < 0) {
ans=-1;
break;
}
 else ans+=need;
}
if (ans >= 0) System.out.println(""Case #"" + nc + "": ""+ ans);
 else System.out.println(""Case #"" + nc + "": IMPOSSIBLE"");
}
}
"
30001293,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    sc.nextLine();
    hashLeft=new boolean[r][c];
    hashRight=new boolean[r][c];
    hashUp=new boolean[r][c];
    hashDown=new boolean[r][c];
    map=new char[r][c];
    for (int i=0; i < r; i++) {
      String temp=sc.nextLine();
      for (int j=0; j < c; j++) {
        map[i][j]=temp.charAt(j);
      }
    }
    for (int i=0; i < r; i++) {
      for (int j=1; j < c; j++) {
        if (hashLeft[i][j - 1]) {
          hashLeft[i][j]=true;
        }
 else {
          if (map[i][j - 1] != '.') {
            hashLeft[i][j]=true;
          }
        }
      }
    }
    for (int i=1; i < r; i++) {
      for (int j=0; j < c; j++) {
        if (hashUp[i - 1][j]) {
          hashUp[i][j]=true;
        }
 else {
          if (map[i - 1][j] != '.') {
            hashUp[i][j]=true;
          }
        }
      }
    }
    for (int i=0; i < r; i++) {
      for (int j=c - 2; j >= 0; j--) {
        if (hashRight[i][j + 1]) {
          hashRight[i][j]=true;
        }
 else {
          if (map[i][j + 1] != '.') {
            hashRight[i][j]=true;
          }
        }
      }
    }
    for (int i=r - 2; i >= 0; i--) {
      for (int j=0; j < c; j++) {
        if (hashDown[i + 1][j]) {
          hashDown[i][j]=true;
        }
 else {
          if (map[i + 1][j] != '.') {
            hashDown[i][j]=true;
          }
        }
      }
    }
    int ans=0;
    boolean find=false;
    label:     for (int i=0; i < r; i++) {
      for (int j=0; j < c; j++) {
        char cc=map[i][j];
        if (cc == '.') {
          continue;
        }
        if (cc == '>') {
          if (hashRight[i][j]) {
            continue;
          }
          if (hashLeft[i][j] || hashUp[i][j] || hashDown[i][j]) {
            ans++;
          }
 else {
            find=true;
            break label;
          }
        }
        if (cc == '<') {
          if (hashLeft[i][j]) {
            continue;
          }
          if (hashRight[i][j] || hashUp[i][j] || hashDown[i][j]) {
            ans++;
          }
 else {
            find=true;
            break label;
          }
        }
        if (cc == 'v') {
          if (hashDown[i][j]) {
            continue;
          }
          if (hashLeft[i][j] || hashUp[i][j] || hashRight[i][j]) {
            ans++;
          }
 else {
            find=true;
            break label;
          }
        }
        if (cc == '^') {
          if (hashUp[i][j]) {
            continue;
          }
          if (hashLeft[i][j] || hashDown[i][j] || hashRight[i][j]) {
            ans++;
          }
 else {
            find=true;
            break label;
          }
        }
      }
    }
    if (find) {
      System.out.println(""Case #"" + t + "": IMPOSSIBLE"");
    }
 else {
      System.out.println(""Case #"" + t + "": ""+ ans);
    }
  }
}
"
30001294,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""in.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""out.out""));
  int t=Integer.parseInt(br.readLine());
  for (c=1; c <= t; c++) {
    bw.write(""Case #"" + c + "": "");
    String line=br.readLine();
    String[] fields=line.split("" "");
    int r=Integer.parseInt(fields[0]);
    int c=Integer.parseInt(fields[1]);
    arr=new char[r][c];
    for (int i=0; i < r; i++) {
      line=br.readLine();
      for (int j=0; j < c; j++) {
        arr[i][j]=line.charAt(j);
      }
    }
    boolean viable=true;
    int count=0;
    for (int i=0; i < r; i++) {
      for (int j=0; j < c; j++) {
        if (arr[i][j] != '.') {
          boolean found=false;
          if (arr[i][j] == '>') {
            for (int k=j + 1; k < c; k++) {
              if (arr[i][k] != '.') {
                found=true;
                break;
              }
            }
          }
 else           if (arr[i][j] == '<') {
            for (int k=j - 1; k >= 0; k--) {
              if (arr[i][k] != '.') {
                found=true;
                break;
              }
            }
          }
 else           if (arr[i][j] == 'v') {
            for (int k=i + 1; k < r; k++) {
              if (arr[k][j] != '.') {
                found=true;
                break;
              }
            }
          }
 else           if (arr[i][j] == '^') {
            for (int k=i - 1; k >= 0; k--) {
              if (arr[k][j] != '.') {
                found=true;
                break;
              }
            }
          }
          if (found) {
            continue;
          }
          boolean works=false;
          for (int k=0; k < r; k++) {
            if (k == i)             continue;
            if (arr[k][j] != '.') {
              works=true;
              break;
            }
          }
          for (int k=0; k < c; k++) {
            if (k == j)             continue;
            if (arr[i][k] != '.') {
              works=true;
              break;
            }
          }
          if (works) {
            count++;
          }
 else {
            viable=false;
            break;
          }
        }
      }
      if (!viable)       break;
    }
    if (viable) {
      bw.write(count + ""\n"");
    }
 else {
      bw.write(""IMPOSSIBLE\n"");
    }
  }
  br.close();
  bw.close();
}
"
30001295,"public static void main(String[] args){
  Scanner input=null;
  Pegman[] puzzles;
  try {
    input=new Scanner(new FileInputStream(""input.in""));
    puzzles=Pegman.readFile(input);
    input.close();
  }
 catch (  Exception e) {
    System.out.println(""hi"");
    System.out.println(e);
    System.exit(0);
    return;
  }
  String[] results=new String[puzzles.length];
  for (int i=0; i < puzzles.length; ++i) {
    results[i]=""Case #"" + (int)(i + 1) + "": ""+ puzzles[i].solve();
    System.out.println(""Case #"" + (int)(i + 1) + "" done"");
  }
  PrintWriter output=null;
  try {
    output=new PrintWriter(new FileOutputStream(""output.txt""));
    for (int i=0; i < results.length; ++i) {
      output.println(results[i]);
    }
    output.close();
  }
 catch (  Exception e) {
    System.out.println(e);
    System.exit(0);
    return;
  }
}
"
30001296,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int T=s.nextInt();
  for (int t=1; t <= T; t++) {
    int r=s.nextInt(), c=s.nextInt();
    s.nextLine();
    char[][] v=new char[r][c];
    for (int i=0; i < r; i++) {
      String line=s.nextLine();
      for (int j=0; j < c; j++) {
        v[i][j]=line.charAt(j);
      }
    }
    boolean[][][] f=new boolean[r][c][4];
    for (int j=0; j < c; j++) {
      boolean flag=false;
      for (int i=0; i < r; i++) {
        if (v[i][j] != '.') {
          f[i][j][0]=flag;
          flag=true;
        }
      }
    }
    for (int j=0; j < c; j++) {
      boolean flag=false;
      for (int i=r - 1; i >= 0; i--) {
        if (v[i][j] != '.') {
          f[i][j][1]=flag;
          flag=true;
        }
      }
    }
    for (int i=0; i < r; i++) {
      boolean flag=false;
      for (int j=0; j < c; j++) {
        if (v[i][j] != '.') {
          f[i][j][2]=flag;
          flag=true;
        }
      }
    }
    for (int i=0; i < r; i++) {
      boolean flag=false;
      for (int j=c - 1; j >= 0; j--) {
        if (v[i][j] != '.') {
          f[i][j][3]=flag;
          flag=true;
        }
      }
    }
    int ans=0;
    for (int i=0; i < r; i++) {
      for (int j=0; j < c; j++) {
        if (v[i][j] != '.') {
          boolean valid=true;
switch (v[i][j]) {
case '^':
            valid=f[i][j][0];
          break;
case 'v':
        valid=f[i][j][1];
      break;
case '<':
    valid=f[i][j][2];
  break;
case '>':
valid=f[i][j][3];
break;
default :
System.out.println(""ERROR"");
break;
}
if (!valid) {
ans++;
boolean fail=true;
for (int k=0; k < 4; k++) {
if (f[i][j][k]) {
fail=false;
break;
}
}
if (fail) {
ans=-1;
break;
}
}
}
}
if (ans == -1) {
break;
}
}
if (ans == -1) {
System.out.println(String.format(""Case #%d: IMPOSSIBLE"",t));
}
 else {
System.out.println(String.format(""Case #%d: %d"",t,ans));
}
}
s.close();
}
"
30001297,"public static void main(String[] args) throws IOException, InterruptedException {
  BufferedReader fr=new BufferedReader(new FileReader(new File(""input.txt"")));
  FileWriter fw=new FileWriter(new File(""result.txt""));
  String firstLine=fr.readLine();
  int nbCases=Integer.parseInt(firstLine);
  for (int numCase=0; numCase < nbCases; numCase++) {
    String line=fr.readLine();
    int R=Integer.parseInt(line.split("" "")[0]);
    int C=Integer.parseInt(line.split("" "")[1]);
    char[][] fleches=new char[R][C];
    for (int i=0; i < R; i++) {
      line=fr.readLine();
      for (int j=0; j < C; j++) {
        fleches[i][j]=line.charAt(j);
      }
    }
    int result=0;
    for (int i=0; i < R; i++) {
      for (int j=0; j < C; j++) {
        if (fleches[i][j] == '.') {
          continue;
        }
        boolean needsToChange=true;
        if (fleches[i][j] == '<') {
          for (int k=j - 1; k >= 0; k--) {
            if (fleches[i][k] != '.') {
              needsToChange=false;
              break;
            }
          }
        }
        if (fleches[i][j] == '>') {
          for (int k=j + 1; k < C; k++) {
            if (fleches[i][k] != '.') {
              needsToChange=false;
              break;
            }
          }
        }
        if (fleches[i][j] == '^') {
          for (int k=i - 1; k >= 0; k--) {
            if (fleches[k][j] != '.') {
              needsToChange=false;
              break;
            }
          }
        }
        if (fleches[i][j] == 'v') {
          for (int k=i + 1; k < R; k++) {
            if (fleches[k][j] != '.') {
              needsToChange=false;
              break;
            }
          }
        }
        if (needsToChange) {
          boolean changeable=false;
          for (int k=i + 1; k < R; k++) {
            if (fleches[k][j] != '.') {
              changeable=true;
              break;
            }
          }
          for (int k=i - 1; k >= 0; k--) {
            if (fleches[k][j] != '.') {
              changeable=true;
              break;
            }
          }
          for (int k=j + 1; k < C; k++) {
            if (fleches[i][k] != '.') {
              changeable=true;
              break;
            }
          }
          for (int k=j - 1; k >= 0; k--) {
            if (fleches[i][k] != '.') {
              changeable=true;
              break;
            }
          }
          if (changeable) {
            result++;
          }
 else {
            result=Integer.MIN_VALUE;
            break;
          }
        }
      }
    }
    if (result < 0) {
      fw.write(""Case #"" + (numCase + 1) + "": IMPOSSIBLE\n"");
    }
 else {
      fw.write(""Case #"" + (numCase + 1) + "": ""+ result+ ""\n"");
    }
  }
  fw.close();
  System.out.println(""finished"");
}
"
30001298,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int caseNum=1; caseNum <= t; caseNum++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    char[][] grid=new char[r][c];
    for (int i=0; i < r; i++) {
      grid[i]=sc.next().toCharArray();
    }
    int count=0;
    boolean isImpossible=false;
    for (int i=0; i < r; i++) {
      boolean firstFound=false;
      boolean lastFound=false;
      char first='.';
      int firstIdx=-1;
      char last='.';
      int lastIdx=-1;
      for (int j=0; j < c; j++) {
        if (!firstFound) {
          if (grid[i][j] != '.') {
            first=grid[i][j];
            firstIdx=j;
            firstFound=true;
          }
        }
 else {
          if (grid[i][j] != '.') {
            last=grid[i][j];
            lastIdx=j;
            lastFound=true;
          }
        }
      }
      if (lastFound) {
        if (first == '<') {
          count+=1;
        }
        if (last == '>') {
          count+=1;
        }
      }
 else {
        if (first == '<' || first == '>') {
          grid[i][firstIdx]='*';
        }
      }
    }
    for (int j=0; j < c; j++) {
      boolean firstFound=false;
      boolean lastFound=false;
      char first='.';
      int firstIdx=-1;
      char last='.';
      int lastIdx=-1;
      for (int i=0; i < r; i++) {
        if (grid[i][j] == '*') {
          count+=1;
        }
        if (!firstFound) {
          if (grid[i][j] != '.') {
            first=grid[i][j];
            firstIdx=i;
            firstFound=true;
          }
        }
 else {
          if (grid[i][j] != '.') {
            last=grid[i][j];
            lastIdx=i;
            lastFound=true;
          }
        }
      }
      if (lastFound) {
        if (first == '^') {
          count+=1;
        }
        if (last == 'v') {
          count+=1;
        }
      }
 else {
        if (first == '^' || first == 'v') {
          grid[firstIdx][j]='&';
        }
 else         if (first == '*') {
          isImpossible=true;
        }
      }
    }
    for (int i=0; i < r; i++) {
      boolean firstFound=false;
      boolean lastFound=false;
      boolean ampFound=false;
      char first='.';
      int firstIdx=-1;
      char last='.';
      int lastIdx=-1;
      for (int j=0; j < c; j++) {
        if (grid[i][j] == '&') {
          ampFound=true;
          count+=1;
        }
        if (!firstFound) {
          if (grid[i][j] != '.') {
            first=grid[i][j];
            firstIdx=j;
            firstFound=true;
          }
        }
 else {
          if (grid[i][j] != '.') {
            last=grid[i][j];
            lastIdx=j;
            lastFound=true;
          }
        }
      }
      if (ampFound && !lastFound) {
        isImpossible=true;
      }
    }
    if (isImpossible) {
      System.out.printf(""Case #%d: IMPOSSIBLE\n"",caseNum);
    }
 else {
      System.out.printf(""Case #%d: %d\n"",caseNum,count);
    }
  }
}
"
30001299,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new File(""a.in""));
    PrintStream out=new PrintStream(""a.out"");
    int T=in.nextInt();
    System.out.println(T);
    for (int C=1; C <= T; C++) {
      System.out.println(""case:"" + C);
      int M=in.nextInt();
      int N=in.nextInt();
      char[][] mat=new char[M][N];
      in.nextLine();
      for (int i=0; i < M; i++) {
        String temp=in.nextLine();
        for (int j=0; j < N; j++)         mat[i][j]=temp.charAt(j);
      }
      int ans=0;
      boolean res=true;
      for (int i=0; i < M; i++) {
        for (int j=0; j < N; j++) {
          if (mat[i][j] != '.') {
            boolean[] dir=new boolean[4];
            for (int x=0; x < i; x++)             if (mat[x][j] != '.') {
              dir[0]=true;
              break;
            }
            for (int x=i + 1; x < M; x++)             if (mat[x][j] != '.') {
              dir[1]=true;
              break;
            }
            for (int y=0; y < j; y++)             if (mat[i][y] != '.') {
              dir[2]=true;
              break;
            }
            for (int y=j + 1; y < N; y++)             if (mat[i][y] != '.') {
              dir[3]=true;
              break;
            }
            boolean can=false;
            for (int d=0; d < 4; d++)             if (dir[d])             can=true;
            if (!can) {
              res=false;
              break;
            }
            if (mat[i][j] == '^' && dir[0])             continue;
            if (mat[i][j] == 'v' && dir[1])             continue;
            if (mat[i][j] == '<' && dir[2])             continue;
            if (mat[i][j] == '>' && dir[3])             continue;
            ans++;
          }
        }
        if (!res)         break;
      }
      if (!res)       out.println(""Case #"" + C + "": IMPOSSIBLE"");
 else       out.println(""Case #"" + C + "": ""+ ans);
    }
    in.close();
    out.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001300,"public static void main(String[] args) throws IOException {
  br=new BufferedReader(new InputStreamReader(System.in));
  pw=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
  int test=Integer.parseInt(next());
  for (int t=1; t <= test; t++) {
    System.out.print(""Case #"" + t + "": "");
    int n=Integer.parseInt(next());
    int m=Integer.parseInt(next());
    char[][] a=new char[n + 1][m + 1];
    for (int i=1; i <= n; i++) {
      String s=next();
      for (int j=1; j <= m; j++) {
        a[i][j]=s.charAt(j - 1);
      }
    }
    int ans=0;
    for (int i=1; i <= n; i++) {
      for (int j=1; j <= m; j++) {
        if (a[i][j] != '.') {
          boolean found=false;
          int add=1;
          for (int k=i + 1; k <= n; k++) {
            if (a[k][j] != '.') {
              if (a[i][j] == 'v')               add=0;
              found=true;
            }
          }
          for (int k=i - 1; k >= 1; k--) {
            if (a[k][j] != '.') {
              if (a[i][j] == '^')               add=0;
              found=true;
            }
          }
          for (int k=j + 1; k <= m; k++) {
            if (a[i][k] != '.') {
              if (a[i][j] == '>')               add=0;
              found=true;
            }
          }
          for (int k=j - 1; k >= 1; k--) {
            if (a[i][k] != '.') {
              if (a[i][j] == '<')               add=0;
              found=true;
            }
          }
          if (!found) {
            ans=-1;
            break;
          }
          ans+=add;
        }
      }
    }
    if (ans == -1)     System.out.println(""IMPOSSIBLE"");
 else {
      System.out.println(ans);
    }
  }
  pw.close();
}
"
30001301,"public static void main(String[] args){
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  BufferedOutputStream bos=new BufferedOutputStream(System.out);
  String eol=System.getProperty(""line.separator"");
  byte[] eolb=eol.getBytes();
  try {
    String str=br.readLine();
    int t=Integer.parseInt(str);
    for (int i=0; i < t; i++) {
      int ans=0;
      str=br.readLine();
      int blank=str.indexOf("" "");
      r=Integer.parseInt(str.substring(0,blank));
      c=Integer.parseInt(str.substring(blank + 1));
      char[][] ar=new char[r][c];
      for (int j=0; j < r; j++) {
        str=br.readLine();
        ar[j]=str.toCharArray();
      }
      boolean impos=false;
      boolean val=false;
      int row=0;
      int col=0;
      for (int j=0; j < r; j++) {
        for (int k=0; k < c; k++) {
switch (ar[j][k]) {
case '^':
            row=j - 1;
          if (row >= 0) {
            while (ar[row][k] == '.') {
              row--;
              if (row < 0) {
                break;
              }
            }
          }
        if (row < 0) {
          ans++;
        }
      boolean ans1=true;
    for (int a=0; a < j; a++) {
      if (ar[a][k] != '.') {
        ans1=false;
      }
    }
  for (int a=0; a < k; a++) {
    if (ar[j][a] != '.') {
      ans1=false;
    }
  }
for (int a=j + 1; a < r; a++) {
  if (ar[a][k] != '.') {
    ans1=false;
  }
}
for (int a=k + 1; a < c; a++) {
if (ar[j][a] != '.') {
  ans1=false;
}
}
val=ans1;
if (val == true) {
impos=true;
}
break;
case '<':
col=k - 1;
if (col >= 0) {
while (ar[j][col] == '.') {
col--;
if (col < 0) {
break;
}
}
}
if (col < 0) {
ans++;
}
boolean ans2=true;
for (int a=0; a < j; a++) {
if (ar[a][k] != '.') {
ans2=false;
}
}
for (int a=0; a < k; a++) {
if (ar[j][a] != '.') {
ans2=false;
}
}
for (int a=j + 1; a < r; a++) {
if (ar[a][k] != '.') {
ans2=false;
}
}
for (int a=k + 1; a < c; a++) {
if (ar[j][a] != '.') {
ans2=false;
}
}
val=ans2;
if (val == true) {
impos=true;
}
break;
case '>':
col=k + 1;
if (col < c) {
while (ar[j][col] == '.') {
col++;
if (col >= c) {
break;
}
}
}
if (col >= c) {
ans++;
}
boolean ans3=true;
for (int a=0; a < j; a++) {
if (ar[a][k] != '.') {
ans3=false;
}
}
for (int a=0; a < k; a++) {
if (ar[j][a] != '.') {
ans3=false;
}
}
for (int a=j + 1; a < r; a++) {
if (ar[a][k] != '.') {
ans3=false;
}
}
for (int a=k + 1; a < c; a++) {
if (ar[j][a] != '.') {
ans3=false;
}
}
val=ans3;
if (val == true) {
impos=true;
}
break;
case 'v':
row=j + 1;
if (row < r) {
while (ar[row][k] == '.') {
row++;
if (row >= r) {
break;
}
}
}
if (row >= r) {
ans++;
}
boolean ans4=true;
for (int a=0; a < j; a++) {
if (ar[a][k] != '.') {
ans4=false;
}
}
for (int a=0; a < k; a++) {
if (ar[j][a] != '.') {
ans4=false;
}
}
for (int a=j + 1; a < r; a++) {
if (ar[a][k] != '.') {
ans4=false;
}
}
for (int a=k + 1; a < c; a++) {
if (ar[j][a] != '.') {
ans4=false;
}
}
val=ans4;
if (val == true) {
impos=true;
}
break;
case '.':
break;
}
}
}
bos.write(""Case #"".getBytes());
bos.write(new Integer(i + 1).toString().getBytes());
bos.write("": "".getBytes());
if (impos) {
bos.write(""IMPOSSIBLE"".getBytes());
}
 else {
bos.write(new Integer(ans).toString().getBytes());
}
bos.write(eolb);
}
bos.flush();
}
 catch (IOException ioe) {
ioe.printStackTrace();
}
}
"
30001302,"public static void main(String[] args){
  int pN=1;
  if (args.length == 0) {
    try {
      System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
    }
 catch (    Exception e) {
    }
  }
 else {
    pN=Integer.parseInt(args[0]);
  }
  PrintStream out=System.out;
  System.setOut(null);
  Scanner sc=new Scanner(System.in);
  final int caseN=sc.nextInt();
  final A[] solvers=new A[caseN];
  StringWriter[] outs=new StringWriter[caseN];
  for (int i=0; i < caseN; i++) {
    solvers[i]=new A();
    outs[i]=new StringWriter();
    solvers[i].out=new PrintWriter(outs[i]);
    solvers[i].out.printf(""Case #%d: "",i + 1);
    A r=solvers[i];
    r.R=sc.nextInt();
    r.C=sc.nextInt();
    r.cs=new char[r.R][];
    for (int i1=0; i1 < r.R; i1++)     r.cs[i1]=sc.next().toCharArray();
  }
  Thread[] ts=new Thread[pN];
  for (int i=0; i < pN; i++) {
    ts[i]=new Thread(){
      @Override public void run(){
        for (; ; ) {
          int id;
synchronized (A.class) {
            if (__ID == caseN)             return;
            id=__ID++;
          }
          try {
            A r=solvers[id];
            boolean[][][] dame=new boolean[r.R][r.C][4];
            for (int d=0; d < 4; d++) {
              for (int i=0; i < r.R; i++) {
                for (int j=0; j < r.C; j++) {
                  int i1=i - r.dx[d];
                  int i2=j - r.dy[d];
                  if ((i == 0 || i == r.R - 1 || j == 0 || j == r.C - 1) && (!(0 <= i1 && i1 <= r.R - 1) || !(0 <= i2 && i2 <= r.C - 1))) {
                    int x=i, y=j;
                    while (0 <= x && x <= r.R - 1 && 0 <= y && y <= r.C - 1) {
                      if (r.cs[x][y] != '.') {
                        dame[x][y][d]=true;
                        break;
                      }
                      x+=r.dx[d];
                      y+=r.dy[d];
                    }
                  }
                }
              }
            }
            int res=0;
            boolean impossible=false;
            for (int i=0; i < r.R; i++) {
              for (int j=0; j < r.C; j++)               if (r.cs[i][j] != '.') {
                boolean ok=true, can=false;
                for (int k=0; k < 4; k++) {
                  if (r.cs[i][j] == r.D[k] && dame[i][j][k])                   ok=false;
                  if (!dame[i][j][k])                   can=true;
                }
                if (!ok)                 res++;
                if (!can)                 impossible=true;
              }
            }
            if (impossible)             r.out.println(""IMPOSSIBLE"");
 else             r.out.println(res);
          }
 catch (          RuntimeException e) {
            __ERROR=true;
            System.err.printf(""Error in case %d:%n"",id + 1);
            e.printStackTrace();
          }
          solvers[id].out.flush();
          solvers[id]=null;
        }
      }
    }
;
    ts[i].start();
  }
  for (int i=0; i < pN; i++) {
    try {
      ts[i].join();
    }
 catch (    InterruptedException e) {
      i--;
      continue;
    }
  }
  for (int i=0; i < caseN; i++) {
    out.print(outs[i].toString());
  }
  if (__ERROR)   out.printf(""%nError occured!!!%n"");
}
"
30001303,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(""src/A-large.in""))));
  String output="""";
  int t=sc.nextInt();
  sc.nextLine();
  for (int i=1; i <= t; i++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    sc.nextLine();
    char[][] grid=new char[r][c];
    for (int j=0; j < r; j++) {
      grid[j]=sc.nextLine().toCharArray();
    }
    int arrowsToChange=0;
    boolean isImpossible=false;
    for (int j=0; j < r; j++) {
      for (int k=0; k < c; k++) {
        char g=grid[j][k];
        if (g == '.')         continue;
        if (g == '^') {
          boolean needsToChange=true;
          for (int m=j - 1; m >= 0; m--) {
            if (grid[m][k] != '.') {
              needsToChange=false;
              break;
            }
          }
          if (needsToChange) {
            boolean impossible=true;
            for (int m=j + 1; m < r; m++) {
              if (grid[m][k] != '.') {
                impossible=false;
                break;
              }
            }
            for (int m=k - 1; m >= 0; m--) {
              if (grid[j][m] != '.') {
                impossible=false;
                break;
              }
            }
            for (int m=k + 1; m < c; m++) {
              if (grid[j][m] != '.') {
                impossible=false;
                break;
              }
            }
            if (impossible)             isImpossible=true;
 else             arrowsToChange++;
          }
        }
        if (g == 'v') {
          boolean needsToChange=true;
          for (int m=j + 1; m < r; m++) {
            if (grid[m][k] != '.') {
              needsToChange=false;
              break;
            }
          }
          if (needsToChange) {
            boolean impossible=true;
            for (int m=j - 1; m >= 0; m--) {
              if (grid[m][k] != '.') {
                impossible=false;
                break;
              }
            }
            for (int m=k - 1; m >= 0; m--) {
              if (grid[j][m] != '.') {
                impossible=false;
                break;
              }
            }
            for (int m=k + 1; m < c; m++) {
              if (grid[j][m] != '.') {
                impossible=false;
                break;
              }
            }
            if (impossible)             isImpossible=true;
 else             arrowsToChange++;
          }
        }
        if (g == '<') {
          boolean needsToChange=true;
          for (int m=k - 1; m >= 0; m--) {
            if (grid[j][m] != '.') {
              needsToChange=false;
              break;
            }
          }
          if (needsToChange) {
            boolean impossible=true;
            for (int m=j + 1; m < r; m++) {
              if (grid[m][k] != '.') {
                impossible=false;
                break;
              }
            }
            for (int m=j - 1; m >= 0; m--) {
              if (grid[m][k] != '.') {
                impossible=false;
                break;
              }
            }
            for (int m=k + 1; m < c; m++) {
              if (grid[j][m] != '.') {
                impossible=false;
                break;
              }
            }
            if (impossible)             isImpossible=true;
 else             arrowsToChange++;
          }
        }
        if (g == '>') {
          boolean needsToChange=true;
          for (int m=k + 1; m < c; m++) {
            if (grid[j][m] != '.') {
              needsToChange=false;
              break;
            }
          }
          if (needsToChange) {
            boolean impossible=true;
            for (int m=j - 1; m >= 0; m--) {
              if (grid[m][k] != '.') {
                impossible=false;
                break;
              }
            }
            for (int m=k - 1; m >= 0; m--) {
              if (grid[j][m] != '.') {
                impossible=false;
                break;
              }
            }
            for (int m=j + 1; m < r; m++) {
              if (grid[m][k] != '.') {
                impossible=false;
                break;
              }
            }
            if (impossible)             isImpossible=true;
 else             arrowsToChange++;
          }
        }
      }
    }
    String tempOut="""";
    if (isImpossible)     tempOut=""IMPOSSIBLE"";
 else     tempOut="""" + arrowsToChange;
    output+=""Case #"" + i + "": ""+ tempOut+ ""\n"";
  }
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""src/A-large.out""),""utf-8""));
  bw.write(output);
  bw.close();
}
"
30001304,"public static void main(String[] args) throws Exception {
  File inputFile=new File(""inputfiles/round2/P1/input.txt"");
  FileReader fr=new FileReader(inputFile);
  BufferedReader br=new BufferedReader(fr);
  int numOfTestCases=Integer.parseInt(br.readLine());
  File outputFile=new File(""inputfiles/round2/P1/output.txt"");
  outputFile.delete();
  outputFile.createNewFile();
  FileWriter fw=new FileWriter(outputFile);
  BufferedWriter bw=new BufferedWriter(fw);
  for (int i=0; i < numOfTestCases; i++) {
    String[] rc=br.readLine().split("" "");
    int R=Integer.parseInt(rc[0]);
    int C=Integer.parseInt(rc[1]);
    char[][] grid=new char[R][C];
    for (int j=0; j < R; j++) {
      String row=br.readLine();
      for (int k=0; k < row.length(); k++)       grid[j][k]=row.charAt(k);
    }
    int changeNum=0;
    boolean possible=true;
    main:     for (int i1=0; i1 < R; i1++)     for (int j=0; j < C; j++) {
      char field=grid[i1][j];
      if (field == '.')       continue;
      boolean isArrowUp=false;
      for (int k=0; k < i1; k++)       if (grid[k][j] != '.') {
        isArrowUp=true;
        break;
      }
      boolean isArrowDown=false;
      for (int k=i1 + 1; k < R; k++)       if (grid[k][j] != '.') {
        isArrowDown=true;
        break;
      }
      boolean isArrowLeft=false;
      for (int k=0; k < j; k++)       if (grid[i1][k] != '.') {
        isArrowLeft=true;
        break;
      }
      boolean isArrowRight=false;
      for (int k=j + 1; k < C; k++)       if (grid[i1][k] != '.') {
        isArrowRight=true;
        break;
      }
      if (!isArrowUp && !isArrowDown && !isArrowLeft&& !isArrowRight) {
        possible=false;
        break main;
      }
      if (field == '^' && !isArrowUp)       changeNum++;
      if (field == 'v' && !isArrowDown)       changeNum++;
      if (field == '>' && !isArrowRight)       changeNum++;
      if (field == '<' && !isArrowLeft)       changeNum++;
    }
    String s=""Case #"" + (i + 1) + "": ""+ (possible ? changeNum : ""IMPOSSIBLE"")+ ""\n"";
    bw.append(s);
    bw.flush();
  }
  bw.flush();
  fw.flush();
  bw.close();
  fw.close();
}
"
30001305,"public static void main(String[] args) throws Exception {
  Solution r=new Solution();
  Scanner sc=new Scanner(new FileReader(""input.txt""));
  PrintWriter pw=new PrintWriter(new FileWriter(""output.txt""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    int R=sc.nextInt();
    int C=sc.nextInt();
    int res=0;
    String board[]=new String[R];
    sc.nextLine();
    for (int i=0; i < R; i++) {
      board[i]=sc.nextLine();
    }
    int max=101;
    int dirX[]={-1,1,0,0};
    int dirY[]={0,0,1,-1};
    String dir=""^v><"";
    boolean possible=true;
    for (int i=0; i < R && possible; i++) {
      for (int j=0; j < C && possible; j++) {
        int curDir=dir.indexOf(board[i].charAt(j));
        int curX=i;
        int curY=j;
        boolean reachEnd=false;
        if (curDir >= 0) {
          for (int k=0; k < max; k++) {
            curX=curX + dirX[curDir];
            curY=curY + dirY[curDir];
            if (curX < R && curX >= 0 && curY < C && curY >= 0) {
              if (board[curX].charAt(curY) != '.')               break;
            }
 else {
              reachEnd=true;
              break;
            }
          }
          if (reachEnd) {
            possible=false;
            for (int d=0; d < 4 && !possible; d++) {
              curX=i;
              curY=j;
              for (int k=0; k < max; k++) {
                curX=curX + dirX[d];
                curY=curY + dirY[d];
                if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                  if (board[curX].charAt(curY) != '.') {
                    possible=true;
                    res++;
                    break;
                  }
                }
 else {
                  break;
                }
              }
            }
          }
        }
      }
    }
    if (!possible) {
      pw.println(""IMPOSSIBLE"");
    }
 else {
      pw.println(res);
    }
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30001306,"public static void main(String[] args){
  String prblm=""A"";
  boolean fl=true;
  String filein=prblm + ""-"" + ((fl) ? ""large"" : ""small"")+ "".in.txt"";
  String fileout=prblm + ""-"" + ((fl) ? ""large"" : ""small"")+ "".out.txt"";
  try {
    BufferedReader fr=new BufferedReader(new FileReader(filein));
    BufferedWriter fw=new BufferedWriter(new FileWriter(fileout));
    String s=fr.readLine();
    int T=Integer.parseInt(s);
    for (int i=1; i <= T; i++) {
      s=fr.readLine();
      String[] tok=s.split("" "");
      int R=Integer.parseInt(tok[0]);
      int C=Integer.parseInt(tok[1]);
      int[][] mt=new int[R][C];
      for (int j=0; j < R; j++) {
        s=fr.readLine();
        for (int h=0; h < C; h++) {
switch (s.charAt(h)) {
case '^':
            mt[j][h]=1;
          break;
case '<':
        mt[j][h]=2;
      break;
case 'v':
    mt[j][h]=3;
  break;
case '>':
mt[j][h]=4;
break;
}
}
}
int nch=0;
int[][] mtd=new int[R][C];
for (int h=0; h < C; h++) {
int k=0;
while (k < R && mt[k][h] == 0) k++;
if (k < R) {
mtd[k][h]++;
if (mt[k][h] == 1) nch++;
}
k=R - 1;
while (k >= 0 && mt[k][h] == 0) k--;
if (k >= 0) {
mtd[k][h]++;
if (mt[k][h] == 3) nch++;
}
}
for (int j=0; j < R; j++) {
int k=0;
while (k < C && mt[j][k] == 0) k++;
if (k < C) {
mtd[j][k]++;
if (mt[j][k] == 2) nch++;
}
k=C - 1;
while (k >= 0 && mt[j][k] == 0) k--;
if (k >= 0) {
mtd[j][k]++;
if (mt[j][k] == 4) nch++;
}
}
boolean f=false;
for (int j=0; j < R && !f; j++) {
for (int h=0; h < C && !f; h++) {
if (mtd[j][h] == 4) f=true;
}
}
if (f) s=""IMPOSSIBLE"";
 else s="""" + nch;
System.out.println(s);
fw.write(""Case #"" + i + "": ""+ s+ ""\n"");
}
fr.close();
fw.close();
}
 catch (Exception e) {
e.printStackTrace();
}
}
"
30001307,"/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
  StringTokenizer st;
  int T=Integer.parseInt(br.readLine());
  for (int cn=1; cn <= T; cn++) {
    st=new StringTokenizer(br.readLine());
    int R=Integer.parseInt(st.nextToken());
    int C=Integer.parseInt(st.nextToken());
    char arr[][]=new char[R][C];
    for (int i=0; i < R; i++) {
      String str=br.readLine();
      for (int j=0; j < C; j++) {
        arr[i][j]=str.charAt(j);
      }
    }
    LinkedList<Integer> list=new LinkedList<Integer>();
    for (int i=0; i < R; i++) {
      for (int j=0; j < C; j++) {
        int dx=0, dy=0;
        if (arr[i][j] == '.')         continue;
 else         if (arr[i][j] == '^') {
          dx=-1;
          dy=0;
        }
 else         if (arr[i][j] == 'v') {
          dx=1;
          dy=0;
        }
 else         if (arr[i][j] == '<') {
          dx=0;
          dy=-1;
        }
 else         if (arr[i][j] == '>') {
          dx=0;
          dy=1;
        }
        int cx=i + dx, cy=j + dy;
        while (cx >= 0 && cx < R && cy >= 0 && cy < C) {
          if (arr[cx][cy] != '.')           break;
          cx+=dx;
          cy+=dy;
        }
        if (cx < 0 || cx >= R || cy < 0 || cy >= C) {
          list.add(i * 100 + j);
        }
      }
    }
    boolean okay=true;
    for (    int li : list) {
      int i=li / 100, j=li % 100;
      int dx[]={-1,1,0,0};
      int dy[]={0,0,-1,1};
      boolean found=false;
      for (int dn=0; dn < 4; dn++) {
        int cx=i + dx[dn], cy=j + dy[dn];
        while (cx >= 0 && cx < R && cy >= 0 && cy < C) {
          if (arr[cx][cy] != '.') {
            found=true;
            break;
          }
          cx+=dx[dn];
          cy+=dy[dn];
        }
      }
      if (!found)       okay=false;
    }
    int ans=list.size();
    if (okay)     bw.append(""Case #"" + cn + "": ""+ ans+ ""\n"");
 else     bw.append(""Case #"" + cn + "": IMPOSSIBLE\n"");
  }
  bw.flush();
}
"
30001308,"public static void main(String[] args) throws Exception {
  String fileName=args[0];
  Pegman obj=new Pegman();
  BufferedReader br=new BufferedReader(new FileReader(fileName));
  BufferedWriter bw=new BufferedWriter(new FileWriter(fileName + "".out""));
  int T=Integer.parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    String str=br.readLine();
    StringTokenizer token=new StringTokenizer(str,"" "");
    int R=Integer.parseInt(token.nextToken());
    int C=Integer.parseInt(token.nextToken());
    int[][] map=new int[C][R];
    for (int j=0; j < R; j++) {
      str=br.readLine();
      for (int k=0; k < C; k++) {
switch (str.charAt(k)) {
case '^':
          map[k][j]=1;
        break;
case '>':
      map[k][j]=2;
    break;
case 'v':
  map[k][j]=3;
break;
case '<':
map[k][j]=4;
break;
default :
map[k][j]=0;
break;
}
}
}
int ans=0;
for (int j=0; j < R; j++) {
for (int k=0; k < C; k++) {
if (map[k][j] == 0) {
continue;
}
int x=k;
int y=j;
boolean flg=false;
while (true) {
x+=obj.DIR[map[k][j]][0];
y+=obj.DIR[map[k][j]][1];
if (x < 0 || x >= C || y < 0 || y >= R) {
break;
}
if (map[x][y] != 0) {
flg=true;
break;
}
}
if (flg) {
continue;
}
flg=false;
for (int d=1; d <= 4; d++) {
if (map[k][j] == d) {
continue;
}
x=k;
y=j;
while (true) {
x+=obj.DIR[d][0];
y+=obj.DIR[d][1];
if (x < 0 || x >= C || y < 0 || y >= R) {
break;
}
if (map[x][y] != 0) {
flg=true;
break;
}
}
if (flg) {
break;
}
}
if (flg) {
ans+=1;
continue;
}
 else {
ans=-1;
break;
}
}
if (ans == -1) {
break;
}
}
if (ans == -1) {
bw.write(""Case #"" + (i + 1) + "": ""+ ""IMPOSSIBLE"");
}
 else {
bw.write(""Case #"" + (i + 1) + "": ""+ ans);
}
bw.write(""\r\n"");
}
bw.close();
br.close();
}
"
30001309,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int nT=sc.nextInt();
  for (int T=1; T <= nT; ++T) {
    int R=sc.nextInt(), C=sc.nextInt();
    int[][] map=new int[R][C];
    char[] line=new char[C];
    int[] dr={0,-1,0,1,0};
    int[] dc={0,0,1,0,-1};
    for (int r=0; r < R; ++r) {
      line=sc.next().toCharArray();
      for (int c=0; c < C; ++c) {
switch (line[c]) {
case '.':
          map[r][c]=0;
        break;
case '^':
      map[r][c]=1;
    break;
case '>':
  map[r][c]=2;
break;
case 'v':
map[r][c]=3;
break;
case '<':
map[r][c]=4;
break;
}
}
}
int total=0;
boolean possible=true;
for (int r=0; r < R && possible; ++r) {
for (int c=0; c < C && possible; ++c) {
if (map[r][c] == 0) continue;
int d=1;
int r1=r + d * dr[map[r][c]];
int c1=c + d * dc[map[r][c]];
while ((0 <= r1 && r1 < R && 0 <= c1 && c1 < C) && map[r + d * dr[map[r][c]]][c + d * dc[map[r][c]]] == 0) ++d;
int r2=r + d * dr[map[r][c]];
int c2=c + d * dc[map[r][c]];
if (!(0 <= r2 && r2 < R && 0 <= c2 && c2 < C)) {
boolean found=false;
for (int del=1; del <= 4; ++del) {
d=1;
int r3=r + d * dr[del];
int c3=c + d * dc[del];
while ((0 <= r3 && r3 < R && 0 <= c3 && c3 < C) && map[r + d * dr[del]][c + d * dc[del]] == 0) ++d;
int r4=r + d * dr[del];
int c4=c + d * dc[del];
if ((0 <= r4 && r4 < R && 0 <= c4 && c4 < C)) {
found=true;
break;
}
}
if (!found) possible=false;
 else ++total;
}
}
}
if (possible) System.out.println(""Case #"" + T + "": ""+ total);
 else System.out.println(""Case #"" + T + "": IMPOSSIBLE"");
}
}
"
30001310,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int res=0;
    int R=in.nextInt();
    int C=in.nextInt();
    in.nextLine();
    char[][] board=new char[R][C];
    int[] rowArrows=new int[R];
    int[] colArrows=new int[C];
    for (int r=0; r < R; r++) {
      board[r]=in.nextLine().toCharArray();
    }
    for (int r=0; r < R; r++) {
      boolean first=true;
      char lastArrow='.';
      for (int c=0; c < C; c++) {
        if (board[r][c] != '.') {
          if (first && board[r][c] == '<') {
            res++;
          }
          first=false;
          lastArrow=board[r][c];
          rowArrows[r]++;
        }
      }
      if (lastArrow == '>') {
        res++;
      }
    }
    for (int c=0; c < C; c++) {
      boolean first=true;
      char lastArrow='.';
      for (int r=0; r < R; r++) {
        if (board[r][c] != '.') {
          if (first && board[r][c] == '^') {
            res++;
          }
          first=false;
          lastArrow=board[r][c];
          colArrows[c]++;
        }
      }
      if (lastArrow == 'v') {
        res++;
      }
    }
    boolean imp=false;
    for (int r=0; r < R; r++) {
      for (int c=0; c < C; c++) {
        if (board[r][c] != '.') {
          if (rowArrows[r] == 1 && colArrows[c] == 1) {
            imp=true;
            break;
          }
        }
      }
      if (imp) {
        break;
      }
    }
    if (imp) {
      System.out.format(""Case #%d: IMPOSSIBLE\n"",t);
    }
 else {
      System.out.format(""Case #%d: %d\n"",t,res);
    }
  }
  in.close();
}
"
30001311,"public static void main(String[] args) throws NumberFormatException, IOException {
  FileWriter writer=new FileWriter(""C:/Users/Max/Documents/Java Workspaces/Google Code Jam/Round 2 2015/src/output.txt"");
  try {
    BufferedReader br=new BufferedReader(new FileReader(""C:/Users/Max/Documents/Java Workspaces/Google Code Jam/Round 2 2015/src/input.txt""));
    int numCases=Integer.parseInt(br.readLine());
    for (int caseNum=1; caseNum <= numCases; caseNum++) {
      String line=br.readLine();
      Scanner sc=new Scanner(line);
      int r=sc.nextInt();
      int c=sc.nextInt();
      char[][] grid=new char[r][c];
      for (int i=0; i < r; i++) {
        line=br.readLine();
        for (int j=0; j < c; j++) {
          grid[i][j]=line.charAt(j);
        }
      }
      int needsChanging=0;
      boolean[][] needChangeRow=new boolean[r][c];
      boolean[][] needChangeCol=new boolean[r][c];
      boolean[][] impossibleRow=new boolean[r][c];
      boolean[][] impossibleCol=new boolean[r][c];
      for (int i=0; i < r; i++) {
        int firstCol=0;
        while (firstCol < c && grid[i][firstCol] == '.') {
          firstCol++;
        }
        if (firstCol < c && grid[i][firstCol] != '>') {
          needChangeRow[i][firstCol]=true;
        }
        int lastCol=c - 1;
        while (lastCol >= 0 && grid[i][lastCol] == '.') {
          lastCol--;
        }
        if (lastCol >= 0 && grid[i][lastCol] != '<') {
          needChangeRow[i][lastCol]=true;
        }
        if (firstCol == lastCol) {
          impossibleRow[i][firstCol]=true;
        }
        for (int j=firstCol + 1; j < lastCol; j++) {
          if (grid[i][j] == 'v' || grid[i][j] == '^') {
            needChangeRow[i][j]=true;
          }
        }
      }
      for (int j=0; j < c; j++) {
        int firstRow=0;
        while (firstRow < r && grid[firstRow][j] == '.') {
          firstRow++;
        }
        if (firstRow < r && grid[firstRow][j] != 'v') {
          needChangeCol[firstRow][j]=true;
        }
        int lastRow=r - 1;
        while (lastRow >= 0 && grid[lastRow][j] == '.') {
          lastRow--;
        }
        if (lastRow >= 0 && grid[lastRow][j] != '^') {
          needChangeCol[lastRow][j]=true;
        }
        if (firstRow == lastRow) {
          impossibleCol[firstRow][j]=true;
        }
        for (int i=firstRow + 1; i < lastRow; i++) {
          if (grid[i][j] == '<' || grid[i][j] == '>') {
            needChangeCol[i][j]=true;
          }
        }
      }
      boolean impossible=false;
      for (int i=0; i < r; i++) {
        for (int j=0; j < c; j++) {
          if (needChangeCol[i][j] && needChangeRow[i][j]) {
            needsChanging++;
          }
          if (impossibleRow[i][j] && impossibleCol[i][j]) {
            impossible=true;
          }
        }
      }
      if (impossible) {
        writer.write(""Case #"" + caseNum + "": ""+ ""IMPOSSIBLE""+ ""\n"");
      }
 else {
        writer.write(""Case #"" + caseNum + "": ""+ """"+ needsChanging+ ""\n"");
      }
    }
    br.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  writer.close();
}
"
30001312,"public static void main(String[] args) throws Exception {
  BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
  int ntests=Integer.parseInt(bf.readLine());
  for (int tc=1; tc <= ntests; tc++) {
    String[] line=bf.readLine().split("" "");
    int r=Integer.parseInt(line[0]);
    int c=Integer.parseInt(line[1]);
    char[][] grid=new char[r][];
    for (int i=0; i < r; i++) {
      grid[i]=bf.readLine().toCharArray();
    }
    boolean isImpossible=false;
    int numChanged=0;
    int[][] dirs={{-1,0},{0,1},{1,0},{0,-1}};
    for (int i=0; i < r; i++) {
      for (int j=0; j < c; j++) {
        int curDir=0;
switch (grid[i][j]) {
case '.':
          continue;
case '^':
        curDir=0;
      break;
case '>':
    curDir=1;
  break;
case 'v':
curDir=2;
break;
case '<':
curDir=3;
break;
}
boolean hasArrowInCurDir=false;
for (int[] pos={i + dirs[curDir][0],j + dirs[curDir][1]}; pos[0] >= 0 && pos[1] >= 0 && pos[0] < r && pos[1] < c; pos[0]+=dirs[curDir][0], pos[1]+=dirs[curDir][1]) {
if (grid[pos[0]][pos[1]] != '.') {
hasArrowInCurDir=true;
break;
}
}
if (!hasArrowInCurDir) {
for (int otherDirs=0; otherDirs <= 3; otherDirs++) {
if (otherDirs == curDir) continue;
for (int[] pos={i + dirs[otherDirs][0],j + dirs[otherDirs][1]}; pos[0] >= 0 && pos[1] >= 0 && pos[0] < r && pos[1] < c; pos[0]+=dirs[otherDirs][0], pos[1]+=dirs[otherDirs][1]) {
if (grid[pos[0]][pos[1]] != '.') {
hasArrowInCurDir=true;
break;
}
}
if (hasArrowInCurDir) {
break;
}
}
if (hasArrowInCurDir) {
numChanged++;
}
 else {
isImpossible=true;
}
}
}
}
if (isImpossible) {
System.out.println(""Case #"" + tc + "": ""+ ""IMPOSSIBLE"");
}
 else {
System.out.println(""Case #"" + tc + "": ""+ numChanged);
}
}
}
"
30001313,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  nextcase:   for (int zz=1; zz <= T; zz++) {
    int R=in.nextInt();
    int C=in.nextInt();
    int[][] G=new int[R][C];
    for (int i=0; i < R; i++) {
      String S=in.next();
      for (int j=0; j < C; j++) {
        char c=S.charAt(j);
        if (c == '.')         G[i][j]=EMPTY;
 else         if (c == '<')         G[i][j]=LEFT;
 else         if (c == '>')         G[i][j]=RIGHT;
 else         if (c == 'v')         G[i][j]=DOWN;
 else         if (c == '^')         G[i][j]=UP;
      }
    }
    int ans=0;
    for (int r=0; r < R; r++) {
      for (int c=0; c < C; c++) {
        if (G[r][c] == EMPTY)         continue;
        boolean[] ok=new boolean[4];
        boolean any=false;
        for (int d=0; d < 4; d++) {
          int nr=r + dr[d];
          int nc=c + dc[d];
          ok[d]=false;
          while (0 <= nr && nr < R && 0 <= nc && nc < C) {
            if (G[nr][nc] != EMPTY) {
              ok[d]=true;
              any=true;
              break;
            }
            nr+=dr[d];
            nc+=dc[d];
          }
        }
        if (!any) {
          System.out.format(""Case #%d: IMPOSSIBLE\n"",zz);
          continue nextcase;
        }
        if (!ok[G[r][c] - 1]) {
          ans++;
        }
      }
    }
    System.out.format(""Case #%d: %d\n"",zz,ans);
  }
}
"
30001314,"public static void main(String[] args){
  P1 r=new P1();
  try {
    File file=new File(""A-large.in"");
    r.scio=new Scanner(file);
  }
 catch (  FileNotFoundException e) {
  }
  int t=r.scio.nextInt();
  String s=r.scio.nextLine();
  for (int i=0; i < t; ++i) {
    r.caseNum=i + 1;
    int n=r.scio.nextInt();
    int m=r.scio.nextInt();
    String ss=r.scio.nextLine();
    int[][] a=new int[n + 10][m + 10];
    for (int i1=0; i1 < n + 10; ++i1)     for (int j=0; j < m + 10; ++j)     a[i1][j]=-1;
    for (int i3=1; i3 <= n; ++i3) {
      String s1=r.scio.nextLine();
      char[] c=s1.toCharArray();
      for (int j=1; j <= m; ++j) {
        if (c[j - 1] == '.')         a[i3][j]=0;
        if (c[j - 1] == '^')         a[i3][j]=1;
        if (c[j - 1] == 'v')         a[i3][j]=2;
        if (c[j - 1] == '<')         a[i3][j]=3;
        if (c[j - 1] == '>')         a[i3][j]=4;
      }
    }
    int cnt=0;
    for (int i2=1; i2 <= n; ++i2) {
      for (int j=1; j <= m; ++j) {
        if (a[i2][j] == 0)         continue;
        int[] good=new int[5];
        for (int t1=0; t1 < 5; ++t1)         good[t1]=0;
        for (int t2=1; t2 <= 4; ++t2) {
          int x=i2;
          int y=j;
          while (a[x][y] != -1) {
            x+=r.dir[t2][0];
            y+=r.dir[t2][1];
            if (a[x][y] > 0) {
              good[t2]=1;
              ++good[0];
              break;
            }
          }
        }
        if (good[0] == 0)         cnt=-1 * n * m* 2;
        if (good[a[i2][j]] == 0)         ++cnt;
      }
    }
    if (cnt < 0) {
      System.out.println(""case #"" + r.caseNum + "": ""+ ""IMPOSSIBLE"");
    }
 else {
      System.out.println(""case #"" + r.caseNum + "": ""+ cnt);
    }
  }
}
"
30001315,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""A-large (4).in""));
  PrintWriter out=new PrintWriter(""AL.out"");
  int tc=in.nextInt();
  int[] di=new int[128];
  int[] dj=new int[128];
  di['v']=1;
  dj['v']=0;
  di['>']=0;
  dj['>']=1;
  di['^']=-1;
  dj['^']=0;
  di['<']=0;
  dj['<']=-1;
  for (int cc=1; cc <= tc; cc++) {
    int n=in.nextInt();
    int m=in.nextInt();
    char[][] map=new char[n][];
    for (int i=0; i < n; i++)     map[i]=in.next().toCharArray();
    int[] rcount=new int[n];
    int[] ccount=new int[m];
    for (int i=0; i < n; i++) {
      for (int j=0; j < m; j++) {
        if (map[i][j] != '.') {
          rcount[i]++;
          ccount[j]++;
        }
      }
    }
    int count=0;
    boolean impossible=false;
    for (int i=0; i < n && !impossible; i++) {
      for (int j=0; j < m && !impossible; j++) {
        if (map[i][j] != '.') {
          int ci=i + di[map[i][j]];
          int cj=j + dj[map[i][j]];
          boolean found=false;
          while (ci >= 0 && ci < n && cj >= 0 && cj < m) {
            if (map[ci][cj] != '.')             found=true;
            ci+=di[map[i][j]];
            cj+=dj[map[i][j]];
          }
          if (!found) {
            count++;
            if (rcount[i] == 1 && ccount[j] == 1) {
              impossible=true;
            }
          }
        }
      }
    }
    if (impossible) {
      System.out.printf(""Case #%d: %s\n"",cc,""IMPOSSIBLE"");
      out.printf(""Case #%d: %s\n"",cc,""IMPOSSIBLE"");
    }
 else {
      System.out.printf(""Case #%d: %d\n"",cc,count);
      out.printf(""Case #%d: %d\n"",cc,count);
    }
  }
  out.close();
}
"
30001316,"public static void main(String args[]) throws Exception {
  A r=new A();
  r.sc=new Scanner(new File(A.IN));
  r.out=new BufferedWriter(new FileWriter(A.OUT));
  int t=Integer.parseInt(r.sc.nextLine());
  for (int i=1; i <= t; i++) {
    r.out.write(""Case #"" + i + "": "");
    int r1=r.sc.nextInt();
    int c=r.sc.nextInt();
    String[] map=new String[r1];
    for (int i2=0; i2 < r1; i2++) {
      map[i2]=r.sc.next();
    }
    boolean[][][] limit=new boolean[r1][c][4];
    for (int i4=0; i4 < r1; i4++) {
      int j=0;
      for (j=0; j < c; j++) {
        if (map[i4].charAt(j) != '.') {
          break;
        }
      }
      if (j < c) {
        limit[i4][j][0]=true;
      }
      for (j=c - 1; j >= 0; j--) {
        if (map[i4].charAt(j) != '.') {
          break;
        }
      }
      if (j >= 0) {
        limit[i4][j][1]=true;
      }
    }
    for (int j=0; j < c; j++) {
      int i1=0;
      for (i1=0; i1 < r1; i1++) {
        if (map[i1].charAt(j) != '.') {
          break;
        }
      }
      if (i1 < r1) {
        limit[i1][j][2]=true;
      }
      for (i1=r1 - 1; i1 >= 0; i1--) {
        if (map[i1].charAt(j) != '.') {
          break;
        }
      }
      if (i1 >= 0) {
        limit[i1][j][3]=true;
      }
    }
    int res=0;
    boolean ok=true;
    for (int i3=0; i3 < r1; i3++) {
      for (int j=0; j < c; j++) {
        if (limit[i3][j][0] && limit[i3][j][1] && limit[i3][j][2]&& limit[i3][j][3]) {
          ok=false;
          break;
        }
switch (map[i3].charAt(j)) {
case '<':
          if (limit[i3][j][0]) {
            res++;
          }
        break;
case '>':
      if (limit[i3][j][1]) {
        res++;
      }
    break;
case '^':
  if (limit[i3][j][2]) {
    res++;
  }
break;
case 'v':
if (limit[i3][j][3]) {
res++;
}
default :
break;
}
}
}
r.out.write(ok ? Integer.toString(res) : ""IMPOSSIBLE"");
r.out.newLine();
r.out.flush();
}
r.sc.close();
r.out.close();
}
"
30001317,"public static void main(String[] args) throws IOException {
  A r=new A();
  Scanner sc=new Scanner(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""A-large.out""));
  int nc=sc.nextInt();
  for (int tc=1; tc <= nc; tc++) {
    int r1=sc.nextInt();
    int c=sc.nextInt();
    char[][] g=new char[r1][c];
    for (int i=0; i < r1; i++) {
      g[i]=sc.next().toCharArray();
    }
    boolean imp=false;
    int ans=0;
    for (int j=0; j < c; j++) {
      int i=0;
      while (i < r1) {
        if (g[i][j] == '.')         i++;
 else         if (g[i][j] == '^') {
          boolean ok=false;
          int i1=i - 1;
          while (i1 >= 0) {
            if (g[i1][j] != '.') {
              ok=true;
              break;
            }
            i1--;
          }
          i1=i + 1;
          while (i1 < g.length) {
            if (g[i1][j] != '.') {
              ok=true;
              break;
            }
            i1++;
          }
          int j1=j - 1;
          while (j1 >= 0) {
            if (g[i][j1] != '.') {
              ok=true;
              break;
            }
            j1--;
          }
          j1=j + 1;
          while (j1 < g[0].length) {
            if (g[i][j1] != '.') {
              ok=true;
              break;
            }
            j1++;
          }
          imp|=!ok;
          ans++;
          break;
        }
 else         break;
      }
    }
    for (int j=0; j < c; j++) {
      int i=r1 - 1;
      while (i >= 0) {
        if (g[i][j] == '.')         i--;
 else         if (g[i][j] == 'v') {
          boolean ok=false;
          int i1=i - 1;
          while (i1 >= 0) {
            if (g[i1][j] != '.') {
              ok=true;
              break;
            }
            i1--;
          }
          i1=i + 1;
          while (i1 < g.length) {
            if (g[i1][j] != '.') {
              ok=true;
              break;
            }
            i1++;
          }
          int j1=j - 1;
          while (j1 >= 0) {
            if (g[i][j1] != '.') {
              ok=true;
              break;
            }
            j1--;
          }
          j1=j + 1;
          while (j1 < g[0].length) {
            if (g[i][j1] != '.') {
              ok=true;
              break;
            }
            j1++;
          }
          imp|=!ok;
          ans++;
          break;
        }
 else         break;
      }
    }
    for (int i=0; i < r1; i++) {
      int j=0;
      while (j < c) {
        if (g[i][j] == '.')         j++;
 else         if (g[i][j] == '<') {
          boolean ok=false;
          int i1=i - 1;
          while (i1 >= 0) {
            if (g[i1][j] != '.') {
              ok=true;
              break;
            }
            i1--;
          }
          i1=i + 1;
          while (i1 < g.length) {
            if (g[i1][j] != '.') {
              ok=true;
              break;
            }
            i1++;
          }
          int j1=j - 1;
          while (j1 >= 0) {
            if (g[i][j1] != '.') {
              ok=true;
              break;
            }
            j1--;
          }
          j1=j + 1;
          while (j1 < g[0].length) {
            if (g[i][j1] != '.') {
              ok=true;
              break;
            }
            j1++;
          }
          imp|=!ok;
          ans++;
          break;
        }
 else         break;
      }
    }
    for (int i=0; i < r1; i++) {
      int j=c - 1;
      while (j >= 0) {
        if (g[i][j] == '.')         j--;
 else         if (g[i][j] == '>') {
          boolean ok=false;
          int i1=i - 1;
          while (i1 >= 0) {
            if (g[i1][j] != '.') {
              ok=true;
              break;
            }
            i1--;
          }
          i1=i + 1;
          while (i1 < g.length) {
            if (g[i1][j] != '.') {
              ok=true;
              break;
            }
            i1++;
          }
          int j1=j - 1;
          while (j1 >= 0) {
            if (g[i][j1] != '.') {
              ok=true;
              break;
            }
            j1--;
          }
          j1=j + 1;
          while (j1 < g[0].length) {
            if (g[i][j1] != '.') {
              ok=true;
              break;
            }
            j1++;
          }
          imp|=!ok;
          ans++;
          break;
        }
 else         break;
      }
    }
    String ansStr=imp ? ""IMPOSSIBLE"" : (ans + """");
    pw.printf(""Case #%d: %s\n"",tc,ansStr);
  }
  pw.close();
  sc.close();
}
"
30001318,"public static void main(String[] args) throws IOException, FileNotFoundException {
  String file=""A-large"";
  Scanner scan=new Scanner(new BufferedReader(new FileReader(file + "".in"")));
  PrintWriter pw=new PrintWriter(new BufferedWriter(new FileWriter(file + "".out"")));
  int T=Integer.parseInt(scan.nextLine());
  for (int t=1; t <= T; t++) {
    String[] info=scan.nextLine().split("" "");
    int R=Integer.parseInt(info[0]);
    int C=Integer.parseInt(info[1]);
    char[][] grid=new char[R][C];
    for (int r=0; r < R; r++)     grid[r]=scan.nextLine().toCharArray();
    char[] arrow={'^','>','v','<'};
    int[] dr={-1,0,1,0};
    int[] dc={0,1,0,-1};
    int cnt=0;
    boolean impossible=false;
    for (int r=0; r < R; r++)     for (int c=0; c < C; c++)     if (grid[r][c] != '.') {
      boolean stop=false;
      boolean found=false;
      for (int d=0; d < 4; d++) {
        int nr=r, nc=c;
        while (true) {
          nr+=dr[d];
          nc+=dc[d];
          if (nr < 0 || nr >= R || nc < 0 || nc >= C)           break;
          if (grid[nr][nc] != '.') {
            found=true;
            if (arrow[d] == grid[r][c])             stop=true;
            break;
          }
        }
      }
      if (!found)       impossible=true;
      if (!stop)       cnt++;
    }
    if (impossible)     pw.println(""Case #"" + t + "": IMPOSSIBLE"");
 else     pw.println(""Case #"" + t + "": ""+ cnt);
  }
  scan.close();
  pw.close();
}
"
30001319,"public static void main(String[] args) throws Exception {
  File inputFile=new File(""A-large.in"");
  Scanner in=new Scanner(inputFile);
  File outputFile=new File(""output.txt"");
  PrintWriter out=new PrintWriter(outputFile);
  int T=in.nextInt();
  for (int t=0; t < T; t++) {
    int R=in.nextInt();
    int C=in.nextInt();
    char[][] A=new char[R][];
    for (int r=0; r < R; r++) {
      A[r]=in.next().toCharArray();
    }
    boolean ok=true;
    int answer=0;
    for (int r=0; r < R; r++) {
      for (int c=0; c < C; c++) {
        if (A[r][c] == '.')         continue;
        boolean up=false;
        for (int rr=r - 1; rr >= 0; rr--) {
          if (A[rr][c] != '.') {
            up=true;
          }
        }
        boolean down=false;
        for (int rr=r + 1; rr < R; rr++) {
          if (A[rr][c] != '.') {
            down=true;
          }
        }
        boolean left=false;
        for (int cc=c - 1; cc >= 0; cc--) {
          if (A[r][cc] != '.') {
            left=true;
          }
        }
        boolean right=false;
        for (int cc=c + 1; cc < C; cc++) {
          if (A[r][cc] != '.') {
            right=true;
          }
        }
        boolean exists=up || down || left|| right;
        if (exists) {
          if ((A[r][c] == '^' && !up) || (A[r][c] == 'v' && !down) || (A[r][c] == '>' && !right)|| (A[r][c] == '<' && !left)) {
            answer++;
          }
        }
 else {
          ok=false;
        }
      }
    }
    String s=ok ? Integer.toString(answer) : ""IMPOSSIBLE"";
    out.println(""Case #"" + (t + 1) + "": ""+ s);
  }
  out.close();
}
"
30001320,"public static void main(String args[]){
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  for (int ca=1; ca <= T; ca++) {
    int R=scan.nextInt();
    int C=scan.nextInt();
    char[][] a=new char[R][C];
    for (int i=0; i < R; i++) {
      String str=scan.next();
      for (int j=0; j < C; j++)       a[i][j]=str.charAt(j);
    }
    int ans=0;
    boolean poss=true;
    for (int i=0; i < R; i++)     for (int j=0; j < C; j++) {
      if (a[i][j] == '.')       continue;
      int dd=-1;
switch (a[i][j]) {
case '>':
        dd=0;
      break;
case '^':
    dd=1;
  break;
case '<':
dd=2;
break;
case 'v':
dd=3;
break;
}
boolean safe=false;
for (int ddd=0; ddd < 4; ddd++) {
int r=i;
int c=j;
while (true) {
r+=dr[ddd];
c+=dc[ddd];
if (r >= 0 && r < R && c >= 0 && c < C) {
if (a[r][c] != '.') {
safe=true;
break;
}
}
 else {
if (ddd == dd) {
ans++;
}
break;
}
}
}
poss&=safe;
}
System.out.println(""Case #"" + ca + "": ""+ (poss ? ans : ""IMPOSSIBLE""));
}
}
"
30001321,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int numRuns=Integer.parseInt(in.readLine());
  for (int run=1; run <= numRuns; run++) {
    StringTokenizer tok=new StringTokenizer(in.readLine());
    int r=Integer.parseInt(tok.nextToken()), c=Integer.parseInt(tok.nextToken());
    int[][] dir=new int[r][c];
    int[][] row=new int[r][c];
    int[][] col=new int[c][r];
    int[] inRow=new int[r];
    int[] inCol=new int[c];
    for (int i=0; i < r; i++) {
      String line=in.readLine();
      for (int j=0; j < c; j++) {
        if (line.charAt(j) != '.') {
          row[i][inRow[i]]=j;
          inRow[i]++;
          col[j][inCol[j]]=i;
          inCol[j]++;
        }
        if (line.charAt(j) == '<')         dir[i][j]=0;
 else         if (line.charAt(j) == '^')         dir[i][j]=1;
 else         if (line.charAt(j) == '>')         dir[i][j]=2;
 else         if (line.charAt(j) == 'v')         dir[i][j]=3;
      }
    }
    int changes=0;
    boolean[] okay={false,false,false,false};
    int colPos;
    for (int i=0; i < r && changes >= 0; i++)     for (int j=0; j < inRow[i] && changes >= 0; j++) {
      colPos=Arrays.binarySearch(col[row[i][j]],0,inCol[row[i][j]],i);
      okay[0]=j > 0;
      okay[1]=colPos > 0;
      okay[2]=j < inRow[i] - 1;
      okay[3]=colPos < inCol[row[i][j]] - 1;
      if (okay[dir[i][row[i][j]]])       continue;
 else       if (okay[0] || okay[1] || okay[2]|| okay[3])       changes++;
 else       changes=-1;
    }
    System.out.print(""Case #"" + run + "": "");
    if (changes == -1)     System.out.println(""IMPOSSIBLE"");
 else     System.out.println(changes);
  }
}
"
30001322,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int T=input.nextInt();
  for (int t=0; t < T; t++) {
    System.out.print(""Case #"" + (t + 1) + "": "");
    int n=input.nextInt(), m=input.nextInt();
    char[][] grid=new char[n][m];
    for (int i=0; i < n; i++)     grid[i]=input.next().toCharArray();
    boolean poss=true;
    int[][] count=new int[n][m];
    boolean[][] bad=new boolean[n][m];
    int[] di=new int[]{0,1,0,-1};
    int[] dj=new int[]{1,0,-1,0};
    char[] cs=new char[]{'>','v','<','^'};
    for (int i=0; i < n; i++)     for (int j=0; j < m; j++) {
      if (grid[i][j] == '.')       continue;
      for (int k=0; k < 4; k++) {
        boolean edge=false;
        int ati=i, atj=j;
        while (true) {
          ati+=di[k];
          atj+=dj[k];
          if (ati < 0 || atj < 0 || ati >= n || atj >= m) {
            edge=true;
            break;
          }
          if ((ati != i || atj != j) && grid[ati][atj] != '.')           break;
        }
        if (edge) {
          count[i][j]++;
          if (grid[i][j] == cs[k])           bad[i][j]=true;
        }
      }
    }
    int res=0;
    for (int i=0; i < n && res != -1; i++)     for (int j=0; j < m && res != -1; j++) {
      if (bad[i][j])       res++;
      if (count[i][j] == 4)       res=-1;
    }
    System.out.println(res == -1 ? ""IMPOSSIBLE"" : res);
  }
}
"
30001323,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numcases=sc.nextInt();
  for (int curcase=1; curcase <= numcases; curcase++) {
    int R=sc.nextInt();
    int C=sc.nextInt();
    sc.nextLine();
    int[][] board=new int[R][C];
    HashSet[][] restrictions=new HashSet[R][C];
    for (int i=0; i < R; i++) {
      String s=sc.nextLine();
      for (int j=0; j < C; j++) {
        restrictions[i][j]=new HashSet();
        if (s.charAt(j) == '^')         board[i][j]=1;
        if (s.charAt(j) == '>')         board[i][j]=2;
        if (s.charAt(j) == 'v')         board[i][j]=3;
        if (s.charAt(j) == '<')         board[i][j]=4;
      }
    }
    for (int i=0; i < R; i++) {
      for (int j=0; j < C; j++) {
        if (board[i][j] != 0) {
          restrictions[i][j].add(4);
          break;
        }
      }
      for (int j=C - 1; j >= 0; j--) {
        if (board[i][j] != 0) {
          restrictions[i][j].add(2);
          break;
        }
      }
    }
    for (int j=0; j < C; j++) {
      for (int i=0; i < R; i++) {
        if (board[i][j] != 0) {
          restrictions[i][j].add(1);
          break;
        }
      }
      for (int i=R - 1; i >= 0; i--) {
        if (board[i][j] != 0) {
          restrictions[i][j].add(3);
          break;
        }
      }
    }
    long count=0;
    LOOP:     for (int i=0; i < R; i++) {
      for (int j=0; j < C; j++) {
        if (restrictions[i][j].size() == 4) {
          count=Long.MAX_VALUE;
          break LOOP;
        }
 else {
          if (restrictions[i][j].contains(board[i][j]))           count++;
        }
      }
    }
    if (count < Long.MAX_VALUE)     System.out.println(""Case #"" + curcase + "": ""+ count);
 else     System.out.println(""Case #"" + curcase + "": IMPOSSIBLE"");
  }
}
"
30001324,"public static void main(String[] args){
  A r=new A();
  if (!r.DEBUG) {
    try {
      if (r.isSmall)       System.setIn(new FileInputStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-small-attempt1.in"")));
 else       System.setIn(new FileInputStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-large.in"")));
      if (r.isSmall)       System.setOut(new PrintStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-small_out.txt"")));
 else       System.setOut(new PrintStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-large_out.txt"")));
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int CASE=1; CASE <= T; CASE++) {
    int r1=sc.nextInt(), c=sc.nextInt();
    char[][] map=new char[r1][];
    int[] countR=new int[r1], countC=new int[c];
    for (int i=0; i < r1; i++) {
      map[i]=sc.next().toCharArray();
      for (int j=0; j < c; j++)       if (map[i][j] != '.') {
        countR[i]++;
        countC[j]++;
      }
    }
    boolean imp=false;
    for (int i=0; i < r1; i++)     for (int j=0; j < c; j++)     if (map[i][j] != '.') {
      int rc=0, rb=0;
      for (int k=0; k < c; k++)       if (map[i][k] != '.')       rc++;
      for (int k=0; k < r1; k++)       if (map[k][j] != '.')       rb++;
      if (rc == 1 && rb == 1)       imp=true;
    }
    if (imp) {
      System.out.println(""Case #"" + CASE + "": IMPOSSIBLE"");
      continue;
    }
    int res=0;
    for (int i=0; i < r1; i++)     for (int j=0; j < c; j++)     if (map[i][j] != '.') {
      int k=0;
switch (map[i][j]) {
case '^':
        k=0;
      break;
case '>':
    k=1;
  break;
case 'v':
k=2;
break;
case '<':
k=3;
break;
}
int pi=i + r.d[k][0], pj=j + r.d[k][1];
boolean out=true;
while (0 <= pi && pi < r1 && 0 <= pj && pj < c) {
if (map[pi][pj] != '.') {
out=false;
break;
}
pi+=r.d[k][0];
pj+=r.d[k][1];
}
if (out) res++;
}
System.out.println(""Case #"" + CASE + "": ""+ res);
}
}
"
30001325,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""output1.txt""));
  int nrT=Integer.parseInt(br.readLine());
  for (int testNr=1; testNr <= nrT; testNr++) {
    String[] strs=br.readLine().split("" "");
    int r=Integer.parseInt(strs[0]);
    int c=Integer.parseInt(strs[1]);
    int[][] map=new int[r][c];
    for (int i=0; i < map.length; i++) {
      String str=br.readLine();
      for (int j=0; j < c; j++) {
        map[i][j]=str.charAt(j);
      }
    }
    boolean impossibleCase=false;
    for (int i=0; i < map.length && !impossibleCase; i++) {
      for (int j=0; j < map[i].length && !impossibleCase; j++) {
        if (map[i][j] == DOT) {
          continue;
        }
        boolean isOk=false;
        for (int k=0; k < map.length; k++) {
          if (k == i) {
            continue;
          }
          if (map[k][j] != DOT) {
            isOk=true;
            break;
          }
        }
        if (isOk) {
          continue;
        }
        for (int k=0; k < map[0].length; k++) {
          if (k == j) {
            continue;
          }
          if (map[i][k] != DOT) {
            isOk=true;
            break;
          }
        }
        if (!isOk) {
          impossibleCase=true;
          break;
        }
      }
    }
    if (impossibleCase) {
      pw.println(""Case #"" + testNr + "": IMPOSSIBLE"");
      continue;
    }
    int res=0;
    for (int i=0; i < map.length && !impossibleCase; i++) {
      for (int j=0; j < map[i].length && !impossibleCase; j++) {
        if (map[i][j] == DOT) {
          continue;
        }
        boolean needsChange=true;
        if (map[i][j] == RIGHT) {
          for (int k=j + 1; k < map[i].length; k++) {
            if (map[i][k] != DOT) {
              needsChange=false;
              break;
            }
          }
        }
 else         if (map[i][j] == LEFT) {
          for (int k=0; k < j; k++) {
            if (map[i][k] != DOT) {
              needsChange=false;
              break;
            }
          }
        }
 else         if (map[i][j] == UP) {
          for (int k=0; k < i; k++) {
            if (map[k][j] != DOT) {
              needsChange=false;
              break;
            }
          }
        }
 else         if (map[i][j] == DOWN) {
          for (int k=i + 1; k < map.length; k++) {
            if (map[k][j] != DOT) {
              needsChange=false;
              break;
            }
          }
        }
        if (needsChange) {
          res++;
        }
      }
    }
    pw.println(""Case #"" + testNr + "": ""+ res);
  }
  br.close();
  pw.close();
  System.out.println(""done!"");
}
"
30001326,"public static void main(String args[]){
  Scanner in=null;
  try {
    in=new Scanner(new FileInputStream(""input.txt""));
    System.setOut(new PrintStream(new File(""output.txt"")));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  Map<Character,Integer> map=new HashMap<Character,Integer>();
  map.put('<',1);
  map.put('^',2);
  map.put('>',4);
  map.put('v',8);
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int r=in.nextInt();
    int c=in.nextInt();
    String ar[]=new String[r];
    in.nextLine();
    for (int i=0; i < r; i++)     ar[i]=in.nextLine();
    int ne[][]=new int[r][c];
    for (int i=0; i < r; i++) {
      int l=-1;
      int p=-1;
      for (int j=0; j < c; j++) {
        if (ar[i].charAt(j) != '.') {
          if (l == -1) {
            l=j;
            ne[i][j]+=1;
          }
          p=j;
        }
      }
      if (p != -1) {
        ne[i][p]+=map.get('>');
      }
    }
    for (int j=0; j < c; j++) {
      int u=-1;
      int d=-1;
      for (int i=0; i < r; i++) {
        if (ar[i].charAt(j) != '.') {
          if (u == -1) {
            u=i;
            ne[i][j]+=map.get('^');
          }
          d=i;
        }
      }
      if (d != -1) {
        ne[d][j]+=map.get('v');
      }
    }
    int count=0;
    for (int i=0; i < r; i++) {
      if (count == -1) {
        break;
      }
      for (int j=0; j < c; j++) {
        if (ar[i].charAt(j) != '.') {
          if (ne[i][j] != 0) {
            char ch=ar[i].charAt(j);
            if (ne[i][j] == 15) {
              count=-1;
              break;
            }
 else {
              if ((map.get(ch) & ne[i][j]) != 0) {
                count++;
              }
            }
          }
        }
      }
      if (count == -1) {
        break;
      }
    }
    System.out.println(""Case #"" + t + "": ""+ (count == -1 ? ""IMPOSSIBLE"" : count));
  }
}
"
30001327,"public static void main(String[] args) throws FileNotFoundException {
  FileReader f=new FileReader(""C:\\Users\\Ismael\\Desktop\\inputA.txt"");
  PrintWriter out=new PrintWriter(""C:\\Users\\Ismael\\Desktop\\outputA.txt"");
  Scanner in=new Scanner(f);
  int cant=in.nextInt();
  for (int i=0; i < cant; i++) {
    double R=in.nextInt();
    double C=in.nextInt();
    double W=in.nextInt();
    double res=W + Math.ceil((C - W) / W);
    out.println(""Case #"" + (i + 1) + "": ""+ (int)res);
  }
  in.close();
  out.close();
}
"
30001328,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""/Users/bfa/Documents/workspace/cf300/src/A-large.in""));
  Formatter format=new Formatter(new File(""/Users/bfa/Documents/workspace/cf300/src/large.out""));
  int t=in.nextInt();
  for (int i=1; i <= t; ++i) {
    int r=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    int k=c / w;
    int result=r * k;
    result+=(w - 1);
    if (c % w != 0) {
      result++;
    }
    format.format(""Case #%d: %d%n"",i,result);
  }
  format.flush();
  format.close();
  in.close();
}
"
30001329,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int t=Integer.parseInt(in.readLine());
  for (int i=1; i <= t; i++) {
    int res=0;
    String[] next=in.readLine().split("" "");
    int r=Integer.parseInt(next[0]);
    int c=Integer.parseInt(next[1]);
    int w=Integer.parseInt(next[2]);
    int row=(c - w) / w;
    if (c % w == 0)     row+=w;
 else     row+=w + 1;
    res=r * row;
    System.out.format(""Case #%d: %d\n"",i,res);
  }
}
"
30001330,"public static void main(String[] args){
  try {
    Scanner input=new Scanner(new File(args[0]));
    PrintWriter output=new PrintWriter(args[1]);
    int casenumber=input.nextInt();
    for (int i=0; i < casenumber; i++) {
      int R=input.nextInt(), C=input.nextInt(), W=input.nextInt(), count=0;
      if (C % W == 0)       count=(R - 1) * (C / W) + C / W + W - 1;
 else       count=(R - 1) * (C / W) + C / W + W;
      output.println(""Case #"" + (i + 1) + "": ""+ count);
    }
    output.flush();
  }
 catch (  FileNotFoundException e) {
  }
}
"
30001331,"public static void main(String[] args) throws IOException {
  BufferedReader reader=new BufferedReader(new FileReader(""A.in""));
  BufferedWriter writer=new BufferedWriter(new FileWriter(""A.out""));
  int n=Integer.parseInt(reader.readLine().trim());
  for (int i=0; i < n; i++) {
    int ans=0;
    String[] strs=reader.readLine().trim().split("" +"");
    int p1=Integer.parseInt(strs[0]);
    int p2=Integer.parseInt(strs[1]);
    int m=Integer.parseInt(strs[2]);
    ans+=p1 * (p2 % m == 0 ? p2 / m : p2 / m + 1);
    ans+=m - 1;
    writer.write(MessageFormat.format(cc,i + 1,ans));
    writer.newLine();
  }
  writer.close();
  reader.close();
}
"
30001332,"public static void main(String[] args){
  int cases=stdin.nextInt();
  for (int i=0; i < cases; i++) {
    Main mt=new Main();
    mt.r=Main.stdin.nextInt();
    mt.c=Main.stdin.nextInt();
    mt.w=Main.stdin.nextInt();
    int full=mt.c / mt.w;
    int first=full * mt.r;
    mt.result=first + mt.w - 1 + (mt.c % mt.w == 0 ? 0 : 1);
    System.out.println(""Case #"" + (1 + i) + "": ""+ """"+ mt.result);
  }
}
"
30001333,"public static void main(String[] args){
  Scanner input=null;
  PrintStream output=null;
  try {
    input=new Scanner(new File(_inputPath));
    output=new PrintStream(_outputPath);
    int numberOfTestCases=input.nextInt();
    for (int i=0; i < numberOfTestCases; ++i) {
      int R=input.nextInt();
      int C=input.nextInt();
      int W=input.nextInt();
      if (W == 1) {
        String resultString=String.format(""Case #%d: %d"",i + 1,R * C);
        output.println(resultString);
        continue;
      }
      int score=(C / W) > 1 ? (C / W * R) - 1 : 0;
      score+=((C % W) == 0) ? W : W + 1;
      String resultString=String.format(""Case #%d: %d"",i + 1,score);
      output.println(resultString);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (input != null) {
      input.close();
    }
    if (output != null) {
      output.close();
    }
  }
}
"
30001334,"public static void main(String[] args) throws java.lang.Exception {
  InputStream inputStream=new FileInputStream(""D:\\test2.in"");
  BufferedReader r=new BufferedReader(new InputStreamReader(inputStream));
  int numtestcase=0;
  numtestcase=Integer.parseInt(r.readLine());
  for (int i=1; i <= numtestcase; i++) {
    String s=r.readLine();
    String[] s1=s.split("" "");
    int R=Integer.parseInt(s1[0]);
    int c=Integer.parseInt(s1[1]);
    int w=Integer.parseInt(s1[2]);
    int result=0;
    if (w == 1)     result=R * c;
 else     if (w == R * c)     result=R * c;
 else     if (c % w == 0)     result=c / w + w - 1;
 else {
      int temp=c / w;
      result=temp + w;
    }
    System.out.println(""Case #"" + Integer.toString(i) + "": ""+ Integer.toString(result));
  }
}
"
30001335,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new File(""A-large.in""));
    PrintWriter out=new PrintWriter(""A-large.out"");
    int numberOfCases=Integer.parseInt(in.nextLine());
    for (int caseNum=1; caseNum <= numberOfCases; caseNum++) {
      int rows=in.nextInt();
      int columns=in.nextInt();
      int shipWidth=in.nextInt();
      int trials=0;
      trials+=(columns / shipWidth) * rows + shipWidth;
      if (columns % shipWidth == 0) {
        trials--;
      }
      out.println(""Case #"" + caseNum + "": ""+ trials);
    }
    in.close();
    out.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
"
30001336,"public static void main(String[] args) throws IOException {
  java.io.BufferedReader r=new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
  String line;
  int c=0;
  int t=Integer.parseInt(r.readLine());
  while (t > 0) {
    line=r.readLine();
    String[] components=line.split("" "");
    int R=Integer.parseInt(components[0]);
    int C=Integer.parseInt(components[1]);
    int W=Integer.parseInt(components[2]);
    int confirmedFirstHit=R * (C / W);
    int a=(C % W == 0) ? 0 : 1;
    System.out.println(""Case #"" + (c + 1) + "": ""+ (confirmedFirstHit + W - 1 + a));
    t--;
    c++;
  }
}
"
30001337,"public static void main(String[] args){
  Scanner scan;
  int R, C, W;
  int[] dp;
  int[] misses;
  try {
    FileWriter fstream=new FileWriter(""out.txt"");
    BufferedWriter out=new BufferedWriter(fstream);
    scan=new Scanner(new File(""input.txt""));
    T=scan.nextInt();
    for (int t=0; t < T; t++) {
      R=scan.nextInt();
      C=scan.nextInt();
      W=scan.nextInt();
      dp=new int[C + 1];
      misses=new int[C + 1];
      for (int i=0; i < W; i++) {
        dp[i]=Integer.MIN_VALUE;
        misses[i]=0;
      }
      dp[W]=W;
      misses[W]=1;
      for (int i=W + 1; i <= C; i++) {
        misses[i]=(i / W);
        int min=Integer.MAX_VALUE;
        for (int j=1; j <= i; j++) {
          int temp=Math.max(misses[j - 1] + dp[i - j],misses[i - j] + dp[j - 1]);
          if (temp != Integer.MIN_VALUE) {
            min=Math.min(min,temp + 1);
          }
        }
        int hit=W + 1;
        if (W == 1)         hit=1;
        dp[i]=Math.max(min,hit);
      }
      int result=dp[C] + (R - 1) * (C / W);
      out.write(""Case #"" + (t + 1) + "": ""+ result+ ""\n"");
      out.flush();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001338,"public static void main(String[] args){
  Scanner scanner=null;
  try {
    scanner=new Scanner(new File(""input.txt""));
  }
 catch (  FileNotFoundException e) {
    System.out.println(""Couldn't open input file.\n"" + e.getMessage());
    e.printStackTrace();
  }
  FileWriter writer=null;
  try {
    writer=new FileWriter(new File(""output.txt""));
  }
 catch (  IOException e) {
    System.out.println(""Couldn't open/make output file."" + e.getMessage());
    e.printStackTrace();
  }
  int numTrials=scanner.nextInt();
  for (int trial=1; trial <= numTrials; trial++) {
    try {
      writer.write(""Case #"" + trial + "": "");
      int R=scanner.nextInt();
      int C=scanner.nextInt();
      int W=scanner.nextInt();
      int steps=R * (C / W) + W - 1;
      if (C % W != 0)       steps++;
      writer.write(steps + """");
      writer.write(""\n"");
    }
 catch (    IOException e) {
      System.out.println(""Error on trial #"" + trial + ""\n""+ e.getMessage());
      e.printStackTrace();
    }
  }
  try {
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  scanner.close();
  System.out.println(""Completed Trials!"");
}
"
30001339,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  final int noTests=in.nextInt();
  in.nextLine();
  for (int test=1; test <= noTests; test++) {
    int R=in.nextInt();
    int C=in.nextInt();
    int W=in.nextInt();
    int hits=(R * (C / W)) + W - 1;
    if (C % W != 0)     hits++;
    System.out.printf(""Case #%d: %d%n"",test,hits);
  }
}
"
30001340,"/** 
 * @param args
 */
public static void main(String[] args){
  String filenameInput=""A-large.in"";
  String filenameOutput=""A-large.out"";
  Class currentClass=ProblemA.class;
  try {
    String path=""src/"" + currentClass.getPackage().getName().replace(""."",""/"");
    BufferedReader input=new BufferedReader(new FileReader(new File(path + ""/"" + filenameInput)));
    BufferedWriter output=new BufferedWriter(new FileWriter(new File(path + ""/"" + filenameOutput)));
    int numOfTestcases=Integer.parseInt(input.readLine());
    for (int i=0; i < numOfTestcases; i++) {
      System.out.println(""Testnumber : "" + i);
      String[] inputStringArray=input.readLine().split("" "");
      int R=Integer.parseInt(inputStringArray[0]);
      int C=Integer.parseInt(inputStringArray[1]);
      int W=Integer.parseInt(inputStringArray[2]);
      int cOverW=C / W;
      int maxNumber=cOverW * (R - 1);
      maxNumber+=(cOverW - 1);
      maxNumber+=W;
      if (C % W != 0) {
        maxNumber++;
      }
      String outputString=""Case #"" + (i + 1) + "": ""+ maxNumber;
      System.out.println(outputString);
      if (i + 1 != numOfTestcases) {
        outputString+=""\n"";
      }
      output.write(outputString);
    }
    output.flush();
    output.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001341,"public static void main(String args[]) throws FileNotFoundException {
  final String defaultFile=A.class.getName() + "".in"";
  final PrintStream out;
  final InputStream in;
  if (args.length == 0) {
    in=new FileInputStream(""test/"" + defaultFile);
    out=System.out;
  }
 else {
    in=new FileInputStream(""resources/"" + args[0]);
    out=new PrintStream(new FileOutputStream(""result/"" + args[0]));
  }
  Scanner scanner=new Scanner(in);
  int nbTest=scanner.nextInt();
  for (int i=0; i < nbTest; i++) {
    scanner.nextLine();
    Long W=scanner.nextLong();
    Object res=((long)Math.ceil((double)scanner.nextLong() / (double)W)) + (W - 1);
    out.println(""Case #"" + (i + 1) + "": ""+ res);
  }
}
"
30001342,"public static void main(String[] args){
  String input=""/Users/npapa/Documents/codejam/A-large.in"";
  String output=""/Users/npapa/Documents/codejam/output"";
  try {
    Scanner sc=new Scanner(new FileReader(input));
    PrintWriter pw=new PrintWriter(output);
    int n=sc.nextInt();
    sc.nextLine();
    for (int c=0; c < n; c++) {
      System.out.println(""Test case "" + (c + 1) + ""..."");
      pw.print(""Case #"" + (c + 1) + "": "");
      int r=sc.nextInt();
      int c1=sc.nextInt();
      int n1=sc.nextInt();
      System.out.println(r + "" "" + c1+ "" ""+ n1);
      int findRow=r * (c1 / n1);
      int findShip=0;
      if (c1 % n1 == 0)       findShip=n1 - 1;
 else       findShip=n1;
      System.out.println(""findRow: "" + findRow + "" findShip: ""+ findShip);
      int res=findRow + findShip;
      System.out.println(res);
      pw.print(res);
      pw.println();
    }
    pw.println();
    pw.flush();
    pw.close();
    sc.close();
  }
 catch (  FileNotFoundException ex) {
    ex.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001343,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(System.in);
  int numRuns=in.nextInt();
  for (int run=1; run <= numRuns; run++) {
    int r=in.nextInt(), c=in.nextInt(), w=in.nextInt();
    int extrarows=(r - 1) * (c / w);
    int ans=c / w - 1;
    c-=w * ans;
    System.out.println(""Case #"" + run + "": ""+ (ans + Math.min(w + 1,c) + extrarows));
  }
}
"
30001344,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int testCase=scan.nextInt();
  for (int i=1; i <= testCase; i++) {
    int R=scan.nextInt();
    int C=scan.nextInt();
    int W=scan.nextInt();
    int num1=R * (C / W);
    if (C % W > 0) {
      num1=num1 + W;
    }
 else {
      num1=num1 + W - 1;
    }
    int num=num1;
    System.out.println(""Case #"" + i + "": ""+ num);
  }
}
"
30001345,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(args[0]));
  PrintWriter out=new PrintWriter(args[0].replace("".in"","".out""));
  int numberOfCases=Integer.parseInt(in.readLine());
  for (int caseNumber=1; caseNumber <= numberOfCases; caseNumber++) {
    out.printf(""Case #%d: "",caseNumber);
    String[] params=in.readLine().split("" "");
    int rows=Integer.parseInt(params[0]);
    int columns=Integer.parseInt(params[1]);
    int shipWidth=Integer.parseInt(params[2]);
    int scoutsPerRow=columns / shipWidth;
    int totalScouts=scoutsPerRow * rows;
    int totalCalls=totalScouts + shipWidth - 1;
    if (columns % shipWidth > 0)     totalCalls+=1;
    out.println(totalCalls);
  }
  in.close();
  out.close();
}
"
30001346,"public static void main(String[] args) throws IOException {
  FileInputStream in=new FileInputStream(""D:/works/java/G1A/bin/A-large (2).in"");
  Scanner s=new Scanner(in);
  PrintWriter out=new PrintWriter(new FileWriter(""D:/works/java/G1A/bin/Abig.out""));
  int n=Integer.parseInt(s.next());
  for (int i=1; i <= n; i++) {
    int r=s.nextInt(), c=s.nextInt(), w=s.nextInt(), j=-1, count=0;
    int a[]=new int[c];
    if (w == 1) {
      System.out.println(""Case #"" + i + "": ""+ c * r);
      out.println(""Case #"" + i + "": ""+ c * r);
    }
 else {
      j+=w;
      while (j < c) {
        a[j]=1;
        System.out.print(j + "" "");
        j+=w;
        count++;
      }
      j-=w;
      count*=r;
      if (c - j - 1 > 0) {
        count++;
        System.out.print(1);
      }
      System.out.println(w - 1);
      count+=w - 1;
      System.out.println(""Case #"" + i + "": ""+ count);
      out.println(""Case #"" + i + "": ""+ count);
    }
  }
  out.close();
}
"
30001347,"public static void main(String[] args) throws Exception {
  Scanner s=new Scanner(new FileInputStream(args[0]));
  int t=s.nextInt();
  TreeSet<Long> keresettek=new TreeSet<Long>();
  LinkedList<Long> keresettek2=new LinkedList<Long>();
  for (int i=1; i <= t; i++) {
    int r=s.nextInt();
    int c=s.nextInt();
    int w=s.nextInt();
    System.out.println(""Case #"" + i + "": ""+ r * ((c / w) + (c % w != 0 ? 1 : 0) + (w - 1)));
  }
}
"
30001348,"public static void main(String[] args){
  int pN=1;
  if (args.length == 0) {
    try {
      System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
    }
 catch (    Exception e) {
    }
  }
 else {
    pN=Integer.parseInt(args[0]);
  }
  PrintStream out=System.out;
  System.setOut(null);
  Scanner sc=new Scanner(System.in);
  final int caseN=sc.nextInt();
  final A[] solvers=new A[caseN];
  StringWriter[] outs=new StringWriter[caseN];
  for (int i=0; i < caseN; i++) {
    solvers[i]=new A();
    outs[i]=new StringWriter();
    solvers[i].out=new PrintWriter(outs[i]);
    solvers[i].out.printf(""Case #%d: "",i + 1);
    A r=solvers[i];
    r.R=sc.nextInt();
    r.C=sc.nextInt();
    r.W=sc.nextInt();
  }
  Thread[] ts=new Thread[pN];
  for (int i=0; i < pN; i++) {
    ts[i]=new Thread(){
      @Override public void run(){
        for (; ; ) {
          int id;
synchronized (A.class) {
            if (__ID == caseN)             return;
            id=__ID++;
          }
          try {
            A r=solvers[id];
            int res=r.R * (r.C / r.W);
            if (r.C % r.W > 0)             res++;
            res+=r.W - 1;
            r.out.println(res);
          }
 catch (          RuntimeException e) {
            __ERROR=true;
            System.err.printf(""Error in case %d:%n"",id + 1);
            e.printStackTrace();
          }
          solvers[id].out.flush();
          solvers[id]=null;
        }
      }
    }
;
    ts[i].start();
  }
  for (int i=0; i < pN; i++) {
    try {
      ts[i].join();
    }
 catch (    InterruptedException e) {
      i--;
      continue;
    }
  }
  for (int i=0; i < caseN; i++) {
    out.print(outs[i].toString());
  }
  if (__ERROR)   out.printf(""%nError occured!!!%n"");
}
"
30001349,"public static void main(String[] args) throws IOException {
  Scanner input=new Scanner(new FileReader(""A-small-attempt0.in""));
  try {
    Integer testCases=input.nextInt();
    input.nextLine();
    for (int i=1; i <= testCases; i++) {
      int rows=input.nextInt();
      int columns=input.nextInt();
      int width=input.nextInt();
      int minimumHitsPerRow=columns / width + (columns % width == 0 ? 0 : 1);
      int totalInitialHits=minimumHitsPerRow * rows;
      int totalHits=totalInitialHits + width - 1;
      System.out.println(""Case #"" + i + "": ""+ totalHits);
    }
  }
  finally {
    input.close();
  }
}
"
30001350,"public static void main(String[] args) throws Exception {
  A instance=new A();
  long start=System.currentTimeMillis();
  File temp=new File(""output/"");
  if (!temp.exists()) {
    temp.mkdir();
  }
  instance.outputWriter=new FileWriter(""output/output.txt"",false);
  instance.scanner=new Scanner(new File(""resources/"" + A.INPUT_FILE_NAME));
  int testCaseNumber=0;
{
    int nbTests=Integer.parseInt(instance.scanner.nextLine());
    for (testCaseNumber=0; testCaseNumber < nbTests; testCaseNumber++) {
      int testCaseResult=0;
      String[] line=instance.scanner.nextLine().split("" "");
      int r=Integer.parseInt(line[0]);
      int c=Integer.parseInt(line[1]);
      int w=Integer.parseInt(line[2]);
      testCaseResult=(c / w) * r + (w - 1) + (c % w == 0 ? 0 : 1);
      instance.output.append(""Case #"" + (testCaseNumber + 1) + "": ""+ testCaseResult+ ""\n"");
    }
  }
  instance.outputWriter.write(instance.output.toString(),0,instance.output.length());
  instance.scanner.close();
  instance.outputWriter.close();
  System.out.println(""Finished in "" + (System.currentTimeMillis() - start) + "" ms"");
}
"
30001351,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""A-large.in""));
  int cases=sc.nextInt();
  int count=1;
  while (cases-- > 0) {
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    int turns=0;
    if (W == 1) {
      turns=R * C;
    }
 else {
      for (int i=W - 1; i < C; i+=W) {
        turns+=R;
      }
      turns+=W - 1;
      if (C % W != 0) {
        turns++;
      }
    }
    System.out.println(""Case #"" + count + "": ""+ turns);
    count++;
  }
  sc.close();
}
"
30001352,"public static void main(String[] args) throws IOException {
  List<String> tokens1=new ArrayList<>();
  try (BufferedReader reader=Files.newBufferedReader(Paths.get(PATH_INPUT))){
    String line=null;
    while ((line=reader.readLine()) != null) {
      for (      String token : line.split(""\\s"")) {
        if (!token.isEmpty()) {
          tokens1.add(token);
        }
      }
    }
  }
   List<String> tokens=tokens1;
  int t=Integer.valueOf(tokens.remove(0));
  for (int i=0; i < t; i++) {
    long r=Long.valueOf(tokens.remove(0));
    long c=Long.valueOf(tokens.remove(0));
    long w=Long.valueOf(tokens.remove(0));
    long res=(c / w) * r;
    if (c % w == 0) {
      res+=w - 1;
    }
 else {
      res+=w;
    }
    tokens.add("""" + res);
  }
  try (BufferedWriter writer=Files.newBufferedWriter(Paths.get(PATH_OUTPUT))){
    for (int i=0; i < tokens.size(); i++) {
      writer.write(""Case #"" + (i + 1) + "": ""+ tokens.get(i));
      if (i < tokens.size() - 1) {
        writer.newLine();
      }
    }
  }
   System.out.println(""Done"");
}
"
30001353,"public static void main(String[] args){
  File fileout=new File(""C:/Users/Nikhil Gupta/Desktop/A-ans.out"");
  File file=null;
  PrintWriter writer=null;
  Scanner in=null;
  int r, c, w;
  try {
    file=new File(""C:/Users/Nikhil Gupta/Desktop/A-small.in"");
    in=new Scanner(file);
    writer=new PrintWriter(fileout,""UTF-8"");
  }
 catch (  Exception e) {
  }
  int T=in.nextInt();
  for (int j=1; j <= T; j++) {
    r=in.nextInt();
    c=in.nextInt();
    w=in.nextInt();
    if (r == 1) {
      if (c % w == 0)       writer.println(""Case #"" + j + "": ""+ ((c / w) + (w - 1)));
 else       writer.println(""Case #"" + j + "": ""+ ((c / w) + w));
    }
 else {
      if (c % w == 0)       writer.println(""Case #"" + j + "": ""+ ((c / w) + (w - 1) + ((c / w) * (r - 1))));
 else       writer.println(""Case #"" + j + "": ""+ ((c / w) + w + ((c / w) * (r - 1))));
    }
  }
  writer.close();
}
"
30001354,"public static void main(String[] args) throws Exception {
  String filename=""A-large.in"";
  File file=new File(""/Users/tanin/Downloads/"" + filename);
  File outFile=new File(""/Users/tanin/Downloads/"" + filename + "".out"");
  BufferedReader br=new BufferedReader(new FileReader(file));
  BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
  int testCases=Integer.parseInt(br.readLine());
  for (int t=1; t <= testCases; t++) {
    String[] tokens=br.readLine().split("" "");
    int R=Integer.parseInt(tokens[0]);
    int C=Integer.parseInt(tokens[1]);
    int W=Integer.parseInt(tokens[2]);
    int times=(C / W) * R;
    if ((C % W) > 0) {
      times+=W;
    }
 else {
      times+=W - 1;
    }
    int result=times;
    String outputLine=""Case #"" + t + "": ""+ result+ ""\n"";
    System.out.print(outputLine);
    bw.write(outputLine);
  }
  br.close();
  bw.close();
}
"
30001355,"public static void main(String[] args){
  try {
    FileInputStream fstream=new FileInputStream(""/home/milan/codeJam2015/r1c/A/large.in"");
    DataInputStream in=new DataInputStream(fstream);
    BufferedReader br=new BufferedReader(new InputStreamReader(in));
    int T=Integer.valueOf(br.readLine());
    int i=1;
    String strLine;
    String[] line;
    while (i <= T) {
      strLine=br.readLine();
      line=strLine.split("" "");
      int R, C, W, res=-1;
      R=Integer.valueOf(line[0]);
      C=Integer.valueOf(line[1]);
      W=Integer.valueOf(line[2]);
      if (W == C)       res=R - 1 + W;
 else       if (C % W == 0)       res=R * (C / W) + W - 1;
 else       res=R * (C / W) + W;
      try {
        BufferedWriter bw=new BufferedWriter(new FileWriter(new File(""/home/milan/codeJam2015/r1c/A/large.out""),true));
        bw.write(""Case #"" + i + "": ""+ res);
        bw.newLine();
        bw.close();
      }
 catch (      Exception e) {
        System.err.println(""Error: "" + e.getMessage());
      }
      i++;
    }
    br.close();
  }
 catch (  Exception e) {
    System.err.println(""Error: "" + e.getMessage());
  }
}
"
30001356,"public static void main(String[] args) throws Exception {
  Scanner inScan=new Scanner(System.in);
  System.out.println(""Enter the filename"");
  String filename=inScan.nextLine();
  BufferedReader b=new BufferedReader(new FileReader(filename));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""out.txt"")));
  int numExamples=Integer.parseInt(b.readLine());
  for (int i=0; i < numExamples; i++) {
    String[] line=b.readLine().split("" "");
    int r=Integer.parseInt(line[0]);
    int c=Integer.parseInt(line[1]);
    int w=Integer.parseInt(line[2]);
    int numPerRow=(int)Math.ceil((double)c / (double)w);
    int total=numPerRow * r;
    total=total + w - 1;
    out.print(""Case #"" + (i + 1) + "": ""+ total);
    if (i != numExamples - 1)     out.println();
    out.flush();
  }
  out.close();
}
"
30001357,"public static void main(String[] args) throws FileNotFoundException {
  Locale.setDefault(Locale.US);
  try (Scanner scanner=new Scanner(new File(""a_large.in""))){
    int numberOfCases=scanner.nextInt();
    for (int i=1; i <= numberOfCases; i++) {
      int R=scanner.nextInt();
      int C=scanner.nextInt();
      int W=scanner.nextInt();
      int solution=R * (C / W) + W;
      if (C % W == 0) {
        solution--;
      }
      System.out.println(""Case #"" + i + "": ""+ solution);
    }
  }
 }
"
30001358,"public static void main(String[] args) throws IOException {
  Scanner scan=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""A-large.out"")));
  int t=scan.nextInt();
  for (int i=1; i <= t; i++) {
    int rows=scan.nextInt();
    int cols=scan.nextInt();
    int wid=scan.nextInt();
    int cnt=0;
    boolean[][] grid=new boolean[rows][cols];
    for (int r=0; r < rows; r++) {
      int loc=wid - 1;
      while (loc < cols) {
        grid[r][loc]=true;
        cnt++;
        loc+=wid;
      }
      if (r == 0) {
        if (cnt == 1) {
          cnt+=Math.min(wid,cols - 1);
        }
 else {
          cnt+=wid;
          if (cols % wid == 0)           cnt--;
        }
      }
    }
    out.println(""Case #"" + i + "": ""+ cnt);
  }
  out.close();
  System.exit(0);
}
"
30001359,"public static void main(String[] args) throws IOException {
  int cases=in.nextInt();
  for (int c=1; c <= cases; c++) {
    int result=0;
    int R=in.nextInt(), C=in.nextInt(), W=in.nextInt();
    result=R * ((C + W - 1) / W) + W - 1;
    PW.println(""Case #"" + c + "": ""+ result);
  }
  PW.close();
}
"
30001360,"public static void main(String args[]){
  Scanner in=null;
  try {
    in=new Scanner(new FileInputStream(""input.txt""));
    System.setOut(new PrintStream(new File(""output.txt"")));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int r=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    int ans=r * c;
    if (w > 1) {
      ans=r * ((c - 1) / w) + w;
      if (c % w == 0) {
        ans+=r - 1;
      }
    }
    System.out.println(""Case #"" + t + "": ""+ ans);
  }
}
"
30001361,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  for (int t=1; t <= T; t++) {
    int R=scan.nextInt();
    int C=scan.nextInt();
    int W=scan.nextInt();
    System.out.println(""Case #"" + t + "": ""+ (R * (C / W) + W - 1 + (C % W == 0 ? 0 : 1)));
  }
}
"
30001362,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  try {
    File file=new File(inputFileName);
    Scanner in=new Scanner(file);
    file=new File(outputFileName);
    PrintWriter out=new PrintWriter(file);
    int num=in.nextInt();
    for (int n=1; n <= num; n++) {
      int nRows=in.nextInt();
      int nCols=in.nextInt();
      int w=in.nextInt();
      int g=nCols / w;
      int e=1 + nCols % w;
      int a;
      if (e == 1) {
        a=0;
      }
 else {
        a=1;
      }
      int N=nRows * g + (w - 1) + a;
      String str=""Case #"" + n + "": ""+ N;
      System.out.println(str);
      out.println(str);
    }
    in.close();
    out.close();
  }
 catch (  FileNotFoundException ex) {
    Logger.getLogger(Brattleship.class.getName()).log(Level.SEVERE,null,ex);
  }
}
"
30001363,"public static void main(String[] args) throws Exception {
  Main r=new Main();
  int nt=Integer.parseInt(r.br.readLine().trim());
  for (int t=0; t < nt; t++) {
    String[] nums=r.br.readLine().split("" "");
    int r1=Integer.parseInt(nums[0]);
    int c=Integer.parseInt(nums[1]);
    int w=Integer.parseInt(nums[2]);
    int max=(c / w) * (r1 - 1);
    max+=((c - 1) / w) + w;
    System.out.println(""Case #"" + (t + 1) + "": ""+ Integer.toString(max));
  }
}
"
30001364,"public static void main(String[] args) throws Exception {
  Solution r=new Solution();
  r.in=new Scanner(new File(""input.txt""));
  PrintWriter out=new PrintWriter(new File(""output.txt""));
  r.reader=new BufferedReader(new InputStreamReader(System.in));
  r.tokenizer=new StreamTokenizer(r.reader);
  int tcs=r.in.nextInt();
  for (int tc=1; tc <= tcs; tc++) {
    int n=r.in.nextInt();
    int m=r.in.nextInt();
    int len=r.in.nextInt();
    int x=m / len * n + len - 1 + ((m % len != 0) ? 1 : 0);
    System.out.println(""Case #"" + tc + "": ""+ x);
  }
  r.in.close();
  r.reader.close();
  out.close();
}
"
30001365,"public static void main(String[] args) throws IOException {
  String[] input;
  if (args.length > 0) {
    input=args;
  }
 else {
    BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
    String x=null;
    int size=Integer.parseInt(in.readLine());
    input=new String[size];
    for (int i=0; i < size; i++) {
      input[i]=in.readLine();
    }
  }
  int counter=1;
  String[] temp;
  int r, c, w, score, base;
  for (  String s : input) {
    temp=s.split("" "");
    r=Integer.parseInt(temp[0]);
    c=Integer.parseInt(temp[1]);
    w=Integer.parseInt(temp[2]);
    score=0;
    base=c / w;
    score=base * r;
    score+=w - 1;
    if (c % w != 0) {
      score++;
    }
    System.out.println(""Case #"" + counter + "": ""+ score);
    counter++;
  }
}
"
30001366,"public static void main(String[] args) throws Exception {
  FileWriter fw=new FileWriter(""C:\\output.txt"");
  BufferedWriter out=new BufferedWriter(fw);
  String pathname=""C:\\Users\\YC14rp1\\Downloads\\A-small-attempt0.in"";
  Scanner scanner=new Scanner(new File(pathname));
  int tn=scanner.nextInt();
  scanner.nextLine();
  for (int ti=1; ti <= tn; ti++) {
    int r=scanner.nextInt();
    int c=scanner.nextInt();
    int w=scanner.nextInt();
    int start=w;
    int cnt=1;
    while (start < c - w) {
      cnt++;
      start+=w;
    }
    cnt+=w;
    if (w == c) {
      cnt=w;
    }
    String s;
    if (cnt == Integer.MAX_VALUE) {
      s=""Case #"" + ti + "": NOT POSSIBLE"";
    }
 else {
      s=""Case #"" + ti + "": ""+ cnt;
    }
    System.out.println(s);
    out.write(s);
    out.write(""\n"");
  }
  out.close();
}
"
30001367,"public static void main(String[] args){
  Scanner stdin=new Scanner(System.in);
  int numCases=stdin.nextInt();
  for (int loop=1; loop <= numCases; loop++) {
    int R=stdin.nextInt();
    int C=stdin.nextInt();
    int W=stdin.nextInt();
    int res=0;
    if (C % W == 0) {
      res=R * (C / W) + W - 1;
    }
 else {
      res=R * (C / W) + W;
    }
    System.out.println(""Case #"" + loop + "": ""+ res);
  }
}
"
30001368,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  StringBuilder out=new StringBuilder();
  int testCases=Integer.parseInt(in.readLine());
  String[] tokens;
  for (int testNumber=1; testNumber <= testCases; testNumber++) {
    out.append(""Case #"").append(testNumber).append("": "");
    tokens=in.readLine().trim().split(""\\s+"");
    int r=Integer.parseInt(tokens[0]);
    int c=Integer.parseInt(tokens[1]);
    int w=Integer.parseInt(tokens[2]);
    int numberNeededPerRowToGetHit=c / w;
    int additionalNumberToSinkOnceHit;
    if (w > 1) {
      if (c > w && c % w != 0) {
        additionalNumberToSinkOnceHit=w;
      }
 else {
        additionalNumberToSinkOnceHit=w - 1;
      }
    }
 else {
      additionalNumberToSinkOnceHit=0;
    }
    int total=numberNeededPerRowToGetHit * r + additionalNumberToSinkOnceHit;
    out.append(total).append(""\n"");
  }
  System.out.println(out);
}
"
30001369,"public static void main(String[] args) throws IOException {
}
"
30001370,"public static void main(String[] args){
  Scanner sc=null;
  BufferedWriter out=null;
  try {
    sc=new Scanner(new File(IN_DIR + ""/"" + IN_FILE));
    out=new BufferedWriter(new FileWriter(OUT_DIR + ""/"" + OUT_FILE));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  int numTests=sc.nextInt();
  sc.nextLine();
  for (int i=0; i < numTests; i++) {
    try {
      int caseNum=i + 1;
      String inrow=sc.nextLine();
      Scanner sc2=new Scanner(inrow);
      int R=sc2.nextInt();
      int C=sc2.nextInt();
      int W=sc2.nextInt();
      if (C % W == 0) {
        out.write(""Case #"" + caseNum + "": ""+ ((C / W) * R + (W - 1))+ """"+ ""\n"");
      }
 else {
        out.write(""Case #"" + caseNum + "": ""+ ((C / W) * R + W)+ """"+ ""\n"");
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    sc.close();
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001371,"public static void main(String args[]) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(""A-large-output1.txt""));
  int testCases=Integer.parseInt(br.readLine());
  for (int t=1; t <= testCases; t++) {
    String input=br.readLine();
    String arr[]=input.split("" "");
    int r=Integer.parseInt(arr[0]);
    int c=Integer.parseInt(arr[1]);
    int w=Integer.parseInt(arr[2]);
    int count=0;
    if (w == 1)     count=r * c;
 else     if (w == c)     count=w + (r - 1);
 else     if (c % w == 0)     count=((r - 1) * (c / w)) + ((c / w) + (w - 1));
 else {
      count=((r - 1) * (c / w)) + ((c / w) + (w - 1) + 1);
    }
    bw.write(""Case #"" + t + "": ""+ count+ ""\r\n"");
  }
  bw.close();
  br.close();
}
"
30001372,"public static void main(String[] args){
  long T=Long.valueOf(scanner.next());
  for (long i=1; i <= T; ++i) {
    System.out.print(""Case #"" + i + "": "");
    long R=scanner.nextLong(), C=scanner.nextLong(), W=scanner.nextLong();
    long ans=(R - 1) * C;
    if (C % W == 0) {
      out.println(ans + C / W - 1 + W);
    }
 else {
      out.println(ans + C / W + W);
    }
  }
}
"
30001373,"public static void main(String arg[]) throws IOException {
  BufferedReader obj=new BufferedReader(new InputStreamReader(System.in));
  int t=Integer.parseInt(obj.readLine());
  int t1=t;
  while (t > 0) {
    String s[]=obj.readLine().split("" "");
    int r=Integer.parseInt(s[0]);
    int c=Integer.parseInt(s[1]);
    int w=Integer.parseInt(s[2]);
    int ans=0;
    if (c % w == 0) {
      ans=c / w - 1 + w;
    }
 else {
      ans=c / w + w;
    }
    System.out.println(""Case #"" + (t1 - t + 1) + "": ""+ ans);
    t--;
  }
}
"
30001374,"public static void main(String args[]){
  Scanner input=new Scanner(System.in);
  int t=input.nextInt();
  String output="""";
  for (int i=1; i <= t; i++) {
    int result=0;
    int count=1;
    int r=input.nextInt();
    int c=input.nextInt();
    int w=input.nextInt();
    while (count <= c) {
      result+=1;
      count+=w;
    }
    result+=w - 1;
    result*=r;
    output+=""Case #"" + i + "": ""+ result+ ""\n"";
  }
  System.out.print(output);
}
"
30001375,"public static void main(String[] args){
  try {
    Scanner sc=new Scanner(Paths.get(INPUT));
    StringBuilder sb=new StringBuilder();
    int cases=sc.nextInt();
    for (int c=1; c < cases + 1; c++) {
      int R=sc.nextInt();
      int C=sc.nextInt();
      int W=sc.nextInt();
      String line=""Case #"" + c + "": ""+ solve(R,C,W);
      System.out.println(line);
      sb.append(line).append('\n');
    }
    Files.write(Paths.get(OUTPUT),sb.toString().getBytes());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001376,"public static void main(String[] args){
  BufferedReader br=null;
  try {
    br=new BufferedReader(new FileReader(""input.txt""));
    int numTestCase=Integer.valueOf(br.readLine());
    for (int testCase=1; testCase <= numTestCase; testCase++) {
      System.out.print(""Case #"" + testCase + "": "");
      String[] qArray=br.readLine().split("" "");
      int r=Integer.valueOf(qArray[0]);
      int c=Integer.valueOf(qArray[1]);
      int w=Integer.valueOf(qArray[2]);
      long ansl=0;
      ansl=r * c / w;
      ansl+=w;
      if ((w == 1) || (w == c) || (c % w == 0)) {
        ansl--;
      }
      System.out.println(ansl);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001377,"public static void main(String args[]) throws Exception {
  String inFile=""A-small-attempt0.in"";
  String outFile=""outputA.txt"";
  LineNumberReader lin=new LineNumberReader(new InputStreamReader(new FileInputStream(inFile)));
  PrintWriter out=new PrintWriter(new File(outFile));
  int NCASE=Integer.parseInt(lin.readLine());
  for (int CASE=1; CASE <= NCASE; CASE++) {
    out.print(""Case #"" + CASE + "": "");
    String l=lin.readLine();
    String[] parts=l.split("" "");
    int R=Integer.parseInt(parts[0]);
    int C=Integer.parseInt(parts[1]);
    int W=Integer.parseInt(parts[2]);
    int score=0;
    int m=0;
    if (C % W == 0)     m=0;
 else     m=1;
    score=R * C / W + W - 1 + m;
    out.println(score);
  }
  lin.close();
  out.close();
}
"
30001378,"public static void main(String[] args){
  A algorithm=new A();
  Scanner scanner=new Scanner(System.in);
  String testCaseNumber=scanner.nextLine();
  int TEST_CASE_NUMBER=Integer.parseInt(testCaseNumber);
  for (int testNumber=1; testNumber <= TEST_CASE_NUMBER; testNumber++) {
    String RCW=scanner.nextLine();
    int R=Integer.parseInt(RCW.split("" "")[0]);
    int C=Integer.parseInt(RCW.split("" "")[1]);
    int W=Integer.parseInt(RCW.split("" "")[2]);
    int counter=0;
    for (int r=0; r < R; r++) {
      for (int c=0; c < C; c++) {
        if (c % W == 0) {
          counter++;
        }
      }
    }
    counter=counter + W - 1;
    String answer=String.valueOf(counter);
    System.out.println(""Case #"" + testNumber + "": ""+ answer);
  }
  scanner.close();
}
"
30001379,"public static void main(String[] args){
  Scanner scanner;
  try {
    scanner=new Scanner(new File(""A-small-attempt0.in""));
    int noofTests=scanner.nextInt();
    int i=0;
    while (i < noofTests) {
      int output=0;
      int R=scanner.nextInt();
      int C=scanner.nextInt();
      int W=scanner.nextInt();
      for (int k=0; k < R; k++) {
        for (int j=0; j < C; j+=W)         output++;
      }
      output+=(W - 1);
      System.out.println(""Case #"" + (i + 1) + "": ""+ output);
      i++;
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30001380,"public static void main(String[] args) throws IOException {
  if (args.length != 1) {
    System.out.println(""Usage: java Battleship [inputFile]"");
    System.exit(0);
  }
  String input=args[0];
  Scanner scanner=new Scanner(new File(input));
  PrintWriter out=new PrintWriter(input.substring(0,input.length() - 3) + "".out"");
  int numCases=scanner.nextInt();
  for (int curCase=1; curCase <= numCases; curCase++) {
    int R=scanner.nextInt();
    int C=scanner.nextInt();
    int W=scanner.nextInt();
    int score=0;
    int numOnRow=C / W;
    if (C % W != 0) {
      numOnRow++;
    }
    score+=(R - 1) * numOnRow;
    score+=C / W + (W - 1);
    if (C % W != 0) {
      score++;
    }
    int minScore=score;
    out.println(""Case #"" + curCase + "": ""+ minScore);
  }
  scanner.close();
  out.close();
}
"
30001381,"public static void main(String[] args){
  try {
    InputStream input=System.in;
    OutputStream output=System.out;
    if (args.length > 0) {
      input=new FileInputStream(new File(args[0]));
    }
    if (args.length > 1) {
      File outputFile=new File(args[1]);
      if (outputFile.exists()) {
        throw new Exception(""Output file already exists"");
      }
      output=new FileOutputStream(new File(args[1]));
    }
    Scanner scanner=new Scanner(input);
    PrintWriter writer=new PrintWriter(output);
    A a=new A();
    int count=scanner.nextInt();
    scanner.nextLine();
    for (int i=0; i < count; i++) {
      StringBuilder result=new StringBuilder();
      int r=scanner.nextInt();
      int c=scanner.nextInt();
      int w=scanner.nextInt();
      result.append(r * ((c - 1) / w) + (w));
      writer.println(""Case #"" + (i + 1) + "": ""+ result.toString());
    }
    writer.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001382,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int caseNum=1; caseNum <= t; caseNum++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    int g=(r - 1) * (c / w) + w + (c / w);
    if ((c % w) == 0) {
      g--;
    }
    System.out.println(""Case #"" + caseNum + "": ""+ g);
  }
}
"
30001383,"public static void main(String... args) throws IOException {
  if (!_SAMPLE) {
    if (_SMALL) {
      int i=0;
      while (new File(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".in"").exists())       i++;
      i--;
      boolean test=false;
      if (new File(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".out"").exists()) {
        System.err.println(""overwrite?(y/n)"");
        char c=(char)System.in.read();
        test=c != 'y';
      }
      if (test) {
        System.setIn(new FileInputStream(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".in""));
        System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
        AL r=new AL();
        Scanner sc=new Scanner(System.in);
        int testCase=sc.nextInt();
        for (int k=1; k <= testCase; k++) {
          System.out.printf(""Case #%d: "",k);
          System.err.printf(""Case #%d: "",k);
          int r1=sc.nextInt();
          int c=sc.nextInt();
          int w=sc.nextInt();
          int count=(c / w) * r1;
          count+=(w - 1);
          if (c % w != 0) {
            count++;
          }
          System.out.println(count);
          System.err.println(count);
        }
        sc.close();
        FileReader f1=new FileReader(_PROBLEM + ""-small-test.out"");
        FileReader f2=new FileReader(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".out"");
        BufferedReader br1=new BufferedReader(f1);
        BufferedReader br2=new BufferedReader(f2);
        for (int j=1; ; j++) {
          String s1=br1.readLine();
          String s2=br2.readLine();
          if (s1 == null && s2 == null) {
            System.err.println(""OK!"");
            break;
          }
          if (s1 == null || s2 == null || !s1.equals(s2)) {
            System.err.println(""failed at line "" + j);
            System.err.println(""expected "" + s2);
            System.err.println(""but "" + s1);
            break;
          }
        }
        br1.close();
        br2.close();
      }
 else {
        System.setIn(new FileInputStream(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".in""));
        System.setOut(new PrintStream(_PROBLEM + ""-small"" + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i)+ "".out""));
        AL r=new AL();
        Scanner sc=new Scanner(System.in);
        int testCase=sc.nextInt();
        for (int k=1; k <= testCase; k++) {
          System.out.printf(""Case #%d: "",k);
          System.err.printf(""Case #%d: "",k);
          int r1=sc.nextInt();
          int c=sc.nextInt();
          int w=sc.nextInt();
          int count=(c / w) * r1;
          count+=(w - 1);
          if (c % w != 0) {
            count++;
          }
          System.out.println(count);
          System.err.println(count);
        }
        sc.close();
      }
    }
 else {
      System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """")+ "".in""));
      System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """")+ "".out""));
      AL r=new AL();
      Scanner sc=new Scanner(System.in);
      int testCase=sc.nextInt();
      for (int k=1; k <= testCase; k++) {
        System.out.printf(""Case #%d: "",k);
        System.err.printf(""Case #%d: "",k);
        int r1=sc.nextInt();
        int c=sc.nextInt();
        int w=sc.nextInt();
        int count=(c / w) * r1;
        count+=(w - 1);
        if (c % w != 0) {
          count++;
        }
        System.out.println(count);
        System.err.println(count);
      }
      sc.close();
    }
  }
 else {
    AL r=new AL();
    Scanner sc=new Scanner(System.in);
    int testCase=sc.nextInt();
    for (int k=1; k <= testCase; k++) {
      System.out.printf(""Case #%d: "",k);
      System.err.printf(""Case #%d: "",k);
      int r1=sc.nextInt();
      int c=sc.nextInt();
      int w=sc.nextInt();
      int count=(c / w) * r1;
      count+=(w - 1);
      if (c % w != 0) {
        count++;
      }
      System.out.println(count);
      System.err.println(count);
    }
    sc.close();
  }
}
"
30001384,"public static void main(String[] args){
  Counter so=new Counter();
  Scanner scanner;
  try {
    scanner=new Scanner(new File(""A-large.in""));
    int testCases=scanner.nextInt();
    scanner.nextLine();
    for (int i=0; i < testCases; ++i) {
      so.R.add(scanner.nextInt());
      so.C.add(scanner.nextInt());
      so.W.add(scanner.nextInt());
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  for (int i1=0; i1 < so.W.size(); ++i1) {
    int w=so.W.get(i1);
    int r=so.R.get(i1);
    int c=so.C.get(i1);
    int val;
    int valami;
    int utolso;
    if (c % w == 0) {
      valami=0;
      utolso=0;
    }
 else {
      valami=2 * w - (w - 1 + 1 + (c % w)) + 1;
      utolso=1;
    }
    if (c * r == w) {
      val=w;
      so.res.add(val);
      continue;
    }
    if (r == 1) {
      val=(int)((Math.floor(c / w) + (w - 1))) + utolso;
      so.res.add(val);
      continue;
    }
    if (r > 1) {
      val=(int)((r - 1) * (Math.floor(c / w))) + (int)(Math.floor(c / w) + (w - 1)) + utolso;
      so.res.add(val);
      continue;
    }
  }
  PrintWriter writer;
  try {
    writer=new PrintWriter(""A-large.out"");
    int counter=0;
    for (int i=0; i < so.res.size(); ++i) {
      writer.print(""Case #"" + (++counter) + "": ""+ so.res.get(i));
      if (counter < so.res.size()) {
        writer.println();
      }
    }
    writer.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30001385,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int caseNum=1; caseNum <= t; caseNum++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    int tries;
    if (c % w == 0) {
      tries=(r * (c / w)) + (w - 1);
    }
 else {
      tries=(r * (c / w)) + w;
    }
    System.out.printf(""Case #%d: %d\n"",caseNum,tries);
  }
}
"
30001386,"public static void main(String[] args){
  try {
    BufferedReader f=new BufferedReader(new InputStreamReader(System.in));
    int t=Integer.parseInt(f.readLine());
    FileWriter fout=new FileWriter(""brattleship.out"");
    for (int i=1; i <= t; i++) {
      StringTokenizer st=new StringTokenizer(f.readLine());
      int r=Integer.parseInt(st.nextToken());
      int c=Integer.parseInt(st.nextToken());
      int w=Integer.parseInt(st.nextToken());
      int[] dp=new int[c + 1];
      dp[w]=w + r - 1;
      for (int j=w + 1; j <= 2 * w - 1; j++) {
        if (j > c)         break;
        dp[j]=w + 1 + r - 1;
      }
      for (int j=2 * w; j <= c; j++) {
        dp[j]=Math.max(dp[j - w] + r,w + 1);
      }
      System.out.println(""Case #"" + i + "": ""+ dp[c]);
      fout.write(""Case #"" + i + "": ""+ dp[c]+ ""\n"");
    }
    f.close();
    fout.close();
  }
 catch (  IOException e) {
    System.out.println(e);
  }
}
"
30001387,"public static void main(String[] args) throws Exception {
  Scanner scan=new Scanner(new File(""A-large.in""));
  PrintWriter o=new PrintWriter(new File(""Aoutl0.txt""));
  int n=Integer.parseInt(scan.nextLine());
  for (int i=1; i <= n; i++) {
    String[] cs=scan.nextLine().split("" "");
    int r=Integer.parseInt(cs[0]);
    int c=Integer.parseInt(cs[1]);
    int w=Integer.parseInt(cs[2]);
    int ans=(int)(Math.floor(1.0 * c / w)) * r;
    if (c % w == 0)     ans+=w - 1;
 else     ans+=w;
    o.println(""Case #"" + i + "": ""+ ans);
  }
  scan.close();
  o.close();
}
"
30001388,"public static void main(String[] args) throws IOException {
  BufferedReader reader=new BufferedReader(new FileReader(""A-large (2).in""));
  BufferedWriter writer=new BufferedWriter(new FileWriter(""a.out""));
  int tests=Integer.parseInt(reader.readLine());
  int currTest=1;
  while (currTest <= tests) {
    String[] line=reader.readLine().split("" "");
    int R=Integer.parseInt(line[0]);
    int C=Integer.parseInt(line[1]);
    int W=Integer.parseInt(line[2]);
    long count=0;
    count+=C / W;
    count*=R;
    if (W > 1) {
      if ((C % W) != 0) {
        count+=W;
      }
 else       count+=W - 1;
    }
    System.out.println(""Case #"" + currTest + "": ""+ count);
    currTest++;
  }
  reader.close();
  writer.flush();
  writer.close();
}
"
30001389,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(""data/A-small-attempt0.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""data/out""));
  int caseCount=sc.nextInt();
  for (int caseNum=0; caseNum < caseCount; caseNum++) {
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    System.out.print(""Case #"" + (caseNum + 1) + "": "");
    A template=new A();
    int R, C, W;
    R=sc.nextInt();
    C=sc.nextInt();
    W=sc.nextInt();
    int fh=R * C / W;
    int ans=0;
    boolean edge;
    if (C % W == 0) {
      edge=true;
    }
 else {
      edge=false;
    }
    if (edge) {
      ans=fh + W - 1;
    }
 else {
      ans=fh + W;
    }
    System.out.print(ans);
    pw.print(ans);
    System.out.println();
    pw.println();
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30001390,"public static void main(String[] args){
  Scanner read=new Scanner(System.in);
  int n=read.nextInt();
  for (int i=1; i <= n; i++) {
    int r=read.nextInt();
    int c=read.nextInt();
    int w=read.nextInt();
    System.out.printf(""Case #%d: %d\n"",i,r * c / w + w + (c % w == 0 ? -1 : 0));
  }
  read.close();
}
"
30001391,"public static void main(final String[] args){
  try (Scanner sc=new Scanner(System.in)){
    final int t=sc.nextInt();
    int r;
    int c;
    int w;
    int n;
    for (int i=0; i < t; i++) {
      r=sc.nextInt();
      c=sc.nextInt();
      w=sc.nextInt();
      n=0;
      if (w == 1) {
        System.out.println(""Case #"" + (i + 1) + "": ""+ r * c);
        continue;
      }
      n=c / w + w;
      if (c % w == 0) {
        n--;
      }
      n+=(r - 1) * (c / w);
      System.out.println(""Case #"" + (i + 1) + "": ""+ n);
    }
  }
 }
"
30001392,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""A-small-attempt1.in""));
  BufferedWriter writer=new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
  String line=in.readLine();
  int n=Integer.parseInt(line);
  for (int i=0; i < n; i++) {
    line=in.readLine();
    String[] arr=line.split("" "");
    int r=Integer.parseInt(arr[0]);
    int c=Integer.parseInt(arr[1]);
    int w=Integer.parseInt(arr[2]);
    long min=0;
    for (int x=0; x < r - 1; x++) {
      min=min + (c / w);
    }
    if (c - w == 0) {
      min=min + w;
    }
 else     if (c - w < w) {
      min=w + 1;
    }
 else {
      min=(long)(min + Math.ceil((double)c / (double)w));
      min=min + w - 1;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ min+ ""\n"");
    writer.write(""Case #"" + (i + 1) + "": ""+ min+ ""\n"");
  }
  in.close();
  writer.close();
}
"
30001393,"static String NL() throws Exception {
  String line=br.readLine();
  st=new StringTokenizer(line);
  return line;
}
"
30001394,"public static void main(String[] args){
  File fin=new File(""src/Round1C/A-large.in"");
  Scanner scan;
  try {
    scan=new Scanner(fin);
    PrintWriter output=new PrintWriter(""src/Round1C/A_test.out2.txt"");
    int T=scan.nextInt();
    for (int i=0; i < T; i++) {
      int R=scan.nextInt();
      int CC=scan.nextInt();
      int W=scan.nextInt();
      int C=CC;
      System.out.println(R + "" "" + C+ "" ""+ W);
      int result=0;
      result+=C / W * (R - 1);
      System.out.println(C + "" > "" + (2 * W + 1));
      while (C > 2 * W) {
        C-=W;
        result++;
      }
      System.out.println((W + 1) + "" "" + result);
      if (C == W)       result+=W;
 else       result+=W + 1;
      System.out.println((W + 1) + "" "" + result);
      output.println(""Case #"" + (i + 1) + "": ""+ result);
      System.out.println(""Case #"" + (i + 1) + "": ""+ R+ "" ""+ CC+ "" ""+ W+ ""\t result :""+ result);
    }
    scan.close();
    output.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}
"
30001395,"public static void main(String[] args) throws IOException {
  String pb=""A"";
  Scanner sc=new Scanner(new FileReader(new File(pb + "".in"")));
  PrintWriter out=new PrintWriter(new File(pb + "".out""));
  StringBuilder resultat=new StringBuilder("""");
  long time=System.currentTimeMillis();
  int TC=sc.nextInt();
  for (int tc=1; tc <= TC; tc++) {
    if (tc != 1)     resultat.append(""\n"");
    resultat.append(""Case #"" + tc + "": "");
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    long res=0;
    res+=(C / W) * (R - 1);
    res+=C / W - 1;
    long d=W + C % W;
    if (d == W)     res+=W;
 else     res+=W + 1;
    System.out.println(res);
    resultat.append(res);
    System.out.println(""Finished testcase "" + tc + "", time = ""+ (System.currentTimeMillis() - time));
  }
  out.print(resultat);
  out.close();
  sc.close();
}
"
30001396,"public static void main(String[] args){
  Scanner in=null;
  PrintWriter out=null;
  try {
    in=new Scanner(new FileReader(""input.in""));
    out=new PrintWriter(""output.txt"");
    int cases=in.nextInt();
    for (int caseIndex=1; caseIndex <= cases; caseIndex++) {
      int r=in.nextInt();
      int c=in.nextInt();
      int w=in.nextInt();
      int result=(c / w) * r + (w - 1);
      if (c % w != 0) {
        result++;
      }
      out.printf(""Case #%d: %d\n"",caseIndex,result);
      out.flush();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (in != null)     in.close();
    if (out != null)     out.close();
  }
}
"
30001397,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int casei=1; casei <= t; casei++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    int ret=c / w * r + w - 1 + (c % w != 0 ? 1 : 0);
    System.out.printf(""Case #%d: %d\n"",casei,ret);
  }
  sc.close();
}
"
30001398,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new FileReader(""A-large.in""));
  PrintWriter out=new PrintWriter(""A.out"");
  int cases=in.nextInt();
  for (int casenum=1; casenum <= cases; casenum++) {
    int r=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    int score=c / w * (r - 1);
    score+=(int)Math.ceil((double)c / (double)w);
    score+=w - 1;
    out.println(""Case #"" + casenum + "": ""+ score);
  }
  out.close();
  in.close();
}
"
30001399,"public static void main(String[] args){
  int x=0, T=0;
  Scanner s1=new Scanner(System.in);
  T=s1.nextInt();
  while (T != 0) {
    T--;
    x++;
    int R=s1.nextInt();
    int C=s1.nextInt();
    int W=s1.nextInt();
    int cal=((C - 1) / W) + W;
    if (R != 1)     cal+=((R - 1) * (C / W));
    if (W > C)     cal=0;
    System.out.println(""Case #"" + x + "": ""+ cal);
  }
}
"
30001400,"public static void main(String[] args) throws IOException {
  String fname=""data/"" + A.class.getSimpleName() + ""-""+ FNAME+ ""."";
  Scanner sc=new Scanner(Paths.get(fname + ""in""));
  PrintWriter w=new PrintWriter(fname + ""out"");
  int T=sc.nextInt();
  for (int tc=0; tc < T; tc++) {
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    int res=R * C / W + W - (C % W == 0 ? 1 : 0);
    w.printf(""Case #%d: %d\n"",tc + 1,res);
  }
  w.close();
}
"
30001401,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader reader=new BufferedReader(new FileReader(""input.in""));
  BufferedWriter writer=new BufferedWriter(new FileWriter(""output.out""));
  int t=Integer.parseInt(reader.readLine());
  for (int c=1; c <= t; ++c) {
    int result=0;
    String[] values=reader.readLine().split("" "");
    int rows=Integer.parseInt(values[0]);
    int cows=Integer.parseInt(values[1]);
    int w=Integer.parseInt(values[2]);
    int perRow=cows / w;
    result=perRow * rows;
    int currentCow=(cows / w) * w;
    if (currentCow == cows) {
      result+=(w - 1);
    }
 else {
      result+=w;
    }
    System.out.println(""Case #"" + c + "": ""+ result);
    writer.write(""Case #"" + c + "": ""+ result);
    writer.newLine();
  }
  writer.flush();
  writer.close();
  reader.close();
}
"
30001402,"public static void main(String[] args) throws FileNotFoundException {
  Problem1A prog=new Problem1A();
  Scanner in=new Scanner(new FileReader(args[0]));
  final int cntCases=in.nextInt();
  for (int caseNum=1; caseNum <= cntCases && in.hasNextLine(); caseNum++) {
    try {
      in.nextLine();
      final int ROWS=in.nextInt();
      final int COLUMNS=in.nextInt();
      final int WIDTH=in.nextInt();
      int cnt=(COLUMNS / WIDTH) * ROWS;
      int leftover=COLUMNS % WIDTH;
      if (leftover != 0) {
        cnt++;
      }
      cnt+=(WIDTH - 1);
      int ans1=cnt;
      System.out.println(""Case #"" + caseNum + "": ""+ ans1);
    }
 catch (    NoSuchElementException ex) {
      if (DEBUG)       System.out.println(""err: "" + ex);
    }
  }
}
"
30001403,"public static void main(String args[]){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  int R, C, W;
  for (int I=1; I <= T; I++) {
    R=in.nextInt();
    C=in.nextInt();
    W=in.nextInt();
    if (C % W == 0) {
      System.out.println(""Case #"" + I + "": ""+ (R * (C / W) + W - 1));
    }
 else {
      System.out.println(""Case #"" + I + "": ""+ (R * (C / W) + W));
    }
  }
}
"
30001404,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""A-small-attempt0.in""));
  PrintWriter out=new PrintWriter(new FileWriter(""out.txt""));
  int n=in.nextInt();
  for (int t=0; t < n; t++) {
    int r=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    int answer=(int)(Math.ceil(c * 1.0 / w * 1.0)) - 1 + w;
    answer*=r;
    String ans="""" + answer;
    out.println(""Case #"" + (t + 1) + "": ""+ ans);
    System.out.println(""Case #"" + (t + 1) + "": ""+ ans);
  }
  in.close();
  out.close();
}
"
30001405,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new BufferedReader(new FileReader(inname)));
    BufferedWriter out=new BufferedWriter(new FileWriter(outname));
    int t=in.nextInt();
    in.nextLine();
    for (int cas=1; cas <= t; cas++) {
      int r=in.nextInt();
      int c=in.nextInt();
      int saize=in.nextInt();
      int ans=0;
      ans+=c / saize;
      ans*=r;
      if ((c % saize != 0) && (saize != r))       ans+=1;
      ans+=saize - 1;
      out.write(""Case #"" + cas + "": ""+ ans+ ""\n"");
    }
    in.close();
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001406,"public static void main(String[] args) throws FileNotFoundException {
  A r=new A();
  Scanner in=new Scanner(new File(""al.in""));
  PrintWriter out=new PrintWriter(""al.out"");
  int tt=Integer.parseInt(in.nextLine());
  for (int test=1; test <= tt; test++) {
    int r1=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    int ans=c / w + (w - 1) + (c % w == 0 ? 0 : 1) + (r1 - 1) * (c / w);
    out.println(""Case #"" + test + "": ""+ ans);
  }
  out.close();
}
"
30001407,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc;
  try {
    sc=new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
  }
 catch (  FileNotFoundException e) {
    return;
  }
  int n=sc.nextInt();
  String tmp=sc.nextLine();
  String res="""";
  for (int i=1; i <= n; i++) {
    int row=sc.nextInt();
    int col=sc.nextInt();
    int w=sc.nextInt();
    int min=0;
    for (int j=0; j < row; j++) {
      for (int k=0; k < col; k+=w) {
        min++;
      }
    }
    if (i != 1)     res+=""\n"";
    res+=""Case #"" + i + "": ""+ (min + w - 1);
  }
  System.out.println(res);
}
"
30001408,"public static void main(String[] args){
  testCases=new int[sc.nextInt()][3];
  outputs=new int[testCases.length];
  for (int i=0; i < testCases.length; i++) {
    for (int j=0; j < 3; j++) {
      testCases[i][j]=sc.nextInt();
    }
  }
  for (int i=0; i < testCases.length; i++) {
    outputs[i]=(((int)(testCases[i][1] / testCases[i][2])) * testCases[i][0]) + (testCases[i][2] - 1) + ((int)Math.ceil((double)testCases[i][1] / (double)testCases[i][2]) - ((int)(testCases[i][1] / testCases[i][2])));
  }
  for (int i=0; i < outputs.length; i++) {
    System.out.println(""Case #"" + (i + 1) + "": ""+ outputs[i]+ """");
  }
}
"
30001409,"public static void main(String argv[]){
  Sample cards=new Sample();
  try {
    cards.scanner=new Scanner(new File(Sample.INPUT_FILE));
    cards.outputFile=new File(Sample.OUTPUT_FILE);
    if (cards.outputFile.exists()) {
      cards.outputFile.delete();
    }
    cards.outputFile.createNewFile();
    cards.pout=new PrintStream(cards.outputFile);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  cards.totalTests=cards.scanner.nextInt();
  for (int i=1; i <= cards.totalTests; i++) {
    cards.testNo=i;
    cards.row=0;
    cards.col=0;
    cards.width=0;
    cards.turn=0;
    cards.row=cards.scanner.nextInt();
    cards.col=cards.scanner.nextInt();
    cards.width=cards.scanner.nextInt();
    cards.turn=cards.col / cards.width;
    cards.turn+=(cards.width - 1);
    if (cards.col % cards.width == 0) {
    }
 else {
      cards.turn++;
    }
    if (cards.row > 1) {
      cards.row--;
      int misses=cards.col / cards.width;
      int missTurns=misses * cards.row;
      cards.turn+=missTurns;
    }
    cards.pout.print(Sample.CASE_STRING_BEFORE + cards.testNo + Sample.CASE_STRING_AFTER);
    cards.pout.println("""" + cards.turn);
  }
  cards.scanner.close();
  cards.pout.flush();
  cards.pout.close();
}
"
30001410,"public static void main(String[] args){
  Date d1=new Date();
  try {
    FileWriter fw=new FileWriter(""A-large.out"");
    BufferedWriter bw=new BufferedWriter(fw);
    Scanner sc=new Scanner(new File(""A-large.in""));
    long t=sc.nextLong();
    sc.nextLine();
    for (long i2=0; i2 < t; i2++) {
      int r=sc.nextInt();
      int c=sc.nextInt();
      int w=sc.nextInt();
      int result=w;
      if (w == 1) {
        result=c * r;
      }
 else {
        result=(c / w) * r + (w - 1);
        if (c % w != 0) {
          result+=1;
        }
      }
      String rez="""" + result;
      bw.write(""Case #"" + (i2 + 1) + "": ""+ rez+ ""\n"");
    }
    bw.flush();
    bw.close();
    fw.close();
    sc.close();
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
  }
 finally {
  }
  Date d2=new Date();
  System.out.println(""time: "" + (d2.getTime() - d1.getTime()));
}
"
30001411,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int i=0; i < T; i++) {
    int R=in.nextInt();
    int C=in.nextInt();
    int size=in.nextInt();
    int costPerRow=C / size;
    int ans1=0;
    ans1+=costPerRow * R;
    if (C % size == 0) {
      ans1+=(size - 1);
    }
 else {
      ans1+=size;
    }
    int ans=ans1;
    System.out.printf(""Case #%d: %d\n"",i + 1,ans);
  }
}
"
30001412,"public static void main(String[] args) throws Exception {
  String filename=""A-large"";
  Scanner scan=new Scanner(new FileReader(filename + "".in""));
  PrintWriter out=new PrintWriter(filename + "".out"");
  int problems=scan.nextInt();
  for (int count=0; count < problems; count++) {
    System.out.print(""Case #"" + (count + 1) + "": "");
    out.print(""Case #"" + (count + 1) + "": "");
    A r=new A();
    int r1=scan.nextInt();
    int c=scan.nextInt();
    int w=scan.nextInt();
    int result=r1 * (c / w);
    if (c % w == 0) {
      result+=w - 1;
    }
 else {
      result+=w;
    }
    System.out.println(result);
    out.println(result);
  }
  out.flush();
  out.close();
  scan.close();
}
"
30001413,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int T=input.nextInt();
  for (int i=0; i < T; i++) {
    int r=input.nextInt();
    int c=input.nextInt();
    int w=input.nextInt();
    int solution;
    if (c % w == 0)     solution=(c / w) * r + w - 1;
 else {
      solution=(c / w) * r + w;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ solution);
  }
  input.close();
}
"
30001414,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new FileReader(WORK_DIR + ""A-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(WORK_DIR + ""output.txt""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    prblmA r=new prblmA();
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    int count=0;
    count=(int)Math.floor(C / W);
    count=count * R;
    if (C % W == 0)     count=count + W - 1;
 else     count=count + W;
    pw.println(count);
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30001415,"public static void main(String[] args) throws IOException {
  File file=new File(INPUT_FILE_NAME);
  InputStreamReader in=null;
  StringBuffer pzFile=new StringBuffer();
  in=new InputStreamReader(new FileInputStream(file));
  BufferedReader buffer=new BufferedReader(in);
  String line=null;
  int testCaseNumber=0;
  int testCaseIndex=1;
  boolean isFirstLine=true;
  while ((line=buffer.readLine()) != null) {
    if (isFirstLine) {
      testCaseNumber=Integer.valueOf(line.trim());
      isFirstLine=false;
      continue;
    }
    String[] tempString=line.split("" "");
    int r=Integer.valueOf(tempString[0].trim());
    int c=Integer.valueOf(tempString[1].trim());
    int w=Integer.valueOf(tempString[2].trim());
    int result=0;
    result=c / w;
    result=result * r;
    if (c % w == 0) {
      result+=w - 1;
    }
 else {
      result+=w;
    }
    File outFile=new File(INPUT_FILE_NAME + "".out"");
    if (!outFile.exists()) {
      try {
        outFile.createNewFile();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    FileWriter fileWritter=null;
    try {
      fileWritter=new FileWriter(outFile,true);
      BufferedWriter bufferWritter=new BufferedWriter(fileWritter);
      bufferWritter.append(""Case #"" + testCaseIndex + "": ""+ result+ ""\n"");
      bufferWritter.flush();
      fileWritter.flush();
      bufferWritter.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    testCaseIndex++;
  }
}
"
30001416,"public static void main(String[] args) throws IOException {
  A2015 trans=new A2015();
  File file=new File(""./inputs/"" + A2015.NAME + "".in"");
  BufferedWriter out=new BufferedWriter(new FileWriter(""./output/"" + A2015.NAME + "".out""));
  try {
    BufferedReader input=new BufferedReader(new FileReader(file));
    try {
      String line=input.readLine();
      int count=Integer.parseInt(line);
      for (int i=0; i < count; i++) {
        line=input.readLine();
        System.out.println(line);
        StringTokenizer tokens=new StringTokenizer(line.trim());
        int[] a=new int[tokens.countTokens()];
        int i1=0;
        while (tokens.hasMoreElements()) {
          a[i1++]=Integer.parseInt(tokens.nextToken());
        }
        int[] params=a;
        int rows=params[0];
        int cols=params[1];
        int width=params[2];
        int count1=0;
        int perrow=cols / width;
        count1=perrow * rows;
        count1+=width - 1;
        if (perrow * width < cols) {
          count1++;
        }
        String str=Integer.toString(count1);
        out.write(""Case #"" + (i + 1) + "": ""+ str);
        if (i < count - 1)         out.write(System.getProperty(""line.separator""));
        System.out.println(str);
      }
    }
  finally {
      input.close();
      out.flush();
      out.close();
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
"
30001417,"public static void main(String[] args){
  try {
    Scanner scanner=new Scanner(new FileInputStream(""input.txt""));
    scanner.useLocale(Locale.ENGLISH);
    BufferedWriter out=new BufferedWriter(new FileWriter(""output.txt""));
    int tests=scanner.nextInt();
    for (int i=0; i < tests; i++) {
      int r=scanner.nextInt();
      int c=scanner.nextInt();
      int w=scanner.nextInt();
      int perRow=c / w;
      int result=r * perRow;
      if (c % w == 0) {
        result--;
      }
      result+=w;
      out.write(""Case #"" + (i + 1) + "": ""+ result+ ""\n"");
    }
    out.close();
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
  }
}
"
30001418,"public static void main(String[] args) throws Exception {
  FileReader in=new FileReader(""F:\\download\\A-large.in"");
  BufferedReader br=new BufferedReader(in);
  FileWriter out=new FileWriter(""F:\\download\\CodeJam\\out.txt"");
  BufferedWriter bw=new BufferedWriter(out);
  int t=Integer.parseInt(br.readLine());
  for (int c=0; c < t; c++) {
    String line=br.readLine();
    StringTokenizer St1=new StringTokenizer(line,"" "");
    int ro=Integer.valueOf(St1.nextToken()).intValue();
    int co=Integer.valueOf(St1.nextToken()).intValue();
    int w=Integer.valueOf(St1.nextToken()).intValue();
    int answer=((int)(co / w)) * (ro - 1);
    answer+=w;
    while (true) {
      if (co > w) {
        co-=w;
        answer++;
      }
 else {
        break;
      }
    }
    bw.write(String.format(""Case #%d: %d\n"",c + 1,answer));
  }
  br.close();
  in.close();
  bw.close();
  out.close();
}
"
30001419,"public A(final Scanner sc){
  R=sc.nextInt();
  C=sc.nextInt();
  W=sc.nextInt();
}
"
30001420,"public static void main(String args[]) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(""Aout.txt"");
  int n=Integer.parseInt(br.readLine());
  String line;
  for (int q=1; q <= n; q++) {
    line=br.readLine();
    Scanner sc=new Scanner(line);
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    int ans=(C / W) * R + (C % W == 0 ? 0 : 1) + W - 1;
    System.out.println(""Case #"" + q + "": ""+ ans);
    pw.println(""Case #"" + q + "": ""+ ans);
  }
  pw.close();
}
"
30001421,"public static void main(String[] arg){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  for (int i=1; i <= t; i++) {
    int r=s.nextInt();
    int c=s.nextInt();
    int w=s.nextInt();
    int ans=(c - 1) / w + w;
    System.out.println(""Case #"" + i + "": ""+ ans);
  }
}
"
30001422,"public static void main(String[] args){
  try {
    BufferedReader read=new BufferedReader(new FileReader(""A-large.in""));
    BufferedWriter write=new BufferedWriter(new FileWriter(""out.in""));
    int N=Integer.valueOf(read.readLine());
    for (int i=0; i < N; i++) {
      String list[]=read.readLine().split("" "");
      int R=Integer.parseInt(list[0]);
      int C=Integer.parseInt(list[1]);
      int W=Integer.parseInt(list[2]);
      int b=0;
      float c=Float.parseFloat(list[1]);
      float w=Float.parseFloat(list[2]);
      if (C == W) {
        b=C + (R - 1);
      }
 else       if (W == 1) {
        b=C * R;
      }
 else       if (C % 2 == 0) {
        if (C / 2 < W) {
          b=(C / W) + W + ((C / W) * (R - 1));
        }
 else {
          if (C % W == 0) {
            b=(C / W) + (W - 1) + ((C / W) * (R - 1));
          }
 else {
            b=(C / W) + W + ((C / W) * (R - 1));
          }
        }
      }
 else       if (C % 2 != 0) {
        if (C % W == 0) {
          b=(C / W) + (W - 1) + ((C / W) * (R - 1));
        }
 else {
          b=(C / W) + W + ((C / W) * (R - 1));
        }
      }
      write.write(""Case #"" + (i + 1) + "": ""+ b+ ""\n"");
      write.flush();
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
"
30001423,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  int answ, R, C, W;
  for (int z=1; z <= T; z++) {
    R=in.nextInt();
    C=in.nextInt();
    W=in.nextInt();
    if (W == 1) {
      answ=R * C;
    }
 else {
      answ=((C + (W - 1)) / W);
      answ*=R;
      answ+=W - 1;
    }
    System.out.println(""Case #"" + z + "": ""+ answ);
  }
}
"
30001424,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(""input.in""));
  PrintWriter out=new PrintWriter(""output.txt"");
  int t=Integer.parseInt(br.readLine());
  for (int i=0; i < t; i++) {
    String[] in=br.readLine().split("" "");
    int r=Integer.parseInt(in[0]);
    int c=Integer.parseInt(in[1]);
    int w=Integer.parseInt(in[2]);
    out.println(""Case #"" + (i + 1) + "": ""+ (int)(Math.ceil((c * 1.0 / w)) - 1 + w) * r);
  }
  br.close();
  out.close();
}
"
30001425,"public static void main(String args[]) throws Exception {
  A r=new A();
  int t=r.sc.nextInt();
  for (int i=1; i <= t; i++) {
    r.out.print(""Case #"" + i + "": "");
    int ans=0;
    int R=r.sc.nextInt();
    int C=r.sc.nextInt();
    int W=r.sc.nextInt();
    ans+=R * ((C - 1) / W);
    ans+=R * W;
    r.out.println(ans);
  }
  r.sc.close();
  r.out.close();
}
"
30001426,"public static void main(String[] args){
  Scanner sin=new Scanner(System.in);
  int t=sin.nextInt();
  for (int i=1; i <= t; i++) {
    int R=sin.nextInt();
    int C=sin.nextInt();
    int W=sin.nextInt();
    int x1=R * (C / W);
    if (C % W > 0) {
      x1=x1 + W;
    }
 else {
      x1=x1 + W - 1;
    }
    System.out.println(""Case #"" + i + "": ""+ x1);
  }
}
"
30001427,"public static void main(String[] args) throws Exception {
  File file=new File(""A-small-attempt0.in"");
  Scanner input=new Scanner(file);
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    int r=input.nextInt();
    int c=input.nextInt();
    int w=input.nextInt();
    int[][] b=new int[r][c];
    int score=0;
    for (int j=0; j < r; j++) {
      int i=0;
      while (i < c) {
        i+=w;
        score++;
      }
    }
    score+=(w - 1);
    System.out.println(""Case #"" + (n + 1) + "": ""+ score);
  }
}
"
30001428,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int nData=in.nextInt();
  in.nextLine();
  for (int asdf=0; asdf < nData; asdf++) {
    int rows=in.nextInt();
    int cols=in.nextInt();
    int width=in.nextInt();
    int perrow=cols / width;
    int answer=perrow * rows;
    answer+=width - 1;
    if (cols % width != 0) {
      answer++;
    }
    System.out.println(""Case #"" + (asdf + 1) + "": ""+ answer);
  }
}
"
30001429,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
  int totalCaseNumber=Integer.parseInt(reader.readLine());
  for (int caseNo=1; caseNo <= totalCaseNumber; caseNo++) {
    String line=reader.readLine();
    String[] parts=line.split("" "");
    int R=Integer.parseInt(parts[0]);
    int C=Integer.parseInt(parts[1]);
    int W=Integer.parseInt(parts[2]);
    int res=(C / W) * R + (C % W == 0 ? W - 1 : W);
    System.out.println(""Case #"" + caseNo + "": ""+ res);
  }
  reader.close();
}
"
30001430,"/** 
 * @param args
 * @throws IOException 
 */
public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new FileReader(""input""));
  PrintWriter out=new PrintWriter(new FileWriter(""output""));
  int cases=in.nextInt();
  for (int a=0; a < cases; a++) {
    int rows=in.nextInt();
    int cols=in.nextInt();
    int width=in.nextInt();
    int tries=cols / width;
    tries=tries * rows;
    tries--;
    tries=tries + width;
    if (cols % width != 0) {
      tries++;
    }
    out.print(""Case #"" + (a + 1) + "": ""+ tries+ ""\n"");
  }
  out.close();
}
"
30001431,"public static void main(String[] args) throws FileNotFoundException {
  sc=new Scanner(args.length > 0 ? new FileInputStream(args[0]) : System.in);
  int numCases=sc.nextInt();
  for (int nCase=1; nCase <= numCases; nCase++) {
    Object[] args1={nCase};
    System.out.printf(""Case #%d: "",args1);
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    int perRow=(int)Math.floor((double)C / W);
    int extraHit=C % W > 0 ? W : W - 1;
    Object[] args2={R * perRow + extraHit};
    System.out.printf(""%d\n"",args2);
  }
  sc.close();
}
"
30001432,"public static void main(String[] args) throws IOException {
  BufferedReader input=new BufferedReader(new FileReader(""A-large (1).in""));
  PrintWriter output=new PrintWriter(new FileWriter(""output.txt""));
  int count=Integer.parseInt(input.readLine());
  for (int counter=1; counter <= count; counter++) {
    String[] variables=input.readLine().split("" "");
    int rows=Integer.parseInt(variables[0]);
    int columns=Integer.parseInt(variables[1]);
    int width=Integer.parseInt(variables[2]);
    int answer=rows * ((int)Math.floor((columns * 1.0) / (width * 1.0))) + width;
    if (columns % width == 0)     answer--;
    output.println(""Case #"" + counter + "": ""+ answer);
  }
  output.close();
}
"
30001433,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new FileInputStream(""test.txt""));
  PrintWriter out=new PrintWriter(new FileOutputStream(""output.txt""));
  int T=in.nextInt();
  for (int test=0; test < T; test++) {
    int res=0;
    int r=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    int resi;
    if (c % w == 0)     resi=c / w + w - 1;
 else     resi=c / w + w;
    int resno=c / w;
    res=resno * (r - 1) + resi;
    out.println(""Case #"" + (test + 1) + "": ""+ res);
  }
  out.close();
}
"
30001434,"public static void main(String[] args){
  A obj=new A();
  String filame=""input.txt"";
  if (args.length > 0) {
    filame=args[0];
  }
  File file=new File(filame);
  try (BufferedReader br=new BufferedReader(new FileReader(file))){
    Integer testCasesCount=Integer.parseInt(br.readLine());
    int testCaseNumber=1;
    for (String line; (line=br.readLine()) != null; ) {
      String[] testCase=line.split(""\\s+"");
      int row=Integer.parseInt(testCase[0]);
      int cells=Integer.parseInt(testCase[1]);
      int width=Integer.parseInt(testCase[2]);
      int limit=cells / width;
      int res=limit + width - 1;
      int fin=res * row;
      int left=cells % width;
      if (left != 0 && width != 1) {
        fin++;
      }
      System.out.println(""Case #"" + testCaseNumber++ + "": ""+ fin);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001435,"public static void main(String[] args) throws FileNotFoundException {
  File file=new File(""D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/Round1C/A-large.in"");
  PrintStream out=new PrintStream(new FileOutputStream(""D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/Round1C/A-large.out""));
  System.setOut(out);
  Scanner sc=new Scanner(file);
  int T=sc.nextInt();
  int[] result=new int[T];
  for (int i=0; i < T; ++i) {
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    int numberOfTotalMisses=(C / W) - 1;
    result[i]=numberOfTotalMisses + W;
    if (C % W != 0)     result[i]++;
    result[i]+=(R - 1) * (C / W);
  }
  sc.close();
  for (int i=0; i < T; ++i)   System.out.printf(""Case #%d: %d\n"",i + 1,result[i]);
}
"
30001436,"public static void main(String[] args) throws IOException {
  int ab;
  ab=Integer.parseInt(br.readLine().trim());
  int t=ab;
  int a[]=new int[3], n, r, c;
  for (int i=1; i <= t; i++) {
    s=br.readLine().trim().split("" "");
    int i1;
    for (i1=0; i1 < 3; i1++) {
      a[i1]=Integer.parseInt(s[i1]);
    }
    r=a[0];
    c=a[1];
    n=a[2];
    int ans=0;
    ans+=(r) * (c / n);
    int m=c % n;
    ans+=n;
    if (m == 0) {
      ans-=1;
    }
    System.out.println(""Case #"" + i + "": ""+ ans);
  }
}
"
30001437,"public static void main(String[] args) throws Exception {
  InputStream inStream=new FileInputStream(String.format(""input/%s.in"",IN_NAME));
  OutputStream outStream=new FileOutputStream(String.format(""output/%s-out.txt"",IN_NAME));
  Scanner in=new Scanner(new BufferedInputStream(inStream));
  PrintWriter out=new PrintWriter(new BufferedOutputStream(outStream));
  int numCases=in.nextInt();
  for (int caseIdx=1; caseIdx <= numCases; caseIdx++) {
    int height=in.nextInt();
    int width=in.nextInt();
    int boatWidth=in.nextInt();
    int result1=0;
    int toRemoveRow=width / boatWidth;
    result1+=(height - 1) * toRemoveRow;
    int remaining=width;
    while (remaining >= 2 * boatWidth) {
      remaining-=boatWidth;
      result1++;
    }
    result1+=boatWidth;
    if (remaining != boatWidth) {
      result1++;
    }
    int result=result1;
    String resultStr=String.format(""%s"",result);
    String fullResultStr=String.format(""Case #%s: %s"",caseIdx,resultStr);
    out.println(fullResultStr);
    System.out.println(fullResultStr);
  }
  in.close();
  out.close();
}
"
30001438,"public static void main(String[] args){
  long T=sc.nextLong();
  for (long i=0; i < T; i++) {
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    int perRow=(int)Math.ceil(C / (double)W);
    System.out.println(""Case #"" + (i + 1) + "": ""+ (perRow * R + (W - 1)));
  }
}
"
30001439,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(br.readLine());
  for (int cases=1; cases <= T; cases++) {
    StringTokenizer st=new StringTokenizer(br.readLine());
    int r=Integer.parseInt(st.nextToken());
    int c=Integer.parseInt(st.nextToken());
    int w=Integer.parseInt(st.nextToken());
    int ans=(int)(Math.ceil(r * c / (w * 1.0)));
    if (Math.min(r,c) > 1)     ans+=Math.min(r,c);
    ans+=(w - 1);
    System.out.println(""Case #"" + cases + "": ""+ Math.min(ans,r * c));
  }
}
"
30001440,"/** 
 */
public static void main(String[] args) throws Exception {
  String load=""src/a-small-attempt1.in"";
  String save=""src/a-small-attempt1.out"";
  in=new Scanner(new File(load));
  out=new PrintWriter(new File(save));
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    out.print(""Case #"" + t + "": "");
    System.out.println(""Case #"" + t + "": ............"");
    A r=new A();
    int R=A.in.nextInt();
    int C=A.in.nextInt();
    int W=A.in.nextInt();
    if (R == 1) {
      int result=(C - W) / W + W + (C % W > 0 ? 1 : 0);
      A.out.println(result);
    }
 else     A.out.println(0);
  }
  out.close();
}
"
30001441,"public static void main(String[] args) throws Exception {
  int T;
  RandomAccessFile in=new RandomAccessFile(args[0],""r"");
  T=Integer.parseInt(in.readLine());
  for (int i=1; i <= T; i++) {
    String[] temp=in.readLine().split(""[ ]+"");
    int R=Integer.parseInt(temp[0]);
    int C=Integer.parseInt(temp[1]);
    int W=Integer.parseInt(temp[2]);
    int ans1=(R - 1) * (C / W) + (C / W) + (W - 1);
    if (C % W >= 1)     ans1++;
    String ans="""" + ans1;
    System.out.println(""Case #"" + i + "": ""+ ans);
  }
  in.close();
}
"
30001442,"public static void main(String[] args){
  A r=new A();
  if (!r.DEBUG) {
    try {
      if (r.isSmall)       System.setIn(new FileInputStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-small-attempt0.in"")));
 else       System.setIn(new FileInputStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-large.in"")));
      if (r.isSmall)       System.setOut(new PrintStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-small_out-deg.txt"")));
 else       System.setOut(new PrintStream(new File(""./src/"" + r.PACKAGE + ""/""+ r.PROBLEM+ ""-large_out.txt"")));
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int CASE=1; CASE <= T; CASE++) {
    int R=sc.nextInt(), C=sc.nextInt(), W=sc.nextInt();
    int w=0, res=0;
    res+=R * (C / W);
    if (C % W == 0)     res+=W - 1;
 else     res+=W;
    System.out.println(""Case #"" + CASE + "": ""+ res);
  }
}
"
30001443,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int[][] dp=new int[11][11];
  dp[1][1]=1;
  dp[2][1]=2;
  dp[2][2]=2;
  dp[3][1]=3;
  dp[3][2]=3;
  dp[3][3]=3;
  dp[4][1]=4;
  dp[4][2]=3;
  dp[4][3]=4;
  dp[4][4]=4;
  dp[5][1]=5;
  dp[5][2]=4;
  dp[5][3]=4;
  dp[5][4]=5;
  dp[5][5]=5;
  dp[6][1]=6;
  dp[6][2]=4;
  dp[6][3]=4;
  dp[6][4]=5;
  dp[6][5]=6;
  dp[6][6]=6;
  dp[7][1]=7;
  dp[7][2]=5;
  dp[7][3]=5;
  dp[7][4]=5;
  dp[7][5]=6;
  dp[7][6]=7;
  dp[7][7]=7;
  dp[8][1]=8;
  dp[8][2]=5;
  dp[8][3]=5;
  dp[8][4]=5;
  dp[8][5]=6;
  dp[8][6]=7;
  dp[8][7]=8;
  dp[8][8]=8;
  dp[9][1]=9;
  dp[9][2]=6;
  dp[9][3]=5;
  dp[9][4]=6;
  dp[9][5]=6;
  dp[9][6]=7;
  dp[9][7]=8;
  dp[9][8]=9;
  dp[9][9]=9;
  dp[10][1]=10;
  dp[10][2]=6;
  dp[10][3]=6;
  dp[10][4]=6;
  dp[10][5]=6;
  dp[10][6]=7;
  dp[10][7]=8;
  dp[10][8]=9;
  dp[10][9]=10;
  dp[10][10]=10;
  int T=in.nextInt();
  for (int t=0; t < T; t++) {
    int R=in.nextInt();
    int C=in.nextInt();
    int W=in.nextInt();
    System.out.println(""Case #"" + (t + 1) + "": ""+ dp[C][W]);
  }
}
"
30001444,"public static void main(String[] args) throws FileNotFoundException {
  PrintWriter writer=new PrintWriter(""al.out"");
  Scanner s=new Scanner(new File(""al.in""));
  int testcase=s.nextInt();
  for (int i=0; i < testcase; i++) {
    int r=s.nextInt();
    int c=s.nextInt();
    int l=s.nextInt();
    int x=c / l;
    int xx=x * r;
    int ans=xx + l - 1;
    if (c % l != 0 && l != 1) {
      ans++;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ ans);
    writer.println(""Case #"" + (i + 1) + "": ""+ ans);
  }
  writer.close();
}
"
30001445,"public static void main(String[] args){
  String filename=""src/round1B/input-B"";
  FileInputStream file;
  int T;
  try {
    file=new FileInputStream(filename + "".in"");
    BufferedReader in=new BufferedReader(new InputStreamReader(file));
    T=Integer.parseInt(in.readLine());
    BufferedWriter bw=new BufferedWriter(new FileWriter(filename + "".out""));
    for (int i=0; i < T; i++) {
      int ind=i + 1;
      String data[]=in.readLine().split("" "");
      int K=Integer.parseInt(data[0]);
      int L=Integer.parseInt(data[0]);
      int S=Integer.parseInt(data[0]);
      char[] key=in.readLine().toCharArray();
      char[] target=in.readLine().toCharArray();
      int res=0;
      int banana_max=0;
      double proba=1;
      for (int j=0; j < target.length; j++) {
        double cpt=0;
        for (int k=0; k < key.length; k++) {
          if (key[k] == target[j])           cpt++;
        }
        proba*=cpt / (double)K;
      }
      System.out.println(""Result "" + i + "": ""+ res);
      bw.write(""Case #"" + ind + "": ""+ res+ ""\n"");
    }
    bw.close();
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001446,"public static void main(String[] args){
  File a=new File(""A-small-attempt0 (2).in"");
  Scanner input=null;
  try {
    input=new Scanner(a);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  File b=new File(""A-output.txt"");
  FileWriter fw=null;
  try {
    fw=new FileWriter(b);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int number=input.nextInt();
  int cases=number;
  while (number > 0) {
    int r=input.nextInt();
    int c=input.nextInt();
    int w=input.nextInt();
    int result=0;
    if (w == 1) {
      result=r * c;
    }
 else {
      result=(c - 1) / w + w;
    }
    try {
      fw.write(""Case #"" + (cases - number + 1) + "": ""+ result+ ""\n"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    number--;
  }
  try {
    fw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001447,"public static void main(String[] args) throws java.lang.Exception {
  int T=Integer.parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    StringTokenizer st=new StringTokenizer(br.readLine());
    int R=Integer.parseInt(st.nextToken());
    int C=Integer.parseInt(st.nextToken());
    int W=Integer.parseInt(st.nextToken());
    int count=(int)(W + Math.ceil(((double)(C - W) / W)));
    int putout=(int)(Math.floor(((double)(C / W)))) * (R - 1);
    System.out.println(""Case #"" + (i + 1) + "": ""+ (count + putout));
  }
}
"
30001448,"public static void main(String[] args) throws IOException {
  in=new BufferedReader(new FileReader(new File(""/Users/yfo/Downloads/a2.in"")));
  out=new PrintWriter(new FileWriter(new File(""/Users/yfo/Downloads/a2_out.in"")));
  int T=Integer.parseInt(in.readLine());
  for (int t=0; t < T; t++) {
    System.out.print((t + 1) + "": "");
    String[] tok=in.readLine().split("" "");
    int R=Integer.parseInt(tok[0]);
    int C=Integer.parseInt(tok[1]);
    int W=Integer.parseInt(tok[2]);
    int x=(C / W) * R;
    int m=C % W;
    x+=(W - 1);
    if (m > 0)     x++;
    out.println(""Case #"" + (t + 1) + "": ""+ x);
    System.out.println(x);
  }
  in.close();
  out.close();
}
"
30001449,"public static void main(String[] args) throws IOException {
  BufferedReader x=new BufferedReader(new FileReader(""Alarge.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""Alarge.out"")));
  int t=Integer.parseInt(x.readLine());
  int[][] dp=new int[21][21];
  for (int i=1; i <= 20; i++) {
    dp[i][1]=i;
    dp[i][i]=i;
    dp[i][i - 1]=i;
  }
  for (int i=1; i <= 20; i++) {
    for (int j=2; j <= i / 2; j++) {
      if (i % j == 0) {
        dp[i][j]=dp[2 * j - 1][j] + i / j - 2;
      }
 else {
        dp[i][j]=dp[2 * j - 1][j] + i / j - 1;
      }
    }
    for (int j=i / 2 + 1; j <= i; j++) {
      dp[i][j]=dp[2 * i - 2 * j][i - j] + 2 * j - i;
    }
  }
  for (int cases=1; cases <= t; cases++) {
    StringTokenizer st=new StringTokenizer(x.readLine());
    int r=Integer.parseInt(st.nextToken());
    int c=Integer.parseInt(st.nextToken());
    int w=Integer.parseInt(st.nextToken());
    out.println(""Case #"" + cases + "": ""+ ((r - 1) * (c / w) + dp[c][w]));
  }
  out.close();
  System.exit(0);
}
"
30001450,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  File file=new File(""A-large.out"");
  if (!file.exists())   file.createNewFile();
  FileWriter fw=new FileWriter(file.getAbsolutePath());
  BufferedWriter bw=new BufferedWriter(fw);
  int numberOfCases=Integer.parseInt(br.readLine());
  for (int caseNum=1; caseNum <= numberOfCases; caseNum++) {
    String[] setup=br.readLine().split("" "");
    int r=Integer.parseInt(setup[0]);
    int c=Integer.parseInt(setup[1]);
    int w=Integer.parseInt(setup[2]);
    int findRow=(c / w) * r;
    int rowRemainder=c % w;
    int findCol=rowRemainder == 0 ? w - 1 : w;
    int number=findRow + findCol;
    String output=""Case #"" + caseNum + "": ""+ number+ ""\n"";
    System.out.println(output);
    bw.write(output);
  }
  bw.close();
}
"
30001451,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int T=s.nextInt();
  int r, c, w, ans;
  f:   for (int t=1; t <= T; t++) {
    r=s.nextInt();
    c=s.nextInt();
    w=s.nextInt();
    ans=(r - 1) * (c / w);
    if (w == 1) {
      ans+=c;
      System.out.println(""Case #"" + t + "": ""+ ans);
      continue f;
    }
    if (w == c) {
      ans+=c;
      System.out.println(""Case #"" + t + "": ""+ ans);
      continue f;
    }
    if (c <= 2 * w) {
      ans+=w + 1;
      System.out.println(""Case #"" + t + "": ""+ ans);
      continue f;
    }
 else {
      ans=ans + w + 1+ ((c - w - 1) / w);
      System.out.println(""Case #"" + t + "": ""+ ans);
      continue f;
    }
  }
}
"
30001452,"public static void main(String[] args){
  long time=System.currentTimeMillis();
  Scanner sc=new Scanner(new BufferedInputStream(System.in));
  int t=sc.nextInt();
  for (int i=1; i <= t; i++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    int res=c / w;
    if (c % w == 0) {
      res=res * r + w - 1;
    }
 else {
      res=res * r + w;
    }
    System.out.println(""Case #"" + i + "": ""+ (long)res);
  }
  sc.close();
  System.err.println(System.currentTimeMillis() - time);
}
"
30001453,"public static void main(String[] args) throws java.lang.Exception, IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  String str=br.readLine();
  int val=Integer.parseInt(str);
  int cnum=1;
  while ((str=br.readLine()) != null) {
    String[] temp=str.split("" "");
    int r=Integer.parseInt(temp[0]);
    int c=Integer.parseInt(temp[1]);
    int w=Integer.parseInt(temp[2]);
    int ans=0;
    if (c % w == 0) {
      ans=((c / w) + w - 1) * r;
    }
 else {
      ans=((c / w) + w) * r;
    }
    System.out.println(""Case #"" + cnum + "": ""+ ans);
    cnum++;
  }
}
"
30001454,"public static void main(String[] args){
  int T=0;
  try {
    Scanner scan=new Scanner(new File(""A-small-attempt0.in""));
    T=scan.nextInt();
    scan.nextLine();
    for (int i=0; i < T; i++) {
      int R, C, W;
      R=scan.nextInt();
      C=scan.nextInt();
      W=scan.nextInt();
      int answer=0;
      for (int j=0; j < R; j++) {
        for (int k=0; k < C; k+=W) {
          answer++;
        }
      }
      answer+=(W - 1);
      System.out.println(""Case #"" + (i + 1) + "": ""+ answer);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001455,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""output1.txt""));
  int nrT=Integer.parseInt(br.readLine());
  for (int tnr=1; tnr <= nrT; tnr++) {
    String[] strs=br.readLine().split("" "");
    int r=Integer.parseInt(strs[0]);
    int c=Integer.parseInt(strs[1]);
    int w=Integer.parseInt(strs[2]);
    int res=r * (c / w) + w;
    if (c % w == 0) {
      res--;
    }
    pw.println(""Case #"" + tnr + "": ""+ res);
  }
  br.close();
  pw.close();
}
"
30001456,"/** 
 * @param args
 * @throws FileNotFoundException 
 */
public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""A-small-attempt1.in""));
  PrintWriter out=new PrintWriter(""out.txt"");
  int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    int r=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    int res1=0;
    if (r == 1) {
      int p=w;
      while (p <= c) {
        res1++;
        p+=w;
      }
      res1+=w;
      if (p == c + w) {
        res1--;
      }
    }
 else {
      int p=w;
      while (p <= c) {
        res1++;
        p+=w;
      }
      res1*=r;
      res1+=w;
      if (p == c + w) {
        res1--;
      }
    }
    int res=res1;
    out.println(""Case #"" + i + "": ""+ res);
  }
  out.close();
  in.close();
}
"
30001457,"public static void main(String[] args) throws IOException {
  String fileName=""A-large"";
  Scanner s=null;
  PrintWriter p=null;
  try {
    s=new Scanner(new FileInputStream(fileName + "".in""));
    p=new PrintWriter(new File(fileName + "".out""));
  }
 catch (  IOException e) {
  }
  int t=s.nextInt();
  for (int i=0; i < t; i++) {
    int r=s.nextInt();
    int c=s.nextInt();
    int w=s.nextInt();
    System.out.println(c / w * r + (w - 1) + (c % w == 0 ? 0 : 1));
    p.println(""Case #"" + (i + 1) + "": ""+ (c / w * r + (w - 1) + (c % w == 0 ? 0 : 1)));
  }
  p.close();
  s.close();
}
"
30001458,"public static void main(String[] args) throws Exception {
  Scanner scan=new Scanner(new File(""in.txt""));
  PrintWriter writer=new PrintWriter(""out.txt"");
  int cases=scan.nextInt();
  for (int i=0; i < cases; i++) {
    int ans=0;
    int r=scan.nextInt();
    int c=scan.nextInt();
    int w=scan.nextInt();
    ans=(r - 1) * (c / w) + (c - 1) / w + w;
    writer.print(""Case #"");
    writer.print(i + 1);
    writer.print("": "");
    writer.print(ans);
    writer.println();
  }
  scan.close();
  writer.close();
}
"
30001459,"public static void main(String arg[]){
  Scanner scan=new Scanner(System.in);
  int t=scan.nextInt(), r, c, w, ans;
  StringBuilder p=new StringBuilder();
  for (int no=1; no <= t; no++) {
    r=scan.nextInt();
    c=scan.nextInt();
    w=scan.nextInt();
    ans=(w + c / w - 1) * r;
    if (c % w != 0)     ans+=1;
    p.append(String.format(""Case #%d: %d\n"",no,ans));
  }
  System.out.print(p);
}
"
30001460,"public static void main(String[] args){
  try {
    System.setIn(new BufferedInputStream(new FileInputStream(args.length > 0 ? args[0] : (codejam2015_1C_A.class.getName() + "".in""))));
  }
 catch (  Exception e) {
  }
  codejam2015_1C_A r=new codejam2015_1C_A();
  try {
    codejam2015_1C_A.in=new FileInputStream(""src/com/resources/smallInput.txt"");
    codejam2015_1C_A.out=new PrintWriter(""src/com/resources/output.txt"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  r.sc=new Scanner(codejam2015_1C_A.in);
  int caseN=r.sc.nextInt();
  for (int caseID=1; caseID <= caseN; caseID++) {
    r.R=r.sc.nextInt();
    r.C=r.sc.nextInt();
    r.W=r.sc.nextInt();
    codejam2015_1C_A.out.printf(""Case #%d: "",caseID);
    System.out.printf(""Case #%d: "",caseID);
    long solution=0;
    solution+=(r.R - 1) * (r.C / r.W);
    solution+=(r.C - 1) / r.W;
    solution+=r.W;
    codejam2015_1C_A.out.println(solution);
    System.out.println(solution);
    System.out.flush();
  }
  codejam2015_1C_A.out.close();
}
"
30001461,"public static void main(String[] args){
  String inFile=""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
  String outFile=""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
  int n=0;
  String line;
  try {
    FileReader fileReader=new FileReader(inFile);
    BufferedReader br=new BufferedReader(fileReader);
    FileWriter fileWriter=new FileWriter(outFile);
    BufferedWriter bw=new BufferedWriter(fileWriter);
    line=br.readLine();
    n=Integer.parseInt(line);
    for (int i=0; i < n; i++) {
      line=br.readLine();
      String[] parts=line.split("" "");
      long R=Long.parseLong(parts[0]);
      long C=Long.parseLong(parts[1]);
      long W=Long.parseLong(parts[2]);
      long result=(C - 1) / W + W;
      bw.write(""Case #"" + (i + 1) + "": ""+ result+ ""\n"");
    }
    br.close();
    bw.close();
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
"
30001462,"public static void main(String[] args) throws Exception {
  String file=""A-small-attempt1"";
  BufferedReader br=new BufferedReader(new FileReader(file + "".in""));
  PrintStream ps=new PrintStream(new FileOutputStream(file + "".out""));
  int testcases=Integer.parseInt(br.readLine());
  for (int t=0; t < testcases; t++) {
    String[] ln=br.readLine().split("" "");
    int r=Integer.parseInt(ln[0]);
    int c=Integer.parseInt(ln[1]);
    int w=Integer.parseInt(ln[2]);
    int precal=(int)(Math.ceil((double)(c - w) / w) + w);
    ps.println(""Case #"" + (t + 1) + "": ""+ precal);
  }
}
"
30001463,"public static void main(String[] args) throws IOException {
  br=new BufferedReader(new FileReader(""in.txt""));
  pr=new PrintWriter(new FileWriter(""out.txt""));
  int tt=Integer.parseInt(next());
  for (int qq=1; qq <= tt; qq++) {
    int ans=0;
    int r=Integer.parseInt(next());
    int c=Integer.parseInt(next());
    int w=Integer.parseInt(next());
    ans=c / w + w - 1 + (c % w > 0 ? 1 : 0);
    pr.printf(""Case #%d: %d\n"",qq,ans);
  }
  pr.close();
}
"
30001464,"public static void main(String[] args){
  String INPUT=args[0];
  int caseNumber=1;
  int cases;
  try {
    Scanner readIn=new Scanner(new File(INPUT));
    cases=readIn.nextInt();
    readIn.nextLine();
    while (caseNumber <= cases) {
      int R=readIn.nextInt();
      int C=readIn.nextInt();
      int W=readIn.nextInt();
      readIn.nextLine();
      int result1=0;
      result1=(R - 1) * (C / W);
      result1+=C / W + W - 1;
      if (C % W != 0) {
        result1+=1;
      }
      int result=result1;
      System.out.println(""Case #"" + caseNumber + "": ""+ result);
      caseNumber++;
    }
  }
 catch (  Exception e) {
    System.out.println(e);
  }
}
"
30001465,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader input=new BufferedReader(new FileReader(args[0]));
  OutputStreamWriter out=new OutputStreamWriter(new FileOutputStream(args[0].contains(""in"") ? args[0].replace(""in"",""out"") : args[0] + "".out""));
  int testCases=Integer.parseInt(input.readLine());
  for (int i=0; i < testCases; i++) {
    String[] tokens=input.readLine().split("" "");
    int r=Integer.parseInt(tokens[0]), c=Integer.parseInt(tokens[1]), w=Integer.parseInt(tokens[2]);
    int rc=c / w + w - 1;
    if (c % w != 0)     rc++;
    String solution=(rc * r) + """";
    out.write(""Case #"" + (i + 1) + "": ""+ solution+ ""\n"");
  }
  input.close();
  out.close();
}
"
30001466,"public static void main(String[] args) throws IOException {
  Scanner s=new Scanner(new File(""A-small-attempt1.in""));
  PrintWriter out=new PrintWriter(new FileWriter(""out.txt""));
  int ans=0;
  int cases=s.nextInt();
  for (int tt=0; tt < cases; tt++) {
    ans=0;
    int r=s.nextInt();
    int c=s.nextInt();
    int w=s.nextInt();
    ans=c / w - 1;
    int extra=c % w;
    ans+=(w);
    if (extra != 0)     ans+=1;
    ans*=r;
    out.println(""Case #"" + (tt + 1) + "": ""+ ans);
    System.out.println(""Case: #"" + (tt + 1) + "": ""+ ans);
  }
  out.close();
}
"
30001467,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int numOfTests=sc.nextInt();
  for (int i=1; i < numOfTests + 1; i++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    int val=0;
    int div=c / w;
    if (c % w != 0) {
      div++;
    }
    System.out.println(""Case #"" + i + "": ""+ (r * (div + w - 1)));
  }
}
"
30001468,"public static void main(String[] args){
  R1C_A r=new R1C_A();
  Scanner sc=new Scanner(System.in);
  r.map=new int[11][11];
  for (int i=1; i < 11; i++) {
    for (int j=1; j <= i; j++) {
      if (j == 1 || j == i)       r.map[i][j]=i;
 else       if (j >= i / 2 + i % 2)       r.map[i][j]=j + 1;
 else       r.map[i][j]=r.map[i - j][j] + 1;
    }
  }
  int t=sc.nextInt();
  for (int test=1; test <= t; test++) {
    r.r=sc.nextInt();
    r.c=sc.nextInt();
    r.w=sc.nextInt();
    System.out.println(""case #"" + test + "": ""+ r.map[r.c][r.w]);
  }
  sc.close();
}
"
30001469,"public static void main(String[] args){
  try {
    BufferedReader br=new BufferedReader(new FileReader(""A-small-attempt0.in""));
    BufferedWriter bw=new BufferedWriter(new FileWriter(""A-small-attempt0.out""));
    int numCases=Integer.parseInt(br.readLine());
    int casectr=1;
    for (int c=0; c < numCases; c++, casectr++) {
      String[] line=br.readLine().split("" "");
      int row=Integer.parseInt(line[0]);
      int col=Integer.parseInt(line[1]);
      int width=Integer.parseInt(line[2]);
      int res=0;
switch (col) {
case 1:
        res=1;
      break;
case 2:
    res=2;
  break;
case 3:
res=3;
break;
case 4:
switch (width) {
case 1:
res=4;
break;
case 2:
res=3;
break;
case 3:
res=4;
break;
case 4:
res=4;
break;
}
break;
case 5:
switch (width) {
case 1:
res=5;
break;
case 2:
res=4;
break;
case 3:
res=4;
break;
case 4:
res=5;
break;
case 5:
res=5;
break;
}
break;
case 6:
switch (width) {
case 1:
res=6;
break;
case 2:
res=4;
break;
case 3:
res=4;
break;
case 4:
res=5;
break;
case 5:
res=6;
break;
case 6:
res=6;
break;
}
break;
case 7:
switch (width) {
case 1:
res=7;
break;
case 2:
res=5;
break;
case 3:
res=5;
break;
case 4:
res=5;
break;
case 5:
res=6;
break;
case 6:
res=7;
break;
case 7:
res=7;
break;
}
break;
case 8:
switch (width) {
case 1:
res=8;
break;
case 2:
res=5;
break;
case 3:
res=5;
break;
case 4:
res=5;
break;
case 5:
res=6;
break;
case 6:
res=7;
break;
case 7:
res=8;
break;
case 8:
res=8;
break;
}
break;
case 9:
switch (width) {
case 1:
res=9;
break;
case 2:
res=6;
break;
case 3:
res=5;
break;
case 4:
res=6;
break;
case 5:
res=6;
break;
case 6:
res=7;
break;
case 7:
res=8;
break;
case 8:
res=9;
break;
case 9:
res=9;
break;
}
break;
case 10:
switch (width) {
case 1:
res=10;
break;
case 2:
res=6;
break;
case 3:
res=6;
break;
case 4:
res=6;
break;
case 5:
res=6;
break;
case 6:
res=7;
break;
case 7:
res=8;
break;
case 8:
res=9;
break;
case 9:
res=10;
break;
case 10:
res=10;
break;
}
break;
}
bw.write(""Case #"" + casectr + "": ""+ res);
bw.newLine();
}
br.close();
bw.close();
}
 catch (FileNotFoundException e) {
e.printStackTrace();
}
catch (NumberFormatException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
}
"
30001470,"public static void main(String args[]) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  int cases=Integer.parseInt(br.readLine());
  for (int i=0; i < cases; i++) {
    System.out.print(""Case #"" + (i + 1) + "": "");
    StringTokenizer st=new StringTokenizer(br.readLine());
    int r=Integer.parseInt(st.nextToken());
    int t=Integer.parseInt(st.nextToken());
    int w=Integer.parseInt(st.nextToken());
    int answer=-1;
    int movesForFirstHit=0;
    int hitPosition=w;
    for (int i1=w; i1 <= t; i1+=w) {
      movesForFirstHit++;
      hitPosition=i1;
    }
    int movesToEliminateRows=movesForFirstHit * (r - 1);
    if (hitPosition == t) {
      answer=movesForFirstHit + movesToEliminateRows + (w - 1);
    }
 else {
      answer=movesForFirstHit + movesToEliminateRows + w;
    }
    System.out.println("""" + answer);
  }
}
"
30001471,"public static void main(String[] args) throws IOException {
  File fileIn=new File(""FILEIN.in"");
  PrintWriter writer=new PrintWriter(""FILEOUT.txt"",""UTF-8"");
  Scanner in=new Scanner(fileIn);
  int numCases=in.nextInt();
  for (int i=0; i < numCases; i++) {
    writer.printf(""Case #%d: "",i + 1);
    int R=in.nextInt();
    int C=in.nextInt();
    int W=in.nextInt();
    int min=(R) * (C / W);
    if (W < C && W > 1 && (C % W != 0) && (C != W))     min+=1;
    min+=W - 1;
    writer.println(min);
  }
  System.out.println(""DONE"");
  in.close();
  writer.close();
}
"
30001472,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""c:\\codejam2015\\a\\small.in""));
  PrintWriter out=new PrintWriter(new File(""c:\\codejam2015\\a\\small.out""));
  int numTests=in.nextInt();
  for (int i=1; i <= numTests; i++) {
    long start=System.currentTimeMillis();
    int r=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    System.out.println(""solving = "" + r + "", ""+ c+ "", ""+ w);
    solved=new boolean[c];
    Arrays.fill(solved,false);
    Queue<int[]> q=new LinkedList<int[]>();
    q.offer(new int[]{0,c - 1});
    int numHits=0;
    int max=c;
    while (max > w) {
      numHits++;
      max=max - w;
    }
    numHits=numHits * r;
    if (max == w) {
      numHits=numHits + (r - 1);
    }
    numHits=numHits + w;
    System.out.println(""numHits "" + numHits);
    out.println(""Case #"" + i + "": ""+ numHits);
  }
  out.close();
}
"
30001473,"public static void main(String args[]){
  if (args.length != 1) {
    System.out.println(""Please specify the input file"");
    return;
  }
  String filename=args[0];
  File f=new File(filename);
  BufferedReader br;
  if (!f.exists()) {
    System.out.println(""Couldn't find file "" + filename);
    return;
  }
 else   if (f.isDirectory()) {
    System.out.println(filename + "" is a directory"");
    return;
  }
  try {
    br=new BufferedReader(new FileReader(f));
    input=new Scanner(br);
  }
 catch (  IOException iox) {
    System.out.println(""Problem reading "" + filename);
  }
  try {
    output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filename + "".out""),""utf-8""));
    int T=input.nextInt();
    for (int caseNum=0; caseNum < T; caseNum++) {
      int R=input.nextInt();
      int C=input.nextInt();
      int W=input.nextInt();
      int clearCount=C / W;
      int hasExtra=C % W;
      int findCount=clearCount + (W - 1) + ((hasExtra != 0) ? 1 : 0);
      int result=clearCount * (R - 1) + findCount;
      output.write(""Case #"" + (caseNum + 1) + "": "");
      output.write("""" + result);
      output.write(""\n"");
    }
  }
 catch (  IOException ex) {
    System.out.println(""Couldn't open an output file"");
    return;
  }
  try {
    output.close();
    input.close();
  }
 catch (  IOException ex) {
  }
}
"
30001474,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new File(args[0]));
  File outFile=new File(args[1]);
  FileOutputStream os=new FileOutputStream(outFile);
  OutputStreamWriter osw=new OutputStreamWriter(os);
  Writer w=new BufferedWriter(osw);
  int cases=sc.nextInt();
  for (int i=0; i < cases; ++i) {
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    int shots=(C / W) * R + W;
    if (C % W == 0) {
      --shots;
    }
    w.write(""Case #"" + Integer.toString(i + 1) + "": ""+ Integer.toString(shots)+ ""\n"");
  }
  w.close();
  sc.close();
}
"
30001475,"public static void main(String[] args){
  try {
    Scanner scanner=new Scanner(new FileReader(""A-small-attempt0.in""));
    int T=scanner.nextInt();
    int[] Rs=new int[T];
    int[] Cs=new int[T];
    int[] Ws=new int[T];
    for (int i=0; i < T; i++) {
      Rs[i]=scanner.nextInt();
      Cs[i]=scanner.nextInt();
      Ws[i]=scanner.nextInt();
    }
    PrintWriter out=new PrintWriter(new FileWriter(""output1.txt""));
    for (int i=0; i < T; i++) {
      int count=Cs[i] / Ws[i];
      count+=Ws[i] - 1;
      if (Cs[i] % Ws[i] != 0) {
        count++;
      }
      count*=Rs[i];
      out.println(""Case #"" + (i + 1) + "": ""+ count);
    }
    out.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001476,"public static void main(String[] args){
  Scanner reader=new Scanner(System.in);
  int testCases=reader.nextInt();
  for (int t=0; t < testCases; t++) {
    int r=reader.nextInt();
    int c=reader.nextInt();
    int w=reader.nextInt();
    int answer=c / w;
    answer*=r;
    answer+=w - 1;
    if (c % w > 0) {
      answer++;
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ answer);
  }
  reader.close();
}
"
30001477,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(a.class.getResourceAsStream(""a-in.txt""));
  System.setOut(new PrintStream(""src/a-out.txt""));
  int testcases, testcase=1;
  testcases=in.nextInt();
  while (testcase <= testcases) {
    int r=in.nextInt(), c=in.nextInt(), w=in.nextInt();
    int ans=(r - 1) * ((c - 1) / w + 1);
    if (c > 2 * w - 1) {
      ans+=((c - 1) / w + w);
    }
 else     if (c > w) {
      ans+=(w + 1);
    }
 else {
      ans+=w;
    }
    System.out.println(""Case #"" + testcase + "": ""+ ans);
    testcase++;
  }
}
"
30001478,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new File(""A-large.in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""out.txt""));
  int testCases=sc.nextInt();
  for (int t=0; t < testCases; t++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    int res=0;
    res+=(c / w) * (r - 1);
    res+=(c / w - 1);
    res+=w + (c % w == 0 ? 0 : 1);
    out.write(""Case #"" + (t + 1) + "": ""+ res);
    out.newLine();
  }
  out.close();
}
"
30001479,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new FileReader(NAME));
  BufferedWriter bw=new BufferedWriter(new FileWriter(OUTNAME));
  String output="""";
  int cases=Integer.valueOf(sc.nextLine());
  for (int c=1; c <= cases; c++) {
    output+=""Case #"" + c + "": "";
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    int guess=0;
    int totalCells=R * C;
    if (totalCells % W == 0) {
      guess=totalCells / W + (W - 1);
    }
 else {
      guess=totalCells / W + (W);
    }
    output+=guess + ""\n"";
    if (sc.hasNext())     sc.nextLine();
  }
  bw.write(output);
  bw.close();
}
"
30001480,"public static void main(String[] args) throws IOException {
  Scanner scan=new Scanner(System.in);
  BufferedWriter out=new BufferedWriter(new FileWriter(""out.txt""));
  int T=scan.nextInt();
  for (int i11=1; i11 <= T; i11++) {
    int r=scan.nextInt(), c=scan.nextInt(), w=scan.nextInt();
    out.write(""Case #"" + i11 + "": ""+ getAns(r,c,w)+ ""\n"");
  }
  scan.close();
  out.close();
}
"
30001481,"public static void main(String[] args) throws Exception {
  BufferedReader reader=new BufferedReader(new FileReader(args[0]));
  BufferedWriter writer=new BufferedWriter(new FileWriter(args[0].substring(0,args[0].length() - 2) + ""out""));
  int testCases=Integer.parseInt(reader.readLine());
  System.out.println(""Test cases: "" + testCases);
  for (int test=0; test < testCases; test++) {
    String[] splitLine=reader.readLine().split("" "");
    int R=Integer.parseInt(splitLine[0]);
    int C=Integer.parseInt(splitLine[1]);
    double W=Double.parseDouble(splitLine[2]);
    int cells=R * C;
    int fuller=(int)Math.floor(C / W);
    int completeFuller=fuller * R;
    int res=(int)(completeFuller + (W - 1) + (C % W == 0 ? 0 : 1));
    writer.write(""Case #"" + (test + 1) + "": ""+ res+ ""\n"");
    System.out.println(""Case #"" + (test + 1) + "": ""+ res+ ""\n"");
  }
  reader.close();
  writer.flush();
  writer.close();
}
"
30001482,"public static void main(String... args) throws Exception {
  Scanner input=new Scanner(new File(""A-small-attempt2.in""));
  int numCases=input.nextInt();
  System.setOut(new PrintStream(""a2.out""));
  for (int n=0; n < numCases; n++) {
    int r=input.nextInt();
    int c=input.nextInt();
    int w=input.nextInt();
    int num=0;
    if (r * c / w != 1) {
      num=(r * c) / w + w - 1;
      if ((r * c) % w != 0)       num++;
    }
 else {
      num=w + 1;
    }
    if (num > r * c)     num=r * c;
    System.out.printf(""Case #%d: %d\n"",n + 1,num);
  }
}
"
30001483,"public static void main(String[] args) throws Exception {
  String out="""";
  Scanner in=new Scanner(new FileReader(""./A-large.in""));
  int numCases=in.nextInt();
  for (int caseNum=1; caseNum <= numCases; caseNum++) {
    out+=""Case #"" + caseNum + "": "";
    int r=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    if (r == 1) {
      if (c == w || w == 1 || c - w == 1)       out+=c + ""\n"";
 else {
        int ans=c;
        int count=0;
        while (ans >= 2 * w) {
          ans-=w;
          count++;
        }
        if (ans > w)         count++;
        count+=w;
        out+=count + ""\n"";
      }
    }
 else {
      if (c == w) {
        int ans=c + (r - 1);
        out+=ans + ""\n"";
      }
 else       if (c - w < w) {
        int ans=w + 1 + (r - 1);
        out+=ans + ""\n"";
      }
 else       if (w == 1) {
        int ans=c * r;
        out+=ans + ""\n"";
      }
 else {
        int ans=c;
        int count=0;
        while (ans >= 2 * w) {
          ans-=w;
          count++;
        }
        count++;
        count*=r;
        if (ans == w)         count--;
        count+=w;
        out+=count + ""\n"";
      }
    }
  }
  in.close();
  try (BufferedWriter bw=new BufferedWriter(new FileWriter(""./A-large.out""))){
    bw.write(out);
  }
 }
"
30001484,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""C:/users/abhishek/Desktop/abhi.txt""));
  FileWriter f=new FileWriter(""C:/users/abhishek/Desktop/output.txt"");
  String newLine=System.getProperty(""line.separator"");
  int t=Integer.parseInt(br.readLine());
  for (int test=1; test <= t; test++) {
    StringTokenizer st=new StringTokenizer(br.readLine());
    int r=Integer.parseInt(st.nextToken());
    int c=Integer.parseInt(st.nextToken());
    int w=Integer.parseInt(st.nextToken());
    int ans=(c / w) * r;
    if (c % w == 0)     f.write(""Case #"" + test + "": ""+ (ans + w - 1)+ newLine);
 else     f.write(""Case #"" + test + "": ""+ (ans + w)+ newLine);
  }
  f.close();
}
"
30001485,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""src/"" + FILENAME + "".in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""src/"" + FILENAME + "".out""));
  Scanner sc=new Scanner(in);
  int t=sc.nextInt();
  for (int tt=1; tt <= t; tt++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    int ret=(r - 1) * (c / w);
    if ((c / w) * w == c) {
      ret+=c / w - 1 + w;
    }
 else {
      ret+=c / w + w;
    }
    out.write(""Case #"" + tt + "": ""+ ret+ ""\n"");
  }
  in.close();
  out.close();
}
"
30001486,"public static void main(String args[]) throws FileNotFoundException, UnsupportedEncodingException {
  B main=new B();
  Scanner scan=new Scanner(new File(""A-large.in""));
  int T=Integer.parseInt(scan.nextLine());
  PrintWriter writer=new PrintWriter(""Alarge.out"",""UTF-8"");
  for (int cas=1; cas <= T; cas++) {
    String[] s=scan.nextLine().split("" "");
    int R=Integer.parseInt(s[0]);
    int C=Integer.parseInt(s[1]);
    int W=Integer.parseInt(s[2]);
    int nBlanks=C / W - 1;
    int over=C % W;
    int nPerRow=0;
    if (over == 0) {
      nPerRow=nBlanks + W;
    }
 else {
      nPerRow=nBlanks + W + 1;
    }
    int answer=(C / W) * (R - 1) + nPerRow;
    writer.println(""Case #"" + cas + "": ""+ answer);
    System.out.println(""Case #"" + cas + "": ""+ answer);
  }
  writer.close();
}
"
30001487,"public static void main(String[] args) throws IOException, FileNotFoundException {
  Scanner in=new Scanner(new FileReader(""A-large (2).in""));
  FileWriter fw=new FileWriter(""outputTest.txt"");
  BufferedWriter bw=new BufferedWriter(fw);
  int T=in.nextInt();
  for (int t=0; t < T; t++) {
    int R=in.nextInt();
    int C=in.nextInt();
    int W=in.nextInt();
    int discoverCost=C / W;
    int lastChange=C % W;
    int output=(lastChange == 0 ? 0 : 1) + discoverCost * R + W - 1;
    bw.write(""Case #"" + (t + 1) + "": ""+ output+ ""\n"");
  }
  bw.close();
}
"
30001488,"public static void main(String[] args) throws FileNotFoundException {
  File file=new File(""A-large.in"");
  Scanner stdin=new Scanner(file);
  int numCases=stdin.nextInt();
  for (int i=1; i <= numCases; i++) {
  }
}
"
30001489,"public static void main(String args[]) throws Exception {
  BufferedReader input=new BufferedReader(new FileReader(""../GoogleCodeJam2015R1C/io/A-large.in""));
  pw=new PrintWriter(new FileWriter(""../GoogleCodeJam2015R1C/io/output.txt""));
  int T=Integer.parseInt(input.readLine());
  for (int i=0; i < T; i++) {
    String[] s=input.readLine().split("" "");
    int R=Integer.parseInt(s[0]);
    int C=Integer.parseInt(s[1]);
    int W=Integer.parseInt(s[2]);
    if (C % W == 0) {
      pw.println(""Case #"" + (i + 1) + "": ""+ ((C / W) * (R - 1) + ((C / W) + (W - 1))));
    }
 else {
      pw.println(""Case #"" + (i + 1) + "": ""+ ((C / W) * (R - 1) + (C / W) + W));
    }
  }
  pw.flush();
  input.close();
  pw.close();
}
"
30001490,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=null;
  PrintStream out=null;
  try {
    in=new Scanner(new File(STAGE + "".in""));
    out=new PrintStream(new File(STAGE + "".out""));
    int t=in.nextInt();
    int caseNumber=1;
    while (caseNumber <= t) {
      int r=in.nextInt();
      int c=in.nextInt();
      int w=in.nextInt();
      out.println(""Case #"" + caseNumber++ + "": ""+ solve(r,c,w));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
}
"
30001491,"public static void main(String[] args){
  R20151C_A r=new R20151C_A();
  File folder=new File(r.getClass().getSimpleName() + ""_cases"");
  File inFolder=new File(r.getClass().getSimpleName() + ""_cases"" + ""/in"");
  File outFolder=new File(r.getClass().getSimpleName() + ""_cases"" + ""/out"");
  if (!folder.isDirectory()) {
    folder.mkdir();
  }
  if (!outFolder.isDirectory()) {
    outFolder.mkdir();
  }
  if (!inFolder.isDirectory()) {
    inFolder.mkdir();
  }
  for (  String in : inFolder.list()) {
    String fileNameCore=in.replace("".in"","""");
    String outFileName=fileNameCore + "".out"";
    PrintStream ps=null;
    Scanner s=null;
    try {
      File inFile=new File(r.getClass().getSimpleName() + ""_cases"" + ""/in""+ ""/""+ in);
      File outFile=new File(r.getClass().getSimpleName() + ""_cases"" + ""/out""+ ""/""+ outFileName);
      ps=new PrintStream(outFile);
      s=new Scanner(inFile);
      r.t=s.nextInt();
      for (int i=0; i < r.t; i++) {
        ps.print(""Case #"" + (i + 1) + "": "");
        r.R=s.nextInt();
        r.C=s.nextInt();
        r.W=s.nextInt();
        r.m=(r.C / r.W) * (r.R - 1);
        r.m+=Math.max(((r.C - 1) / r.W) - 1,0);
        r.m+=r.W + (r.W == r.C ? 0 : 1);
        ps.println(r.m);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      if (s != null) {
        s.close();
      }
      if (ps != null) {
        ps.close();
      }
    }
  }
}
"
30001492,"public static void main(String args[]) throws IOException {
  String co;
  String str[];
  int n, ans, r, c, w;
  File f=new File(""C:\\file\\code jam\\q1.txt"");
  FileInputStream fi=new FileInputStream(f);
  BufferedReader br=new BufferedReader(new InputStreamReader(fi));
  File fa=new File(""C:\\file\\code jam\\ans1.txt"");
  FileOutputStream fo=new FileOutputStream(fa);
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(fo));
  n=Integer.parseInt(br.readLine());
  for (int i=1; i <= n; i++) {
    str=br.readLine().split("" "");
    r=Integer.parseInt(str[0]);
    c=Integer.parseInt(str[1]);
    w=Integer.parseInt(str[2]);
    float mid=(float)c / (float)w;
    mid=(float)Math.ceil(mid);
    if (w == c) {
      ans=w;
    }
 else {
      ans=(int)(mid + w - 1);
    }
    System.out.println(""Case #"" + i + "": ""+ ans);
    bw.write(""Case #"" + i + "": ""+ ans);
    bw.newLine();
  }
  bw.close();
}
"
30001493,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int t=0; t < T; t++) {
    int row=sc.nextInt();
    int column=sc.nextInt();
    int width=sc.nextInt();
    int ans=0;
    ans+=(column / width) * row;
    ans+=(width - 1);
    if (column % width != 0) {
      ans++;
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ ans);
  }
  sc.close();
}
"
30001494,"public static void main(String[] args) throws Exception {
  String path=""C:\\Users\\Ziming\\Downloads\\"";
  String input=path + ""A-large.in"";
  String output=path + ""A-large.out"";
  List<String> inputLines=new ArrayList<String>();
  BufferedReader reader=new BufferedReader(new FileReader(input));
  String line=reader.readLine();
  while (line != null) {
    inputLines.add(line);
    line=reader.readLine();
  }
  reader.close();
  StringBuilder outputResult=new StringBuilder();
  int totalCase=Integer.parseInt(inputLines.get(0));
  inputLines.remove(0);
  for (int cn=0; cn < totalCase; cn++) {
    String caseResult="""";
    String ln=inputLines.get(0);
    inputLines.remove(0);
    String[] paramStrs=ln.split("" "");
    int R=Integer.parseInt(paramStrs[0]);
    int C=Integer.parseInt(paramStrs[1]);
    int W=Integer.parseInt(paramStrs[2]);
    if (W == 1) {
      caseResult=Integer.toString(R * C);
    }
 else {
      int s=0;
      s+=(C / W) * R - 1;
      int c=C - (C / W - 1) * W;
      int e=c - W;
      if (e > 0) {
        s+=1;
      }
      s+=W;
      caseResult=Integer.toString(s);
    }
    String outputLine=String.format(""Case #%d: %s"",cn + 1,caseResult);
    System.out.println(outputLine);
    if (outputResult.length() > 0) {
      outputResult.append(""\n"");
    }
    outputResult.append(outputLine);
  }
  PrintWriter writer=new PrintWriter(output);
  writer.print(outputResult.toString());
  writer.flush();
  writer.close();
  System.out.println(""program finished :)"");
}
"
30001495,"public static void main(String[] args){
  try {
    BufferedReader br=new BufferedReader(new FileReader(""/Users/mesuterhanunal/Desktop/in.txt""));
    BufferedWriter bw=new BufferedWriter(new FileWriter(""/Users/mesuterhanunal/Desktop/out.txt""));
    int testCase=Integer.parseInt(br.readLine());
    for (int i=0; i < testCase; i++) {
      String[] line=br.readLine().split(""\\s+"");
      int R=Integer.parseInt(line[0]), C=Integer.parseInt(line[1]), W=Integer.parseInt(line[2]);
      double Ratio=C / (1.00 * W);
      int toAdd=(int)Math.ceil(Ratio), Try=0;
      Try=W + toAdd - 1;
      Try*=R;
      bw.write(""Case #"" + (i + 1) + "": ""+ Try+ ""\n"");
    }
    br.close();
    bw.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001496,"public static void main(String args[]) throws Exception {
  A r=new A();
  r.sc.useLocale(Locale.US);
  r.out=new PrintStream(new FileOutputStream(A.OUT));
  int t=r.sc.nextInt();
  for (int i=1; i <= t; i++) {
    r.sc.nextLine();
    r.out.print(""Case #"" + i + "": "");
    int R=r.sc.nextInt();
    int C=r.sc.nextInt();
    int W=r.sc.nextInt();
    int m=C / W;
    m=m * R;
    if (C % W != 0)     m++;
    m=m + (W - 1);
    r.out.print(m);
    r.out.println();
  }
  r.sc.close();
  r.out.close();
}
"
30001497,"public static void main(String args[]) throws IOException {
  Scanner scanner=new Scanner(new FileReader(inFile));
  int T=scanner.nextInt();
  FileWriter fw=new FileWriter(outFile);
  for (int t=1; t <= T; ++t) {
    int r=scanner.nextInt();
    int c=scanner.nextInt();
    int w=scanner.nextInt();
    fw.write(String.format(""Case #%d: %s\n"",t,solve(r,c,w)));
  }
  fw.close();
}
"
30001498,"public static void main(String[] args){
  int numInputs=input.nextInt();
  for (int i=0; i < numInputs; i++) {
    int R=input.nextInt();
    int C=input.nextInt();
    int W=input.nextInt();
    int result;
    if ((W <= C / 2 && C % W == 0) || W == C) {
      result=C / W * R + W - 1;
    }
 else {
      result=C / W * R + W;
    }
    int r=result;
    System.out.println(""Case #"" + (i + 1) + "": ""+ r);
  }
}
"
30001499,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int numCases=scan.nextInt();
  for (int caseNum=1; caseNum <= numCases; caseNum++) {
    int numRows=scan.nextInt();
    int numCols=scan.nextInt();
    int shipWidth=scan.nextInt();
    System.out.print(""Case #"" + caseNum + "": "");
    int findInRowMin=numCols / shipWidth;
    int finishShip=shipWidth - (numCols % shipWidth == 0 ? 1 : 0);
    System.out.println(numRows * findInRowMin + finishShip);
  }
}
"
30001500,"public static void main(String[] args){
  A r=new A();
  try {
    BufferedReader in=new BufferedReader(new FileReader(args[0]));
    PrintStream out=new PrintStream(args[0] + "".out"");
    int CASES=Integer.parseInt(in.readLine());
    for (int CASE=1; CASE <= CASES; CASE++) {
      String[] words=in.readLine().split("" "");
      int[] ret=new int[words.length];
      for (int i=0; i < words.length; i++)       ret[i]=Integer.parseInt(words[i]);
      int[] input=ret;
      int R=input[0];
      int C=input[1];
      int W=input[2];
      int val=R * C / W + (C % W == 0 ? 0 : 1) + W - 1;
      out.printf(""Case #%d: %d\n"",CASE,val);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
"
30001501,"public static void main(String[] args) throws Throwable {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
  StringTokenizer tokenizer=new StringTokenizer(in.readLine());
  int tn=Integer.parseInt(tokenizer.nextToken());
  for (int test=1; test <= tn; test++) {
    tokenizer=new StringTokenizer(in.readLine());
    int r=Integer.parseInt(tokenizer.nextToken());
    int c=Integer.parseInt(tokenizer.nextToken());
    int w=Integer.parseInt(tokenizer.nextToken());
    int res=c / w;
    res*=r;
    if (c % w != 0) {
      res++;
    }
    res+=w - 1;
    out.print(""Case #"" + test + "": ""+ res);
    if (test < tn) {
      out.println();
    }
  }
  in.close();
  out.close();
}
"
30001502,"public static void main(String[] args) throws FileNotFoundException, IOException {
  String file=""small1.in"";
  try (BufferedReader br=new BufferedReader(new FileReader(file))){
    String line;
    Integer N=Integer.parseInt(br.readLine());
    for (int n=0; n < N; n++) {
      String[] RCW=br.readLine().split("" "");
      Integer R=Integer.parseInt(RCW[0]);
      Integer C=Integer.parseInt(RCW[1]);
      Integer W=Integer.parseInt(RCW[2]);
      int guess_per_row=C / W;
      int last=((C / W) + W - 1) + ((R - 1) * guess_per_row);
      if (C % W != 0)       last+=1;
      System.out.println(""Case #"" + (n + 1) + "": ""+ last);
    }
  }
 }
"
30001503,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  for (int i=1; i <= t; i++) {
    int r=s.nextInt();
    int c=s.nextInt();
    int w=s.nextInt();
    int result=0;
    if (r > 1) {
      result=(r - 1) * (c / w);
    }
    result+=(c - w) / w;
    if ((c - w) % w != 0) {
      result++;
    }
    result+=w;
    System.out.println(""Case #"" + i + "": ""+ result);
  }
}
"
30001504,"public static void main(String[] args){
  int tests=scanner.nextInt();
  for (int t=1; t <= tests; t++) {
    int r=scanner.nextInt();
    int c=scanner.nextInt();
    int w=scanner.nextInt();
    int res=c / w * (r - 1);
    res+=c / w;
    if (c % w == 0) {
      res+=w - 1;
    }
 else {
      res+=w;
    }
    writer.println(""Case #"" + t + "": ""+ res);
  }
  writer.close();
}
"
30001505,"public static void main(String[] args) throws IOException {
  BufferedInputStream bis=new BufferedInputStream(new FileInputStream(""A-large.in""));
  BufferedReader br=new BufferedReader(new InputStreamReader(bis));
  PrintWriter out=new PrintWriter(new File(""A-large.out""));
  StringTokenizer st;
  int cases=Integer.parseInt(br.readLine().trim()), R, C, W;
  for (int c=1; c <= cases; c++) {
    st=new StringTokenizer(br.readLine());
    R=Integer.parseInt(st.nextToken());
    C=Integer.parseInt(st.nextToken());
    W=Integer.parseInt(st.nextToken());
    int res=(R - 1) * (C / W) + (C / W + W + (C % W == 0 ? -1 : 0));
    out.println(""Case #"" + c + "": ""+ res);
  }
  out.close();
}
"
30001506,"public static void main(String[] args) throws Exception {
  String directory=""D:\\Work\\eclipse\\workspace\\CodeJam2015\\src\\round1c\\q1\\"";
  String fileName=""A-large"";
  File file=new File(directory + fileName + "".in"");
  File outFile=new File(directory + fileName + "".out"");
  BufferedReader br=new BufferedReader(new FileReader(file));
  BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
  int testCases=Integer.parseInt(br.readLine());
  for (int t=1; t <= testCases; t++) {
    String input1=br.readLine();
    String[] arr1=input1.split("" "");
    R=Integer.parseInt(arr1[0]);
    C=Integer.parseInt(arr1[1]);
    W=Integer.parseInt(arr1[2]);
    int fmove=C / W;
    int smove=W;
    if (C % W == 0) {
      smove--;
    }
    int bmove=(C / W) * (R - 1);
    int total=bmove + fmove + smove;
    String answer=total + """";
    String response=""Case #"" + t + "": ""+ answer+ ""\n"";
    bw.write(response);
  }
  br.close();
  bw.close();
}
"
30001507,"private int compute(){
  int firstHit=C / W * R;
  return firstHit + (W - 1) + ((C % W == 0) ? 0 : 1);
}
"
30001508,"public static void main(String[] args) throws Exception {
  Solution r=new Solution();
  Scanner sc=new Scanner(new FileReader(""input.txt""));
  PrintWriter pw=new PrintWriter(new FileWriter(""output.txt""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    int R=sc.nextInt();
    int C=sc.nextInt();
    int W=sc.nextInt();
    int rawChecks=C / W;
    int res=(R - 1) * rawChecks;
    if (C % W == 0) {
      res+=rawChecks + W - 1;
    }
 else {
      res+=rawChecks + W;
    }
    pw.println(res);
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30001509,"public static void main(String[] args){
  String root_path=""C:/Vijay/Workspaces/GoogleCodeJam/"";
  String fileName=root_path + ""inputFiles/2015/Brattleship/A-small-attempt0"";
  String inputFileName=fileName + "".in"";
  String outputFileName=fileName + ""_out.txt"";
  try (Scanner reader=new Scanner(new BufferedReader(new FileReader(inputFileName)));BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFileName),""utf-8""))){
    int T=reader.nextInt();
    for (int caseN=1; caseN <= T; caseN++) {
      int R=reader.nextInt();
      int C=reader.nextInt();
      int W=reader.nextInt();
      int R1=R;
      int result1=0;
      R1=1;
      int d=C - W;
      int a=0;
      if (d > 0) {
        a=d / W;
        int b=d % W;
        if (b > 0)         a++;
      }
      result1=a + W;
      int result=result1;
      writer.write(""Case #"" + caseN + "": ""+ result);
      writer.newLine();
    }
  }
 catch (  IOException ex) {
    System.out.println(""Exception:"" + ex.getMessage());
  }
  System.out.println(""Done executing"");
}
"
30001510,"public static void main(String[] args) throws FileNotFoundException {
  File f1=new File(""1C-Ain"");
  File f2=new File(""1C-Aout"");
  Scanner read=new Scanner(f1);
  PrintWriter write=new PrintWriter(f2);
  int limit=read.nextInt();
  for (int l=1; l <= limit; l++) {
    int r=read.nextInt();
    int c=read.nextInt();
    int w=read.nextInt();
    int total=w;
    total+=(c - 1) / w * r;
    if (w == 1)     total=r * c;
    write.println(""Case #"" + l + "": ""+ total);
  }
  write.close();
}
"
30001511,"public static void main(String... args){
  @SuppressWarnings(""resource"") Scanner in=new Scanner(System.in);
  int caseCount=in.nextInt();
  for (int caseValue=1; caseValue <= caseCount; caseValue++) {
    int R=in.nextInt();
    int C=in.nextInt();
    int W=in.nextInt();
    int result=0;
    int eliminateR=R - 1;
    if (eliminateR > 0) {
      result+=eliminateR * (Math.max(1,C / W));
    }
    int c=C;
    while (c > 2 * W - 1) {
      result++;
      c-=W;
    }
    if (c == W) {
      result+=W;
    }
 else     if (c == W + 1) {
      result+=W + 1;
    }
 else     if (c == W + 2) {
      result+=W + 1;
    }
 else     if (c == W + 3) {
      result+=W + 1;
    }
 else {
      result+=W + 1;
    }
    System.out.println(""Case #"" + caseValue + "": ""+ result);
  }
}
"
30001512,"public static void main(String[] args) throws Exception {
  String name=""A-large"";
  String path="""";
  Locale.setDefault(Locale.US);
  Scanner sc=new Scanner(new File(path + name + "".in""));
  PrintWriter pw=new PrintWriter(path + name + ""ans.out"");
  int testCases=sc.nextInt();
  for (int testCase=1; testCase <= testCases; testCase++) {
    int res=0;
    int fres=0;
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    if (c / w < 2 && c % w != 0)     res=w + 1;
 else {
      if (c / w == 1)       res=w;
 else {
        int fix=(c / w) - 1;
        int rem=c - (w * fix);
        if (rem / w < 2 && c % w != 0)         res=fix + w + 1;
 else         res=fix + w;
      }
    }
    fres=(c / w) * (r - 1) + res;
    System.out.println(""testcase:"" + testCase + "" ""+ fres);
    pw.printf(""Case #"" + testCase + "": ""+ fres+ ""\n"");
    pw.flush();
  }
  pw.close();
  sc.close();
}
"
30001513,"public static void main(String[] args) throws IOException {
  BufferedReader br=null;
  PrintWriter pw=new PrintWriter(""output.txt"");
  String line;
  int maxCaseNum=0;
  br=new BufferedReader(new FileReader(""input.txt""));
  maxCaseNum=Integer.valueOf(br.readLine());
  for (int caseIdx=1; caseIdx <= maxCaseNum; caseIdx++) {
    line=br.readLine();
    String[] array=line.split("" "");
    int row=Integer.valueOf(array[0]);
    int col=Integer.valueOf(array[1]);
    int shipW=Integer.valueOf(array[2]);
    int ans=0;
    if (col == shipW)     ans=row * col;
 else     if (shipW == 1)     ans=row * col;
 else {
      if (col % shipW == 0) {
        ans=((col / shipW) + (shipW - 1)) * row;
      }
 else {
        ans=((col / shipW) + (shipW - 1) + 1) * row;
      }
    }
    System.out.println(""Case #"" + caseIdx + "": ""+ ans);
    pw.println(""Case #"" + caseIdx + "": ""+ ans);
  }
  br.close();
  pw.close();
  System.out.println(""Done"");
}
"
30001514,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new File(""A-large.in""));
  PrintWriter out=new PrintWriter(new File(""outputALarge.txt""));
  int t=in.nextInt();
  for (int testn=1; testn <= t; testn++) {
    int R=in.nextInt();
    int C=in.nextInt();
    int W=in.nextInt();
    int ans=(R - 1) * (C / W);
    if (C % W == 0)     ans+=(C / W) + W - 1;
 else     ans+=(C / W) + W;
    out.println(""Case #"" + testn + "": ""+ ans);
  }
  in.close();
  out.close();
}
"
30001515,"public static void main(String[] args){
  try {
    Scanner in=new Scanner(new BufferedReader(new FileReader(inname)));
    BufferedWriter out=new BufferedWriter(new FileWriter(outname));
    int t=in.nextInt();
    in.nextLine();
    for (int cas=1; cas <= t; cas++) {
      int r=in.nextInt();
      int c=in.nextInt();
      int w=in.nextInt();
      int ans1=0;
      ans1+=Math.min(c % w,1) + w + c / w - 1;
      if (r > 1)       ans1+=(r - 1) * (c / w);
      int ans=ans1;
      System.out.print(""Case #"" + cas + "": ""+ ans+ ""\n"");
      out.write(""Case #"" + cas + "": ""+ ans+ ""\n"");
    }
    in.close();
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001516,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  StringBuilder out=new StringBuilder();
  int t=Integer.parseInt(br.readLine());
  for (int k=1; k <= t; k++) {
    StringTokenizer st=new StringTokenizer(br.readLine());
    int r=Integer.parseInt(st.nextToken());
    int c=Integer.parseInt(st.nextToken());
    int w=Integer.parseInt(st.nextToken());
    int n=r * c / w;
    n+=w;
    if (c % w == 0)     n--;
    out.append(""Case #"" + k + "": ""+ n+ ""\n"");
  }
  System.out.print(out);
}
"
30001517,"public static void main(String[] args){
  try {
    Scanner sc=new Scanner(new FileInputStream(new File(""A-large.in"")));
    BufferedWriter bos=new BufferedWriter(new FileWriter(new File(""A-large.out"")));
    int cNum=Integer.parseInt(sc.nextLine());
    for (int i=0; i < cNum; i++) {
      String[] nums=sc.nextLine().split("" "");
      int R=Integer.parseInt(nums[0]);
      int C=Integer.parseInt(nums[1]);
      int W=Integer.parseInt(nums[2]);
      int optimal=(C / W) * R + W - 1;
      optimal+=C % W == 0 ? 0 : 1;
      bos.write(String.format(""Case #%d: %d\n"",i + 1,optimal));
      bos.flush();
    }
    sc.close();
    bos.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001518,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new FileInputStream(""test_codejam/a.in""));
  PrintWriter out=new PrintWriter(new FileOutputStream(""test_codejam/a.out""));
  int t=in.nextInt();
  int test=1;
  while (t-- > 0) {
    int r, c, w, answer=0;
    r=in.nextInt();
    c=in.nextInt();
    w=in.nextInt();
    int z=0;
    while (z < c) {
      z+=w;
      answer+=1;
    }
    out.println(""Case #"" + test + "": ""+ (answer * r + w - 1));
    test++;
  }
  out.close();
}
"
30001519,"public static void main(String[] args){
  Scanner scanIn=new Scanner(System.in);
  int T=scanIn.nextInt();
  for (int i=0; i < T; ++i) {
    Jam2015_1CA inst=new Jam2015_1CA();
    int r=scanIn.nextInt();
    int c=scanIn.nextInt();
    int w=scanIn.nextInt();
    int total=r * c;
    int ret1=0;
    ret1=r * (c / w);
    if (c % w == 0) {
      ret1+=w - 1;
    }
 else     if (w == 1) {
    }
 else {
      ret1+=w;
    }
    int ret=ret1;
    System.out.println(""Case #"" + (i + 1) + "": ""+ ret);
  }
  scanIn.close();
}
"
30001520,"public static void main(String[] args) throws IOException {
  Path input=Paths.get(""input.in"");
  Path output=Paths.get(""output.txt"");
  scanner=new Scanner(input);
  writer=Files.newBufferedWriter(output);
  int testCases=scanner.nextInt();
  for (int i=0; i < testCases; i++) {
    r=scanner.nextLong();
    c=scanner.nextLong();
    w=scanner.nextLong();
    long shipsPerRow=c / w;
    long minScore=0;
    for (long i1=0; i1 < r - 1; i1++) {
      minScore+=shipsPerRow;
    }
    long uncovered=c;
    while (uncovered > w) {
      uncovered-=w;
      minScore++;
    }
    if (uncovered == w) {
      minScore+=w;
    }
 else {
      minScore++;
      minScore+=(w - 1);
    }
    score=minScore;
    String out=String.format(""Case #%d: %d"",i + 1,score);
    System.err.println(out);
    writer.write(out);
    writer.newLine();
  }
  writer.close();
}
"
30001521,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new File(""A-large.in""));
  bw=new BufferedWriter(new FileWriter(new File(""output.txt"")));
  int tc=sc.nextInt();
  for (int d=1; d <= tc; d++) {
    bw.write(""Case #"" + String.valueOf(d) + "": "");
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    int points=(c / w) * r;
    if (w > 1) {
      points+=(w - 1);
      if (c % w > 0)       points+=1;
    }
    bw.write(String.valueOf(points));
    bw.newLine();
    bw.flush();
  }
  sc.close();
  bw.close();
}
"
30001522,"static int solve1(int r,int c,int w){
  if (c % w == 0)   return r * (c / w) + w - 1;
  return r * (c / w) + w;
}
"
30001523,"public A(final Scanner sc){
  super();
  this.input_R=sc.nextInt();
  this.input_C=sc.nextInt();
  this.input_W=sc.nextInt();
  long nb=this.input_C / this.input_W * this.input_R;
  nb+=this.input_W - 1;
  if (this.input_C % this.input_W != 0) {
    nb++;
  }
  this.output=String.valueOf(nb);
}
"
30001524,"public static void main(String[] args){
  try {
    System.setOut(new PrintStream(""src/output.out""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  Scanner in=null;
  try {
    in=new Scanner(new File(""src/A-small-attempt1 (2).in""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  int t=in.nextInt();
  for (int i=0; i < t; i++) {
    int res=0;
    int r=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    if (w == c) {
      res=c;
    }
 else {
      if (w == 1) {
        res=c;
      }
 else {
        int cheats=c / w;
        if (cheats <= 1) {
          res=w + 1;
        }
 else {
          if (c % w == 0) {
            res=w + cheats - 1;
          }
 else {
            res=w + cheats;
          }
        }
      }
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ res);
  }
}
"
30001525,"public static void main(String[] args) throws IOException {
  File file=new File(""A-small-attempt0.in.txt"");
  File outputFile=new File(""Brattleship.out"");
  BufferedWriter bw=new BufferedWriter(new FileWriter(outputFile));
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(file)));
  Long numberOfTestCases=Long.valueOf(br.readLine());
  Long count=(long)0;
  while (count++ < numberOfTestCases) {
    String line=br.readLine();
    String[] params=line.split("" "");
    int R=Integer.valueOf(params[0]);
    int C=Integer.valueOf(params[1]);
    int W=Integer.valueOf(params[2]);
    int singleRow=C / W + W - 1;
    if (C % W > 0) {
      singleRow++;
    }
    bw.write(""Case #"" + String.valueOf(count) + "": ""+ String.valueOf(R * singleRow));
    bw.newLine();
  }
  bw.close();
  br.close();
}
"
30001526,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws IOException {
  int cases;
  final String filename=""aA-large.in"";
  final String outFile=""aA-large.out"";
  String[] vals;
  StringBuilder str=new StringBuilder();
  String temp;
  try (BufferedReader reader=new BufferedReader(new FileReader(filename));BufferedWriter writer=new BufferedWriter(new FileWriter(outFile))){
    temp=reader.readLine();
    cases=Integer.valueOf(temp);
    for (int i=1; i <= cases; ++i) {
      temp=reader.readLine();
      vals=temp.split("" "");
      int R=Integer.parseInt(vals[0]);
      int C=Integer.parseInt(vals[1]);
      int W=Integer.parseInt(vals[2]);
      int sum=0;
      sum+=(C / W) * (R - 1);
      sum+=(C - W) / W;
      sum+=W;
      if (C % W != 0) {
        sum++;
      }
      str.append(""Case #"").append(i).append("": "").append(sum);
      System.out.println(str.toString());
      writer.write(str.toString());
      writer.newLine();
      str=new StringBuilder();
    }
  }
 }
"
30001527,"public TaskA(){
  caseNumber=1;
  try {
    output=new Formatter(""result.out"");
    input=new Scanner(new File(file));
  }
 catch (  Exception ex) {
    System.out.print(ex.getMessage() + ""/n"");
  }
}
"
30001528,"public static void main(String[] args){
  try (BufferedReader br=new BufferedReader(new FileReader(""A-large.in""))){
    PrintWriter writer=new PrintWriter(""solution-A-large.output"",""UTF-8"");
    int T=0;
    String sCurrentLine=br.readLine();
    T=Integer.parseInt(sCurrentLine);
    String stringBuffer[]=null;
    int[] answers=new int[T];
    for (int testIntance=1; testIntance <= T; ++testIntance) {
      System.out.println(""inst: "" + testIntance);
      sCurrentLine=br.readLine();
      stringBuffer=sCurrentLine.split("" "");
      int R=Integer.parseInt(stringBuffer[0]);
      int C=Integer.parseInt(stringBuffer[1]);
      int W=Integer.parseInt(stringBuffer[2]);
      answers[testIntance - 1]=(int)(Math.floor(C / W) * R + W);
      if (C % W == 0) {
        answers[testIntance - 1]--;
      }
      System.out.println(""Case #"" + testIntance + "": ""+ answers[testIntance - 1]);
      writer.println(""Case #"" + testIntance + "": ""+ answers[testIntance - 1]);
    }
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001529,"public static void main(String[] args) throws NumberFormatException, IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(""input.txt""))){
    int TC=Integer.parseInt(br.readLine());
    for (int tc=1; tc <= TC; tc++) {
      String[] line=br.readLine().split("" "");
      int R=Integer.parseInt(line[0]);
      int C=Integer.parseInt(line[1]);
      int W=Integer.parseInt(line[2]);
      int ans=0;
      if (C == W)       ans=W;
 else {
        if (C % W == 0)         ans+=C / W - 1;
 else         ans+=C / W;
        ans+=W;
      }
      System.out.println(""Case #"" + tc + "": ""+ ans);
    }
  }
 }
"
30001530,"public static void main(String[] args) throws IOException {
  String root=""A-small-attempt0"";
  String fileName=""C:\\Users\\Aaron\\Downloads\\"" + root + "".in"";
  BufferedReader reader=new BufferedReader(new FileReader(new File(fileName)));
  int nTestCases=Integer.parseInt(reader.readLine());
  ArrayList<String> out=new ArrayList<String>();
  for (int t=0; t < nTestCases; t++) {
    String[] bn=reader.readLine().split("" "");
    int r=Integer.parseInt(bn[0]);
    int c=Integer.parseInt(bn[1]);
    int w=Integer.parseInt(bn[2]);
    int[][] board=new int[r][c];
    for (    int[] b : board)     Arrays.fill(b,0);
    int ans=(c % w == 0) ? c / w : c / w + 1;
    ans+=(w - 1);
    System.out.println(""CASE "" + (t + 1) + "": ""+ ans);
    out.add(""Case #"" + (t + 1) + "": ""+ ans);
    System.out.println(""-----------------"");
  }
  PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(""C:\\Users\\Aaron\\Downloads\\"" + root + ""-SOL.out"")));
  for (  String s : out) {
    writer.write(s + ""\n"");
  }
  writer.close();
  reader.close();
}
"
30001531,"/** 
 * @param args: first arg - input file, second arg - output file
 */
public static void main(String[] args){
  if (args.length != 2) {
    System.out.println(""Missing parameters (2 required)"");
    System.out.println("" * parameter 1 - input file"");
    System.out.println("" * parameter 2 - output file"");
    return;
  }
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=new BufferedReader(new FileReader(args[0]));
    writer=new BufferedWriter(new FileWriter(args[1]));
    String s_t=reader.readLine();
    int t=Integer.valueOf(s_t).intValue();
    for (int i=1; i <= t; i++) {
      String line=reader.readLine();
      String[] vars=line.split("" "");
      int r=Integer.valueOf(vars[0]).intValue();
      int c=Integer.valueOf(vars[1]).intValue();
      int w=Integer.valueOf(vars[2]).intValue();
      int result=0;
      int perR=c / w;
      result=r * perR + w;
      if (c % w == 0) {
        result=result - 1;
      }
      writer.write(""Case #"" + i + "": ""+ result);
      writer.newLine();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (reader != null)       reader.close();
    }
 catch (    IOException e) {
    }
    try {
      if (writer != null)       writer.close();
    }
 catch (    IOException e) {
    }
  }
}
"
30001532,"public static void main(String[] s1) throws Exception {
  Main r=new Main();
  File out=new File(""output.txt"");
  Scanner in=new Scanner(new File(""input.txt""));
  PrintStream ostr=new PrintStream(new FileOutputStream(out));
  int T=in.nextInt();
  int N=0;
  while (N++ < T) {
    int r1=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    int result=(c / w) * r1 + w;
    if (c % w < 1)     result--;
    ostr.printf(""Case #%d: %d%n"",N,result);
  }
}
"
30001533,"public static void main(String[] args) throws Exception {
  A a=new A();
  Scanner sc=new Scanner(new FileReader(WORK_DIR + ""A-small.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(WORK_DIR + ""A-small.out""));
  int caseCnt=sc.nextInt();
  for (int caseNum=0; caseNum < caseCnt; caseNum++) {
    System.out.println(""Processing test case "" + (caseNum + 1));
    pw.print(""Case #"" + (caseNum + 1) + "": "");
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    if (w == 1) {
      pw.println(c);
    }
 else     if (w == c) {
      pw.println(w);
    }
 else {
      pw.println(((c - 1) / w) + w);
    }
  }
  pw.flush();
  pw.close();
  sc.close();
}
"
30001534,"public static void main(String[] args){
  try {
    Scanner scanner=new Scanner(new FileInputStream(inFile),encoding);
    BufferedWriter writer=new BufferedWriter(new FileWriter(outFile));
    int nCases=Integer.parseInt(scanner.nextLine());
    for (int i=0; i < nCases; i++) {
      System.out.println(""Case #"" + (i + 1) + "" start"");
      String[] caseValues=scanner.nextLine().split("" "");
      int R=Integer.parseInt(caseValues[0]), C=Integer.parseInt(caseValues[1]), W=Integer.parseInt(caseValues[2]);
      System.out.println("" R="" + R + "" C=""+ C+ "" W=""+ W);
      int score=R * (C / W) + W;
      if (C % W == 0)       score-=1;
      String val=String.valueOf(score);
      writer.write(""Case #"" + (i + 1) + "": ""+ val+ ""\n"");
      System.out.println(""Case #"" + (i + 1) + "" result: ""+ val);
    }
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
}
"
30001535,"public static void main(String[] args){
  try {
    in=new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    ins=new Scanner(System.in);
    out=new PrintWriter(System.out);
    try {
      if (System.getProperty(""xDx"") != null) {
        in=new StreamTokenizer(new BufferedReader(new FileReader(""input.txt"")));
        ins=new Scanner(new FileReader(""input.txt""));
        out=new PrintWriter(new FileWriter(""output.txt""));
      }
    }
 catch (    Exception e) {
      in=new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
      ins=new Scanner(System.in);
      out=new PrintWriter(System.out);
    }
    Main r=new Main();
    Main.in.nextToken();
    int T=(int)Main.in.nval;
    for (int i=0; i < T; i++) {
      int r1=r.nextInt(), c=r.nextInt(), w=r.nextInt();
      int answ=(c / w) * r1;
      answ+=(c % w > 0 ? w : w - 1);
      Main.out.printf(""Case #%d: %d\n"",i + 1,answ);
    }
    out.close();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}
"
30001536,"public static void main(String[] args) throws java.lang.Exception {
  BufferedReader in=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter out=new PrintWriter(""output.txt"");
  int t, x1, r, c, w, val, res;
  t=Integer.parseInt(in.readLine());
  for (x1=0; x1 < t; x1++) {
    StringTokenizer st1=new StringTokenizer(in.readLine());
    r=Integer.parseInt(st1.nextToken());
    c=Integer.parseInt(st1.nextToken());
    w=Integer.parseInt(st1.nextToken());
    val=c / w;
    res=r * val;
    res+=(w - 1);
    if (c % w != 0)     res+=1;
    if (w == 1)     res=r * c;
    out.println(""Case #"" + (x1 + 1) + "": ""+ res);
  }
  out.flush();
  out.close();
}
"
30001537,"private A(){
}
"
30001538,"/** 
 * @param args
 */
public static void main(String[] args){
  ArrayList<Long> TestCases;
  TestCases=new ArrayList<Long>();
  String fileName=""C:\\dev\\projects\\R3_1Ships\\src\\Example.txt"";
  try {
    InputStream in=new FileInputStream(new File(fileName));
    Scanner reader=new Scanner(in);
    int cntTests=reader.nextInt();
    for (int i=0; i < cntTests; i++) {
      System.out.println(""TEST NUMBER "" + i);
      long R=reader.nextInt();
      long C=reader.nextInt();
      long W=reader.nextInt();
      System.out.println(R + "" "" + C+ "" ""+ W);
      long result=0;
      result=C / W;
      result=result * R;
      if (C % W != 0) {
        result=result + 1;
      }
      result=result + (W - 1);
      TestCases.add(result);
      System.out.println(result);
    }
    reader.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  String outFileName=""C:\\dev\\projects\\R3_1Ships\\src\\output.txt"";
  try {
    File file=new File(outFileName);
    BufferedWriter output=new BufferedWriter(new FileWriter(file));
    for (int i=0; i < TestCases.size(); i++) {
      output.write(""Case #"" + (i + 1) + "": ""+ TestCases.get(i));
      output.newLine();
    }
    output.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  System.out.println(""Done"");
}
"
30001539,"public static void main(String[] abb){
  try {
    Scanner in=new Scanner(new File(""safia.in""));
    PrintWriter writer=new PrintWriter(""out2.in"",""UTF-8"");
    int testcase=in.nextInt();
    for (int q=0; q < testcase; q++) {
      int r=in.nextInt();
      int c=in.nextInt();
      int w=in.nextInt();
      int e=c % w;
      int out=0;
      out=(c / w) + w;
      if (w == 1) {
        out=c;
      }
 else {
        out=(c / w) + w;
        if (c % w == 0) {
          out--;
        }
      }
      writer.println(""Case #"" + (q + 1) + "": ""+ out);
    }
    writer.close();
  }
 catch (  IOException e) {
  }
}
"
30001540,"public static void main(String args[]){
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  for (int i=0; i < T; i++) {
    int R=scan.nextInt();
    int C=scan.nextInt();
    int W=scan.nextInt();
    int count=0;
    if (W == 1)     count=C * R;
 else {
      int prs=(int)Math.ceil((double)C / W);
      count=prs * R + W - 1;
    }
    System.out.printf(""Case #%d: %d\n"",i + 1,count);
  }
}
"
30001541,"public static void main(String[] args) throws Exception {
  Scanner input=new Scanner(new File(""in""));
  FileWriter output=new FileWriter(new File(""out""));
  int numCases=input.nextInt();
  for (int n=1; n <= numCases; n++) {
    int R=input.nextInt();
    int C=input.nextInt();
    int W=input.nextInt();
    int result=C / W;
    result=result * R;
    result=result + W;
    if (C % W == 0)     result--;
    System.out.print(""Case #"" + n + "": ""+ result+ ""\n"");
    output.write(""Case #"" + n + "": ""+ result+ ""\n"");
  }
  output.flush();
  output.close();
}
"
30001542,"public static void main(String[] args) throws IOException {
  int i, j, k;
  BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
  try {
    File file=new File(""aaa.out"");
    if (!file.exists()) {
      file.createNewFile();
    }
    FileWriter fw=new FileWriter(file.getAbsoluteFile());
    BufferedWriter bw=new BufferedWriter(fw);
    line=br.readLine();
    t=Integer.valueOf(line);
    for (i=0; i < t; i++) {
      line=br.readLine();
      row=line.split(""\\s"");
      r=Integer.valueOf(row[0]);
      c=Integer.valueOf(row[1]);
      w=Integer.valueOf(row[2]);
      debug=false;
      a=0;
      if (r == 1 && c == w) {
        a=w;
      }
 else       if (w == 1) {
        a=r * c;
      }
 else {
        j=c % w;
        k=c / w;
        if (j == 0) {
          a=k * (r - 1) + k + w - 1;
        }
 else {
          a=k * (r - 1) + k + w;
        }
      }
      if (debug)       System.out.println(""-------"");
      bw.write(""Case #"" + (i + 1) + "": ""+ a+ ""\n"");
    }
    bw.close();
  }
  finally {
    br.close();
  }
}
"
30001543,"public static void main(String[] args) throws IOException {
  File in=new File(""/Users/mafulafunk/Downloads/A-large.in"");
  PrintWriter out=new PrintWriter(""output.txt"");
  BufferedReader br=new BufferedReader(new FileReader(in));
  cases=Integer.valueOf(br.readLine());
  for (int i=1; i <= cases; i++) {
    String[] strArray=br.readLine().split("" "");
    long[] out1=new long[strArray.length];
    for (int i1=0; i1 < strArray.length; i1++) {
      out1[i1]=Integer.parseInt(strArray[i1]);
    }
    long[] line=out1;
    long rows=line[0];
    long cols=line[1];
    long sizeOfShip=line[2];
    long perLine=cols / sizeOfShip;
    long sinkTheShip=cols % sizeOfShip == 0 ? sizeOfShip - 1 : sizeOfShip;
    out.println(""Case #"" + i + "": ""+ (rows * perLine + sinkTheShip));
  }
  out.flush();
  out.close();
}
"
30001544,"public static void main(String[] args) throws Exception {
  BufferedReader reader=new BufferedReader(new FileReader(""resources/round1c/Brattleship/A-large.in""));
  int quantidadeTeste=Integer.parseInt(reader.readLine());
  int teste=1;
  while (teste <= quantidadeTeste) {
    String[] currentLine=reader.readLine().split("" "");
    int rows=Integer.parseInt(currentLine[0]);
    int columns=Integer.parseInt(currentLine[1]);
    int shipSize=Integer.parseInt(currentLine[2]);
    int fistHit=columns / shipSize * rows;
    int miss=columns % shipSize > 0 ? 1 : 0;
    int plays=fistHit + miss + shipSize - 1;
    System.out.println(""Case #"" + teste + "": ""+ plays);
    teste++;
  }
}
"
30001545,"public static void main(String[] args) throws FileNotFoundException {
  Scanner sc=new Scanner(new File(""input.txt""));
  PrintWriter pw=new PrintWriter(""OUTPUT.TXT"");
  int T=sc.nextInt();
  int r, c, w, rez;
  for (int t=0; t < T; ++t) {
    r=sc.nextInt();
    c=sc.nextInt();
    w=sc.nextInt();
    rez=c / w;
    rez*=r;
    rez+=w - 1;
    if (c % w > 0)     rez+=1;
    pw.println(""Case #"" + (t + 1) + "": ""+ rez);
  }
  pw.close();
}
"
30001546,"public static void main(String[] args) throws NumberFormatException, IOException {
  BufferedReader br=new BufferedReader(new FileReader(args[0]));
  int cases=Integer.parseInt(br.readLine());
  for (int i=0; i < cases; i++) {
    String in=br.readLine();
    String[] input=in.split("" "");
    int rows=Integer.parseInt(input[0]);
    int columns=Integer.parseInt(input[1]);
    int width=Integer.parseInt(input[2]);
    int moves=(columns / width) * rows + (width - 1);
    int nomiss=columns % width == 0 ? 0 : 1;
    moves+=nomiss;
    System.out.format(""Case #%d: %d\n"",i + 1,moves);
  }
}
"
30001547,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(FILE_NAME + "".in""));
  BufferedWriter out=new BufferedWriter(new FileWriter(FILE_NAME + "".out""));
  int t=Integer.parseInt(in.readLine());
  for (int c=1; c <= t; ++c) {
    String[] split=in.readLine().split("" "");
    int rows=Integer.parseInt(split[0]);
    int columns=Integer.parseInt(split[1]);
    int width=Integer.parseInt(split[2]);
    int turns=rows * (columns / width);
    if (columns % width > 0) {
      ++turns;
    }
    turns+=width - 1;
    String ans=String.format(""Case #%d: %d\n"",c,turns);
    out.write(ans);
    System.out.print(ans);
  }
  out.close();
}
"
30001548,"public static void main(String[] args) throws IOException {
  BufferedReader readTxt=new BufferedReader(new FileReader(new File(""A-large.in"")));
  String textLine="""";
  String str="""";
  while ((textLine=readTxt.readLine()) != null) {
    str+=textLine + "" "";
  }
  String[] strArray=str.split("" "");
  int[] numberArray=new int[strArray.length];
  for (int i=0; i < strArray.length; i++) {
    numberArray[i]=Integer.valueOf(strArray[i]);
  }
  int num=numberArray[0];
  int[] sum=new int[num + 1];
  for (int i=1; i <= num; i++) {
    int r=numberArray[(i - 1) * 3 + 1];
    int c=numberArray[(i - 1) * 3 + 2];
    int w=numberArray[(i - 1) * 3 + 3];
    if (c % w != 0) {
      sum[i]=r * (c / w) + w;
    }
 else     sum[i]=r * (c / w) + w - 1;
  }
  FileWriter fw=new FileWriter(""output.txt"");
  BufferedWriter bufw=new BufferedWriter(fw);
  for (int i=1; i <= num; i++) {
    bufw.write(""Case #"" + i + "": ""+ sum[i]);
    bufw.newLine();
    bufw.flush();
  }
  bufw.close();
}
"
30001549,"public static void main(String[] args){
  Scanner infile=null;
  try {
    infile=new Scanner(new File(""A-large.txt""));
  }
 catch (  FileNotFoundException e) {
    System.out.println(""File not found"");
  }
  int numCases=infile.nextInt();
  int row;
  int col;
  int width;
  int ret=0;
  int temp;
  for (int a=0; a < numCases; a++) {
    row=infile.nextInt();
    col=infile.nextInt();
    width=infile.nextInt();
    if (col % width == 0)     ret=width - 1;
 else     ret=width;
    temp=col / width;
    ret+=(temp * row);
    System.out.println(""Case #"" + (a + 1) + "": ""+ ret);
  }
}
"
30001550,"/** 
 * @param args
 */
public static void main(String[] args){
  int T, R, C, W, i, j, k;
  Scanner sca=new Scanner(System.in);
  T=Integer.parseInt(sca.next());
  int ans[]=new int[T];
  for (i=0; i < T; i++) {
    R=Integer.parseInt(sca.next());
    C=Integer.parseInt(sca.next());
    W=Integer.parseInt(sca.next());
    if (W == 1) {
      ans[i]=R * C;
    }
 else {
      if (C % W == 0)       ans[i]=R * (C / W) + W - 1;
 else {
        ans[i]=(int)(R * Math.floor(C / W) + W);
      }
    }
  }
  for (i=0; i < T; i++) {
    System.out.println(""Case #"" + (i + 1) + "": ""+ ans[i]);
  }
}
"
30001551,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  for (int t=0; t < T; t++) {
    int R=scan.nextInt();
    int C=scan.nextInt();
    int W=scan.nextInt();
    int result=C / W * R + (W - 1);
    if (C % W > 0) {
      result++;
    }
    System.out.println(""Case #"" + (t + 1) + "": ""+ result);
  }
}
"
30001552,"public static void main(String[] args) throws Exception {
  BufferedReader read=new BufferedReader(new InputStreamReader(System.in));
  int t=Integer.parseInt(read.readLine());
  int i=1;
  while (i <= t) {
    String str=read.readLine();
    String[] arr=str.split("" "");
    int r, c, w, ans=0;
    r=Integer.parseInt(arr[0]);
    c=Integer.parseInt(arr[1]);
    w=Integer.parseInt(arr[2]);
    if (c == w) {
      ans=c;
    }
 else     if (w == 1) {
      ans=c;
    }
 else {
      ans+=c / w;
      if (ans * w == c) {
        ans--;
      }
      ans+=w;
    }
    ans=ans * r;
    System.out.println(""Case #"" + i + "": ""+ ans);
    i++;
  }
}
"
30001553,"public static void main(String[] args){
  Happy r=new Happy();
  BufferedReader in=null;
  BufferedWriter out=null;
  try {
    in=new BufferedReader(new FileReader(""A-large.in""));
    out=new BufferedWriter(new FileWriter(""A-large.out""));
    int T=Integer.parseInt(in.readLine());
    System.out.println(""T="" + T);
    for (int i=0; i < T; i++) {
      System.out.print(""Case #"" + (i + 1) + "": "");
      out.write(""Case #"" + (i + 1) + "": "");
      String[] line=in.readLine().split("" "");
      int R=Integer.parseInt(line[0]);
      int C=Integer.parseInt(line[1]);
      int W=Integer.parseInt(line[2]);
      int ans=0;
      if (W == 1) {
        ans=C * R;
      }
 else       if (W == 2) {
        ans=ans + (C / W) * R;
        if (C % W == 0) {
          ans=ans + 1;
        }
 else {
          ans=ans + 2;
        }
      }
 else {
        ans=ans + (C / W) * R;
        int ret=C % W;
        if (ret == 0) {
          ans=ans + W - 1;
        }
 else {
          ans=ans + W - 1 + 1;
        }
      }
      System.out.print(ans + ""\n"");
      out.write(ans + ""\n"");
    }
    in.close();
    out.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    try {
      in.close();
      out.close();
    }
 catch (    Exception ee) {
      ee.printStackTrace();
    }
  }
  System.out.print(""Ha Ha :D\n"");
}
"
30001554,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(args[0]));
  PrintWriter out=new PrintWriter(args[1],""UTF-8"");
  int T=Integer.parseInt(br.readLine());
  for (int t=1; t <= T; ++t) {
    out.print(""Case #"" + t + "": "");
    StringTokenizer st=new StringTokenizer(br.readLine());
    int R=Integer.parseInt(st.nextToken());
    int C=Integer.parseInt(st.nextToken());
    int W=Integer.parseInt(st.nextToken());
    if (W == C)     out.println(W + R - 1);
 else     if (C < 2 * W)     out.println(R + W);
 else     if (C == 2 * W)     out.println(2 * R - 1 + W);
 else {
      int rem=C % W;
      if (rem == 0) {
        out.println((C * R) / W - 1 + W);
      }
 else {
        out.println((C / W) * R + W);
      }
    }
  }
  out.flush();
  out.close();
  System.exit(0);
}
"
30001555,"public static void main(String[] args) throws Exception {
  isStandardInput=true;
  output=new File(""test.out"");
  outputWriter=new FileWriter(output);
  out=new BufferedWriter(outputWriter);
  isStandardInput=false;
  input=new File(""A-large"" + "".in"");
  inputReader=new FileReader(input);
  in=new BufferedReader(inputReader);
  output=new File(""A-large"" + "".out"");
  outputWriter=new FileWriter(output);
  out=new BufferedWriter(outputWriter);
  int T=Integer.parseInt(TOKEN());
  for (int t=0; t < T; t++) {
    int R=Integer.parseInt(TOKEN());
    int C=Integer.parseInt(TOKEN());
    int W=Integer.parseInt(TOKEN());
    int answer=0;
    for (int i=0; i < R; i++) {
      answer+=C / W;
    }
    if (C % W != 0) {
      answer+=1;
    }
    answer+=(W - 1);
    String line=""Case #"" + (t + 1) + "": ""+ answer;
    out.write(line);
    out.write(""\n"");
    System.out.println(line);
  }
  if (in != null)   in.close();
  if (inputReader != null)   inputReader.close();
  if (out != null)   out.flush();
  if (out != null)   out.close();
  if (outputWriter != null)   outputWriter.close();
}
"
30001556,"public static void main(String[] args){
  try {
    BufferedReader reader=new BufferedReader(new FileReader(""A-small-attempt1.in""));
    String line1=null;
    List<String> lines1=new ArrayList<String>();
    while ((line1=reader.readLine()) != null) {
      lines1.add(line1);
    }
    reader.close();
    List<String> lines=lines1;
    List<String> outputLines=new ArrayList<String>();
    int index=0;
    int testCases=Integer.parseInt(lines.get(index++));
    for (int t=0; t < testCases; t++) {
      String line=lines.get(index++);
      String tokens[]=line.split("" "");
      int R=Integer.parseInt(tokens[0]);
      int C=Integer.parseInt(tokens[1]);
      int W=Integer.parseInt(tokens[2]);
      int count=0;
      if (C % W == 0) {
        count=C / W - 1;
        int x=W;
        count=count + x;
      }
 else {
        count=C / W - 1;
        int x=W + 1;
        count=count + x;
      }
      Object result=R * count;
      String testCaseOutput=""Case #"" + (t + 1) + "": ""+ result;
      System.out.println(testCaseOutput);
      outputLines.add(testCaseOutput);
    }
    StringBuilder strValue=new StringBuilder("""");
    if (outputLines != null) {
      int i=0;
      for (      Object v : outputLines) {
        String value=v.toString();
        if (i == 0) {
          strValue.append(value);
        }
 else {
          strValue.append(""\n"");
          strValue.append(value);
        }
        i++;
      }
    }
    String output=strValue.toString();
    FileWriter writer=new FileWriter(""A-small-attempt1.in"".replace("".in"","".out""));
    writer.write(output);
    writer.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
"
30001557,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(new File(args[0])));
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(args[1]))));
  int iterationsNum=Integer.parseInt(br.readLine());
  for (int i=0; i < iterationsNum; ++i) {
    String[] parameters=br.readLine().split(""\\s+"");
    long Rows=Long.parseLong(parameters[0]);
    long Columns=Long.parseLong(parameters[1]);
    long Width=Long.parseLong(parameters[2]);
    long res=Rows * new Double(Math.floor(Columns / Width * 1.0)).intValue() + Width - 1;
    if (Columns % Width > 0) {
      res+=1;
    }
    bw.write(""Case #"" + (i + 1) + "": ""+ res+ ""\n"");
  }
  br.close();
  bw.close();
}
"
30001558,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""A-large.in""));
  PrintWriter out=new PrintWriter(new File(""2015Round1CAout.txt""));
  int T=Integer.parseInt(in.readLine());
  for (int a=1; a < T + 1; a++) {
    String[] nums=in.readLine().split("" "");
    int R=Integer.parseInt(nums[0]);
    int C=Integer.parseInt(nums[1]);
    int W=Integer.parseInt(nums[2]);
    int rowguess=(C - W) / W;
    int ret=rowguess * R + R - 1;
    ret+=W;
    if (C % W != 0) {
      ret++;
    }
    System.out.println(""Case #"" + a + "": ""+ ret);
    out.println(""Case #"" + a + "": ""+ ret);
  }
  in.close();
  out.close();
}
"
30001559,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new FileReader(""in.txt""));
  BufferedWriter out=new BufferedWriter(new FileWriter(""out.txt""));
  String line=in.readLine();
  int t=new Integer(line);
  for (int caseNum=1; caseNum <= t; caseNum++) {
    line=in.readLine();
    String[] sa=line.split("" "");
    int r=new Integer(sa[0]);
    int c=new Integer(sa[1]);
    int w=new Integer(sa[2]);
    int answer=((c / w) + (Math.min(c % w,1))) + w - 1;
    if (c / w == 1)     answer=Math.min(c,w + 1);
    if (r > 1)     answer+=(c / w) * (r - 1);
    out.write(""Case #"" + caseNum + "": ""+ answer+ ""\n"");
  }
  in.close();
  out.flush();
  out.close();
}
"
30001560,"public static void main(String[] args) throws Exception {
  System.out.println(""Solving "" + PROBLEM_NAME + ""..."");
  System.out.println(""Input: "" + INPUT_PATH);
  System.out.println(""Output: "" + OUTPUT_PATH);
  PrintWriter out=new PrintWriter(OUTPUT_PATH,""US-ASCII"");
  Scanner in=new Scanner(new File(INPUT_PATH),""US-ASCII"");
  in.useLocale(Locale.US);
  int testCasesNumber=in.nextInt();
  in.nextLine();
  System.out.println(""Test cases: "" + testCasesNumber);
  try {
    for (int testCase=1; testCase <= testCasesNumber; testCase++) {
      System.out.println(""Solving test case: "" + testCase + ""..."");
      out.print(""Case #"" + testCase + "": "");
      Brattleship r=new Brattleship();
      int R=in.nextInt();
      int C=in.nextInt();
      int W=in.nextInt();
      int mod=C % W;
      int div=C / W;
      int y=W + (mod == 0 ? 0 : 1) + (div - 1);
      if (R > 1)       y+=Math.max(1,div * (R - 1));
      out.println(y);
      out.flush();
    }
  }
  finally {
    in.close();
    out.close();
  }
  System.out.println(""All test cases solved!"");
}
"
30001561,"public static void main(String[] args) throws UnsupportedEncodingException, FileNotFoundException {
  FileInputStream fis=new FileInputStream(""A-large.in"");
  Scanner sc=new Scanner(fis);
  PrintWriter writer=new PrintWriter(""out2.txt"",""UTF-8"");
  long w, r, c, res;
  int i, j;
  int test=sc.nextInt();
  for (i=1; i <= test; i++) {
    r=sc.nextLong();
    c=sc.nextLong();
    w=sc.nextLong();
    res=r * (c / w) + (w - 1);
    if (c % w != 0)     res=res + 1;
    writer.println(""Case #"" + i + "": ""+ res);
    System.out.println(""Case #"" + i + "": ""+ res);
  }
  writer.close();
}
"
30001562,"public static void main(String[] args){
  A a=new A();
  Scanner in=new Scanner(System.in);
  int cases=Integer.parseInt(in.nextLine());
  for (int a1=0; a1 < cases; a1++) {
    int r=in.nextInt();
    int c=in.nextInt();
    int w=in.nextInt();
    if (a1 != cases - 1) {
      in.nextLine();
    }
    int base=c / w;
    base*=r;
    if (c % w == 0) {
      base+=(w - 1);
    }
 else {
      base+=w;
    }
    System.out.println(""Case #"" + (a1 + 1) + "": ""+ base);
  }
}
"
30001563,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(new File(""data/a/A-small-attempt1.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(""data/a/out"")));
  int t=sc.nextInt();
  for (int i=1; i <= t; i++) {
    int r=sc.nextInt();
    int c=sc.nextInt();
    int w=sc.nextInt();
    int q=w;
    if (c / w * w == c) {
      q-=1;
    }
    int s=r * ((c / w) + q);
    System.out.println(""Case #"" + i + "": ""+ s);
    bw.write(""Case #"" + i + "": ""+ s+ ""\n"");
  }
  sc.close();
  bw.close();
}
"
30001564,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int numCases=scan.nextInt();
  for (int i=0; i < numCases; i++) {
    int rows=scan.nextInt();
    int cols=scan.nextInt();
    int width=scan.nextInt();
    int[][] board=new int[rows][cols];
    int hitcount=0;
    int turns=0;
    while (hitcount < width) {
      List<boolean[][]> retval=new ArrayList<>();
      for (int r1=0; r1 < board.length; r1++) {
        for (int c1=0; c1 < board[0].length - width + 1; c1++) {
          boolean canPlace=true;
          for (int cc=0; cc < width; cc++) {
            if (board[r1][c1 + cc] == 1) {
              canPlace=false;
              break;
            }
          }
          if (!canPlace)           continue;
          boolean[][] shippos=new boolean[board.length][board[0].length];
          for (int cc=0; cc < width; cc++) {
            shippos[r1][c1 + cc]=true;
          }
          retval.add(shippos);
        }
      }
      List<boolean[][]> possibleships=retval;
      int[][] counts=new int[rows][cols];
      for (      boolean[][] ship : possibleships) {
        for (int r=0; r < rows; r++) {
          for (int c=0; c < cols; c++) {
            if (ship[r][c] && board[r][c] == 0)             counts[r][c]++;
          }
        }
      }
      int highcount=0;
      int highrow=0, highcol=0;
      for (int r=0; r < rows; r++) {
        for (int c=0; c < cols; c++) {
          if (counts[r][c] > highcount) {
            highrow=r;
            highcol=c;
            highcount=counts[r][c];
          }
        }
      }
      boolean ismiss=false;
      for (      boolean[][] ship : possibleships) {
        if (!ship[highrow][highcol]) {
          board[highrow][highcol]=1;
          ismiss=true;
          break;
        }
      }
      if (!ismiss) {
        board[highrow][highcol]=2;
        hitcount++;
      }
      turns++;
    }
    int result=turns;
    System.out.println(""Case #"" + (i + 1) + "": ""+ result);
  }
}
"
30001565,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""C:/Users/Nejc/Desktop/input.in""));
  BufferedWriter bw=new BufferedWriter(new FileWriter(new File(""C:/Users/Nejc/Desktop/output.txt"")));
  int T=Integer.parseInt(br.readLine());
  for (int t=0; t < T; t++) {
    String[] line=br.readLine().split("" "");
    int R=Integer.parseInt(line[0]);
    int C=Integer.parseInt(line[1]);
    int W=Integer.parseInt(line[2]);
    int result=0;
    if (R == 1) {
      if (C % W == 0)       result=C / W + W - 1;
 else       result=C / W + W;
    }
 else     System.out.println(""Error"");
    bw.write(""Case #"" + (t + 1) + "": ""+ result);
    bw.newLine();
  }
  br.close();
  bw.close();
  System.out.println(""done"");
}
"
30001566,"public static void main(String[] args) throws Exception {
  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
  String line=reader.readLine();
  int caseNum=1;
  while ((line=reader.readLine()) != null) {
    String[] parts=line.split("" "");
    int R=Integer.parseInt(parts[0]);
    int C=Integer.parseInt(parts[1]);
    int W=Integer.parseInt(parts[2]);
    int result=0;
    if (W == 1) {
      result=R * C;
    }
 else {
      for (int i=W; i < C; i+=W) {
        result+=R;
      }
      result+=W;
    }
    System.out.println(""Case #"" + caseNum + "": ""+ result);
    caseNum++;
  }
}
"
30001567,"public static void main(String[] args){
  Reader r=new InputStreamReader(System.in);
  BufferedReader b=new BufferedReader(r);
  try {
    int testCaseNo=Integer.parseInt(b.readLine());
    int[] minCount=new int[testCaseNo];
    int index=0;
    while (testCaseNo != 0) {
      String StrList=b.readLine();
      String[] splitList=StrList.split("" "");
      int n=Integer.parseInt(splitList[0]);
      int m=Integer.parseInt(splitList[1]);
      int w=Integer.parseInt(splitList[2]);
      if (n == 1 && m == w) {
        minCount[index]=w;
      }
 else       if (w == 1) {
        minCount[index]=n * m;
      }
 else {
        minCount[index]=(w + ((m - w) / w) + ((m - w) % w == 0 ? 0 : 1)) + ((n - 1) * (m - w));
      }
      index++;
      testCaseNo--;
    }
    for (int k=0; k < minCount.length; k++) {
      System.out.println(""Case #"" + (k + 1) + "": ""+ minCount[k]);
    }
  }
 catch (  Exception e) {
    System.out.println(""invalid inputs !!! \n"" + e.getMessage());
  }
}
"
30001568,"public static void main(String[] args){
  try {
    FileReader in=new FileReader(""A-small-attempt0.in"");
    BufferedReader reader=new BufferedReader(in);
    String line=null;
    String text="""";
    int i=0;
    while ((line=reader.readLine()) != null) {
      text=text + line + "" "";
    }
    String[] parts=text.split(""\\s"");
    Integer testCases=Integer.valueOf(parts[0]);
    Integer columns, rows, width, temp;
    int[] answer=new int[testCases];
    for (int i1=0; i1 < testCases; i1++) {
      temp=0;
      rows=Integer.valueOf(parts[(i1 * 3 + 1)]);
      columns=Integer.valueOf(parts[(i1 * 3 + 2)]);
      width=Integer.valueOf(parts[(i1 * 3 + 3)]);
      if (columns % width == 0) {
        temp=(columns / width) + width - 1;
      }
 else {
        temp=(columns / width) + width;
      }
      temp=temp * rows;
      answer[i1]=temp;
    }
    try {
      PrintWriter out=new PrintWriter(new FileWriter(""output.txt""));
      for (int j=0; j < testCases; j++) {
        int place=j + 1;
        out.println(""Case #"" + place + "": ""+ answer[j]);
      }
      out.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001569,"public static void main(String[] args) throws FileNotFoundException {
  Scanner cin=new Scanner(new File(""A-large.in""));
  PrintStream cout=new PrintStream(""A-large.out"");
  int _case=0;
  for (int T=cin.nextInt(); T > 0; T--) {
    _case++;
    StringBuilder ans=new StringBuilder();
    String s=cin.next();
    int totalRequested=0;
    Stack<Character> stack=new Stack<>();
    Stack<Integer> points=new Stack<>();
    int maxPoints=0;
    int cnt=0;
    for (int i=0; i < s.length(); i++) {
      if (!stack.empty() && stack.peek() == s.charAt(i) || totalRequested == s.length() / 2) {
        maxPoints+=stack.pop() == s.charAt(i) ? points.pop() : points.pop() - 5;
      }
 else {
        stack.push(s.charAt(i));
        points.push(10);
        totalRequested++;
      }
    }
    ans.append(maxPoints);
    cout.printf(""Case #%d: %s%n"",_case,ans.toString());
  }
  cin.close();
  cout.close();
}
"
30001570,"public static void main(String... orange) throws Exception {
  Scanner input=new Scanner(System.in);
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    char[] S=input.next().toCharArray();
    int K=S.length;
    int[][] table=new int[K + 1][K + 1];
    for (int len=2; len <= K; len+=2)     for (int start=0; start + len <= K; start++) {
      table[start][len]=(S[start] == S[start + len - 1] ? 10 : 5) + table[start + 1][len - 2];
      for (int first=2; first < len; first+=2)       if (table[start][first] + table[start + first][len - first] > table[start][len])       table[start][len]=table[start][first] + table[start + first][len - first];
    }
    System.out.printf(""Case #%d: "",n + 1);
    System.out.println(table[0][K]);
  }
}
"
30001571,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""AL.in""));
  PrintWriter out=new PrintWriter(""AL.out"");
  int tc=in.nextInt();
  for (int cc=1; cc <= tc; cc++) {
    String s=in.next();
    int gain=0;
    while (true) {
      Stack<Character> stack=new Stack<>();
      for (int i=0; i < s.length(); i++) {
        if (!stack.isEmpty() && stack.peek() == s.charAt(i)) {
          stack.pop();
        }
 else {
          stack.push(s.charAt(i));
        }
      }
      StringBuilder next=new StringBuilder();
      for (      Character c : stack) {
        next.append(c);
      }
      String nx=next.toString();
      int value=(s.length() - nx.length()) / 2 * 10;
      s=nx;
      if (value == 0)       break;
      gain+=value;
    }
    gain+=s.length() / 2 * 5;
    System.out.printf(""Case #%d: %d\n"",cc,gain);
    out.printf(""Case #%d: %d\n"",cc,gain);
  }
  out.close();
}
"
30001572,"public static void main(String[] args){
  System.setOut(null);
  String input;
  if (args.length == 0) {
    input=A.class.getName() + "".in"";
    PARALLEL=1;
  }
 else {
    input=args[0];
    if (args.length >= 2)     ID=Integer.parseInt(args[1]);
  }
  System.err.printf(""Input = %s%n"",input);
  final A[] solvers;
  final StringWriter[] outs;
  try (Scanner sc=new Scanner(new BufferedInputStream(new FileInputStream(input)))){
    int caseN=sc.nextInt();
    solvers=new A[caseN];
    outs=new StringWriter[caseN];
    for (int i=0; i < caseN; i++) {
      solvers[i]=new A();
      solvers[i].id=i + 1;
      solvers[i].out=new PrintWriter(outs[i]=new StringWriter());
      solvers[i].out.printf(""Case #%d: "",i + 1);
      solvers[i].cs=sc.next().toCharArray();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  if (ID >= 1) {
    int id=ID - 1;
    A r=solvers[id];
    int n=r.cs.length;
    int[][][] dp=new int[2][2][n + 1];
    for (int j=0; j < 2; j++)     fill(dp[0][j],-1);
    dp[0][0][0]=dp[0][1][0]=0;
    for (int i=0; i < n; i++) {
      for (int j=0; j < 2; j++)       fill(dp[(i + 1) & 1][j],-1);
      for (int j=0; j < 2; j++) {
        for (int k=0; k < n; k++)         if (dp[i & 1][j][k] >= 0) {
          if (k > 0) {
            dp[(i + 1) & 1][1 - j][k - 1]=max(dp[(i + 1) & 1][1 - j][k - 1],dp[i & 1][j][k] + (r.CJ[j] == r.cs[i] ? 0 : -5));
          }
          dp[(i + 1) & 1][1 - j][k + 1]=max(dp[(i + 1) & 1][1 - j][k + 1],dp[i & 1][j][k] + (r.CJ[1 - j] == r.cs[i] ? 10 : 5));
        }
      }
      for (int j=0; j < 2; j++) {
        dp[(i + 1) & 1][j][0]=max(dp[(i + 1) & 1][j][0],dp[(i + 1) & 1][1 - j][0]);
      }
    }
    r.out.println(max(dp[n & 1][0][0],dp[n & 1][1][0]));
    System.err.flush();
    System.err.print(outs[id].toString());
    return;
  }
  Thread[] ts=new Thread[PARALLEL];
  for (int i=0; i < PARALLEL; i++) {
    ts[i]=new Thread(new Runnable(){
      @Override public void run(){
        for (; ; ) {
          int id;
synchronized (A.class) {
            if (ID == solvers.length)             return;
            id=ID++;
            System.err.printf(""Solve: %d / %d%n"",id + 1,solvers.length);
          }
          try {
            A r=solvers[id];
            int n=r.cs.length;
            int[][][] dp=new int[2][2][n + 1];
            for (int j=0; j < 2; j++)             fill(dp[0][j],-1);
            dp[0][0][0]=dp[0][1][0]=0;
            for (int i=0; i < n; i++) {
              for (int j=0; j < 2; j++)               fill(dp[(i + 1) & 1][j],-1);
              for (int j=0; j < 2; j++) {
                for (int k=0; k < n; k++)                 if (dp[i & 1][j][k] >= 0) {
                  if (k > 0) {
                    dp[(i + 1) & 1][1 - j][k - 1]=max(dp[(i + 1) & 1][1 - j][k - 1],dp[i & 1][j][k] + (r.CJ[j] == r.cs[i] ? 0 : -5));
                  }
                  dp[(i + 1) & 1][1 - j][k + 1]=max(dp[(i + 1) & 1][1 - j][k + 1],dp[i & 1][j][k] + (r.CJ[1 - j] == r.cs[i] ? 10 : 5));
                }
              }
              for (int j=0; j < 2; j++) {
                dp[(i + 1) & 1][j][0]=max(dp[(i + 1) & 1][j][0],dp[(i + 1) & 1][1 - j][0]);
              }
            }
            r.out.println(max(dp[n & 1][0][0],dp[n & 1][1][0]));
          }
 catch (          RuntimeException e) {
            System.err.printf(""Error occurred in case %d:%n"",id + 1);
            e.printStackTrace();
            System.exit(1);
          }
          solvers[id].out.flush();
          solvers[id]=null;
        }
      }
    }
);
    ts[i].start();
  }
  for (int i=0; i < PARALLEL; i++) {
    try {
      ts[i].join();
    }
 catch (    InterruptedException e) {
      i--;
      continue;
    }
  }
  PrintWriter out;
  String file=null;
  if (args.length > 0) {
    file=args[0].substring(0,args[0].lastIndexOf('.')) + "".out"";
    try {
      out=new PrintWriter(new File(file));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    System.err.println(""========== output =========="");
    System.err.flush();
    out=new PrintWriter(System.err);
  }
  for (int i=0; i < solvers.length; i++) {
    out.print(outs[i].toString());
  }
  out.flush();
  if (file != null) {
    System.err.println(""Output = "" + file);
  }
}
"
30001573,"public static void main(String[] args){
  try {
    Scanner scanner=new Scanner(new FileReader(""A-small-attempt1.in""));
    int T=scanner.nextInt();
    long[] N=new long[T];
    for (int i=0; i < T; i++) {
      N[i]=scanner.nextLong();
    }
    PrintWriter out=new PrintWriter(new FileWriter(""output2.txt""));
    for (int i=0; i < T; i++) {
      long target=N[i];
      HashMap<Long,Long> map=new HashMap<Long,Long>();
      LinkedList<Long> list=new LinkedList<Long>();
      list.add((long)1);
      map.put((long)1,(long)1);
      while (!map.containsKey(target)) {
        Long current=list.poll();
        long temp=current;
        long current1=0;
        while (temp > 0) {
          long digit=temp % 10;
          temp=temp / 10;
          current1=current1 * 10 + digit;
        }
        Long next=current1;
        if (!map.containsKey(next) && next <= target) {
          list.add(next);
          map.put(next,map.get(current) + 1);
        }
        if (!map.containsKey(current + 1)) {
          list.add(current + 1);
          map.put(current + 1,map.get(current) + 1);
        }
      }
      out.println(""Case #"" + (i + 1) + "": ""+ map.get(target));
    }
    out.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001574,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scan=new Scanner(new File(""C:/Users/Ahmed/Desktop/Codejam_1/A-small-attempt1.in""));
  int lines=scan.nextInt();
  for (int l=0; l < lines; l++) {
    int n=scan.nextInt();
    Queue<Integer> queue=new LinkedList<Integer>();
    queue.add(1);
    queue.add(1);
    int max=(int)(Math.pow(10,6) + 3);
    boolean[] visited=new boolean[max + 1];
    while (!queue.isEmpty()) {
      int o=queue.poll();
      int steps=queue.poll();
      if (o == n) {
        System.out.println(""Case #"" + (l + 1) + "": ""+ steps);
        break;
      }
      if (o + 1 < max && !visited[o + 1]) {
        visited[o + 1]=true;
        queue.add(o + 1);
        queue.add(steps + 1);
      }
      String s=o + """";
      String output="""";
      for (int i=0; i < s.length(); i++) {
        output=s.charAt(i) + output;
      }
      int rev=Integer.parseInt(output);
      if (rev < max && !visited[rev]) {
        visited[rev]=true;
        queue.add(rev);
        queue.add(steps + 1);
      }
    }
  }
}
"
30001575,"public static void main(String[] args) throws java.lang.Exception {
  int T=Integer.parseInt(br.readLine());
  int[] list1=new int[1000001];
  list1[0]=0;
  list1[1]=1;
  for (int i2=2; i2 < 1000001; i2++) {
    list1[i2]=9999999;
  }
  for (int i1=1; i1 < 1000001; i1++) {
    String strI=Integer.toString(i1);
    int reverseI=0;
    for (int k=strI.length() - 1; k >= 0; k--) {
      reverseI*=10;
      reverseI+=Integer.parseInt("""" + strI.charAt(k));
    }
    if (i1 != 1000000)     list1[i1 + 1]=Math.min(list1[i1 + 1],list1[i1] + 1);
    if (reverseI <= 1000000)     list1[reverseI]=Math.min(list1[reverseI],list1[i1] + 1);
  }
  int[] list=list1;
  for (int i=0; i < T; i++) {
    int N=Integer.parseInt(br.readLine());
    System.out.println(""Case #"" + (i + 1) + "": ""+ list[N]);
  }
}
"
30001576,"public static void main(String[] args){
  File a=new File(""A-small-attempt2 (1).in"");
  Scanner input=null;
  try {
    input=new Scanner(a);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  File b=new File(""A-output.txt"");
  FileWriter fw=null;
  try {
    fw=new FileWriter(b);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int number=input.nextInt();
  int cases=number;
  int[] answers=new int[1000001];
  int index=1;
  int count=1;
  answers[1]=1;
  while (index < answers.length) {
    int toBeReversed=index;
    int reversedCount=0;
    while (toBeReversed != 0) {
      reversedCount=reversedCount * 10 + toBeReversed % 10;
      toBeReversed=toBeReversed / 10;
    }
    index++;
    count++;
    if (reversedCount > index && reversedCount < answers.length) {
      answers[reversedCount]=count;
    }
    if (index < answers.length) {
      if (count < answers[index] || answers[index] == 0) {
        answers[index]=count;
      }
 else {
        count=answers[index];
      }
    }
  }
  while (number > 0) {
    int n=input.nextInt();
    int result=answers[n];
    try {
      fw.write(""Case #"" + (cases - number + 1) + "": ""+ result+ ""\n"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    number--;
  }
  try {
    fw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001577,"public static void main(String[] args) throws Exception {
  Arrays.fill(ans,-1);
  ans[0]=1;
  ans[1]=1;
  for (int i1=1; i1 <= 10000000; i1++) {
    if (ans[i1 + 1] == -1)     ans[i1 + 1]=ans[i1] + 1;
 else {
      ans[i1 + 1]=Math.min(ans[i1 + 1],ans[i1] + 1);
    }
    int n=i1;
    int reverse=0;
    while (n != 0) {
      reverse=reverse * 10;
      reverse=reverse + n % 10;
      n=n / 10;
    }
    int rev=reverse;
    if (rev <= 10000000) {
      if (ans[rev] == -1) {
        ans[rev]=ans[i1] + 1;
      }
 else {
        if (ans[i1] < ans[rev])         System.out.println(i1 + "": "" + ans[i1]+ ""  ""+ ans[rev]);
        ans[rev]=Math.min(ans[i1] + 1,ans[rev]);
      }
    }
  }
  System.out.println(""end"");
  PrintWriter printer=new PrintWriter(""ans.txt"",""UTF-8"");
  Scanner sc=new Scanner(System.in);
  int tc=sc.nextInt();
  for (int i=1; i <= tc; i++) {
    int input=sc.nextInt();
    printer.println(""Case #"" + i + "": ""+ ans[input]);
  }
  printer.close();
  sc.close();
}
"
30001578,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""b.in""));
  int cases=in.nextInt();
  BigInteger twenty=new BigInteger(""20"");
  for (int caseNo=1; caseNo <= cases; caseNo++) {
    BigInteger val=in.nextBigInteger();
    int count=0;
    while (val.compareTo(twenty) > 0) {
      String sVal=val.toString();
      char last=sVal.charAt(sVal.length() - 1);
      if (last != '1') {
        val=val.subtract(BigInteger.ONE);
        count++;
      }
 else       if (val.compareTo(new BigInteger(""1000"")) < 0) {
        int result=0;
        String forward=val.toString();
        String bw="""";
        for (int j=0; j < forward.length(); j++)         bw=forward.charAt(j) + bw;
        BigInteger rev=new BigInteger(bw);
        if (rev.compareTo(val) < 0)         val=rev;
 else         val=val.subtract(BigInteger.ONE);
        count++;
      }
 else {
        char second=sVal.charAt(sVal.length() - 2);
        if (second != '0') {
          val=val.subtract(BigInteger.ONE);
          count++;
        }
 else         if (val.compareTo(new BigInteger(""100000"")) < 0) {
          int result=0;
          String forward=val.toString();
          String bw="""";
          for (int j=0; j < forward.length(); j++)           bw=forward.charAt(j) + bw;
          BigInteger rev=new BigInteger(bw);
          if (rev.compareTo(val) < 0)           val=rev;
 else           val=val.subtract(BigInteger.ONE);
          count++;
        }
 else {
          char third=sVal.charAt(sVal.length() - 3);
          if (third != '0') {
            val=val.subtract(BigInteger.ONE);
            count++;
          }
 else           if (val.compareTo(new BigInteger(""10000000"")) < 0) {
            int result=0;
            String forward=val.toString();
            String bw="""";
            for (int j=0; j < forward.length(); j++)             bw=forward.charAt(j) + bw;
            BigInteger rev=new BigInteger(bw);
            if (rev.compareTo(val) < 0)             val=rev;
 else             val=val.subtract(BigInteger.ONE);
            count++;
          }
 else {
            char fourth=sVal.charAt(sVal.length() - 4);
            if (fourth != '0') {
              val=val.subtract(BigInteger.ONE);
              count++;
            }
 else             if (val.compareTo(new BigInteger(""1000000000"")) < 0) {
              int result=0;
              String forward=val.toString();
              String bw="""";
              for (int j=0; j < forward.length(); j++)               bw=forward.charAt(j) + bw;
              BigInteger rev=new BigInteger(bw);
              if (rev.compareTo(val) < 0)               val=rev;
 else               val=val.subtract(BigInteger.ONE);
              count++;
            }
 else {
              char fifth=sVal.charAt(sVal.length() - 5);
              if (fifth != '0') {
                val=val.subtract(BigInteger.ONE);
                count++;
              }
 else               if (val.compareTo(new BigInteger(""100000000000"")) < 0) {
                int result=0;
                String forward=val.toString();
                String bw="""";
                for (int j=0; j < forward.length(); j++)                 bw=forward.charAt(j) + bw;
                BigInteger rev=new BigInteger(bw);
                if (rev.compareTo(val) < 0)                 val=rev;
 else                 val=val.subtract(BigInteger.ONE);
                count++;
              }
 else {
                char sixth=sVal.charAt(sVal.length() - 6);
                if (sixth != '0') {
                  val=val.subtract(BigInteger.ONE);
                  count++;
                }
 else                 if (val.compareTo(new BigInteger(""10000000000000"")) < 0) {
                  int result=0;
                  String forward=val.toString();
                  String bw="""";
                  for (int j=0; j < forward.length(); j++)                   bw=forward.charAt(j) + bw;
                  BigInteger rev=new BigInteger(bw);
                  if (rev.compareTo(val) < 0)                   val=rev;
 else                   val=val.subtract(BigInteger.ONE);
                  count++;
                }
 else {
                  char seventh=sVal.charAt(sVal.length() - 7);
                  if (seventh != '0') {
                    val=val.subtract(BigInteger.ONE);
                    count++;
                  }
 else                   if (val.compareTo(new BigInteger(""1000000000000000"")) < 0) {
                    int result=0;
                    String forward=val.toString();
                    String bw="""";
                    for (int j=0; j < forward.length(); j++)                     bw=forward.charAt(j) + bw;
                    BigInteger rev=new BigInteger(bw);
                    if (rev.compareTo(val) < 0)                     val=rev;
 else                     val=val.subtract(BigInteger.ONE);
                    count++;
                  }
                }
              }
            }
          }
        }
      }
    }
    count+=val.intValue();
    System.out.println(""Case #"" + caseNo + "": ""+ count);
  }
}
"
30001579,"public static void main(String... orange) throws Exception {
  Scanner input=new Scanner(System.in);
  int numCases=input.nextInt();
  for (int n=0; n < numCases; n++) {
    String s=input.next();
    long l=Long.parseLong(s);
    boolean zero=l % POW10[s.length() / 2] == 0;
    if (zero) {
      l--;
      s=l + """";
    }
    long ans=0;
    for (int d=1; d < s.length(); d++)     ans+=POW10[d / 2] + POW10[(d + 1) / 2] - 1;
    String sb=""0"" + s.substring(0,s.length() / 2);
    if (s.length() > 1 && Long.parseLong(sb) != POW10[s.length() / 2 - 1]) {
      ans+=Long.parseLong(""0"" + new StringBuilder(s.substring(0,s.length() / 2)).reverse().toString());
    }
    ans+=Long.parseLong(""0"" + s.substring(s.length() / 2));
    if (zero)     ans++;
    System.out.printf(""Case #%d: "",n + 1);
    System.out.println(ans);
  }
}
"
30001580,"public static void main(String[] args){
  Scanner input=null;
  CounterCulture[] puzzles;
  try {
    input=new Scanner(new FileInputStream(""input.in""));
    puzzles=CounterCulture.readFile(input);
    input.close();
  }
 catch (  Exception e) {
    System.out.println(""hi"");
    System.out.println(e);
    System.exit(0);
    return;
  }
  String[] results=new String[puzzles.length];
  for (int i=0; i < puzzles.length; ++i) {
    results[i]=""Case #"" + (int)(i + 1) + "": ""+ puzzles[i].solve();
    System.out.println(""Case #"" + (int)(i + 1) + "" done"");
  }
  PrintWriter output=null;
  try {
    output=new PrintWriter(new FileOutputStream(""output.txt""));
    for (int i=0; i < results.length; ++i) {
      output.println(results[i]);
    }
    output.close();
  }
 catch (  Exception e) {
    System.out.println(e);
    System.exit(0);
    return;
  }
}
"
30001581,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(d.class.getResourceAsStream(""a.in""));
  System.setOut(new PrintStream(""d.txt""));
  int testcases, testcase=1;
  testcases=in.nextInt();
  int N=1000002;
  int[] dp=new int[N];
  Arrays.fill(dp,1 << 28);
  dp[1]=1;
  for (int i=2; i < N; i++) {
    StringBuilder sb=new StringBuilder();
    sb.append(i);
    sb.reverse();
    int rev=Integer.valueOf(sb.toString());
    dp[i]=Math.min(dp[i - 1] + 1,dp[i]);
    if (rev < N)     dp[rev]=Math.min(dp[rev],dp[i - 1] + 2);
  }
  while (testcase <= testcases) {
    int n=in.nextInt();
    System.out.println(""Case #"" + testcase + "": ""+ dp[n]);
    testcase++;
  }
}
"
30001582,"public static void main(String[] args){
  distance=new int[1000001];
  for (int i=0; i < 1000001; i++)   distance[i]=UNSEEN;
  Queue<Integer> q=new LinkedList<Integer>();
  distance[1]=1;
  q.add(1);
  while (!q.isEmpty()) {
    int current=q.poll();
    int d=distance[current];
    int next=current + 1;
    if (next < 1000001 && distance[next] == UNSEEN) {
      int nd=d + 1;
      distance[next]=nd;
      q.add(next);
    }
    int n=current;
    int result=0;
    while (n > 0) {
      result=10 * result + (n % 10);
      n/=10;
    }
    next=result;
    if (next < 1000001 && distance[next] == UNSEEN) {
      int nd=d + 1;
      distance[next]=nd;
      q.add(next);
    }
  }
  Scanner scanner=new Scanner(System.in);
  final int cases=scanner.nextInt();
  for (int t=0; t < cases; t++) {
    int n=scanner.nextInt();
    System.out.println(""Case #"" + (t + 1) + "": ""+ distance[n]);
  }
}
"
30001583,"public static void main(String[] args){
  for (int i=1; i <= 11; i++) {
    dp[i]=i;
  }
  for (int i=1; i < dp.length - 1; i++) {
    if (dp[i + 1] == 0 || dp[i + 1] > dp[i] + 1)     dp[i + 1]=dp[i] + 1;
    char[] number=Integer.toString(i).toCharArray();
    for (int i1=0; i1 < number.length / 2; i1++) {
      char t=number[i1];
      number[i1]=number[number.length - i1 - 1];
      number[number.length - i1 - 1]=t;
    }
    int revNo=Integer.parseInt(new String(number));
    if (revNo > i && revNo < dp.length) {
      if (dp[revNo] == 0 || dp[revNo] > dp[i] + 1)       dp[revNo]=dp[i] + 1;
    }
  }
  Scanner in=new Scanner(System.in);
  final int noTests=in.nextInt();
  in.nextLine();
  for (int test=1; test <= noTests; test++) {
    int target=in.nextInt();
    System.out.printf(""Case #%d: %d%n"",test,dp[target]);
  }
}
"
30001584,"public static void main(String[] args) throws java.lang.Exception {
  BufferedReader in=new BufferedReader(new FileReader(""A-small-attempt2.in""));
  PrintWriter out=new PrintWriter(""output.txt"");
  int t, x1, i, j, n, n1, cnt, v;
  String str1, str2;
  t=Integer.parseInt(in.readLine());
  for (x1=0; x1 < t; x1++) {
    n=Integer.parseInt(in.readLine());
    int[] steps=new int[n + 1];
    steps[1]=1;
    for (i=2; i <= n; i++)     steps[i]=1000001;
    for (j=2; j <= n; j++) {
      str1=String.valueOf(j);
      str2="""";
      for (i=str1.length() - 1; i >= 0; i--) {
        str2+=str1.charAt(i);
      }
      v=Integer.parseInt(str2);
      str2=String.valueOf(v);
      if (v < j && v >= 1 && str1.length() == str2.length()) {
        steps[j]=Math.min(steps[v] + 1,steps[j - 1] + 1);
      }
 else       steps[j]=steps[j - 1] + 1;
    }
    out.println(""Case #"" + (x1 + 1) + "": ""+ steps[n]);
  }
  out.flush();
  out.close();
}
"
30001585,"CounterCulture(Scanner in,PrintWriter out){
  int tests=in.nextInt();
  int[] ans=new int[2000000];
  Arrays.fill(ans,Integer.MAX_VALUE);
  ArrayDeque<Integer> q=new ArrayDeque<>();
  boolean[] seen=new boolean[ans.length];
  seen[1]=true;
  q.add(1);
  int steps=0;
  while (!q.isEmpty()) {
    steps++;
    int size=q.size();
    for (int i=0; i < size; i++) {
      int v=q.remove();
      ans[v]=Math.min(ans[v],steps);
      int rev=Integer.parseInt(new StringBuilder("""" + v).reverse().toString());
      v++;
      if (v < ans.length && !seen[v]) {
        seen[v]=true;
        q.add(v);
      }
      if (rev < ans.length && !seen[rev]) {
        seen[rev]=true;
        q.add(rev);
      }
    }
  }
  for (int t=1; t <= tests; t++) {
    int n=in.nextInt();
    out.printf(""Case #%d: %d\n"",t,ans[n]);
  }
  out.close();
}
"
30001586,"public static void main(String[] args) throws NumberFormatException, IOException {
  Scanner s=new Scanner(System.in);
  int numCases=s.nextInt();
  int max=1000003;
  long[] dp=new long[max];
  dp[1]=1;
  dp[2]=2;
  for (int i=3; i < max; ++i) {
    long first=dp[i - 1] + 1;
    char[] test=String.valueOf((long)i).toCharArray();
    long res=0;
    long mult=1;
    for (int i1=0; i1 < test.length; ++i1) {
      int tmp=Integer.valueOf(String.valueOf(test[i1]));
      if (i1 == test.length - 1 && tmp == 0) {
        res+=10000000000L;
      }
      res+=tmp * mult;
      mult*=10;
    }
    long index=res;
    long second=0;
    if (index >= 1 && index < i) {
      second=dp[(int)index] + 1;
    }
    if (second > 1 && second < first) {
      dp[i]=second;
    }
 else {
      dp[i]=first;
    }
  }
  for (int numC=0; numC < numCases; ++numC) {
    long n=s.nextLong();
    System.out.print(""Case #"");
    System.out.print(numC + 1);
    System.out.print("": "");
    System.out.println(dp[(int)n]);
  }
}
"
30001587,"public static void main(String[] args) throws IOException {
  String fileName;
  fileName=""A-small-attempt2.in"";
  int[] d1=new int[2000001];
  d1[1]=1;
  Deque<Integer> deque=new ArrayDeque<>();
  deque.add(1);
  while (!deque.isEmpty()) {
    Integer num=deque.pollFirst();
    int next=num + 1;
    if (next < d1.length && d1[next] == 0) {
      d1[next]=d1[num] + 1;
      deque.addLast(next);
    }
    int j=num;
    while (j % 10 == 0) {
      j=j / 10;
    }
    StringBuilder reverse1=new StringBuilder(Integer.toString(j)).reverse();
    int r1=Integer.parseInt(reverse1.toString());
    int reverse=r1;
    if (reverse >= d1.length) {
      continue;
    }
    if (d1[reverse] == 0) {
      d1[reverse]=d1[num] + 1;
      deque.addLast(reverse);
    }
  }
  int[] d=d1;
  try (BufferedReader r=new BufferedReader(new FileReader(fileName));BufferedWriter w=new BufferedWriter(new FileWriter(fileName.replace("".in"","".out"")))){
    Scanner sc=new Scanner(r);
    int T=sc.nextInt();
    long startTotal=System.currentTimeMillis();
    for (int i=0; i < T; i++) {
      int n=sc.nextInt();
      String calc="""" + d[n];
      w.write(""Case #"" + (i + 1) + "": ""+ calc+ ""\n"");
      w.flush();
      System.out.println(""res:"" + calc);
      System.out.println(""case "" + +(i + 1) + "". time: ""+ (System.currentTimeMillis() - startTotal));
    }
    System.out.println(""Total time: "" + (System.currentTimeMillis() - startTotal));
  }
 }
"
30001588,"public static void main(String[] args) throws Exception {
  FileWriter fw=new FileWriter(""C:\\output.txt"");
  BufferedWriter out=new BufferedWriter(fw);
  String pathname=""C:\\Users\\YC14rp1\\Downloads\\A-small-attempt4.in"";
  Scanner scanner=new Scanner(new File(pathname));
  int tn=scanner.nextInt();
  scanner.nextLine();
  int[] xx=new int[1000001];
  Set<Integer> all=new HashSet<Integer>();
  for (int x=1; x <= 1000000; x++) {
    all.add(x);
  }
  Set<Integer> current=new HashSet<Integer>();
  current.add(1);
  xx[1]=1;
  int step=2;
  while (all.size() > 0) {
    all.removeAll(current);
    Set<Integer> next=new HashSet<Integer>();
    for (    int x : current) {
      String xs=String.valueOf(x);
      String ns=new StringBuilder(xs).reverse().toString();
      int reverse=Integer.valueOf(ns);
      if (all.contains(reverse)) {
        next.add(reverse);
        if (xx[reverse] == 0) {
          xx[reverse]=step;
        }
      }
      if (all.contains(x + 1)) {
        next.add(x + 1);
        if (xx[x + 1] == 0) {
          xx[x + 1]=step;
        }
      }
    }
    current=next;
    step++;
  }
  for (int ti=1; ti <= tn; ti++) {
    int n=scanner.nextInt();
    int x=xx[n];
    String s;
    if (x == Integer.MAX_VALUE) {
      s=""Case #"" + ti + "": NOT POSSIBLE"";
    }
 else {
      s=""Case #"" + ti + "": ""+ x;
    }
    System.out.println(s);
    out.write(s);
    out.write(""\n"");
  }
  out.close();
}
"
30001589,"public static void main(String[] args) throws FileNotFoundException {
  File input=new File(""src/A-small-attempt1.in"");
  Scanner sc=new Scanner(input);
  PrintWriter wr=new PrintWriter(""output2"");
  int T=Integer.parseInt(sc.nextLine());
  for (int i=0; i < T; i++) {
    StringBuilder ans=new StringBuilder();
    ans.append(""Case #"" + (i + 1) + "": "");
    int N=Integer.parseInt(sc.nextLine());
    int[] steps=new int[N + 1];
    steps[0]=0;
    steps[1]=1;
    for (int j=2; j < N + 1; j++) {
      if (steps[j] == 0) {
        steps[j]=steps[j - 1] + 1;
      }
 else {
        steps[j]=Math.min(steps[j],steps[j - 1] + 1);
      }
      StringBuilder tmp=new StringBuilder("""" + j);
      int reverse=Integer.parseInt(tmp.reverse().toString());
      if (reverse > j && reverse <= N) {
        if (steps[reverse] == 0) {
          steps[reverse]=steps[j] + 1;
        }
 else {
          steps[reverse]=Math.min(steps[reverse],steps[j] + 1);
        }
      }
    }
    ans.append(steps[N]);
    wr.println(ans);
    System.out.println(""case # "" + (i + 1) + "" done!"");
  }
  wr.close();
}
"
30001590,"public static void main(String[] args) throws IOException {
}
"
30001591,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int[] memo=new int[1000001];
  for (int i=1; i < memo.length; i++) {
    memo[i]=i;
  }
  for (int i=1; i < memo.length; i++) {
    String inputS="""" + i;
    String outputS="""";
    for (int i1=inputS.length() - 1; i1 >= 0; i1--) {
      outputS+=inputS.charAt(i1);
    }
    int invert=Integer.parseInt(outputS);
    int offset=1;
    while (true) {
      if (invert >= 1 && invert < memo.length) {
        if (memo[invert] > memo[i] + offset) {
          memo[invert]=memo[i] + offset;
        }
 else {
          break;
        }
      }
 else {
        break;
      }
      invert++;
      offset++;
    }
  }
  int numCases=scan.nextInt();
  for (int caseNum=1; caseNum <= numCases; caseNum++) {
    int countNum=scan.nextInt();
    System.out.print(""Case #"" + caseNum + "": "");
    int startNum=0;
    System.out.println(memo[countNum]);
  }
}
"
30001592,"public static void main(String[] args) throws Exception {
  Scanner s=new Scanner(new FileInputStream(args[0]));
  int t=s.nextInt();
  TreeSet<Long> keresettek=new TreeSet<Long>();
  LinkedList<Long> keresettek2=new LinkedList<Long>();
  for (int i=1; i <= t; i++) {
    long l=s.nextLong();
    keresettek2.add(l);
    keresettek.add(l);
  }
  TreeMap<Long,Long> ret=new TreeMap<Long,Long>();
  TreeSet<Long> voltmar=new TreeSet<Long>();
  TreeSet<Long> elements=new TreeSet<Long>();
  TreeSet<Long> nextelements=new TreeSet<Long>();
  elements.add((long)1);
  int kellmeg=keresettek.size();
  int lepesek=1;
  if (keresettek.contains((long)1))   ret.put((long)1,(long)1);
  while (ret.size() != keresettek.size()) {
    for (    Long i1 : elements) {
      if (voltmar.contains(i1 + 1) == false) {
        if (keresettek.contains(i1 + 1) && ret.containsKey(i1 + 1) == false) {
          System.err.println(""betesz hozzaadassal:"" + (i1 + 1));
          ret.put(i1 + 1,(long)(lepesek + 1));
        }
        nextelements.add(i1 + 1);
      }
      Long newertek=Long.parseLong(new StringBuilder(i1.toString()).reverse().toString());
      if (voltmar.contains(newertek) == false) {
        if (keresettek.contains(newertek) && ret.containsKey(newertek) == false) {
          System.err.println(""betesz forditassal:"" + newertek);
          ret.put(newertek,(long)(lepesek + 1));
        }
        nextelements.add(newertek);
      }
      voltmar.add(i1);
    }
    elements=new TreeSet<Long>(nextelements);
    nextelements.clear();
    lepesek++;
    System.err.println(lepesek);
  }
  TreeMap<Long,Long> sol=ret;
  for (int i=1; i <= t; i++) {
    System.out.println(""Case #"" + i + "": ""+ sol.get(keresettek2.get(i - 1)));
  }
}
"
30001593,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int t=input.nextInt();
  int[] arr=new int[1000001];
  for (int j=1, cnt=1; j <= 1000000; ++j, ++cnt) {
    if (arr[j] > 0) {
      if (cnt < arr[j]) {
        arr[j]=cnt;
      }
 else {
        cnt=arr[j];
      }
      continue;
    }
    arr[j]=cnt;
    int n=j;
    int r1=0;
    while (n != 0) {
      r1=r1 * 10;
      r1=r1 + n % 10;
      n=n / 10;
    }
    int r=r1;
    if (r > j) {
      arr[r]=cnt + 1;
    }
  }
  for (int i=0; i < t; ++i) {
    int n=input.nextInt();
    System.out.println(""Case #"" + (i + 1) + "": ""+ arr[n]);
  }
  input.close();
}
"
30001594,"public static void main(String[] args) throws FileNotFoundException {
  Scanner input=new Scanner(new File(""input.in""));
  int tc=input.nextInt();
  int n;
  Arrays.fill(memo,1000000);
  memo[1]=1;
  for (int i1=1; i1 < 1000000; i1++) {
    StringBuffer nn=new StringBuffer(i1 + """");
    nn=nn.reverse();
    int reverse=Integer.parseInt(nn.toString());
    memo[i1 + 1]=Math.min(memo[i1 + 1],memo[i1] + 1);
    memo[reverse]=Math.min(memo[reverse],memo[i1] + 1);
  }
  for (int i=0; i < tc; i++) {
    n=input.nextInt();
    System.out.printf(""Case #%d: %d \n"",(i + 1),memo[n]);
  }
}
"
30001595,"public static void main(String[] args){
  try (Scanner sc=new Scanner(System.in)){
    int T=sc.nextInt();
    for (int i=1; i <= T; ++i) {
      int ans=-1;
      int N=sc.nextInt();
      int[] memo=new int[N + 1];
      for (int j=1; j <= N; ++j) {
        memo[j]=Integer.MAX_VALUE;
      }
      for (int j=1; j <= N; ++j) {
        memo[j]=Math.min(memo[j],memo[j - 1] + 1);
        int k=Integer.parseInt(new StringBuilder(String.valueOf(j)).reverse().toString());
        if (j != k && k > j && k <= N) {
          memo[k]=memo[j] + 1;
        }
      }
      ans=memo[N];
      System.out.printf(""Case #%d: %d\n"",i,ans);
    }
  }
 }
"
30001596,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  PrintStream out=System.out;
  res=new ArrayList<Integer>();
  res.add(0,0);
  res.add(1,1);
  int caseNum=in.nextInt();
  for (int i=1; i <= caseNum; i++) {
    if (!in.hasNextInt()) {
      return;
    }
    int numN=in.nextInt();
    int result=0;
    if (numN <= up) {
      result=res.get(numN);
    }
 else {
      while (up < numN) {
        int temp=up;
        if (up > reverseInt(up + 1)) {
          if (reverseInt(reverseInt(up + 1)) == up + 1) {
            temp=reverseInt(up + 1);
          }
        }
        int tempRes=Math.min(res.get(up) + 1,res.get(temp) + 1);
        res.add(up + 1,tempRes);
        up++;
      }
      result=res.get(numN);
    }
    out.printf(""Case #%d: %d\n"",i,result);
  }
}
"
30001597,"public static void main(String[] args) throws IOException {
  FileReader in=new FileReader(""src/A-small-attempt1.in"");
  BufferedReader br=new BufferedReader(in);
  int T=Integer.parseInt(br.readLine());
  File file=new File(""src/output.txt"");
  FileWriter fw=new FileWriter(file.getAbsoluteFile());
  BufferedWriter bw=new BufferedWriter(fw);
  for (int i=0; i < T; i++) {
    int N=Integer.parseInt(br.readLine());
    int[] table=new int[N + 1];
    table[1]=1;
    table[0]=0;
    for (int j=1; j <= N; j++) {
      int n=j;
      int reversed=0;
      while (n != 0) {
        reversed=reversed * 10 + n % 10;
        n=n / 10;
      }
      int rev=reversed;
      int n1=table[j - 1] + 1;
      int n2=Integer.MAX_VALUE - 1;
      if (rev < j && Integer.toString(rev).length() == Integer.toString(j).length()) {
        n2=table[rev];
      }
      table[j]=Math.min(n1,n2 + 1);
    }
    bw.write(""Case #"" + Integer.toString(i + 1) + "": ""+ Integer.toString(table[N]));
    bw.newLine();
  }
  in.close();
  bw.close();
}
"
30001598,"public static void main(String[] args){
  int T=in.nextInt();
  long[] next=new long[2];
  for (int t=1; t <= T; t++) {
    long N=in.nextLong();
    Queue<Long> queue=new LinkedList<>();
    HashSet<Long> S=new HashSet<>();
    HashMap<Long,Long> distance=new HashMap<>();
    queue.add(1L);
    S.add(1L);
    distance.put(1L,0L);
    while (!queue.isEmpty()) {
      long number=queue.poll();
      if (number == N) {
        break;
      }
      next[0]=number + 1;
      StringBuilder builder=new StringBuilder(Long.toString(number));
      next[1]=Long.parseLong(builder.reverse().toString());
      for (int i=0; i < 2; i++) {
        if (!S.contains(next[i]) && next[i] <= N && next[i] > number) {
          queue.add(next[i]);
          S.add(next[i]);
          distance.put(next[i],distance.get(number) + 1);
        }
      }
    }
    out.println(String.format(""Case #%d: %d"",t,distance.get(N) + 1));
  }
}
"
30001599,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  PrintWriter out=new PrintWriter(System.out);
  int tests=in.nextInt();
  for (int test=0; test < tests; test++) {
    int n=in.nextInt();
    int[] dist=new int[n + 1];
    boolean[] used=new boolean[n + 1];
    Arrays.fill(dist,Integer.MAX_VALUE);
    Queue<Integer> queue=new ArrayDeque<Integer>();
    queue.add(1);
    dist[1]=1;
    used[1]=true;
    while (!queue.isEmpty()) {
      Integer top=queue.poll();
      int td=dist[top];
      int n1=top + 1;
      int n3=top;
      int res=0;
      while (n3 != 0) {
        res*=10;
        res+=n3 % 10;
        n3/=10;
      }
      int n2=res;
      if (n1 > 0 && n1 <= n) {
        dist[n1]=Math.min(dist[n1],td + 1);
        if (!used[n1]) {
          used[n1]=true;
          queue.add(n1);
        }
      }
      if (n2 > 0 && n2 <= n) {
        dist[n2]=Math.min(dist[n2],td + 1);
        if (!used[n2]) {
          used[n2]=true;
          queue.add(n2);
        }
      }
    }
    int ans=dist[n];
    out.println(String.format(""Case #%d: %s"",test + 1,ans));
    out.flush();
  }
  in.close();
  out.close();
}
"
30001600,"/** 
 */
public static void main(String[] args) throws Exception {
  int n=1000006;
  q=new int[n];
  q[1]=1;
  for (int i=2; i < n; i++) {
    String s0="""" + i;
    String s1=new StringBuilder(s0).reverse().toString();
    int i1=Integer.parseInt(s1);
    int q1=q[i - 1] + 1;
    int q2=Integer.MAX_VALUE;
    if (i % 10 != 0 && i1 < i) {
      q2=q[i1] + 1;
    }
    q[i]=Math.min(q1,q2);
  }
  String load=""src/a-small-attempt0.in"";
  String save=""src/a-small-attempt0.out"";
  in=new Scanner(new File(load));
  out=new PrintWriter(new File(save));
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    out.print(""Case #"" + t + "": "");
    System.out.println(""Case #"" + t + "": ............"");
    A r=new A();
    int N=A.in.nextInt();
    A.out.println(A.q[N]);
  }
  out.close();
}
"
30001601,"public static void main(String[] args){
  Scanner scanner=new Scanner(System.in);
  int nCase=scanner.nextInt();
  for (int nc=1; nc <= nCase; nc++) {
    long N=scanner.nextLong();
    long N1=N;
    int ans3=1;
    while ((N1/=10) > 0)     ans3++;
    int dN=ans3;
    long ans=0;
    long start=0;
    if (N <= 11)     ans=N;
 else {
      ans=10;
      int cd=2;
      long d10=10;
      while (cd < dN) {
        d10*=10;
        long need=d10 - 1;
        ans+=Long.parseLong(new StringBuilder(("""" + need).substring(0,cd / 2)).reverse().toString());
        ans+=Long.parseLong(("""" + need).substring(cd / 2,cd));
        ans++;
        cd++;
      }
      long ans1=ans;
      ans1+=(N - d10);
      long ans2=ans;
      if (N == d10)       ans2=ans1;
 else {
        if ((int)(N % 10) == 0) {
          ans2++;
          N--;
        }
        ans2+=Long.parseLong(new StringBuilder(("""" + N).substring(0,dN / 2)).reverse().toString());
        ans2+=Long.parseLong(("""" + N).substring(dN / 2,dN));
      }
      ans=Math.min(ans1,ans2);
    }
    System.out.println(""Case #"" + nc + "": ""+ ans);
  }
}
"
30001602,"public static void main(String[] args){
  String input=""/Users/bhavesh/Downloads/A-small-attempt1.in"";
  String output=""/Users/bhavesh/Downloads/output"";
  try {
    int a[]=new int[1000001];
    int n;
    for (int i=0; i <= 1000000; i++) {
      a[i]=-1;
    }
    for (int i=1; i <= 1000000; i++) {
      if (i <= 10) {
        a[i]=i;
        continue;
      }
      int n1=i;
      int reverse=0;
      while (n1 != 0) {
        reverse=reverse * 10;
        reverse=reverse + n1 % 10;
        n1=n1 / 10;
      }
      int ri=reverse;
      if (ri < i && i % 10 != 0)       a[i]=(a[i - 1] + 1 < a[ri] + 1) ? a[i - 1] + 1 : a[ri] + 1;
 else       a[i]=a[i - 1] + 1;
    }
    BufferedReader br=new BufferedReader(new FileReader(input));
    PrintWriter pw=new PrintWriter(output);
    int t=Integer.parseInt(br.readLine().trim());
    int i=1;
    while (i <= t) {
      int num=Integer.parseInt(br.readLine());
      String op=""Case #"" + i + "": ""+ a[num];
      System.out.println(op);
      pw.print(op);
      pw.println();
      i++;
    }
    pw.flush();
    pw.close();
    br.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}
"
30001603,"public static void main(String[] args) throws Exception {
  Scanner in=new Scanner(new File(""A.in""));
  FileWriter out=new FileWriter(""aout.txt"");
  int T=in.nextInt();
  for (int i=1; i <= T; i++) {
    int N=in.nextInt();
    int n=N;
    int r=1;
    ArrayList<Integer> a=new ArrayList<Integer>();
    boolean[] b=new boolean[1000001];
    a.add(new Integer(1));
    b[1]=true;
    boolean c=true;
    if (N <= 20)     r=N;
 else {
      while (c) {
        r++;
        int l=a.size();
        for (int j=0; j < l; j++) {
          Integer k=a.remove(0);
          String s1=k.toString();
          String o="""";
          for (int i1=0; i1 < s1.length(); ) {
            o=s1.substring(i1,++i1) + o;
          }
          Integer rev=new Integer(Integer.parseInt(o));
          if (!b[rev.intValue()]) {
            b[rev]=true;
            a.add(rev);
          }
          if (!b[++k]) {
            b[k]=true;
            a.add(k);
          }
          if (rev == N || k == N) {
            c=false;
            break;
          }
        }
      }
    }
    String s=""Case #"" + i + "": ""+ r+ ""\n"";
    System.out.print(s);
    out.write(s);
  }
  in.close();
  out.close();
}
"
30001604,"public static void main(String args[]) throws Exception {
  BufferedReader input=new BufferedReader(new FileReader(""../GoogleCodeJam2015R1B/io/A-small-attempt0.in""));
  pw=new PrintWriter(new FileWriter(""../GoogleCodeJam2015R1B/io/output.txt""));
  int[] numsper=new int[1000001];
  for (int j=0; j <= 1000000; j++) {
    numsper[j]=Integer.MAX_VALUE;
  }
  numsper[0]=0;
  Queue<String> q=new LinkedList<String>();
  q.add(""0,0"");
  while (!q.isEmpty()) {
    String[] s=q.poll().split("","");
    int num=Integer.parseInt(s[0]);
    int turn=Integer.parseInt(s[1]);
    if ((num + 1) >= 1000001)     continue;
    if (numsper[num + 1] > (turn + 1)) {
      numsper[num + 1]=turn + 1;
      q.add((num + 1) + "","" + (turn + 1));
    }
    StringBuilder sb=new StringBuilder();
    sb.append(s[0]);
    int revnum=Integer.parseInt(sb.reverse().toString());
    if (numsper[revnum] > (turn + 1)) {
      numsper[revnum]=turn + 1;
      q.add((revnum) + "","" + (turn + 1));
    }
  }
  int T=Integer.parseInt(input.readLine());
  for (int i=0; i < T; i++) {
    int N=Integer.parseInt(input.readLine());
    pw.println(""Case #"" + (i + 1) + "": ""+ numsper[N]);
  }
  pw.flush();
  input.close();
  pw.close();
}
"
30001605,"public static void main(String[] args) throws IOException {
  Scanner scan=new Scanner(new File(""A-small-attempt0.in""));
  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(""A-small-attempt0.out"")));
  int[] dist=new int[1000001];
  dist[1]=1;
  for (int i=1; i < 1000000; i++) {
    if (dist[i + 1] == 0 || dist[i + 1] > dist[i] + 1)     dist[i + 1]=dist[i] + 1;
    String s1=Integer.toString(i);
    String s2="""";
    for (int i1=0; i1 < s1.length(); i1++)     s2=s1.charAt(i1) + s2;
    int s=Integer.parseInt(s2);
    if (s > i && (dist[s] == 0 || dist[s] > dist[i] + 1))     dist[s]=dist[i] + 1;
  }
  int t=scan.nextInt();
  for (int i=1; i <= t; i++)   out.println(""Case #"" + i + "": ""+ dist[scan.nextInt()]);
  out.close();
  System.exit(0);
}
"
30001606,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
  int[] C=new int[1000001];
  for (int i=0; i < C.length; i++)   C[i]=i;
  for (int n=2; n <= C.length; n++) {
    C[n]=Math.min(C[n],C[n - 1] + 1);
    int r=Integer.parseInt(new StringBuilder(String.valueOf(n)).reverse().toString());
    if (r > n)     C[r]=Math.min(C[r],C[n] + 1);
  }
  int T=Integer.parseInt(in.readLine());
  for (int t=1; t <= T; t++) {
    int N=Integer.parseInt(in.readLine());
    out.println(""Case #"" + t + "": ""+ C[N]);
  }
  out.close();
}
"
30001607,"public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  int t=s.nextInt();
  for (int i=1; i <= t; i++) {
    int N=s.nextInt();
    min=new int[N + 1];
    for (int j=N - 1; j >= 0; j--) {
      min[j]=min[j + 1] + 1;
      int x=j;
      int result=0;
      while (x != 0) {
        result*=10;
        result+=x % 10;
        x/=10;
      }
      int r=result;
      if (r > j && r <= N && min[r] + 1 < min[j]) {
        min[j]=min[r] + 1;
      }
    }
    System.out.println(""Case #"" + i + "": ""+ min[0]);
  }
}
"
30001608,"public A(Scanner input,PrintWriter output){
  this.input=input;
  this.output=output;
}
"
30001609,"public static void main(String[] args) throws IOException {
  Scanner in=new Scanner(new File(""A-small-attempt2.in""));
  PrintWriter out=new PrintWriter(new File(""outputASmall.txt""));
  int t=in.nextInt();
  for (int testn=1; testn <= t; testn++) {
    int[] a=new int[1000001];
    a[0]=1;
    int n=in.nextInt();
    int ans=0;
    LinkedList<Integer> d=new LinkedList<Integer>();
    d.add(1);
    while (!d.isEmpty()) {
      int k=d.poll();
      if (k == n) {
        ans=a[n - 1];
        break;
      }
      int k1=k;
      int cur=0;
      while (k1 > 0) {
        cur=cur * 10 + (k1 % 10);
        k1=k1 / 10;
      }
      int r=cur;
      if (r <= n && a[r - 1] == 0) {
        a[r - 1]=a[k - 1] + 1;
        d.add(r);
      }
      if (a[k + 1] == 0) {
        a[k]=a[k - 1] + 1;
        d.add(k + 1);
      }
    }
    out.println(""Case #"" + testn + "": ""+ ans);
  }
  in.close();
  out.close();
}
"
30001610,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int i=0; i < T; i++) {
    int N=in.nextInt();
    int[] min=new int[MAX];
    Arrays.fill(min,MAX + 1);
    min[1]=1;
    for (int cur=1; cur <= N; cur++) {
      min[cur + 1]=Math.min(min[cur + 1],min[cur] + 1);
      int num=cur;
      int ans1=0;
      while (num > 0) {
        ans1*=10;
        ans1+=(num % 10);
        num/=10;
      }
      int reverse=ans1;
      min[reverse]=Math.min(min[reverse],min[cur] + 1);
    }
    int ans=min[N];
    System.out.printf(""Case #%d: %d\n"",i + 1,ans);
  }
}
"
30001611,"public static void main(String[] args){
  Scanner k=new Scanner(System.in);
  int T=k.nextInt();
  for (int i=0; i < T; i++) {
    long input=k.nextLong();
    long output=0;
    while (input != 0) {
      if (input <= 20) {
        output+=input;
        break;
      }
      long flipThis=input;
      long reverse=0;
      while (flipThis != 0) {
        reverse=reverse * 10;
        reverse=reverse + flipThis % 10;
        flipThis=flipThis / 10;
      }
      long flipped=reverse;
      if (flipped < input && input % Math.pow(10,(int)(Math.log10(input) + 1) / 2) == 1) {
        input=flipped;
      }
 else {
        input--;
      }
      output++;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ output);
  }
}
"
30001612,"public static void main(String[] args) throws IOException {
  Main main=new Main();
  String inputFileName=""C:\\Users\\ahmed\\Desktop\\Codejam\\Input.in"";
  String outputFileName=""C:\\Users\\ahmed\\Desktop\\Codejam\\Output.txt"";
  main.in=new BufferedReader(new FileReader(inputFileName));
  main.out=new BufferedWriter(new FileWriter(outputFileName));
  main.ans=new StringBuilder();
  int n=1000009;
  main.dist=new int[n];
  main.visited=new boolean[n];
  main.dist[1]=1;
  main.visited[1]=true;
  Queue<Integer> q=new LinkedList<Integer>();
  Queue<Integer> d=new LinkedList<Integer>();
  q.add(1);
  d.add(1);
  while (!q.isEmpty()) {
    int x1=q.poll();
    int distance=d.poll();
    int next1=x1 + 1;
    if (next1 < n)     if (!main.visited[next1]) {
      main.visited[next1]=true;
      main.dist[next1]=distance + 1;
      q.add(next1);
      d.add(distance + 1);
    }
    StringBuilder strb=new StringBuilder(x1 + """");
    int next2=Integer.parseInt(strb.reverse().toString());
    if (next2 < n)     if (!main.visited[next2]) {
      main.visited[next2]=true;
      main.dist[next2]=distance + 1;
      q.add(next2);
      d.add(distance + 1);
    }
  }
  int nCases=Integer.parseInt(main.in.readLine());
  for (int cas=1; cas <= nCases; cas++) {
    int x=Integer.parseInt(main.in.readLine().trim());
    main.ans.append(""Case #"" + cas + "": ""+ main.dist[x]+ ""\n"");
  }
  System.out.print(main.ans.toString());
  main.out.write(main.ans.toString());
  main.out.flush();
  main.out.close();
}
"
30001613,"public static void main(String[] args) throws IOException {
  reader=new Scanner(new FileReader(""input""));
  writer=new PrintWriter(new FileWriter(""output""));
  int nt=reader.nextInt();
  for (int tc=1; tc <= nt; tc++) {
    int n=reader.nextInt();
    Queue<Integer> Q=new LinkedList<>();
    Q.add(0);
    int[] d=new int[n + 1];
    Arrays.fill(d,Integer.MAX_VALUE);
    d[0]=0;
    while (d[n] == Integer.MAX_VALUE) {
      int cur=Q.poll();
      if (cur + 1 <= n && d[cur + 1] == Integer.MAX_VALUE) {
        d[cur + 1]=1 + d[cur];
        Q.add(cur + 1);
      }
      StringBuilder sb=new StringBuilder();
      sb.append(cur);
      sb=sb.reverse();
      int r=Integer.parseInt(sb.toString());
      if (r <= n && d[r] == Integer.MAX_VALUE) {
        d[r]=1 + d[cur];
        Q.add(r);
      }
    }
    writer.printf(""Case #%d: %d\n"",tc,d[n]);
  }
  writer.close();
  reader.close();
}
"
30001614,"public static void main(String[] args) throws IOException {
  Scanner s=new Scanner(new File(""A-small-attempt0 (2).in""));
  PrintWriter out=new PrintWriter(new FileWriter(""out.txt""));
  int cases=s.nextInt();
  long max=1000000;
  long best[]=new long[(int)max + 1];
  Arrays.fill(best,max + 1);
  best[0]=0;
  for (int x=1; x <= max; x++) {
    long a=x;
    while (a % 10 == 0)     a/=10;
    String b="""";
    int temp1=(int)Math.log10(a);
    for (int x1=0; x1 <= temp1; x1++) {
      b+=a % 10;
      a/=10;
    }
    long temp=Long.parseLong(b);
    if (x % 10 != 0 && temp <= x)     best[x]=Math.min(best[(int)temp] + 1,best[x - 1] + 1);
 else     best[x]=best[x - 1] + 1;
  }
  for (int tt=0; tt < cases; tt++) {
    long n=s.nextLong();
    out.println(""Case #"" + (tt + 1) + "": ""+ (best[(int)n]));
    System.out.println(""Case #"" + (tt + 1) + "": ""+ (best[(int)n]));
  }
  out.close();
  s.close();
}
"
30001615,"public static void main(String[] args) throws IOException {
  BufferedReader in=new BufferedReader(new FileReader(""A-small-attempt1.in""));
  PrintWriter out=new PrintWriter(new File(""2015Round1BAout.txt""));
  int T=Integer.parseInt(in.readLine());
  Integer[] Ns=new Integer[T];
  for (int a=0; a < T; a++) {
    Ns[a]=Integer.parseInt(in.readLine());
  }
  List<Integer> okay=Arrays.asList(Ns);
  int N=Collections.max(okay);
  int[] nums=new int[N];
  for (int i=0; i < N; i++) {
    if (i == 0) {
      nums[i]=1;
    }
 else {
      int num=i + 1;
      int reverse=0;
      while (num != 0) {
        reverse=reverse * 10;
        reverse=reverse + num % 10;
        num=num / 10;
      }
      if (reverse < i + 1 && reverse > 1 && String.valueOf(reverse).length() == String.valueOf(i + 1).length()) {
        nums[i]=Math.min(nums[i - 1] + 1,nums[reverse - 1] + 1);
      }
 else {
        nums[i]=nums[i - 1] + 1;
      }
    }
  }
  for (int i=0; i < T; i++) {
    out.println(""Case #"" + (i + 1) + "": ""+ nums[Ns[i] - 1]);
  }
  in.close();
  out.close();
}
"
30001616,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new File(""A-small-attempt0.in""));
  PrintWriter out=new PrintWriter(""r1.txt"");
  int T;
  int[] dist=new int[1000001];
  int pt=1;
  dist[1]=1;
  while (pt < 1000000) {
    if (dist[pt + 1] == 0 || dist[pt + 1] > dist[pt] + 1) {
      dist[pt + 1]=dist[pt] + 1;
    }
    char[] nchar=String.valueOf(pt).toCharArray();
    int val=0;
    for (int i=0; i < nchar.length; i++) {
      int cval=nchar[i] - '0';
      for (int j=1; j <= i; j++)       cval*=10;
      val+=cval;
    }
    int y=val;
    if (dist[y] == 0 || dist[y] > dist[pt] + 1) {
      dist[y]=dist[pt] + 1;
    }
    pt++;
  }
  T=Integer.parseInt(sc.nextLine());
  int count=1;
  while (count <= T) {
    int N=sc.nextInt();
    out.println(""Case #"" + count + "": ""+ dist[N]);
    count++;
  }
  out.flush();
}
"
30001617,"public static void main(String[] args) throws Exception {
  int MAX=1000001;
  int[] mem=new int[MAX];
  for (int i=2; i < mem.length; i++) {
    mem[i]=i;
  }
  mem[1]=1;
  for (int i=12; i < mem.length; i++) {
    mem[i]=Math.min(mem[i],mem[i - 1] + 1);
    char[] chrs=String.valueOf(i).toCharArray();
    String ns="""";
    for (int j=chrs.length - 1; j >= 0; j--) {
      ns+=chrs[j];
    }
    int nv=Integer.parseInt(ns);
    if (nv < mem.length) {
      mem[nv]=Math.min(mem[nv],mem[i] + 1);
    }
  }
  BufferedReader br=new BufferedReader(new FileReader(""A-small-attempt0.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""outputA.txt""));
  int nrTests=Integer.parseInt(br.readLine());
  for (int tNr=1; tNr <= nrTests; tNr++) {
    long n=Long.parseLong(br.readLine());
    pw.println(""Case #"" + tNr + "": ""+ mem[(int)n]);
  }
  pw.close();
  br.close();
  System.out.println(""done!"");
}
"
30001618,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int ncase=in.nextInt();
  for (int icase=0; icase < ncase; icase++) {
    int icase1=icase + 1;
    int N=in.nextInt();
    int count=0;
    int[] num=new int[N + 1];
    int iR=0;
    if (N <= 20) {
      count=N;
    }
 else {
      for (int i=1; i <= 20; i++)       num[i]=i;
      for (int i=21; i <= N; i++) {
        String str=Integer.toString(i);
        iR=Integer.valueOf(new StringBuffer(str).reverse().toString());
        int min=i;
        if (iR < i && i % 10 != 0) {
          if (num[iR] + 1 < min)           min=num[iR] + 1;
        }
        for (int j=i - 1; j >= i - 10; j--)         if (num[j] + (i - j) < min) {
          min=num[j] + (i - j);
        }
        num[i]=min;
      }
      count=num[N];
    }
    System.out.println(""Case #"" + icase1 + "":""+ "" ""+ count);
  }
}
"
30001619,"public static void main(String args[]){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    final long N=in.nextLong();
    long x=N;
    long c=0;
    long x1=x;
    int bits1=0;
    while (x1 > 0) {
      bits1++;
      x1/=10;
    }
    int bits=bits1;
    while (bits > 1) {
      if (x % 10 == 0) {
        x--;
        c++;
        long x2=x;
        int bits2=0;
        while (x2 > 0) {
          bits2++;
          x2/=10;
        }
        bits=bits2;
        continue;
      }
      int lb=0;
      long lo=0, hi=0;
      while (lb < bits / 2) {
        int hb=bits - lb - 1;
        long l=(x % tens[lb + 1]) / tens[lb];
        long h=(x % tens[hb + 1]) / tens[hb];
        lo+=(l * tens[lb]);
        hi+=(h * tens[lb]);
        lb++;
      }
      if (lo > 1) {
        x-=(lo - 1);
        c+=(lo - 1);
      }
 else {
        if (hi > 1) {
          long x2=x;
          long n=0;
          while (x2 > 0) {
            long m=x2 % 10;
            x2/=10;
            n=(n * 10) + m;
          }
          x=n;
          c++;
        }
 else {
          long all9=tens[bits - 1] - 1;
          c+=(x - all9);
          x=all9;
          bits--;
        }
      }
    }
    c+=x;
    System.out.format(""Case #%d: %d\n"",t,c);
  }
}
"
30001620,"public static void main(String[] args) throws IOException {
  String inputFile=""src/CounterCulture.in"";
  String outputFile=""src/CounterCulture.out"";
  BufferedReader br=new BufferedReader(new FileReader(new File(inputFile)));
  PrintWriter pw=new PrintWriter(new FileWriter(new File(outputFile)));
  String line=br.readLine();
  int N=Integer.parseInt(line);
  int id=1;
  while ((line=br.readLine()) != null) {
    int n=Integer.parseInt(line);
    int[] times=new int[n + 1];
    times[1]=1;
    for (int i=1; i <= n; ++i) {
      if (times[i] == 0) {
        times[i]=times[i - 1] + 1;
      }
 else       times[i]=Math.min(times[i - 1] + 1,times[i]);
      int n1=i;
      int reverse=0;
      while (n1 != 0) {
        reverse=reverse * 10;
        reverse=reverse + n1 % 10;
        n1=n1 / 10;
      }
      int rev=reverse;
      if (rev > i && rev <= n) {
        times[rev]=times[i] + 1;
      }
    }
    int num=times[n];
    pw.println(""Case #"" + id + "": ""+ num);
    id++;
  }
  br.close();
  pw.close();
}
"
30001621,"public static void main(String[] args){
  int maxN=1000000;
  int[] minCount=new int[maxN + 1];
  minCount[1]=1;
  int reverseN;
  for (int N=2; N < maxN + 1; N++) {
    int input=N;
    int reversedNum=0;
    while (input != 0) {
      reversedNum=reversedNum * 10 + input % 10;
      input=input / 10;
    }
    reverseN=reversedNum;
    if ((N % 10 != 0) && reverseN < N) {
      minCount[N]=Math.min(1 + minCount[N - 1],1 + minCount[reverseN]);
    }
 else {
      minCount[N]=1 + minCount[N - 1];
    }
  }
  Scanner scan=new Scanner(System.in);
  int T=scan.nextInt();
  scan.nextLine();
  for (int caseNb=0; caseNb < T; caseNb++) {
    int N=scan.nextInt();
    scan.nextLine();
    System.out.println(""Case #"" + (caseNb + 1) + "": ""+ minCount[N]);
  }
}
"
30001622,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  int cases;
  int[] distances1=new int[1000000 + 1];
  Queue<Integer> ordering=new LinkedList<Integer>();
  ordering.add(0);
  while (!ordering.isEmpty()) {
    int n1=ordering.remove();
    if (n1 + 1 <= 1000000 && distances1[n1 + 1] == 0) {
      distances1[n1 + 1]=distances1[n1] + 1;
      ordering.add(n1 + 1);
    }
    char[] digits=String.valueOf(n1).toCharArray();
    int val=0;
    for (int k=digits.length - 1; k >= 0; k--)     val=10 * val + digits[k] - '0';
    int nr=val;
    if (nr <= 1000000 && distances1[nr] == 0) {
      distances1[nr]=distances1[n1] + 1;
      ordering.add(nr);
    }
  }
  int[] distances=distances1;
  cases=input.nextInt();
  for (int c=1; c <= cases; c++) {
    int n=input.nextInt();
    System.out.printf(""Case #%d: %d\n"",c,distances[n]);
  }
}
"
30001623,"public static void main(String args[]) throws Exception {
  BufferedReader br=new BufferedReader(new InputStreamReader(in));
  int N=1000000;
  LinkedList<Integer> q=new LinkedList<Integer>();
  LinkedList<Integer> r=new LinkedList<Integer>();
  q.add(1);
  r.add(1);
  HashSet<Integer> set=new HashSet<Integer>();
  int[] len=new int[N + 1];
  while (!q.isEmpty()) {
    int x=q.pollFirst();
    int t=r.pollFirst();
    if (x > N)     continue;
    if (set.contains(x))     continue;
    set.add(x);
    len[x]=t;
    q.add(x + 1);
    r.add(t + 1);
    int v=0;
    while (x > 0) {
      v*=10;
      v+=x % 10;
      x/=10;
    }
    q.add(v);
    r.add(t + 1);
  }
  int T=parseInt(br.readLine());
  for (int i=0; i < T; i++) {
    int x=parseInt(br.readLine());
    out.println(""Case #"" + (i + 1) + "": ""+ len[x]);
  }
}
"
30001624,"public static void main(String[] args) throws Exception {
  long[] ret=new long[1000001];
  Arrays.fill(ret,Long.MAX_VALUE);
  ret[0]=0;
  for (int i=0; i < 1000000; ++i) {
    ret[i + 1]=Math.min(ret[i] + 1,ret[i + 1]);
    int rev=Integer.valueOf(new StringBuilder(Integer.toString(i)).reverse().toString());
    if (rev <= 1000000) {
      ret[rev]=Math.min(ret[i] + 1,ret[rev]);
    }
  }
  long[] smallAnswer=ret;
  Scanner s=new Scanner(new File(""A-small.in""));
  int caseNum=s.nextInt();
  for (int t=1; t <= caseNum; ++t) {
    int n=s.nextInt();
    System.out.println(""Case #"" + t + "": ""+ smallAnswer[n]);
  }
}
"
30001625,"public static void main(String[] args){
  try {
    BufferedReader reader=new BufferedReader(new FileReader(""A-small-attempt0.in""));
    String line=null;
    List<String> lines1=new ArrayList<String>();
    while ((line=reader.readLine()) != null) {
      lines1.add(line);
    }
    reader.close();
    List<String> lines=lines1;
    List<String> outputLines=new ArrayList<String>();
    int index=0;
    int testCases=Integer.parseInt(lines.get(index++));
    int max=1000000;
    int[] counts=new int[max + 1];
    Arrays.fill(counts,max);
    counts[1]=1;
    for (int i=1; i < max; i++) {
      counts[i + 1]=Math.min(counts[i] + 1,counts[i + 1]);
      int num=i;
      long rev=0;
      while (num != 0) {
        rev=rev * 10 + num % 10;
        num/=10;
      }
      long r=rev;
      if (r > max) {
        continue;
      }
      counts[(int)r]=Math.min(counts[i] + 1,counts[(int)r]);
    }
    for (int t=0; t < testCases; t++) {
      int N=Integer.parseInt(lines.get(index++));
      String testCaseOutput=""Case #"" + (t + 1) + "": ""+ counts[N];
      System.out.println(testCaseOutput);
      outputLines.add(testCaseOutput);
    }
    StringBuilder strValue=new StringBuilder("""");
    if (outputLines != null) {
      int i=0;
      for (      Object v : outputLines) {
        String value=v.toString();
        if (i == 0) {
          strValue.append(value);
        }
 else {
          strValue.append(""\n"");
          strValue.append(value);
        }
        i++;
      }
    }
    String output=strValue.toString();
    FileWriter writer=new FileWriter(""A-small-attempt0.in"".replace("".in"","".out""));
    writer.write(output);
    writer.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
"
30001626,"public static void main(String[] args) throws IOException {
  String fileName=""A-small0"";
  Scanner in=new Scanner(new File(fileName + "".in""));
  PrintWriter out=new PrintWriter(new FileWriter(fileName + "".out""));
  for (int check=1; check <= 11; check++)   times[check]=check;
  for (int check=12; check <= 1000000; check++) {
    times[check]=1000001;
  }
  for (int check=12; check <= 1000000; check++) {
    int number=check;
    int reverse1=0;
    while (number > 0) {
      reverse1=10 * reverse1 + number % 10;
      number/=10;
    }
    int reverse=reverse1;
    times[check]=Math.min(times[check],times[check - 1] + 1);
    if (reverse < times.length - 1)     times[reverse]=Math.min(times[reverse],times[check] + 1);
  }
  int noOfCases=in.nextInt();
  for (int caseNo=1; caseNo <= noOfCases; caseNo++) {
    N=in.nextInt();
    int noOfTimes=times[N];
    System.out.printf(""Case #%d: %d%n"",caseNo,noOfTimes);
    out.printf(""Case #%d: %d%n"",caseNo,noOfTimes);
  }
  in.close();
  out.close();
}
"
30001627,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int T=sc.nextInt();
  for (int cs=1; cs <= T; cs++) {
    int N=sc.nextInt();
    int[] dp=new int[N + 1];
    dp[1]=1;
    for (int i=2; i <= N; i++) {
      dp[i]=Integer.MAX_VALUE;
    }
    for (int i=1; i < N; i++) {
      dp[i + 1]=Math.min(dp[i + 1],dp[i] + 1);
      int N1=i;
      A r1=new A();
      int r2=0;
      while (N1 > 0) {
        r2*=10;
        r2+=N1 % 10;
        N1/=10;
      }
      int r=r2;
      if (r <= N) {
        dp[r]=Math.min(dp[r],dp[i] + 1);
      }
    }
    String res="""" + dp[N];
    System.out.println(""Case #"" + cs + "": ""+ res);
  }
  sc.close();
}
"
30001628,"/** 
 * @param args
 */
public static void main(String[] args) throws IOException {
  CounterCulture instance=new CounterCulture();
  BufferedReader br=new BufferedReader(new FileReader(""in.txt""));
  PrintWriter writer=new PrintWriter(""out.txt"",""UTF-8"");
  int MAX=1000001;
  int[] res=new int[MAX];
  res[1]=1;
  for (int i=2; i < MAX; ++i) {
    int r=Integer.parseInt(new StringBuffer(new Integer(i).toString()).reverse().toString());
    int r_r=Integer.parseInt(new StringBuffer(new Integer(r).toString()).reverse().toString());
    if (r < i && i == r_r) {
      res[i]=Math.min(res[i - 1],res[r]) + 1;
    }
 else     res[i]=res[i - 1] + 1;
  }
  try {
    String line=br.readLine();
    int t=Integer.parseInt(line);
    for (int i=1; i <= t; ++i) {
      int n=Integer.parseInt(br.readLine());
      writer.print(""Case #"" + new Integer(i).toString() + "": ""+ res[n]);
      if (i < t)       writer.println();
    }
  }
  finally {
    br.close();
    writer.close();
  }
}
"
30001629,"public static void main(String args[]) throws IOException {
  long t=System.currentTimeMillis();
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(br.readLine());
  long[] dp=new long[1000001];
  Arrays.fill(dp,Long.MAX_VALUE / 10);
  dp[0]=0;
  for (int i=1; i < 1000001; i++) {
    dp[i]=Math.min(1 + dp[i - 1],dp[i]);
    if (i % 10 != 0)     dp[i]=Math.min(dp[i],1 + dp[rev(i)]);
  }
  for (int ii=1; ii <= T; ii++) {
    int N=Integer.parseInt(br.readLine());
    System.out.println(""Case #"" + ii + "": ""+ dp[N]);
  }
  System.out.println(System.currentTimeMillis() - t);
}
"
30001630,"public static void main(String[] args) throws FileNotFoundException, IOException {
  File f=new File(""C:\\Users\\Pivis\\Documents\\NetBeansProjects\\GCJ_B\\src\\a.in"");
  File out=new File(""C:\\Users\\Pivis\\Documents\\NetBeansProjects\\GCJ_B\\src\\a.out"");
  Scanner in=new Scanner(new FileReader(f));
  BufferedWriter output=new BufferedWriter(new FileWriter(out));
  HashMap<Integer,Integer> map=new HashMap<>();
  for (int i1=1; i1 <= 1000000; i1++) {
    if (i1 <= 20)     map.put(i1,i1);
 else {
      int r1=map.get(i1 - 1);
      if (i1 % 10 != 0) {
        int num=i1;
        int res=0;
        while (num > 0) {
          int d=num % 10;
          res*=10;
          res+=d;
          num/=10;
        }
        int rev=res;
        if (rev < i1) {
          int r2=map.get(rev);
          map.put(i1,Math.min(r1,r2) + 1);
        }
 else {
          map.put(i1,r1 + 1);
        }
      }
 else {
        map.put(i1,r1 + 1);
      }
    }
  }
  int t=in.nextInt();
  for (int i=0; i < t; i++) {
    int N=in.nextInt();
    String text=""Case #"" + (i + 1) + "": ""+ map.get(N)+ ""\n"";
    output.write(text);
  }
  output.close();
}
"
30001631,"public static void main(String[] args) throws FileNotFoundException {
  Scanner in=new Scanner(new File(""A-small-attempt0.in""));
  PrintWriter out=new PrintWriter(new File(""A-small-attempt0.out""));
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    int n=in.nextInt();
    int dp[]=new int[n + 1];
    dp[1]=1;
    Queue<Integer> q=new LinkedList<Integer>();
    q.add(1);
    while (!q.isEmpty()) {
      int at=q.poll();
      int moves=dp[at];
      if (at == n)       break;
      int next=at + 1;
      if (next <= n && dp[next] == 0) {
        dp[next]=moves + 1;
        q.add(next);
      }
      int tmp=at;
      next=0;
      while (tmp > 0) {
        next=next * 10 + tmp % 10;
        tmp/=10;
      }
      if (next <= n && dp[next] == 0) {
        dp[next]=moves + 1;
        q.add(next);
      }
    }
    out.println(""Case #"" + t + "": ""+ dp[n]);
  }
  out.close();
}
"
30001632,"public static void main(String[] args){
  Scanner sc=new Scanner(new BufferedReader(new InputStreamReader(System.in)));
  StringBuilder builder;
  long dp[]=new long[1000005];
  dp[0]=dp[1]=1;
  for (int i=2; i < 20; i++) {
    dp[i]=i;
  }
  for (int i=20; i < dp.length; i++) {
    int iLength=Integer.toString(i).length();
    builder=new StringBuilder();
    builder.append(i);
    int rev=Integer.parseInt(builder.reverse().toString());
    int revLength=Integer.toString(rev).length();
    if (rev < dp.length && rev < i && iLength == revLength) {
      dp[i]=Math.min(dp[i - 1],dp[rev]) + 1;
    }
 else {
      dp[i]=dp[i - 1] + 1;
    }
  }
  int T=sc.nextInt();
  for (int t=1; t <= T; t++) {
    int N=sc.nextInt();
    System.out.printf(""Case #%d: %d\n"",t,dp[N]);
  }
}
"
30001633,"public static void main(String[] args){
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
  try {
    int t=Integer.parseInt(br.readLine());
    for (int i=1; i <= t; i++) {
      int n=Integer.parseInt(br.readLine());
      int[] nums=new int[n + 1];
      for (int j=1; j <= n; j++) {
        nums[j]=n - j + 1;
      }
      nums[n]=1;
      for (int j=n - 1; j >= 1; j--) {
        int j1=j;
        int r=0;
        while (j1 > 0) {
          r*=10;
          r+=j1 % 10;
          j1/=10;
        }
        int reverse_j=r;
        if (reverse_j <= n) {
          nums[j]=1 + Math.min(nums[reverse_j],nums[j + 1]);
        }
 else {
          nums[j]=1 + nums[j + 1];
        }
      }
      bw.write(""Case #"" + i + "": ""+ nums[1]);
      bw.newLine();
    }
    bw.flush();
    bw.close();
    br.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
30001634,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int i=1; i <= t; i++) {
    long n=in.nextLong();
    long k=n;
    int log=1;
    long totalPower=1;
    while (k / 10 > 0) {
      log++;
      k=k / 10;
      totalPower=totalPower * 10;
    }
    long total=0;
    if (log == 1) {
      total=n;
    }
 else {
      total=10;
      long power=1;
      for (int j=2; j <= log - 1; j++) {
        if (j % 2 == 0)         power=power * 10;
        total+=power;
        total+=(1 + (j % 2) * 9) * power - 1;
      }
      if (log % 2 == 0)       power=power * 10;
      if (n != totalPower) {
        long rem=n % (power * (1 + (log % 2) * 9));
        k=n / (power * (1 + (log % 2) * 9));
        if (rem == 0) {
          k--;
          rem=power * (1 + (log % 2) * 9);
        }
        if (k <= power / 10) {
          total+=n - totalPower;
        }
 else {
          long power2=power / 10;
          while (k > 0) {
            total+=power2 * (k % 10);
            power2=power2 / 10;
            k=k / 10;
          }
          total+=rem;
        }
      }
    }
    System.out.print(""Case #"" + i + "": "");
    System.out.print(total);
    System.out.println();
  }
  in.close();
}
"
30001635,"public static void main(String[] args) throws Exception {
  in=new Scanner(new File(filename + "".in""));
  out=new PrintStream(new FileOutputStream(filename + "".out""));
  int num=Integer.parseInt(in.nextLine());
  for (int i=1; i <= num; i++) {
    int n=Integer.parseInt(in.nextLine());
    int[] arr=new int[n + 1];
    for (int i2=0; i2 <= n; i2++)     arr[i2]=i2;
    for (int i1=1; i1 <= n; i1++) {
      int count=arr[i1 - 1];
      if (arr[i1] > count)       arr[i1]=count + 1;
      int num1=arr[i1];
      String s="""" + i1;
      String ns="""";
      for (int i2=0; i2 < s.length(); i2++)       ns+=s.charAt(s.length() - i2 - 1);
      int x=Integer.parseInt(ns);
      if (x <= n && x > i1 && arr[x] > arr[i1])       arr[x]=num1 + 1;
    }
    int res=arr[n];
    String s=""Case #"" + i + "": ""+ res;
    System.out.println(s);
    out.println(s);
  }
  in.close();
  out.close();
}
"
30001636,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int caseNum=1; caseNum <= t; caseNum++) {
    int n=sc.nextInt();
    System.out.println(""Case #"" + caseNum + "": ""+ best[n]);
  }
}
"
30001637,"public static void main(String args[]){
  Scanner in=null;
  try {
    in=new Scanner(new FileInputStream(""input.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  try {
    System.setOut(new PrintStream(""output.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  int ar[]=new int[1000003];
  ar[1]=1;
  for (int i=2; i <= 1000000; i++) {
    if (ar[i] > 0) {
      ar[i]=Math.min(ar[i],ar[i - 1] + 1);
    }
 else {
      ar[i]=ar[i - 1] + 1;
    }
    int x=i;
    int r=0;
    while (x > 0) {
      r*=10;
      r+=x % 10;
      x/=10;
    }
    if (r <= 1000000) {
      if (ar[r] == 0) {
        ar[r]=ar[i] + 1;
      }
 else {
        ar[r]=Math.min(ar[r],ar[i] + 1);
      }
    }
  }
  int T=in.nextInt();
  for (int t=1; t <= T; t++) {
    in.nextLine();
    int n=in.nextInt();
    System.out.println(""Case #"" + t + "": ""+ ar[n]);
  }
}
"
30001638,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  LinkedList<Integer> queue=new LinkedList<Integer>();
  int tt=Integer.parseInt(br.readLine().trim());
  for (int i=1; i <= tt; i++) {
    int question=Integer.parseInt(br.readLine().trim());
    visited=new int[question + 1];
    visited[1]=1;
    queue.addLast(1);
    if (question == 1) {
      System.out.println(""Case #"" + i + "": 1"");
      continue;
    }
    while (!queue.isEmpty()) {
      Integer j=queue.pollFirst();
      if (visited[j + 1] == 0) {
        visited[j + 1]=visited[j] + 1;
        queue.addLast(j + 1);
      }
      String s=String.valueOf(j);
      int index=s.length() - 1;
      while (s.charAt(index) == '0')       index--;
      int flipped=Integer.parseInt(new StringBuilder(s.substring(0,index + 1)).reverse().toString());
      if (flipped <= question && visited[flipped] == 0) {
        visited[flipped]=visited[j] + 1;
        queue.addLast(flipped);
      }
      if (j + 1 == question || flipped == question)       break;
    }
    queue.clear();
    System.out.println(""Case #"" + i + "": ""+ visited[question]);
  }
  br.close();
}
"
30001639,"public static void main(String[] args) throws FileNotFoundException {
  Scanner scanner=new Scanner(new File(""input.txt""));
  PrintStream ps=new PrintStream(new File(""output.txt""));
  int T=Integer.parseInt(scanner.nextLine());
  HashSet<Long> set=new HashSet<Long>();
  HashSet<Long> newSet=new HashSet<Long>();
  HashSet<Long> tried=new HashSet<Long>();
  HashSet<Long> temp=null;
  for (int i=1; i <= T; i++) {
    long N=Long.parseLong(scanner.nextLine());
    int count=1;
    set.clear();
    newSet.clear();
    tried.clear();
    set.add(1L);
    boolean found=N == 1;
    for (; !found; count++) {
      for (      Long num : set) {
        Long reverse=Long.parseLong(new StringBuilder(num.toString()).reverse().toString());
        if (reverse == N || num + 1 == N) {
          found=true;
          break;
        }
 else {
          if (reverse > num && !tried.contains(reverse)) {
            tried.add(reverse);
            newSet.add(reverse);
          }
          if (!tried.contains(num + 1)) {
            tried.add(num + 1);
            newSet.add(num + 1);
          }
        }
      }
      set.clear();
      temp=set;
      set=newSet;
      newSet=temp;
    }
    System.out.println();
    String output=""Case #"" + i + "": ""+ count;
    System.out.println(output);
    ps.println(output);
  }
  ps.flush();
  ps.close();
  scanner.close();
}
"
30001640,"public static String reverse(String str){
  String reversed=new StringBuilder(str).reverse().toString();
  return reversed;
}
"
30001641,"public static void main(String[] args) throws IOException {
  Main r=new Main();
  r.in=new BufferedReader(new InputStreamReader(System.in));
  r.out=new PrintWriter(System.out);
  int m=17;
  long x[]=new long[m];
  long d[]=new long[m];
  d[0]=1;
  for (int i=1; i < m; i++) {
    d[i]=d[i - 1] * 10;
  }
  x[1]=1;
  x[2]=11;
  for (int i=3; i < m; i++) {
    x[i]=x[i - 1] + (d[(i - 1) / 2] - 2) + (d[(i - 1) / 2 + (((i - 1) % 2 == 0) ? 0 : 1)] - 2)+ 3;
  }
  int T=Integer.parseInt(r.nextToken());
  for (int t=0; t < T; t++) {
    long n=Long.parseLong(r.nextToken());
    int u=1;
    while (d[u] < n)     u++;
    long ans=x[u];
    if (n < 12)     ans=n;
 else     if (n == d[u])     ans=x[u + 1] - 1;
 else {
      String s=Long.toString(n);
      boolean o=false;
      if (s.charAt(s.length() - 1) == '0') {
        s=Long.toString(n - 1);
        o=true;
      }
      String k=s.substring(0,s.length() / 2);
      String v=s.substring(s.length() / 2,s.length());
      char c[]=k.toCharArray();
      for (int i=0; i < c.length / 2; i++) {
        char y=c[i];
        c[i]=c[c.length - i - 1];
        c[c.length - i - 1]=y;
      }
      long l=Long.parseLong(new String(c));
      long r1=Long.parseLong(v);
      ans+=r1 - 1;
      if (l > 1)       ans+=l;
      if (o)       ans++;
    }
    r.out.println(""Case #"" + (t + 1) + "": ""+ ans);
  }
  r.in.close();
  r.out.close();
}
"
30001642,"public static void main(String args[]) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""in.in""));
  PrintWriter pw=new PrintWriter(new FileWriter(""try.out""));
  int T=Integer.parseInt(br.readLine());
  int TT=T;
  Arrays.fill(dp,Integer.MAX_VALUE);
  dp[1]=1;
  for (int i=1; i < dp.length - 1; i++) {
    dp[i + 1]=Math.min(dp[i] + 1,dp[i + 1]);
    dp[reverse(i)]=Math.min(dp[i] + 1,dp[reverse(i)]);
  }
  while (T-- > 0) {
    int goal=Integer.parseInt(br.readLine());
    pw.println(""Case #"" + (TT - T) + "": ""+ dp[goal]);
  }
  pw.close();
}
"
30001643,"public static void main(String[] args){
  int inf=20000000;
  Scanner in=new Scanner(System.in);
  int cases=in.nextInt();
  int cn=0;
  while (cn++ < cases) {
    int n=in.nextInt();
    int[] cost=new int[n + 1];
    Arrays.fill(cost,inf);
    cost[0]=0;
    ArrayDeque<Integer> bfs=new ArrayDeque<Integer>(n);
    bfs.add(0);
    while (bfs.size() > 0) {
      int here=bfs.poll();
      if (here != n) {
        if (cost[here + 1] == inf) {
          cost[here + 1]=cost[here] + 1;
          bfs.add(here + 1);
        }
        StringBuilder s=new StringBuilder();
        s.append(here);
        s.reverse();
        int rev=Integer.parseInt(s.toString());
        if (rev <= n && cost[rev] == inf) {
          cost[rev]=cost[here] + 1;
          bfs.add(rev);
        }
      }
    }
    System.out.printf(""Case #%d: %d\n"",cn,cost[n]);
  }
}
"
30001644,"public static void main(String[] args) throws Exception {
  count=new int[1000001];
  count[1]=1;
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  StringBuilder out=new StringBuilder();
  int t=Integer.parseInt(br.readLine().trim());
  for (int i=1; i < 1000000; i++) {
    StringBuilder sb=new StringBuilder();
    sb.append(i);
    int rev=Integer.parseInt(sb.reverse().toString());
    if (count[i + 1] == 0)     count[i + 1]=count[i] + 1;
 else     if (count[i] + 1 < count[i + 1])     count[i + 1]=count[i] + 1;
    if (count[rev] == 0)     count[rev]=count[i] + 1;
 else     if (count[i] + 1 < count[rev])     count[rev]=count[i] + 1;
  }
  for (int k=1; k <= t; k++) {
    int n=Integer.parseInt(br.readLine().trim());
    out.append(""Case #"" + k + "": ""+ count[n]+ ""\n"");
  }
  System.out.print(out);
}
"
30001645,"public static void main(String args[]){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  long N;
  long n;
  String s, ss;
  StringBuilder rev;
  Queue<String> q=new LinkedList<String>();
  Queue<Long> c=new LinkedList<Long>();
  HashSet<String> hs=new HashSet<String>();
  for (int z=1; z <= T; z++) {
    N=in.nextLong();
    q.clear();
    c.clear();
    hs.clear();
    hs.add(""1"");
    q.add(""1"");
    c.add(1l);
    while (!q.isEmpty()) {
      s=q.poll();
      answ=c.poll();
      n=Long.parseLong(s) + 1;
      if (n == N + 1) {
        break;
      }
      ss=Long.toString(n);
      if (!hs.contains(ss)) {
        q.add(ss);
        hs.add(ss);
        c.add(answ + 1);
      }
      rev=new StringBuilder(s);
      ss=rev.reverse().toString();
      if (!hs.contains(ss)) {
        q.add(ss);
        hs.add(ss);
        c.add(answ + 1);
      }
    }
    System.out.println(""Case #"" + z + "": ""+ answ);
  }
}
"
30001646,"public static void main(String[] args){
  int n1=1000000;
  m[1]=1;
  for (int i=2; i < n1 + 1; i++) {
    int rev=Integer.parseInt(new StringBuilder(String.valueOf(i)).reverse().toString());
    if (i % 10 != 0 && rev < i)     m[i]=Math.min(m[rev],m[i - 1]) + 1;
 else     m[i]=m[i - 1] + 1;
  }
  Scanner in=new Scanner(System.in);
  int ntests=in.nextInt();
  for (int test=1; test <= ntests; test++) {
    int n=in.nextInt();
    System.out.println(""Case #"" + test + "": ""+ m[n]);
  }
}
"
30001647,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int MAX=1000001;
  LinkedList<Integer>[] E=new LinkedList[MAX];
  for (int i=1; i < MAX; i++) {
    E[i]=new LinkedList<Integer>();
    E[i].add(i + 1);
    int temp=Integer.parseInt(new StringBuffer("""" + i).reverse().toString());
    if (i % 10 != 0)     E[i].add(temp);
  }
  Queue<Integer> Q=new LinkedList<Integer>();
  int[] r=new int[MAX];
  boolean[] visited=new boolean[MAX];
  Q.add(1);
  visited[1]=true;
  r[1]=1;
  while (!Q.isEmpty()) {
    int temp=Q.poll();
    for (    int x : E[temp])     if (x < MAX && !visited[x]) {
      visited[x]=true;
      r[x]=r[temp] + 1;
      Q.add(x);
    }
  }
  int t=in.nextInt();
  for (int _=1; _ <= t; _++) {
    int n=in.nextInt();
    System.out.println(""Case #"" + _ + "": ""+ r[n]);
  }
}
"
30001648,"public static void main(String[] args){
  Scanner br=new Scanner(System.in);
  int t=br.nextInt();
  for (int c=1; c <= t; c++) {
    long n=br.nextLong();
    int ans=0;
    HashMap<Long,Integer> map=new HashMap<Long,Integer>();
    map.put(0l,0);
    ArrayDeque<Long> qu=new ArrayDeque<Long>();
    qu.add(0l);
    while (qu.size() > 0) {
      long cur=qu.poll();
      if (cur == n) {
        ans=map.get(cur);
        break;
      }
      int dist=map.get(cur);
      if (!map.containsKey(cur + 1)) {
        map.put(cur + 1,dist + 1);
        qu.add(cur + 1);
      }
      String rev=new StringBuilder("""" + cur).reverse().toString();
      long next=Long.parseLong(rev);
      if (!map.containsKey(next)) {
        map.put(next,dist + 1);
        qu.add(next);
      }
    }
    System.out.println(""Case #"" + c + "": ""+ ans);
  }
}
"
30001649,"public static void main(String[] args){
  CodeJam r=new CodeJam();
  try {
    r.in=new Scanner(new FileReader(CodeJam.path + CodeJam.problem + ""\\""+ CodeJam.tests+ "".in""));
    r.out=new PrintWriter(CodeJam.path + CodeJam.problem + ""\\""+ CodeJam.tests+ "".out"");
  }
 catch (  IOException e) {
    throw new Error(e);
  }
  try {
    int n=r.in.nextInt();
    for (int test=1; test <= n; test++) {
      r.out.print(""Case #"" + test + "": "");
      int n1=r.in.nextInt();
      int ar[]=new int[1 + n1];
      ar[1]=1;
      for (int i=2; i <= n1; i++) {
        ar[i]=ar[i - 1] + 1;
        StringBuilder s=new StringBuilder(i + """");
        int rev=Integer.parseInt(s.reverse().toString());
        int len=(rev + """").length();
        int len2=(i + """").length();
        if (len == len2 && rev < i) {
          ar[i]=Math.min(ar[i],ar[rev] + 1);
        }
      }
      r.out.println(ar[n1]);
      r.out.flush();
    }
  }
  finally {
    r.out.close();
  }
}
"
30001650,"public static void main(String[] args) throws Exception {
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  int T=Integer.parseInt(in.readLine());
  int[] minS=new int[2000000];
  minS[1]=1;
  Queue<Integer> st=new LinkedList<Integer>();
  st.add(1);
  while (!st.isEmpty()) {
    int cur=st.poll();
    if (cur + 1 < minS.length && minS[cur + 1] == 0) {
      minS[cur + 1]=minS[cur] + 1;
      st.add(cur + 1);
    }
    StringBuilder sb=new StringBuilder("""" + cur);
    int rev=Integer.parseInt(sb.reverse().toString());
    if (rev < minS.length && minS[rev] == 0) {
      minS[rev]=minS[cur] + 1;
      st.add(rev);
    }
  }
  for (int cas=1; cas <= T; cas++) {
    String s=in.readLine();
    int N=Integer.parseInt(s);
    System.out.println(""Case #"" + cas + "": ""+ minS[N]);
  }
}
"
30001651,"public static void main(String[] args) throws IOException {
  String inputFile=""src/A-small-1.in"";
  Scanner in=new Scanner(new File(inputFile));
  PrintStream out=new PrintStream(inputFile.substring(0,inputFile.length() - 2) + ""out"");
  int cases=in.nextInt();
  for (int cs=1; cs <= cases; cs++) {
    long n=in.nextLong();
    A a=new A(n);
    String ans=""Case #"" + cs + "": ""+ a.minSteps;
    out.println(ans);
    System.out.println(ans);
  }
  out.close();
  in.close();
}
"
30001652,"public static void main(String[] args) throws Exception {
  for (int i=1; i <= 1000000; i++) {
    result[i]=i;
  }
  while (true) {
    boolean good=true;
    for (int i=1; i <= 1000000; i++) {
      StringBuilder sb=new StringBuilder("""" + i);
      sb.reverse();
      int n1=Integer.parseInt(sb.toString());
      if (result[i] + 1 < result[n1]) {
        result[n1]=result[i] + 1;
        good=false;
      }
      if (i == 1000000) {
        continue;
      }
      if (result[i] + 1 < result[i + 1]) {
        result[i + 1]=result[i] + 1;
        good=false;
      }
    }
    if (good) {
      break;
    }
  }
  Scanner sc=new Scanner(System.in);
  int t=sc.nextInt();
  for (int k=1; k <= t; k++) {
    n=sc.nextLong();
    System.out.println(""Case #"" + k + "": ""+ result[(int)n]);
  }
}
"
30001653,"public static void main(String[] args) throws IOException {
  br=new BufferedReader(new FileReader(""A-small-attempt0.in""));
  pw=new PrintWriter(new FileOutputStream(""output_A.in""));
  int t=Integer.parseInt(br.readLine());
  for (int i=2; i < 1000001; i++)   arr[i]=1000001;
  arr[1]=1;
  for (int i1=2; i1 < 1000001; i1++) {
    arr[i1]=Math.min(arr[i1 - 1] + 1,arr[i1]);
    int num=i1;
    long rev=0;
    while (num > 0) {
      rev=num % 10 + rev * 10;
      num/=10;
    }
    if (rev < 1000000 && rev > i1)     arr[(int)rev]=Math.min(arr[i1] + 1,arr[(int)rev]);
  }
  for (int i=1; i <= t; i++) {
    int n=Integer.parseInt(br.readLine());
    pw.println(""Case #"" + i + "": ""+ arr[n]);
  }
  pw.flush();
}
"
30001654,"public static void main(String[] args) throws FileNotFoundException {
  PrintWriter writer=new PrintWriter(""as.out"");
  Scanner s=new Scanner(new File(""as.in""));
  int arr[]=new int[10000001];
  for (int i=1; i < 11; i++) {
    arr[i]=i;
  }
  String str="""";
  String str2="""";
  StringBuilder sb;
  for (int i=11; i < 10000001; i++) {
    str=i + """";
    sb=new StringBuilder(str);
    int ri=Integer.parseInt(sb.reverse().toString());
    str2=ri + """";
    if (str.length() == str2.length() && ri < i) {
      arr[i]=Math.min(arr[i - 1],arr[ri]) + 1;
    }
 else {
      arr[i]=arr[i - 1] + 1;
    }
  }
  int testcase=s.nextInt();
  for (int i=0; i < testcase; i++) {
    int n=s.nextInt();
    writer.println(""Case #"" + (i + 1) + "": ""+ arr[n]);
  }
  writer.close();
}
"
30001655,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int t=in.nextInt();
  for (int z=1; z <= t; z++) {
    int n=in.nextInt();
    int[] a=new int[n + 1];
    Arrays.fill(a,-1);
    a[1]=1;
    Queue<Integer> q=new LinkedList<Integer>();
    q.add(1);
    while (!q.isEmpty()) {
      int at=q.poll();
      if (at == n)       break;
      if (at > n)       continue;
      if (a[at + 1] == -1) {
        a[at + 1]=a[at] + 1;
        q.add(at + 1);
      }
      long a1=at;
      int len=0;
      long aa=a1;
      while (aa != 0) {
        aa/=10;
        len++;
      }
      len--;
      long ans=0;
      while (a1 > 0) {
        ans+=(a1 % 10) * (Math.pow(10,len));
        len--;
        a1/=10;
      }
      int to=(int)ans;
      if (to <= at || to > n || a[to] != -1)       continue;
      q.add(to);
      a[to]=a[at] + 1;
    }
    System.out.println(""Case #"" + z + "": ""+ a[n]);
  }
}
"
30001656,"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int testCases=sc.nextInt();
  for (int i=0; i <= 1000005; i++) {
    if (i <= 20) {
      dp1[i]=i;
      continue;
    }
    dp1[i]=-1;
  }
  for (int n=21; n < 1000002; n++) {
    if (n % 10 == 0) {
      dp1[n]=dp1[n - 1] + 1;
      continue;
    }
    int reverse=0;
    int n1=n;
    while (n1 != 0) {
      reverse=reverse * 10;
      reverse=reverse + n1 % 10;
      n1=n1 / 10;
    }
    if (reverse < n) {
      dp1[n]=Math.min(dp1[n - 1] + 1,dp1[reverse] + 1);
    }
 else {
      dp1[n]=dp1[n - 1] + 1;
    }
  }
  for (int test=1; test <= testCases; test++) {
    N=sc.nextInt();
    System.out.println(""Case #"" + test + "": ""+ dp1[N]);
  }
}
"
30001657,"public static void main(String[] args) throws IOException {
  BufferedReader br=new BufferedReader(new FileReader(""/Users/vladimir/Documents/workspaceg/GGL/src/codejam15/A-small-attempt3.in""));
  int T=Integer.valueOf(br.readLine());
  PrintWriter writer=new PrintWriter(""/Users/vladimir/Documents/workspaceg/GGL/src/codejam15/output.txt"",""UTF-8"");
  for (int i=0; i < T; i++) {
    int N=Integer.valueOf(br.readLine());
    int[] tillHere=new int[N + 1];
    tillHere[1]=1;
    for (int j=2; j <= N; j++) {
      if (tillHere[j] != 0) {
        tillHere[j]=Math.min(tillHere[j - 1] + 1,tillHere[j]);
      }
 else {
        tillHere[j]=tillHere[j - 1] + 1;
      }
      String s=String.valueOf(j);
      StringBuffer sb=new StringBuffer();
      for (int i1=s.length() - 1; i1 >= 0; i1--) {
        sb.append(s.charAt(i1));
      }
      int r=(Integer.valueOf(sb.toString()));
      if (r <= N && r > j) {
        tillHere[r]=tillHere[j] + 1;
      }
    }
    writer.println(""Case #"" + (i + 1) + "": ""+ tillHere[N]);
  }
  writer.close();
}
"
30001658,"public static void main(String[] args){
  Scanner scan=new Scanner(System.in);
  int testCaseNum=scan.nextInt();
  long[] ADD={0,10,19,109,199,1099,1999,10999,19999,109999,199999,1099999,1999999,10999999,19999999,109999999,199999999};
  for (int i=0; i < testCaseNum; ++i) {
    String nStr=scan.next().trim();
    long n=Long.parseLong(nStr);
    if (n <= 9) {
      System.out.println(""Case #"" + (i + 1) + "": ""+ n);
      continue;
    }
    long ans=0;
    for (int j=0; j < nStr.length(); ++j) {
      ans+=ADD[j];
    }
    if (String.valueOf(n - 1).length() != nStr.length()) {
      System.out.println(""Case #"" + (i + 1) + "": ""+ ans);
      continue;
    }
    if (nStr.charAt(0) == '1') {
      boolean v=true;
      for (int k=1; k < (nStr.length() / 2); ++k) {
        v=v && (nStr.charAt(k) == '0');
      }
      if (v == true) {
        long bias=1;
        for (int k=nStr.length() - 1; k >= (nStr.length() / 2); --k) {
          ans+=Long.parseLong(nStr.substring(k,k + 1)) * bias;
          bias*=10;
        }
        System.out.println(""Case #"" + (i + 1) + "": ""+ ans);
        continue;
      }
    }
    long bias=1;
    n-=1;
    nStr=String.valueOf(n);
    ans+=1;
    if (nStr.charAt(0) == '1') {
      boolean v=true;
      for (int k=1; k < (nStr.length() / 2); ++k) {
        v=v && (nStr.charAt(k) == '0');
      }
      if (v == true) {
        bias=1;
        for (int k=nStr.length() - 1; k >= (nStr.length() / 2); --k) {
          ans+=Long.parseLong(nStr.substring(k,k + 1)) * bias;
          bias*=10;
        }
        System.out.println(""Case #"" + (i + 1) + "": ""+ ans);
        continue;
      }
    }
    bias=1;
    for (int k=0; k < (nStr.length() / 2); ++k) {
      ans+=Long.parseLong(nStr.substring(k,k + 1)) * bias;
      bias*=10;
    }
    bias=1;
    for (int k=nStr.length() - 1; k >= (nStr.length() / 2); --k) {
      ans+=Long.parseLong(nStr.substring(k,k + 1)) * bias;
      bias*=10;
    }
    System.out.println(""Case #"" + (i + 1) + "": ""+ ans);
  }
  scan.close();
}
"
30001659,"public static void main(String[] args) throws Exception {
  BufferedReader br=new BufferedReader(new FileReader(""C:/users/abhishek/Desktop/input.txt""));
  FileWriter f=new FileWriter(""C:/users/abhishek/Desktop/output.txt"");
  String newLine=System.getProperty(""line.separator"");
  int t=Integer.parseInt(br.readLine());
  int array[]=new int[1000005];
  Arrays.fill(array,Integer.MAX_VALUE);
  array[1]=1;
  for (int i=2; i <= 1000000; i++) {
    String str=String.valueOf(i);
    StringBuilder sb=new StringBuilder(str);
    str=sb.reverse().toString();
    int temp=Integer.parseInt(str);
    array[i]=Math.min(array[i],i);
    array[i]=Math.min(array[i - 1] + 1,array[i]);
    if (temp <= 1000001) {
      array[temp]=Math.min(array[temp],array[i] + 1);
    }
  }
  System.out.println(array[21]);
  for (int test=1; test <= t; test++) {
    int n=Integer.parseInt(br.readLine());
    f.write(""Case #"" + test + "": ""+ array[n]+ newLine);
  }
  f.close();
}
"
30001660,"public static void main(String[] args) throws IOException {
  Scanner sc=new Scanner(new FileReader(""A-large.in""));
  PrintWriter out=new PrintWriter(new FileWriter(new File(""a-large.out"")));
  int n=sc.nextInt();
  for (int T=1; n-- > 0; T++) {
    long N=sc.nextLong();
    long total=0;
    if (N > 10) {
      total+=10;
    }
    if (N >= 100) {
      total+=10 - 1 + 10;
      if (N == 100L) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 1000L) {
      total+=100 - 1 + 10;
      if (N == 1000) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 10000L) {
      total+=100 - 1 + 100;
      if (N == 10000) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 100000L) {
      total+=1000 - 1 + 100;
      if (N == 100000) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 1000000L) {
      total+=1000 - 1 + 1000;
      if (N == 1000000) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 10000000L) {
      total+=10000 - 1 + 1000;
      if (N == 10000000) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 100000000L) {
      total+=10000 - 1 + 10000;
      if (N == 100000000) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 1000000000L) {
      total+=100000 - 1 + 10000;
      if (N == 1000000000) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 10000000000L) {
      total+=100000 - 1 + 100000;
      if (N == 10000000000L) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 100000000000L) {
      total+=1000000 - 1 + 100000;
      if (N == 100000000000L) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 1000000000000L) {
      total+=1000000 - 1 + 1000000;
      if (N == 1000000000000L) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    if (N >= 10000000000000L) {
      total+=10000000 - 1 + 1000000;
      if (N == 10000000000000L) {
        out.println(""Case #"" + T + "": ""+ total);
        System.out.println(""Case #"" + T + "": ""+ total);
        continue;
      }
    }
    String s=Long.toString(N);
    if (N <= 10) {
      total=N;
    }
 else     if (s.endsWith(""0"")) {
      s=Long.toString(N - 1);
      int mid=s.length() / 2;
      String firstMid=s.substring(0,mid);
      firstMid=new StringBuilder(firstMid).reverse().toString();
      int firstIntReverse=Integer.parseInt(firstMid);
      String secondMid=s.substring(mid,s.length());
      int secondInt=Integer.parseInt(secondMid);
      if (N - Math.pow(10,s.length() - 1) <= firstIntReverse + secondInt) {
        total+=N - Math.pow(10,s.length() - 1);
      }
 else {
        total+=firstIntReverse + secondInt + 1;
      }
    }
 else {
      int mid=s.length() / 2;
      String firstMid=s.substring(0,mid);
      firstMid=new StringBuilder(firstMid).reverse().toString();
      int firstIntReverse=Integer.parseInt(firstMid);
      String secondMid=s.substring(mid,s.length());
      int secondInt=Integer.parseInt(secondMid);
      if (N - Math.pow(10,s.length() - 1) < firstIntReverse + secondInt) {
        total+=N - Math.pow(10,s.length() - 1);
      }
 else {
        total+=firstIntReverse + secondInt;
      }
    }
    out.println(""Case #"" + T + "": ""+ total);
    System.out.println(""Case #"" + T + "": ""+ total);
  }
  out.flush();
}
"
30001661,"public static void main(String[] args){
  int pN=1;
  if (args.length == 0) {
    try {
      System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
    }
 catch (    Exception e) {
    }
  }
 else {
    pN=Integer.parseInt(args[0]);
  }
  PrintStream out=System.out;
  System.setOut(null);
  Scanner sc=new Scanner(System.in);
  final int caseN=sc.nextInt();
  final A[] solvers=new A[caseN];
  StringWriter[] outs=new StringWriter[caseN];
  for (int i=0; i < caseN; i++) {
    solvers[i]=new A();
    outs[i]=new StringWriter();
    solvers[i].out=new PrintWriter(outs[i]);
    solvers[i].out.printf(""Case #%d: "",i + 1);
    A r=solvers[i];
    r.N=sc.nextInt();
    r.D=sc.nextInt();
    r.S0=sc.nextLong();
    r.As=sc.nextLong();
    r.Cs=sc.nextLong();
    r.Rs=sc.nextLong();
    r.M0=sc.nextLong();
    r.Am=sc.nextLong();
    r.Cm=sc.nextLong();
    r.Rm=sc.nextLong();
  }
  Thread[] ts=new Thread[pN];
  for (int i=0; i < pN; i++) {
    ts[i]=new Thread(){
      @Override public void run(){
        for (; ; ) {
          int id;
synchronized (A.class) {
            if (__ID == caseN)             return;
            id=__ID++;
          }
          try {
            A r=solvers[id];
            r.S=new int[r.N];
            r.M=new int[r.N];
            r.S[0]=(int)r.S0;
            r.M[0]=(int)r.M0;
            for (int i1=1; i1 < r.N; i1++) {
              r.S[i1]=(int)((r.S[i1 - 1] * r.As + r.Cs) % r.Rs);
              r.M[i1]=(int)((r.M[i1 - 1] * r.Am + r.Cm) % r.Rm);
            }
            r.M[0]=0;
            for (int i2=1; i2 < r.N; i2++)             r.M[i2]%=i2;
            int[] min=new int[r.N], max=new int[r.N];
            min[0]=max[0]=r.S[0];
            for (int i=1; i < r.N; i++) {
              min[i]=max[i]=r.S[i];
              min[i]=min(min[i],min[r.M[i]]);
              max[i]=max(max[i],max[r.M[i]]);
            }
            int[] sum=new int[1000010];
            for (int i=0; i < r.N; i++)             if (min[i] + r.D >= max[i]) {
              sum[max(0,max[i] - r.D)]++;
              sum[min[i] + 1]--;
            }
            for (int i=0; i < sum.length - 1; i++) {
              sum[i + 1]+=sum[i];
            }
            int res=0;
            for (int i=0; i < sum.length; i++)             res=max(res,sum[i]);
            r.out.println(res);
          }
 catch (          RuntimeException e) {
            __ERROR=true;
            System.err.printf(""Error in case %d:%n"",id + 1);
            e.printStackTrace();
          }
          solvers[id].out.flush();
          solvers[id]=null;
        }
      }
    }
;
    ts[i].start();
  }
  for (int i=0; i < pN; i++) {
    try {
      ts[i].join();
    }
 catch (    InterruptedException e) {
      i--;
      continue;
    }
  }
  for (int i=0; i < caseN; i++) {
    out.print(outs[i].toString());
  }
  if (__ERROR)   out.printf(""%nError occured!!!%n"");
}
"
30001662,"public static void main(String[] args){
  Scanner in=new Scanner(System.in);
  int T=in.nextInt();
  for (int zz=1; zz <= T; zz++) {
    int N=in.nextInt();
    int D=in.nextInt();
    long S0=in.nextInt();
    long As=in.nextInt();
    long Cs=in.nextInt();
    long Rs=in.nextInt();
    long M0=in.nextInt();
    long Am=in.nextInt();
    long Cm=in.nextInt();
    long Rm=in.nextInt();
    int[] P=new int[N];
    int[] S=new int[N];
    P[0]=(int)M0;
    S[0]=(int)S0;
    for (int i=1; i < N; i++) {
      P[i]=(int)((P[i - 1] * Am + Cm) % Rm);
      S[i]=(int)((S[i - 1] * As + Cs) % Rs);
    }
    int[] L=new int[N];
    int[] H=new int[N];
    L[0]=S[0];
    H[0]=S[0];
    ArrayList<Integer> add=new ArrayList<Integer>();
    ArrayList<Integer> remove=new ArrayList<Integer>();
    for (int i=0; i < N; i++) {
      if (i != 0) {
        P[i]%=i;
        L[i]=L[P[i]];
        H[i]=H[P[i]];
        L[i]=min(L[i],S[i]);
        H[i]=max(H[i],S[i]);
      }
      int a=H[i] - D;
      int r=L[i];
      if (a <= r) {
        add.add(a);
        remove.add(r);
      }
    }
    Collections.sort(add);
    Collections.sort(remove);
    int aat=0;
    int rat=0;
    int total=0;
    int ans=0;
    while (aat < add.size() && rat < remove.size()) {
      if (add.get(aat) <= remove.get(rat)) {
        total++;
        aat++;
      }
 else {
        total--;
        rat++;
      }
      ans=max(ans,total);
    }
    System.out.format(""Case #%d: %d\n"",zz,ans);
  }
}
"
